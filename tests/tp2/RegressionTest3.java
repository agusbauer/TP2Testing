package tp2;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test001"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    iPBan14.expires = 1466185877442L;
    tp2.IP iP20 = iPBan14.ip;
    java.lang.Integer i21 = iP20.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 0+ "'", i21.equals(0));

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test002"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.IP iP3 = entry0.element;
    tp2.Entry entry4 = new tp2.Entry();
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    entry4.element = iP9;
    tp2.IP iP12 = entry4.element;
    entry0.next = entry4;
    tp2.Entry entry14 = entry0.next;
    tp2.IP iP15 = entry0.element;
    tp2.Entry entry16 = entry0.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry16);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test003"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = new tp2.Node();
    tp2.IPBan iPBan5 = null;
    node4.element = iPBan5;
    tp2.IPBan iPBan7 = null;
    node4.element = iPBan7;
    tp2.IPBan iPBan9 = node4.element;
    strictlySortedSinglyLinkedList0.header = node4;
    tp2.SinglyLinkedList singlyLinkedList11 = new tp2.SinglyLinkedList();
    int i12 = singlyLinkedList11.getSize();
    int i13 = singlyLinkedList11.getSize();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList14 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList14.size = 10;
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    server17.update();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP24.setFirst((java.lang.Integer)1);
    java.lang.Integer i27 = iP24.getSecond();
    boolean b28 = server17.addException(iP24);
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = server17.addException(iP34);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b44 = server17.removeBan(iP43);
    iP43.setThird((java.lang.Integer)0);
    boolean b47 = strictlySortedSinglyLinkedList14.removeFromIP(iP43);
    tp2.Server server48 = new tp2.Server();
    java.lang.String str49 = server48.toString();
    server48.update();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP55.setFirst((java.lang.Integer)1);
    java.lang.Integer i58 = iP55.getSecond();
    boolean b59 = server48.addException(iP55);
    boolean b60 = strictlySortedSinglyLinkedList14.removeFromIP(iP55);
    singlyLinkedList11.add(iP55);
    java.lang.Integer i62 = iP55.getFirst();
    boolean b63 = strictlySortedSinglyLinkedList0.containsIP(iP55);
    tp2.Node node64 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList65 = new tp2.StrictlySortedSinglyLinkedList();
    int i66 = strictlySortedSinglyLinkedList65.getSize();
    tp2.IPBan iPBan67 = null;
    boolean b68 = strictlySortedSinglyLinkedList65.add(iPBan67);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList69 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node70 = strictlySortedSinglyLinkedList69.header;
    strictlySortedSinglyLinkedList65.header = node70;
    node64.next = node70;
    tp2.Node node73 = node64.next;
    tp2.IPBan iPBan74 = node73.element;
    strictlySortedSinglyLinkedList0.header = node73;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 0+ "'", i27.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str49.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 0+ "'", i58.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i62 + "' != '" + 1+ "'", i62.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan74);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test004"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = entry0.next;
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b17 = server9.connect(iP16);
    java.lang.Integer i18 = iP16.getFirst();
    entry0.element = iP16;
    iP16.setFourth((java.lang.Integer)100);
    java.lang.String str22 = iP16.toString();
    java.lang.Integer i23 = iP16.getFirst();
    java.lang.String str24 = iP16.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 100+ "'", i18.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "100.10.-1.100"+ "'", str22.equals("100.10.-1.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 100+ "'", i23.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "100.10.-1.100"+ "'", str24.equals("100.10.-1.100"));

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test005"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i5 = iP4.getFirst();
    java.lang.String str6 = iP4.toString();
    java.lang.String str7 = iP4.toString();
    iP4.setThird((java.lang.Integer)(-1));
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    tp2.Node node12 = new tp2.Node();
    tp2.IPBan iPBan13 = null;
    node12.element = iPBan13;
    tp2.IPBan iPBan15 = null;
    node12.element = iPBan15;
    strictlySortedSinglyLinkedList10.header = node12;
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b23 = strictlySortedSinglyLinkedList10.containsIP(iP22);
    java.lang.String str24 = iP22.toString();
    boolean b25 = iP4.equals((java.lang.Object)str24);
    iP4.setThird((java.lang.Integer)10);
    java.lang.String str28 = iP4.toString();
    java.lang.String str29 = iP4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i5 + "' != '" + 10+ "'", i5.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "10.0.0.100"+ "'", str6.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "10.0.0.0"+ "'", str24.equals("10.0.0.0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.10.100"+ "'", str28.equals("10.0.10.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.10.100"+ "'", str29.equals("10.0.10.100"));

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test006"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    server16.update();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP23.setFirst((java.lang.Integer)1);
    java.lang.Integer i26 = iP23.getSecond();
    boolean b27 = server16.addException(iP23);
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = server16.addException(iP33);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b43 = server16.removeBan(iP42);
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP45 = null;
    boolean b46 = server44.connect(iP45);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b52 = server44.connect(iP51);
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP54 = null;
    boolean b55 = server53.connect(iP54);
    java.lang.String str56 = server53.toString();
    java.lang.String str57 = server53.toString();
    tp2.Entry entry58 = new tp2.Entry();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i64 = iP63.getFirst();
    java.lang.String str65 = iP63.toString();
    entry58.element = iP63;
    boolean b67 = server53.connect(iP63);
    boolean b68 = server44.removeException(iP63);
    boolean b69 = server16.connect(iP63);
    java.lang.Integer i70 = iP63.getFirst();
    boolean b71 = strictlySortedSinglyLinkedList0.removeFromIP(iP63);
    boolean b72 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node73 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node74 = node73.next;
    tp2.IPBan iPBan75 = node73.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str57.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 10+ "'", i64.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "10.0.0.100"+ "'", str65.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 10+ "'", i70.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan75);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test007"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    java.lang.String str3 = singlyLinkedList0.toString();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    int i6 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP7 = null;
    boolean b8 = singlyLinkedList0.repOk(set_iP7);
    int i9 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test008"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP5 = entry0.element;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.Entry entry7 = new tp2.Entry();
    java.lang.String str8 = entry7.toString();
    java.lang.String str9 = entry7.toString();
    tp2.Entry entry10 = entry7.next;
    entry6.next = entry7;
    entry0.next = entry6;
    tp2.Entry entry13 = entry0.next;
    tp2.Entry entry14 = new tp2.Entry();
    java.lang.String str15 = entry14.toString();
    java.lang.String str16 = entry14.toString();
    tp2.IP iP17 = entry14.element;
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    entry18.element = iP23;
    tp2.IP iP26 = entry18.element;
    entry14.next = entry18;
    tp2.Entry entry28 = entry14.next;
    java.lang.String str29 = entry28.toString();
    entry0.next = entry28;
    tp2.Entry entry31 = entry0.next;
    tp2.IP iP32 = entry0.element;
    tp2.IP iP33 = entry0.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[null]"+ "'", str8.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[null]"+ "'", str15.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[null]"+ "'", str16.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[10.0.0.100]"+ "'", str29.equals("[10.0.0.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP33);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test009"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    java.lang.Integer i54 = iP47.getFirst();
    iP47.setSecond((java.lang.Integer)0);
    java.lang.Integer i57 = iP47.getThird();
    tp2.IPBan iPBan59 = new tp2.IPBan(iP47, (java.lang.Long)1466185872784L);
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)100);
    iP64.setFourth((java.lang.Integer)1);
    iPBan59.ip = iP64;
    iP64.setFourth((java.lang.Integer)0);
    iP64.setSecond((java.lang.Integer)33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 0+ "'", i57.equals(0));

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test010"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get((int)' ');
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    boolean b17 = singlyLinkedList5.remove(iP13);
    tp2.IPBan iPBan19 = new tp2.IPBan(iP13, (java.lang.Long)1L);
    java.lang.String str20 = iPBan19.toString();
    iPBan19.setExpires((java.lang.Long)0L);
    java.lang.Long long23 = iPBan19.expires;
    node4.element = iPBan19;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList25 = new tp2.StrictlySortedSinglyLinkedList();
    int i26 = strictlySortedSinglyLinkedList25.getSize();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b32 = strictlySortedSinglyLinkedList25.containsIP(iP31);
    tp2.Node node33 = strictlySortedSinglyLinkedList25.header;
    java.lang.String str34 = node33.toString();
    node4.next = node33;
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP40.setThird((java.lang.Integer)1);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList43 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan44 = null;
    boolean b45 = strictlySortedSinglyLinkedList43.contains(iPBan44);
    tp2.Server server46 = new tp2.Server();
    java.lang.String str47 = server46.toString();
    server46.update();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i54 = iP53.getFirst();
    boolean b55 = server46.connect(iP53);
    boolean b56 = strictlySortedSinglyLinkedList43.removeFromIP(iP53);
    java.lang.Integer i57 = iP53.getThird();
    iP53.setFourth((java.lang.Integer)100);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList60 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan61 = null;
    boolean b62 = strictlySortedSinglyLinkedList60.add(iPBan61);
    java.util.Set<tp2.IPBan> set_iPBan63 = null;
    boolean b64 = strictlySortedSinglyLinkedList60.repOk(set_iPBan63);
    tp2.Node node65 = strictlySortedSinglyLinkedList60.header;
    boolean b66 = iP53.equals((java.lang.Object)node65);
    boolean b67 = iP40.equals((java.lang.Object)node65);
    node33.next = node65;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList69 = new tp2.StrictlySortedSinglyLinkedList();
    int i70 = strictlySortedSinglyLinkedList69.getSize();
    tp2.IPBan iPBan71 = null;
    boolean b72 = strictlySortedSinglyLinkedList69.add(iPBan71);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList73 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node74 = strictlySortedSinglyLinkedList73.header;
    strictlySortedSinglyLinkedList69.header = node74;
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i81 = iP80.getFirst();
    java.lang.String str82 = iP80.toString();
    java.lang.String str83 = iP80.toString();
    iP80.setThird((java.lang.Integer)(-1));
    boolean b86 = strictlySortedSinglyLinkedList69.containsIP(iP80);
    tp2.IPBan iPBan88 = strictlySortedSinglyLinkedList69.get((int)(short)(-1));
    java.util.Set<tp2.IPBan> set_iPBan89 = null;
    boolean b90 = strictlySortedSinglyLinkedList69.repOk(set_iPBan89);
    tp2.Node node91 = strictlySortedSinglyLinkedList69.header;
    java.lang.String str92 = node91.toString();
    node65.next = node91;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L+ "'", long23.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[null]"+ "'", str34.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 100+ "'", i54.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + (-1)+ "'", i57.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i81 + "' != '" + 10+ "'", i81.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "10.0.0.100"+ "'", str82.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "10.0.0.100"+ "'", str83.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "[null]"+ "'", str92.equals("[null]"));

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test011"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = server0.connect(iP10);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    java.lang.String str22 = iP19.toString();
    boolean b23 = server0.removeBan(iP19);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    server24.update();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP31.setFirst((java.lang.Integer)1);
    java.lang.Integer i34 = iP31.getSecond();
    boolean b35 = server24.addException(iP31);
    tp2.Entry entry36 = new tp2.Entry();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i42 = iP41.getFirst();
    java.lang.String str43 = iP41.toString();
    entry36.element = iP41;
    boolean b45 = server24.addException(iP41);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b51 = server24.removeBan(iP50);
    tp2.Server server52 = new tp2.Server();
    tp2.IP iP53 = null;
    boolean b54 = server52.connect(iP53);
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b60 = server52.connect(iP59);
    tp2.Server server61 = new tp2.Server();
    tp2.IP iP62 = null;
    boolean b63 = server61.connect(iP62);
    java.lang.String str64 = server61.toString();
    java.lang.String str65 = server61.toString();
    tp2.Entry entry66 = new tp2.Entry();
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i72 = iP71.getFirst();
    java.lang.String str73 = iP71.toString();
    entry66.element = iP71;
    boolean b75 = server61.connect(iP71);
    boolean b76 = server52.removeException(iP71);
    boolean b77 = server24.connect(iP71);
    java.lang.Integer i78 = iP71.getFirst();
    iP71.setSecond((java.lang.Integer)0);
    java.lang.Integer i81 = iP71.getThird();
    tp2.IPBan iPBan83 = new tp2.IPBan(iP71, (java.lang.Long)1466185872784L);
    boolean b84 = server0.removeBan(iP71);
    tp2.IPBan iPBan86 = new tp2.IPBan(iP71, (java.lang.Long)1466185891892L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 0+ "'", i34.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 10+ "'", i42.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str64.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i72 + "' != '" + 10+ "'", i72.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "10.0.0.100"+ "'", str73.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i78 + "' != '" + 10+ "'", i78.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i81 + "' != '" + 0+ "'", i81.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test012"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    boolean b2 = strictlySortedSinglyLinkedList0.isEmpty();
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test013"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    java.lang.Long long16 = iPBan14.getExpires();
    iPBan14.expires = 0L;
    tp2.IP iP19 = iPBan14.ip;
    tp2.IP iP20 = iPBan14.getIp();
    tp2.IP iP21 = iPBan14.ip;
    tp2.SinglyLinkedList singlyLinkedList22 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP23 = null;
    boolean b24 = singlyLinkedList22.repOk(set_iP23);
    int i25 = singlyLinkedList22.getSize();
    tp2.Server server26 = new tp2.Server();
    java.lang.String str27 = server26.toString();
    server26.update();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP33.setFirst((java.lang.Integer)1);
    java.lang.Integer i36 = iP33.getSecond();
    boolean b37 = server26.addException(iP33);
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = server26.addException(iP43);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList48 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList48.size = 10;
    tp2.Server server51 = new tp2.Server();
    java.lang.String str52 = server51.toString();
    server51.update();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP58.setFirst((java.lang.Integer)1);
    java.lang.Integer i61 = iP58.getSecond();
    boolean b62 = server51.addException(iP58);
    tp2.Entry entry63 = new tp2.Entry();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i69 = iP68.getFirst();
    java.lang.String str70 = iP68.toString();
    entry63.element = iP68;
    boolean b72 = server51.addException(iP68);
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b78 = server51.removeBan(iP77);
    iP77.setThird((java.lang.Integer)0);
    boolean b81 = strictlySortedSinglyLinkedList48.removeFromIP(iP77);
    boolean b82 = server26.addException(iP77);
    java.lang.String str83 = iP77.toString();
    boolean b84 = singlyLinkedList22.contains(iP77);
    tp2.Server server85 = new tp2.Server();
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b91 = server85.addException(iP90);
    java.lang.Integer i92 = iP90.getFourth();
    boolean b93 = singlyLinkedList22.remove(iP90);
    iPBan14.setIp(iP90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L+ "'", long16.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str27.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 0+ "'", i36.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str52.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 0+ "'", i61.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i69 + "' != '" + 10+ "'", i69.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "10.0.0.100"+ "'", str70.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "10.100.0.1"+ "'", str83.equals("10.100.0.1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i92 + "' != '" + 10+ "'", i92.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test014"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.RealTime realTime55 = new tp2.RealTime();
    long long56 = realTime55.getCurrentTime();
    long long57 = realTime55.getCurrentTime();
    long long58 = realTime55.getCurrentTime();
    server0.setTime((tp2.ITime)realTime55);
    java.lang.String str60 = server0.toString();
    java.lang.String str61 = server0.toString();
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP67.setSecond((java.lang.Integer)(-1));
    boolean b70 = server62.addException(iP67);
    java.lang.String str71 = server62.toString();
    tp2.Server server72 = new tp2.Server();
    java.lang.String str73 = server72.toString();
    server72.update();
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i80 = iP79.getFirst();
    boolean b81 = server72.connect(iP79);
    tp2.IP iP86 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b87 = server72.connect(iP86);
    boolean b88 = server62.connect(iP86);
    tp2.StubTime stubTime89 = new tp2.StubTime();
    long long90 = stubTime89.getCurrentTime();
    long long91 = stubTime89.getCurrentTime();
    long long92 = stubTime89.getCurrentTime();
    server62.setTime((tp2.ITime)stubTime89);
    long long94 = stubTime89.getCurrentTime();
    long long95 = stubTime89.getCurrentTime();
    long long96 = stubTime89.getCurrentTime();
    long long97 = stubTime89.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long56 == 1466185917192L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long57 == 1466185917193L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long58 == 1466185917194L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str61.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Server [lastUpdate=null, exceptions=([10.-1.0.100]), bans={}]"+ "'", str71.equals("Server [lastUpdate=null, exceptions=([10.-1.0.100]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str73.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 100+ "'", i80.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long90 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long91 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long92 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long94 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long95 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long96 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long97 == 200000L);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test015"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    java.lang.String str11 = iP9.toString();
    java.lang.String str12 = iP9.toString();
    iP9.setThird((java.lang.Integer)(-1));
    entry0.element = iP9;
    tp2.Node node16 = new tp2.Node();
    tp2.IPBan iPBan17 = null;
    node16.element = iPBan17;
    tp2.SinglyLinkedList singlyLinkedList19 = new tp2.SinglyLinkedList();
    tp2.IP iP21 = singlyLinkedList19.get((int)' ');
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = singlyLinkedList19.remove(iP27);
    tp2.IPBan iPBan33 = new tp2.IPBan(iP27, (java.lang.Long)1L);
    java.lang.String str34 = iPBan33.toString();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    java.lang.String str42 = iP39.toString();
    iPBan33.setIp(iP39);
    java.lang.Long long44 = iPBan33.getExpires();
    node16.element = iPBan33;
    iPBan33.expires = 1466185870380L;
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    java.lang.Integer i55 = iP52.getFourth();
    iPBan33.ip = iP52;
    entry0.element = iP52;
    tp2.Entry entry58 = new tp2.Entry();
    java.lang.String str59 = entry58.toString();
    java.lang.String str60 = entry58.toString();
    tp2.Entry entry61 = entry58.next;
    tp2.IP iP62 = entry58.element;
    tp2.IP iP63 = entry58.element;
    tp2.Entry entry64 = new tp2.Entry();
    tp2.Entry entry65 = new tp2.Entry();
    java.lang.String str66 = entry65.toString();
    java.lang.String str67 = entry65.toString();
    tp2.Entry entry68 = entry65.next;
    entry64.next = entry65;
    entry58.next = entry64;
    entry0.next = entry64;
    tp2.Entry entry72 = new tp2.Entry();
    java.lang.String str73 = entry72.toString();
    java.lang.String str74 = entry72.toString();
    tp2.IP iP75 = entry72.element;
    tp2.Entry entry76 = new tp2.Entry();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i82 = iP81.getFirst();
    entry76.element = iP81;
    tp2.IP iP84 = entry76.element;
    entry72.next = entry76;
    entry64.next = entry72;
    java.lang.String str87 = entry72.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "10.0.0.100"+ "'", str11.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str34.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L+ "'", long44.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 100+ "'", i55.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "[null]"+ "'", str59.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "[null]"+ "'", str60.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "[null]"+ "'", str66.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[null]"+ "'", str67.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "[null]"+ "'", str73.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "[null]"+ "'", str74.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i82 + "' != '" + 10+ "'", i82.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "[null]"+ "'", str87.equals("[null]"));

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test016"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get(1);
    tp2.IP iP4 = singlyLinkedList0.get(0);
    tp2.IP iP6 = singlyLinkedList0.get(32);
    java.lang.String str7 = singlyLinkedList0.toString();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList8 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan9 = null;
    boolean b10 = strictlySortedSinglyLinkedList8.add(iPBan9);
    java.util.Set<tp2.IPBan> set_iPBan11 = null;
    boolean b12 = strictlySortedSinglyLinkedList8.repOk(set_iPBan11);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList13 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList13.size = 10;
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    server16.update();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP23.setFirst((java.lang.Integer)1);
    java.lang.Integer i26 = iP23.getSecond();
    boolean b27 = server16.addException(iP23);
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = server16.addException(iP33);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b43 = server16.removeBan(iP42);
    iP42.setThird((java.lang.Integer)0);
    boolean b46 = strictlySortedSinglyLinkedList13.removeFromIP(iP42);
    tp2.Server server47 = new tp2.Server();
    java.lang.String str48 = server47.toString();
    server47.update();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP54.setFirst((java.lang.Integer)1);
    java.lang.Integer i57 = iP54.getSecond();
    boolean b58 = server47.addException(iP54);
    boolean b59 = strictlySortedSinglyLinkedList13.removeFromIP(iP54);
    int i60 = strictlySortedSinglyLinkedList13.size;
    strictlySortedSinglyLinkedList13.size = (byte)1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList63 = new tp2.StrictlySortedSinglyLinkedList();
    int i64 = strictlySortedSinglyLinkedList63.getSize();
    tp2.IPBan iPBan65 = null;
    boolean b66 = strictlySortedSinglyLinkedList63.add(iPBan65);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList67 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node68 = strictlySortedSinglyLinkedList67.header;
    strictlySortedSinglyLinkedList63.header = node68;
    tp2.IPBan iPBan70 = node68.element;
    strictlySortedSinglyLinkedList13.header = node68;
    java.lang.String str72 = node68.toString();
    java.lang.String str73 = node68.toString();
    strictlySortedSinglyLinkedList8.header = node68;
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP79.setSecond((java.lang.Integer)1);
    java.lang.Integer i82 = iP79.getThird();
    java.lang.String str83 = iP79.toString();
    boolean b84 = strictlySortedSinglyLinkedList8.containsIP(iP79);
    singlyLinkedList0.add(iP79);
    tp2.IP iP87 = singlyLinkedList0.get((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "()"+ "'", str7.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 0+ "'", i57.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "[null]"+ "'", str72.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "[null]"+ "'", str73.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i82 + "' != '" + (-1)+ "'", i82.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "100.1.-1.10"+ "'", str83.equals("100.1.-1.10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP87);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test017"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    java.lang.String str19 = iP16.toString();
    iP16.setThird((java.lang.Integer)(-1));
    boolean b22 = server0.addBan(iP16);
    tp2.IP iP23 = null;
    boolean b24 = server0.removeException(iP23);
    tp2.SinglyLinkedList singlyLinkedList25 = new tp2.SinglyLinkedList();
    tp2.IP iP27 = singlyLinkedList25.get((int)' ');
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = singlyLinkedList25.remove(iP33);
    tp2.IP iP39 = singlyLinkedList25.get((int)'4');
    java.lang.String str40 = singlyLinkedList25.toString();
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP42 = null;
    boolean b43 = server41.connect(iP42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b49 = server41.connect(iP48);
    java.lang.Integer i50 = iP48.getFirst();
    java.lang.Integer i51 = iP48.getThird();
    boolean b52 = singlyLinkedList25.contains(iP48);
    boolean b53 = server0.removeException(iP48);
    tp2.Server server54 = new tp2.Server();
    java.lang.String str55 = server54.toString();
    server54.update();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP61.setFirst((java.lang.Integer)1);
    java.lang.Integer i64 = iP61.getSecond();
    boolean b65 = server54.addException(iP61);
    tp2.Entry entry66 = new tp2.Entry();
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i72 = iP71.getFirst();
    java.lang.String str73 = iP71.toString();
    entry66.element = iP71;
    boolean b75 = server54.addException(iP71);
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b81 = server54.removeBan(iP80);
    iP80.setThird((java.lang.Integer)0);
    iP80.setFourth((java.lang.Integer)10);
    iP80.setFirst((java.lang.Integer)32);
    boolean b88 = server0.addException(iP80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "()"+ "'", str40.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 100+ "'", i50.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + (-1)+ "'", i51.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str55.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 0+ "'", i64.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i72 + "' != '" + 10+ "'", i72.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "10.0.0.100"+ "'", str73.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test018"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    java.lang.String str5 = strictlySortedSinglyLinkedList0.toString();
    strictlySortedSinglyLinkedList0.size = 'a';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    tp2.IPBan iPBan10 = strictlySortedSinglyLinkedList0.get((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "{}"+ "'", str5.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{}"+ "'", str8.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan10);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test019"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan16 = null;
    boolean b17 = strictlySortedSinglyLinkedList15.contains(iPBan16);
    int i18 = strictlySortedSinglyLinkedList15.getSize();
    tp2.IPBan iPBan20 = strictlySortedSinglyLinkedList15.get((int)'#');
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setSecond((java.lang.Integer)(-1));
    boolean b28 = strictlySortedSinglyLinkedList15.removeFromIP(iP25);
    iPBan14.ip = iP25;
    tp2.IP iP30 = iPBan14.getIp();
    java.lang.String str31 = iPBan14.toString();
    java.lang.Long long32 = iPBan14.expires;
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP34 = null;
    boolean b35 = server33.connect(iP34);
    java.lang.String str36 = server33.toString();
    java.lang.String str37 = server33.toString();
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = server33.connect(iP43);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)100);
    boolean b53 = server33.removeException(iP52);
    iP52.setFourth((java.lang.Integer)35);
    iPBan14.setIp(iP52);
    java.lang.Long long57 = iPBan14.getExpires();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "IPBan [ip=10.-1.0.100, expires=1]"+ "'", str31.equals("IPBan [ip=10.-1.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L+ "'", long32.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L+ "'", long57.equals(1L));

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test020"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList50 = new tp2.StrictlySortedSinglyLinkedList();
    int i51 = strictlySortedSinglyLinkedList50.getSize();
    tp2.IPBan iPBan52 = null;
    boolean b53 = strictlySortedSinglyLinkedList50.add(iPBan52);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList54 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node55 = strictlySortedSinglyLinkedList54.header;
    strictlySortedSinglyLinkedList50.header = node55;
    tp2.IPBan iPBan57 = node55.element;
    strictlySortedSinglyLinkedList0.header = node55;
    java.util.Set<tp2.IPBan> set_iPBan59 = null;
    boolean b60 = strictlySortedSinglyLinkedList0.repOk(set_iPBan59);
    boolean b61 = strictlySortedSinglyLinkedList0.isEmpty();
    java.util.Set<tp2.IPBan> set_iPBan62 = null;
    boolean b63 = strictlySortedSinglyLinkedList0.repOk(set_iPBan62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test021"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList3 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList3.size = 10;
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    server6.update();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP13.setFirst((java.lang.Integer)1);
    java.lang.Integer i16 = iP13.getSecond();
    boolean b17 = server6.addException(iP13);
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = server6.addException(iP23);
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b33 = server6.removeBan(iP32);
    iP32.setThird((java.lang.Integer)0);
    boolean b36 = strictlySortedSinglyLinkedList3.removeFromIP(iP32);
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    server37.update();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP44.setFirst((java.lang.Integer)1);
    java.lang.Integer i47 = iP44.getSecond();
    boolean b48 = server37.addException(iP44);
    boolean b49 = strictlySortedSinglyLinkedList3.removeFromIP(iP44);
    singlyLinkedList0.add(iP44);
    boolean b51 = singlyLinkedList0.isEmpty();
    tp2.IP iP53 = singlyLinkedList0.get((int)(byte)1);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)32, (java.lang.Integer)32);
    boolean b59 = singlyLinkedList0.remove(iP58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 0+ "'", i16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 0+ "'", i47.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test022"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    java.lang.String str5 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node6 = new tp2.Node();
    tp2.IPBan iPBan7 = null;
    node6.element = iPBan7;
    tp2.IPBan iPBan9 = node6.element;
    strictlySortedSinglyLinkedList0.header = node6;
    tp2.IPBan iPBan12 = strictlySortedSinglyLinkedList0.get((-1));
    tp2.IPBan iPBan14 = strictlySortedSinglyLinkedList0.get((int)' ');
    tp2.Node node15 = strictlySortedSinglyLinkedList0.header;
    java.util.Set<tp2.IPBan> set_iPBan16 = null;
    boolean b17 = strictlySortedSinglyLinkedList0.repOk(set_iPBan16);
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    server18.update();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setFirst((java.lang.Integer)1);
    java.lang.Integer i28 = iP25.getSecond();
    boolean b29 = server18.addException(iP25);
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server18.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b45 = server18.removeBan(iP44);
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP47 = null;
    boolean b48 = server46.connect(iP47);
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b54 = server46.connect(iP53);
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP56 = null;
    boolean b57 = server55.connect(iP56);
    java.lang.String str58 = server55.toString();
    java.lang.String str59 = server55.toString();
    tp2.Entry entry60 = new tp2.Entry();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i66 = iP65.getFirst();
    java.lang.String str67 = iP65.toString();
    entry60.element = iP65;
    boolean b69 = server55.connect(iP65);
    boolean b70 = server46.removeException(iP65);
    boolean b71 = server18.connect(iP65);
    java.lang.Integer i72 = iP65.getFirst();
    iP65.setSecond((java.lang.Integer)0);
    java.lang.Integer i75 = iP65.getThird();
    tp2.IPBan iPBan77 = new tp2.IPBan(iP65, (java.lang.Long)1466185872784L);
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)100);
    iP82.setFourth((java.lang.Integer)1);
    iPBan77.ip = iP82;
    java.lang.Long long86 = iPBan77.getExpires();
    boolean b87 = strictlySortedSinglyLinkedList0.contains(iPBan77);
    int i88 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "{[null]}"+ "'", str5.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 0+ "'", i28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str58.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str59.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i66 + "' != '" + 10+ "'", i66.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "10.0.0.100"+ "'", str67.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i72 + "' != '" + 10+ "'", i72.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 0+ "'", i75.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1466185872784L+ "'", long86.equals(1466185872784L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 1);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test023"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    boolean b5 = strictlySortedSinglyLinkedList0.isEmpty();
    int i6 = strictlySortedSinglyLinkedList0.size;
    int i7 = strictlySortedSinglyLinkedList0.size;
    tp2.Node node8 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    int i10 = strictlySortedSinglyLinkedList9.getSize();
    tp2.IPBan iPBan11 = null;
    boolean b12 = strictlySortedSinglyLinkedList9.add(iPBan11);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList13 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node14 = strictlySortedSinglyLinkedList13.header;
    strictlySortedSinglyLinkedList9.header = node14;
    node8.next = node14;
    tp2.IPBan iPBan17 = node14.element;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.SinglyLinkedList singlyLinkedList19 = new tp2.SinglyLinkedList();
    int i20 = singlyLinkedList19.getSize();
    java.lang.String str21 = singlyLinkedList19.toString();
    tp2.SinglyLinkedList singlyLinkedList22 = new tp2.SinglyLinkedList();
    tp2.IP iP24 = singlyLinkedList22.get((int)' ');
    tp2.Entry entry25 = new tp2.Entry();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i31 = iP30.getFirst();
    java.lang.String str32 = iP30.toString();
    entry25.element = iP30;
    boolean b34 = singlyLinkedList22.remove(iP30);
    tp2.IPBan iPBan36 = new tp2.IPBan(iP30, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList37 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan38 = null;
    boolean b39 = strictlySortedSinglyLinkedList37.contains(iPBan38);
    int i40 = strictlySortedSinglyLinkedList37.getSize();
    tp2.IPBan iPBan42 = strictlySortedSinglyLinkedList37.get((int)'#');
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP47.setSecond((java.lang.Integer)(-1));
    boolean b50 = strictlySortedSinglyLinkedList37.removeFromIP(iP47);
    iPBan36.ip = iP47;
    tp2.IP iP52 = iPBan36.ip;
    boolean b53 = singlyLinkedList19.contains(iP52);
    iP52.setThird((java.lang.Integer)32);
    boolean b56 = strictlySortedSinglyLinkedList0.removeFromIP(iP52);
    boolean b57 = strictlySortedSinglyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "()"+ "'", str21.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 10+ "'", i31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test024"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    boolean b3 = singlyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test025"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)1, (java.lang.Integer)11, (java.lang.Integer)97);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test026"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    tp2.IPBan iPBan7 = strictlySortedSinglyLinkedList0.get((int)'4');
    java.util.Set<tp2.IPBan> set_iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList0.repOk(set_iPBan8);
    strictlySortedSinglyLinkedList0.size = 100;
    strictlySortedSinglyLinkedList0.size = '4';
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test027"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    boolean b39 = iP5.equals((java.lang.Object)iPBan26);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    int i41 = singlyLinkedList40.getSize();
    java.lang.String str42 = singlyLinkedList40.toString();
    int i43 = singlyLinkedList40.getSize();
    java.util.Set<tp2.IP> set_iP44 = null;
    boolean b45 = singlyLinkedList40.repOk(set_iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b51 = singlyLinkedList40.remove(iP50);
    iPBan26.setIp(iP50);
    tp2.IP iP53 = iPBan26.ip;
    iPBan26.expires = 1466185881123L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "()"+ "'", str42.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP53);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test028"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.IP iP3 = entry0.element;
    tp2.Entry entry4 = new tp2.Entry();
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    entry4.element = iP9;
    tp2.IP iP12 = entry4.element;
    entry0.next = entry4;
    tp2.Entry entry14 = new tp2.Entry();
    java.lang.String str15 = entry14.toString();
    java.lang.String str16 = entry14.toString();
    tp2.Entry entry17 = entry14.next;
    tp2.IP iP18 = entry14.element;
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    java.lang.String str26 = iP23.toString();
    iP23.setThird((java.lang.Integer)(-1));
    entry14.element = iP23;
    tp2.Node node30 = new tp2.Node();
    tp2.IPBan iPBan31 = null;
    node30.element = iPBan31;
    tp2.SinglyLinkedList singlyLinkedList33 = new tp2.SinglyLinkedList();
    tp2.IP iP35 = singlyLinkedList33.get((int)' ');
    tp2.Entry entry36 = new tp2.Entry();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i42 = iP41.getFirst();
    java.lang.String str43 = iP41.toString();
    entry36.element = iP41;
    boolean b45 = singlyLinkedList33.remove(iP41);
    tp2.IPBan iPBan47 = new tp2.IPBan(iP41, (java.lang.Long)1L);
    java.lang.String str48 = iPBan47.toString();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i54 = iP53.getFirst();
    java.lang.String str55 = iP53.toString();
    java.lang.String str56 = iP53.toString();
    iPBan47.setIp(iP53);
    java.lang.Long long58 = iPBan47.getExpires();
    node30.element = iPBan47;
    iPBan47.expires = 1466185870380L;
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i67 = iP66.getFirst();
    java.lang.String str68 = iP66.toString();
    java.lang.Integer i69 = iP66.getFourth();
    iPBan47.ip = iP66;
    entry14.element = iP66;
    entry0.next = entry14;
    tp2.IP iP73 = entry14.element;
    java.lang.String str74 = entry14.toString();
    tp2.Server server75 = new tp2.Server();
    tp2.IP iP76 = null;
    boolean b77 = server75.connect(iP76);
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b83 = server75.connect(iP82);
    java.lang.Integer i84 = iP82.getFirst();
    java.lang.Integer i85 = iP82.getThird();
    entry14.element = iP82;
    tp2.Entry entry87 = null;
    entry14.next = entry87;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[null]"+ "'", str15.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[null]"+ "'", str16.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 10+ "'", i42.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str48.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "10.0.0.100"+ "'", str55.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "10.0.0.100"+ "'", str56.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L+ "'", long58.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 10+ "'", i67.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "10.0.0.100"+ "'", str68.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i69 + "' != '" + 100+ "'", i69.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "[10.0.0.100]"+ "'", str74.equals("[10.0.0.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i84 + "' != '" + 100+ "'", i84.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i85 + "' != '" + (-1)+ "'", i85.equals((-1)));

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test029"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList9.size = 10;
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    server12.update();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP19.setFirst((java.lang.Integer)1);
    java.lang.Integer i22 = iP19.getSecond();
    boolean b23 = server12.addException(iP19);
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = server12.addException(iP29);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b39 = server12.removeBan(iP38);
    iP38.setThird((java.lang.Integer)0);
    boolean b42 = strictlySortedSinglyLinkedList9.removeFromIP(iP38);
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    server43.update();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP50.setFirst((java.lang.Integer)1);
    java.lang.Integer i53 = iP50.getSecond();
    boolean b54 = server43.addException(iP50);
    boolean b55 = strictlySortedSinglyLinkedList9.removeFromIP(iP50);
    boolean b56 = server0.connect(iP50);
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP58 = null;
    boolean b59 = server57.connect(iP58);
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b65 = server57.connect(iP64);
    java.lang.Integer i66 = iP64.getFirst();
    boolean b67 = server0.connect(iP64);
    java.lang.String str68 = server0.toString();
    tp2.SinglyLinkedList singlyLinkedList69 = new tp2.SinglyLinkedList();
    tp2.IP iP71 = singlyLinkedList69.get((int)' ');
    tp2.Entry entry72 = new tp2.Entry();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i78 = iP77.getFirst();
    java.lang.String str79 = iP77.toString();
    entry72.element = iP77;
    boolean b81 = singlyLinkedList69.remove(iP77);
    tp2.IP iP83 = singlyLinkedList69.get((int)'4');
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i89 = iP88.getFirst();
    java.lang.String str90 = iP88.toString();
    boolean b91 = singlyLinkedList69.contains(iP88);
    tp2.IPBan iPBan93 = new tp2.IPBan(iP88, (java.lang.Long)200000L);
    iP88.setFourth((java.lang.Integer)1);
    boolean b96 = server0.removeBan(iP88);
    tp2.IP iP97 = null;
    boolean b98 = server0.addBan(iP97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 0+ "'", i22.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 0+ "'", i53.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i66 + "' != '" + 100+ "'", i66.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str68.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i78 + "' != '" + 10+ "'", i78.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "10.0.0.100"+ "'", str79.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i89 + "' != '" + 10+ "'", i89.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "10.0.0.100"+ "'", str90.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == false);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test030"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    tp2.IPBan iPBan6 = new tp2.IPBan(iP4, (java.lang.Long)(-1L));
    tp2.IP iP7 = iPBan6.getIp();
    java.lang.String str8 = iPBan6.toString();
    java.lang.Long long9 = iPBan6.getExpires();
    iPBan6.expires = 1466185872523L;
    tp2.IP iP12 = iPBan6.getIp();
    iP12.setSecond((java.lang.Integer)32);
    iP12.setSecond((java.lang.Integer)11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "IPBan [ip=10.100.-1.1, expires=-1]"+ "'", str8.equals("IPBan [ip=10.100.-1.1, expires=-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L)+ "'", long9.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP12);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test031"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.Node node2 = null;
    strictlySortedSinglyLinkedList0.header = node2;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test032"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    server16.update();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP23.setFirst((java.lang.Integer)1);
    java.lang.Integer i26 = iP23.getSecond();
    boolean b27 = server16.addException(iP23);
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = server16.addException(iP33);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b43 = server16.removeBan(iP42);
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP45 = null;
    boolean b46 = server44.connect(iP45);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b52 = server44.connect(iP51);
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP54 = null;
    boolean b55 = server53.connect(iP54);
    java.lang.String str56 = server53.toString();
    java.lang.String str57 = server53.toString();
    tp2.Entry entry58 = new tp2.Entry();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i64 = iP63.getFirst();
    java.lang.String str65 = iP63.toString();
    entry58.element = iP63;
    boolean b67 = server53.connect(iP63);
    boolean b68 = server44.removeException(iP63);
    boolean b69 = server16.connect(iP63);
    java.lang.Integer i70 = iP63.getFirst();
    boolean b71 = strictlySortedSinglyLinkedList0.removeFromIP(iP63);
    boolean b72 = strictlySortedSinglyLinkedList0.isEmpty();
    strictlySortedSinglyLinkedList0.size = (byte)100;
    int i75 = strictlySortedSinglyLinkedList0.size;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str57.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 10+ "'", i64.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "10.0.0.100"+ "'", str65.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 10+ "'", i70.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 100);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test033"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    boolean b10 = server0.removeException(iP7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList11.contains(iPBan12);
    int i14 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan16 = strictlySortedSinglyLinkedList11.get((int)'#');
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP21.setSecond((java.lang.Integer)(-1));
    boolean b24 = strictlySortedSinglyLinkedList11.removeFromIP(iP21);
    boolean b25 = server0.removeBan(iP21);
    java.lang.Integer i26 = iP21.getFourth();
    iP21.setFourth((java.lang.Integer)0);
    java.lang.Integer i29 = iP21.getThird();
    iP21.setSecond((java.lang.Integer)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 100+ "'", i26.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 0+ "'", i29.equals(0));

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test034"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.SinglyLinkedList singlyLinkedList16 = new tp2.SinglyLinkedList();
    tp2.IP iP18 = singlyLinkedList16.get((int)' ');
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = singlyLinkedList16.remove(iP24);
    tp2.IPBan iPBan30 = new tp2.IPBan(iP24, (java.lang.Long)1L);
    java.lang.String str31 = iPBan30.toString();
    iPBan30.setExpires((java.lang.Long)0L);
    java.lang.Long long34 = iPBan30.expires;
    tp2.IP iP35 = iPBan30.ip;
    java.lang.String str36 = iPBan30.toString();
    boolean b37 = strictlySortedSinglyLinkedList0.add(iPBan30);
    tp2.IP iP38 = iPBan30.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str31.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L+ "'", long34.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str36.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP38);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test035"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.Server server55 = new tp2.Server();
    java.lang.String str56 = server55.toString();
    server55.update();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP62.setFirst((java.lang.Integer)1);
    java.lang.Integer i65 = iP62.getSecond();
    boolean b66 = server55.addException(iP62);
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = server55.addException(iP72);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b82 = server55.removeBan(iP81);
    iP81.setThird((java.lang.Integer)0);
    iP81.setFourth((java.lang.Integer)10);
    boolean b87 = server0.addException(iP81);
    java.lang.Integer i88 = iP81.getThird();
    iP81.setThird((java.lang.Integer)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 0+ "'", i65.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 0+ "'", i88.equals(0));

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test036"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node6 = strictlySortedSinglyLinkedList5.header;
    tp2.Node node7 = new tp2.Node();
    tp2.IPBan iPBan8 = null;
    node7.element = iPBan8;
    tp2.IPBan iPBan10 = null;
    node7.element = iPBan10;
    strictlySortedSinglyLinkedList5.header = node7;
    tp2.IPBan iPBan13 = node7.element;
    strictlySortedSinglyLinkedList0.header = node7;
    java.lang.String str15 = strictlySortedSinglyLinkedList0.toString();
    int i16 = strictlySortedSinglyLinkedList0.size;
    int i17 = strictlySortedSinglyLinkedList0.getSize();
    strictlySortedSinglyLinkedList0.size = (byte)100;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "{}"+ "'", str15.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test037"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    boolean b3 = singlyLinkedList0.isEmpty();
    java.lang.String str4 = singlyLinkedList0.toString();
    java.util.Set<tp2.IP> set_iP5 = null;
    boolean b6 = singlyLinkedList0.repOk(set_iP5);
    tp2.IP iP8 = singlyLinkedList0.get((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "()"+ "'", str4.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP8);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test038"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP58.setSecond((java.lang.Integer)1);
    boolean b61 = server0.removeBan(iP58);
    boolean b63 = iP58.equals((java.lang.Object)(byte)10);
    tp2.IPBan iPBan65 = new tp2.IPBan(iP58, (java.lang.Long)1466185873844L);
    tp2.IP iP66 = iPBan65.getIp();
    java.lang.Integer i67 = iP66.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 100+ "'", i67.equals(100));

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test039"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)100);
    tp2.IPBan iPBan6 = new tp2.IPBan(iP4, (java.lang.Long)1466185883613L);
    java.lang.Integer i7 = iP4.getFirst();
    java.lang.Integer i8 = iP4.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i7 + "' != '" + 10+ "'", i7.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i8 + "' != '" + 100+ "'", i8.equals(100));

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test040"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    java.lang.String str16 = strictlySortedSinglyLinkedList0.toString();
    java.util.Set<tp2.IPBan> set_iPBan17 = null;
    boolean b18 = strictlySortedSinglyLinkedList0.repOk(set_iPBan17);
    int i19 = strictlySortedSinglyLinkedList0.getSize();
    java.util.Set<tp2.IPBan> set_iPBan20 = null;
    boolean b21 = strictlySortedSinglyLinkedList0.repOk(set_iPBan20);
    strictlySortedSinglyLinkedList0.size = 0;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "{}"+ "'", str16.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test041"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = entry0.next;
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b17 = server9.connect(iP16);
    java.lang.Integer i18 = iP16.getFirst();
    entry0.element = iP16;
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP24.setThird((java.lang.Integer)1);
    entry0.element = iP24;
    tp2.IPBan iPBan29 = new tp2.IPBan(iP24, (java.lang.Long)1466185879376L);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.SinglyLinkedList singlyLinkedList32 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP33 = null;
    boolean b34 = singlyLinkedList32.repOk(set_iP33);
    java.util.Set<tp2.IP> set_iP35 = null;
    boolean b36 = singlyLinkedList32.repOk(set_iP35);
    tp2.SinglyLinkedList singlyLinkedList37 = new tp2.SinglyLinkedList();
    tp2.IP iP39 = singlyLinkedList37.get((int)' ');
    tp2.Entry entry40 = new tp2.Entry();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i46 = iP45.getFirst();
    java.lang.String str47 = iP45.toString();
    entry40.element = iP45;
    boolean b49 = singlyLinkedList37.remove(iP45);
    tp2.IP iP51 = singlyLinkedList37.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList52 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList52.size = 10;
    tp2.Server server55 = new tp2.Server();
    java.lang.String str56 = server55.toString();
    server55.update();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP62.setFirst((java.lang.Integer)1);
    java.lang.Integer i65 = iP62.getSecond();
    boolean b66 = server55.addException(iP62);
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = server55.addException(iP72);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b82 = server55.removeBan(iP81);
    iP81.setThird((java.lang.Integer)0);
    boolean b85 = strictlySortedSinglyLinkedList52.removeFromIP(iP81);
    boolean b86 = singlyLinkedList37.contains(iP81);
    boolean b87 = singlyLinkedList32.contains(iP81);
    boolean b88 = server30.removeBan(iP81);
    iPBan29.setIp(iP81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 100+ "'", i18.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 10+ "'", i46.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "10.0.0.100"+ "'", str47.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 0+ "'", i65.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test042"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.Entry entry4 = entry0.next;
    tp2.Entry entry5 = new tp2.Entry();
    java.lang.String str6 = entry5.toString();
    java.lang.String str7 = entry5.toString();
    tp2.Entry entry8 = entry5.next;
    tp2.IP iP9 = entry5.element;
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    java.lang.String str16 = iP14.toString();
    java.lang.String str17 = iP14.toString();
    iP14.setThird((java.lang.Integer)(-1));
    entry5.element = iP14;
    tp2.Node node21 = new tp2.Node();
    tp2.IPBan iPBan22 = null;
    node21.element = iPBan22;
    tp2.SinglyLinkedList singlyLinkedList24 = new tp2.SinglyLinkedList();
    tp2.IP iP26 = singlyLinkedList24.get((int)' ');
    tp2.Entry entry27 = new tp2.Entry();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    entry27.element = iP32;
    boolean b36 = singlyLinkedList24.remove(iP32);
    tp2.IPBan iPBan38 = new tp2.IPBan(iP32, (java.lang.Long)1L);
    java.lang.String str39 = iPBan38.toString();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i45 = iP44.getFirst();
    java.lang.String str46 = iP44.toString();
    java.lang.String str47 = iP44.toString();
    iPBan38.setIp(iP44);
    java.lang.Long long49 = iPBan38.getExpires();
    node21.element = iPBan38;
    iPBan38.expires = 1466185870380L;
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i58 = iP57.getFirst();
    java.lang.String str59 = iP57.toString();
    java.lang.Integer i60 = iP57.getFourth();
    iPBan38.ip = iP57;
    entry5.element = iP57;
    tp2.Entry entry63 = new tp2.Entry();
    java.lang.String str64 = entry63.toString();
    java.lang.String str65 = entry63.toString();
    tp2.Entry entry66 = entry63.next;
    tp2.IP iP67 = entry63.element;
    tp2.IP iP68 = entry63.element;
    tp2.Entry entry69 = new tp2.Entry();
    tp2.Entry entry70 = new tp2.Entry();
    java.lang.String str71 = entry70.toString();
    java.lang.String str72 = entry70.toString();
    tp2.Entry entry73 = entry70.next;
    entry69.next = entry70;
    entry63.next = entry69;
    entry5.next = entry69;
    tp2.Entry entry77 = entry69.next;
    entry0.next = entry77;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[null]"+ "'", str6.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[null]"+ "'", str7.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "10.0.0.100"+ "'", str17.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str39.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 10+ "'", i45.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "10.0.0.100"+ "'", str46.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "10.0.0.100"+ "'", str47.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L+ "'", long49.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 10+ "'", i58.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "10.0.0.100"+ "'", str59.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 100+ "'", i60.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "[null]"+ "'", str64.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "[null]"+ "'", str65.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "[null]"+ "'", str71.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "[null]"+ "'", str72.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry77);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test043"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = new tp2.Entry();
    java.lang.String str4 = entry3.toString();
    entry0.next = entry3;
    java.lang.String str6 = entry3.toString();
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    server7.update();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP14.setFirst((java.lang.Integer)1);
    java.lang.Integer i17 = iP14.getSecond();
    boolean b18 = server7.addException(iP14);
    entry3.element = iP14;
    tp2.IP iP20 = entry3.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[null]"+ "'", str4.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[null]"+ "'", str6.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 0+ "'", i17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test044"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    java.lang.String str19 = iP16.toString();
    iP16.setThird((java.lang.Integer)(-1));
    boolean b22 = server0.addBan(iP16);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList23 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node24 = strictlySortedSinglyLinkedList23.header;
    tp2.Node node25 = new tp2.Node();
    tp2.IPBan iPBan26 = null;
    node25.element = iPBan26;
    tp2.IPBan iPBan28 = null;
    node25.element = iPBan28;
    strictlySortedSinglyLinkedList23.header = node25;
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b36 = strictlySortedSinglyLinkedList23.containsIP(iP35);
    iP35.setThird((java.lang.Integer)100);
    boolean b39 = server0.removeException(iP35);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    tp2.IP iP42 = singlyLinkedList40.get((int)' ');
    tp2.Entry entry43 = new tp2.Entry();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i49 = iP48.getFirst();
    java.lang.String str50 = iP48.toString();
    entry43.element = iP48;
    boolean b52 = singlyLinkedList40.remove(iP48);
    tp2.IPBan iPBan54 = new tp2.IPBan(iP48, (java.lang.Long)1L);
    java.lang.String str55 = iPBan54.toString();
    iPBan54.setExpires((java.lang.Long)0L);
    iPBan54.expires = 1466185877442L;
    tp2.IP iP60 = iPBan54.ip;
    java.lang.String str61 = iPBan54.toString();
    tp2.Server server62 = new tp2.Server();
    java.lang.String str63 = server62.toString();
    server62.update();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP69.setFirst((java.lang.Integer)1);
    java.lang.Integer i72 = iP69.getSecond();
    boolean b73 = server62.addException(iP69);
    tp2.Entry entry74 = new tp2.Entry();
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i80 = iP79.getFirst();
    java.lang.String str81 = iP79.toString();
    entry74.element = iP79;
    boolean b83 = server62.addException(iP79);
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b89 = server62.removeBan(iP88);
    iP88.setThird((java.lang.Integer)0);
    iP88.setFirst((java.lang.Integer)11);
    iPBan54.ip = iP88;
    boolean b95 = server0.removeException(iP88);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i49 + "' != '" + 10+ "'", i49.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "10.0.0.100"+ "'", str50.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str55.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "IPBan [ip=10.0.0.100, expires=1466185877442]"+ "'", str61.equals("IPBan [ip=10.0.0.100, expires=1466185877442]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str63.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i72 + "' != '" + 0+ "'", i72.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 10+ "'", i80.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "10.0.0.100"+ "'", str81.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test045"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get(1);
    tp2.IP iP4 = singlyLinkedList0.get(0);
    java.lang.String str5 = singlyLinkedList0.toString();
    tp2.IP iP7 = singlyLinkedList0.get((int)(byte)100);
    tp2.IP iP9 = singlyLinkedList0.get((int)(byte)0);
    int i10 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "()"+ "'", str5.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test046"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = server0.connect(iP10);
    server0.update();
    server0.update();
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    server17.update();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP24.setFirst((java.lang.Integer)1);
    java.lang.Integer i27 = iP24.getSecond();
    boolean b28 = server17.addException(iP24);
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = server17.addException(iP34);
    java.lang.Integer i39 = iP34.getFirst();
    java.lang.String str40 = iP34.toString();
    boolean b41 = server0.removeBan(iP34);
    iP34.setFirst((java.lang.Integer)11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 0+ "'", i27.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + 10+ "'", i39.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "10.0.0.100"+ "'", str40.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test047"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    iP26.setThird((java.lang.Integer)0);
    iP26.setThird((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test048"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    java.lang.String str5 = strictlySortedSinglyLinkedList0.toString();
    strictlySortedSinglyLinkedList0.size = 'a';
    strictlySortedSinglyLinkedList0.size = (byte)10;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "{}"+ "'", str5.equals("{}"));

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test049"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    tp2.IPBan iPBan7 = strictlySortedSinglyLinkedList0.get((int)'4');
    int i8 = strictlySortedSinglyLinkedList0.size;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    int i10 = strictlySortedSinglyLinkedList9.getSize();
    tp2.IPBan iPBan11 = null;
    boolean b12 = strictlySortedSinglyLinkedList9.add(iPBan11);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList13 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node14 = strictlySortedSinglyLinkedList13.header;
    strictlySortedSinglyLinkedList9.header = node14;
    java.lang.String str16 = node14.toString();
    strictlySortedSinglyLinkedList0.header = node14;
    int i18 = strictlySortedSinglyLinkedList0.size;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[null]"+ "'", str16.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test050"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    server4.update();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP11.setFirst((java.lang.Integer)1);
    java.lang.Integer i14 = iP11.getSecond();
    boolean b15 = server4.addException(iP11);
    boolean b16 = server0.addException(iP11);
    tp2.SinglyLinkedList singlyLinkedList17 = new tp2.SinglyLinkedList();
    tp2.IP iP19 = singlyLinkedList17.get((int)' ');
    tp2.Entry entry20 = new tp2.Entry();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    entry20.element = iP25;
    boolean b29 = singlyLinkedList17.remove(iP25);
    tp2.IPBan iPBan31 = new tp2.IPBan(iP25, (java.lang.Long)1L);
    java.lang.String str32 = iPBan31.toString();
    iPBan31.setExpires((java.lang.Long)0L);
    java.lang.Long long35 = iPBan31.expires;
    tp2.IP iP36 = iPBan31.ip;
    java.lang.String str37 = iPBan31.toString();
    tp2.IP iP38 = iPBan31.getIp();
    iP38.setFirst((java.lang.Integer)100);
    tp2.SinglyLinkedList singlyLinkedList41 = new tp2.SinglyLinkedList();
    tp2.IP iP43 = singlyLinkedList41.get((int)' ');
    tp2.Entry entry44 = new tp2.Entry();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i50 = iP49.getFirst();
    java.lang.String str51 = iP49.toString();
    entry44.element = iP49;
    boolean b53 = singlyLinkedList41.remove(iP49);
    tp2.IP iP55 = singlyLinkedList41.get((int)'4');
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    java.lang.String str63 = iP60.toString();
    iP60.setThird((java.lang.Integer)(-1));
    boolean b66 = singlyLinkedList41.contains(iP60);
    boolean b67 = iP38.equals((java.lang.Object)b66);
    boolean b68 = server0.removeException(iP38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 0+ "'", i14.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str32.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L+ "'", long35.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str37.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 10+ "'", i50.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "10.0.0.100"+ "'", str51.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "10.0.0.100"+ "'", str63.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test051"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get((int)' ');
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    boolean b17 = singlyLinkedList5.remove(iP13);
    tp2.IPBan iPBan19 = new tp2.IPBan(iP13, (java.lang.Long)1L);
    java.lang.String str20 = iPBan19.toString();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    java.lang.String str28 = iP25.toString();
    iPBan19.setIp(iP25);
    java.lang.Integer i30 = iP25.getFirst();
    boolean b31 = server0.removeException(iP25);
    java.lang.Integer i32 = iP25.getFourth();
    iP25.setFourth((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 100+ "'", i32.equals(100));

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test052"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    tp2.SinglyLinkedList singlyLinkedList4 = new tp2.SinglyLinkedList();
    tp2.IP iP6 = singlyLinkedList4.get((int)' ');
    tp2.Entry entry7 = new tp2.Entry();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i13 = iP12.getFirst();
    java.lang.String str14 = iP12.toString();
    entry7.element = iP12;
    boolean b16 = singlyLinkedList4.remove(iP12);
    tp2.SinglyLinkedList singlyLinkedList17 = new tp2.SinglyLinkedList();
    tp2.IP iP19 = singlyLinkedList17.get((int)' ');
    tp2.Entry entry20 = new tp2.Entry();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    entry20.element = iP25;
    boolean b29 = singlyLinkedList17.remove(iP25);
    tp2.IPBan iPBan31 = new tp2.IPBan(iP25, (java.lang.Long)1L);
    java.lang.String str32 = iPBan31.toString();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP34 = null;
    boolean b35 = server33.connect(iP34);
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b41 = server33.connect(iP40);
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP43 = null;
    boolean b44 = server42.connect(iP43);
    java.lang.String str45 = server42.toString();
    java.lang.String str46 = server42.toString();
    tp2.Entry entry47 = new tp2.Entry();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    entry47.element = iP52;
    boolean b56 = server42.connect(iP52);
    boolean b57 = server33.removeException(iP52);
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP59 = null;
    boolean b60 = server58.connect(iP59);
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b66 = server58.connect(iP65);
    java.lang.Integer i67 = iP65.getFirst();
    boolean b68 = server33.connect(iP65);
    iPBan31.ip = iP65;
    boolean b70 = singlyLinkedList4.contains(iP65);
    boolean b71 = server0.removeException(iP65);
    tp2.Server server72 = new tp2.Server();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b78 = server72.addException(iP77);
    java.lang.String str79 = server72.toString();
    tp2.Server server80 = new tp2.Server();
    tp2.IP iP81 = null;
    boolean b82 = server80.connect(iP81);
    java.lang.String str83 = server80.toString();
    java.lang.String str84 = server80.toString();
    tp2.IP iP85 = null;
    boolean b86 = server80.removeException(iP85);
    tp2.RealTime realTime87 = new tp2.RealTime();
    long long88 = realTime87.getCurrentTime();
    long long89 = realTime87.getCurrentTime();
    server80.setTime((tp2.ITime)realTime87);
    server72.setTime((tp2.ITime)realTime87);
    server0.setTime((tp2.ITime)realTime87);
    long long93 = realTime87.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 10+ "'", i13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str32.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 100+ "'", i67.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"+ "'", str79.equals("Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str83.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str84.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long88 == 1466185917906L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long89 == 1466185917906L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long93 == 1466185917906L);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test053"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)32, (java.lang.Integer)32);
    java.lang.String str5 = iP4.toString();
    java.lang.Integer i6 = iP4.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "0.10.32.32"+ "'", str5.equals("0.10.32.32"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 0+ "'", i6.equals(0));

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test054"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    boolean b3 = singlyLinkedList0.isEmpty();
    java.lang.String str4 = singlyLinkedList0.toString();
    java.util.Set<tp2.IP> set_iP5 = null;
    boolean b6 = singlyLinkedList0.repOk(set_iP5);
    int i7 = singlyLinkedList0.getSize();
    tp2.IP iP8 = null;
    boolean b9 = singlyLinkedList0.contains(iP8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "()"+ "'", str4.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test055"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList22 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList22.size = 10;
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    server25.update();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP32.setFirst((java.lang.Integer)1);
    java.lang.Integer i35 = iP32.getSecond();
    boolean b36 = server25.addException(iP32);
    tp2.Entry entry37 = new tp2.Entry();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i43 = iP42.getFirst();
    java.lang.String str44 = iP42.toString();
    entry37.element = iP42;
    boolean b46 = server25.addException(iP42);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b52 = server25.removeBan(iP51);
    iP51.setThird((java.lang.Integer)0);
    boolean b55 = strictlySortedSinglyLinkedList22.removeFromIP(iP51);
    boolean b56 = server0.addException(iP51);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 0+ "'", i35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 10+ "'", i43.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "10.0.0.100"+ "'", str44.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test056"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    java.lang.String str34 = strictlySortedSinglyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    java.lang.String str50 = iPBan49.toString();
    boolean b51 = strictlySortedSinglyLinkedList0.contains(iPBan49);
    iPBan49.setExpires((java.lang.Long)1466185873141L);
    iPBan49.expires = 1466185880002L;
    iPBan49.expires = 1466185908960L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "{}"+ "'", str34.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test057"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList3 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList3.size = 10;
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    server6.update();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP13.setFirst((java.lang.Integer)1);
    java.lang.Integer i16 = iP13.getSecond();
    boolean b17 = server6.addException(iP13);
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = server6.addException(iP23);
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b33 = server6.removeBan(iP32);
    iP32.setThird((java.lang.Integer)0);
    boolean b36 = strictlySortedSinglyLinkedList3.removeFromIP(iP32);
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    server37.update();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP44.setFirst((java.lang.Integer)1);
    java.lang.Integer i47 = iP44.getSecond();
    boolean b48 = server37.addException(iP44);
    boolean b49 = strictlySortedSinglyLinkedList3.removeFromIP(iP44);
    singlyLinkedList0.add(iP44);
    java.lang.Integer i51 = iP44.getFirst();
    tp2.Server server52 = new tp2.Server();
    tp2.IP iP53 = null;
    boolean b54 = server52.connect(iP53);
    java.lang.String str55 = server52.toString();
    java.lang.String str56 = server52.toString();
    tp2.Entry entry57 = new tp2.Entry();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i63 = iP62.getFirst();
    java.lang.String str64 = iP62.toString();
    entry57.element = iP62;
    boolean b66 = server52.connect(iP62);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i72 = iP71.getFirst();
    java.lang.String str73 = iP71.toString();
    java.lang.String str74 = iP71.toString();
    boolean b75 = server52.removeBan(iP71);
    server52.update();
    boolean b77 = iP44.equals((java.lang.Object)server52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 0+ "'", i16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 0+ "'", i47.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 1+ "'", i51.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str55.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 10+ "'", i63.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "10.0.0.100"+ "'", str64.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i72 + "' != '" + 10+ "'", i72.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "10.0.0.100"+ "'", str73.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test058"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.SinglyLinkedList singlyLinkedList3 = new tp2.SinglyLinkedList();
    tp2.IP iP5 = singlyLinkedList3.get((int)' ');
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    entry6.element = iP11;
    boolean b15 = singlyLinkedList3.remove(iP11);
    tp2.IPBan iPBan17 = new tp2.IPBan(iP11, (java.lang.Long)1L);
    java.lang.String str18 = iPBan17.toString();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    java.lang.String str26 = iP23.toString();
    iPBan17.setIp(iP23);
    java.lang.Long long28 = iPBan17.getExpires();
    node0.element = iPBan17;
    tp2.IPBan iPBan30 = node0.element;
    java.lang.Long long31 = iPBan30.expires;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str18.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L+ "'", long28.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L+ "'", long31.equals(1L));

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test059"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    boolean b3 = singlyLinkedList0.isEmpty();
    tp2.IP iP4 = null;
    boolean b5 = singlyLinkedList0.remove(iP4);
    boolean b6 = singlyLinkedList0.isEmpty();
    int i7 = singlyLinkedList0.getSize();
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    tp2.IP iP17 = entry8.element;
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP19 = null;
    boolean b20 = server18.connect(iP19);
    java.lang.String str21 = server18.toString();
    java.lang.String str22 = server18.toString();
    tp2.SinglyLinkedList singlyLinkedList23 = new tp2.SinglyLinkedList();
    tp2.IP iP25 = singlyLinkedList23.get((int)' ');
    tp2.Entry entry26 = new tp2.Entry();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i32 = iP31.getFirst();
    java.lang.String str33 = iP31.toString();
    entry26.element = iP31;
    boolean b35 = singlyLinkedList23.remove(iP31);
    tp2.IPBan iPBan37 = new tp2.IPBan(iP31, (java.lang.Long)1L);
    java.lang.String str38 = iPBan37.toString();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    java.lang.String str46 = iP43.toString();
    iPBan37.setIp(iP43);
    java.lang.Integer i48 = iP43.getFirst();
    boolean b49 = server18.removeException(iP43);
    iP43.setThird((java.lang.Integer)(-1));
    entry8.element = iP43;
    boolean b53 = singlyLinkedList0.remove(iP43);
    tp2.SinglyLinkedList singlyLinkedList54 = new tp2.SinglyLinkedList();
    int i55 = singlyLinkedList54.getSize();
    tp2.SinglyLinkedList singlyLinkedList56 = new tp2.SinglyLinkedList();
    tp2.IP iP58 = singlyLinkedList56.get((int)' ');
    tp2.Entry entry59 = new tp2.Entry();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i65 = iP64.getFirst();
    java.lang.String str66 = iP64.toString();
    entry59.element = iP64;
    boolean b68 = singlyLinkedList56.remove(iP64);
    tp2.IP iP70 = singlyLinkedList56.get((int)'4');
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i76 = iP75.getFirst();
    java.lang.String str77 = iP75.toString();
    boolean b78 = singlyLinkedList56.contains(iP75);
    boolean b79 = singlyLinkedList54.remove(iP75);
    iP75.setThird((java.lang.Integer)(-1));
    singlyLinkedList0.add(iP75);
    tp2.IPBan iPBan84 = new tp2.IPBan(iP75, (java.lang.Long)1466185899740L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 10+ "'", i32.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "10.0.0.100"+ "'", str33.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str38.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "10.0.0.100"+ "'", str46.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 10+ "'", i65.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "10.0.0.100"+ "'", str66.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 10+ "'", i76.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test060"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    java.lang.String str14 = iP11.toString();
    iP11.setThird((java.lang.Integer)(-1));
    boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP11);
    tp2.SinglyLinkedList singlyLinkedList18 = new tp2.SinglyLinkedList();
    tp2.IP iP20 = singlyLinkedList18.get((int)' ');
    tp2.Entry entry21 = new tp2.Entry();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i27 = iP26.getFirst();
    java.lang.String str28 = iP26.toString();
    entry21.element = iP26;
    boolean b30 = singlyLinkedList18.remove(iP26);
    tp2.IPBan iPBan32 = new tp2.IPBan(iP26, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList33 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan34 = null;
    boolean b35 = strictlySortedSinglyLinkedList33.contains(iPBan34);
    int i36 = strictlySortedSinglyLinkedList33.getSize();
    tp2.IPBan iPBan38 = strictlySortedSinglyLinkedList33.get((int)'#');
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP43.setSecond((java.lang.Integer)(-1));
    boolean b46 = strictlySortedSinglyLinkedList33.removeFromIP(iP43);
    iPBan32.ip = iP43;
    boolean b48 = strictlySortedSinglyLinkedList0.removeFromIP(iP43);
    java.util.Set<tp2.IPBan> set_iPBan49 = null;
    boolean b50 = strictlySortedSinglyLinkedList0.repOk(set_iPBan49);
    tp2.IPBan iPBan52 = strictlySortedSinglyLinkedList0.get(10);
    int i53 = strictlySortedSinglyLinkedList0.size;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test061"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node1 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node2 = strictlySortedSinglyLinkedList0.header;
    tp2.Server server3 = new tp2.Server();
    tp2.IP iP4 = null;
    boolean b5 = server3.connect(iP4);
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b11 = server3.connect(iP10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList12 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList12.size = 10;
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    server15.update();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP22.setFirst((java.lang.Integer)1);
    java.lang.Integer i25 = iP22.getSecond();
    boolean b26 = server15.addException(iP22);
    tp2.Entry entry27 = new tp2.Entry();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    entry27.element = iP32;
    boolean b36 = server15.addException(iP32);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b42 = server15.removeBan(iP41);
    iP41.setThird((java.lang.Integer)0);
    boolean b45 = strictlySortedSinglyLinkedList12.removeFromIP(iP41);
    tp2.Server server46 = new tp2.Server();
    java.lang.String str47 = server46.toString();
    server46.update();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP53.setFirst((java.lang.Integer)1);
    java.lang.Integer i56 = iP53.getSecond();
    boolean b57 = server46.addException(iP53);
    boolean b58 = strictlySortedSinglyLinkedList12.removeFromIP(iP53);
    boolean b59 = server3.connect(iP53);
    java.lang.String str60 = server3.toString();
    tp2.SinglyLinkedList singlyLinkedList61 = new tp2.SinglyLinkedList();
    tp2.IP iP63 = singlyLinkedList61.get((int)' ');
    tp2.Entry entry64 = new tp2.Entry();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i70 = iP69.getFirst();
    java.lang.String str71 = iP69.toString();
    entry64.element = iP69;
    boolean b73 = singlyLinkedList61.remove(iP69);
    tp2.IPBan iPBan75 = new tp2.IPBan(iP69, (java.lang.Long)1L);
    tp2.Server server76 = new tp2.Server();
    java.lang.String str77 = server76.toString();
    server76.update();
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i84 = iP83.getFirst();
    boolean b85 = server76.connect(iP83);
    iPBan75.ip = iP83;
    tp2.IP iP87 = iPBan75.ip;
    boolean b88 = server3.removeBan(iP87);
    java.lang.Integer i89 = iP87.getThird();
    iP87.setSecond((java.lang.Integer)(-1));
    boolean b92 = strictlySortedSinglyLinkedList0.containsIP(iP87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 0+ "'", i25.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 0+ "'", i56.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 10+ "'", i70.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "10.0.0.100"+ "'", str71.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str77.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i84 + "' != '" + 100+ "'", i84.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i89 + "' != '" + (-1)+ "'", i89.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test062"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList22 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList22.size = 10;
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    server25.update();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP32.setFirst((java.lang.Integer)1);
    java.lang.Integer i35 = iP32.getSecond();
    boolean b36 = server25.addException(iP32);
    tp2.Entry entry37 = new tp2.Entry();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i43 = iP42.getFirst();
    java.lang.String str44 = iP42.toString();
    entry37.element = iP42;
    boolean b46 = server25.addException(iP42);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b52 = server25.removeBan(iP51);
    iP51.setThird((java.lang.Integer)0);
    boolean b55 = strictlySortedSinglyLinkedList22.removeFromIP(iP51);
    boolean b56 = server0.addException(iP51);
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP58 = null;
    boolean b59 = server57.connect(iP58);
    java.lang.String str60 = server57.toString();
    tp2.Server server61 = new tp2.Server();
    java.lang.String str62 = server61.toString();
    server61.update();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP68.setFirst((java.lang.Integer)1);
    java.lang.Integer i71 = iP68.getSecond();
    boolean b72 = server61.addException(iP68);
    boolean b73 = server57.addException(iP68);
    boolean b74 = server0.addException(iP68);
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i80 = iP79.getFirst();
    iP79.setFourth((java.lang.Integer)1);
    boolean b83 = server0.addException(iP79);
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP88.setSecond((java.lang.Integer)(-1));
    boolean b91 = server0.removeException(iP88);
    java.lang.Integer i92 = iP88.getFourth();
    iP88.setSecond((java.lang.Integer)1);
    java.lang.Integer i95 = iP88.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 0+ "'", i35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 10+ "'", i43.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "10.0.0.100"+ "'", str44.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i71 + "' != '" + 0+ "'", i71.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 100+ "'", i80.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i92 + "' != '" + 100+ "'", i92.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i95 + "' != '" + 100+ "'", i95.equals(100));

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test063"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.getIp();
    java.lang.Long long20 = iPBan14.getExpires();
    iPBan14.expires = 1466185872523L;
    java.lang.Long long23 = iPBan14.getExpires();
    java.lang.String str24 = iPBan14.toString();
    tp2.SinglyLinkedList singlyLinkedList25 = new tp2.SinglyLinkedList();
    java.lang.String str26 = singlyLinkedList25.toString();
    java.lang.String str27 = singlyLinkedList25.toString();
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    entry28.element = iP33;
    iP33.setFirst((java.lang.Integer)1);
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP39 = null;
    boolean b40 = server38.connect(iP39);
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP45.setFirst((java.lang.Integer)1);
    boolean b48 = server38.removeException(iP45);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList49 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan50 = null;
    boolean b51 = strictlySortedSinglyLinkedList49.contains(iPBan50);
    int i52 = strictlySortedSinglyLinkedList49.getSize();
    tp2.IPBan iPBan54 = strictlySortedSinglyLinkedList49.get((int)'#');
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP59.setSecond((java.lang.Integer)(-1));
    boolean b62 = strictlySortedSinglyLinkedList49.removeFromIP(iP59);
    boolean b63 = server38.removeBan(iP59);
    java.lang.Integer i64 = iP59.getSecond();
    boolean b65 = iP33.equals((java.lang.Object)i64);
    singlyLinkedList25.add(iP33);
    iPBan14.ip = iP33;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L+ "'", long20.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1466185872523L+ "'", long23.equals(1466185872523L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "IPBan [ip=10.0.0.100, expires=1466185872523]"+ "'", str24.equals("IPBan [ip=10.0.0.100, expires=1466185872523]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "()"+ "'", str26.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "()"+ "'", str27.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + (-1)+ "'", i64.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test064"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    int i7 = strictlySortedSinglyLinkedList0.getSize();
    tp2.SinglyLinkedList singlyLinkedList8 = new tp2.SinglyLinkedList();
    tp2.IP iP10 = singlyLinkedList8.get((int)' ');
    tp2.Entry entry11 = new tp2.Entry();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    entry11.element = iP16;
    boolean b20 = singlyLinkedList8.remove(iP16);
    tp2.IPBan iPBan22 = new tp2.IPBan(iP16, (java.lang.Long)1L);
    java.lang.String str23 = iPBan22.toString();
    tp2.Server server24 = new tp2.Server();
    tp2.IP iP25 = null;
    boolean b26 = server24.connect(iP25);
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b32 = server24.connect(iP31);
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP34 = null;
    boolean b35 = server33.connect(iP34);
    java.lang.String str36 = server33.toString();
    java.lang.String str37 = server33.toString();
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = server33.connect(iP43);
    boolean b48 = server24.removeException(iP43);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP50 = null;
    boolean b51 = server49.connect(iP50);
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b57 = server49.connect(iP56);
    java.lang.Integer i58 = iP56.getFirst();
    boolean b59 = server24.connect(iP56);
    iPBan22.ip = iP56;
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP65.setFirst((java.lang.Integer)1);
    java.lang.Integer i68 = iP65.getSecond();
    iPBan22.ip = iP65;
    boolean b70 = strictlySortedSinglyLinkedList0.contains(iPBan22);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)2);
    boolean b76 = strictlySortedSinglyLinkedList0.containsIP(iP75);
    tp2.IPBan iPBan78 = new tp2.IPBan(iP75, (java.lang.Long)1466185879670L);
    java.lang.String str79 = iPBan78.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str23.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 100+ "'", i58.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 0+ "'", i68.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "IPBan [ip=-1.0.-1.2, expires=1466185879670]"+ "'", str79.equals("IPBan [ip=-1.0.-1.2, expires=1466185879670]"));

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test065"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP58.setSecond((java.lang.Integer)1);
    boolean b61 = server0.removeBan(iP58);
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP63 = null;
    boolean b64 = server62.connect(iP63);
    java.lang.String str65 = server62.toString();
    java.lang.String str66 = server62.toString();
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = server62.connect(iP72);
    boolean b77 = server0.addBan(iP72);
    server0.update();
    server0.update();
    java.lang.String str80 = server0.toString();
    tp2.IP iP81 = null;
    boolean b82 = server0.removeBan(iP81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1466185918187, exceptions=([10.0.0.100][1.0.0.100]), bans={}]"+ "'", str80.equals("Server [lastUpdate=1466185918187, exceptions=([10.0.0.100][1.0.0.100]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test066"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    boolean b2 = singlyLinkedList0.isEmpty();
    int i3 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test067"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b6 = server0.addException(iP5);
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    server7.update();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP14.setFirst((java.lang.Integer)1);
    java.lang.Integer i17 = iP14.getSecond();
    boolean b18 = server7.addException(iP14);
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = server7.addException(iP24);
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b34 = server7.removeBan(iP33);
    iP33.setThird((java.lang.Integer)0);
    boolean b38 = iP33.equals((java.lang.Object)'4');
    boolean b39 = server0.removeException(iP33);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b46 = server40.addException(iP45);
    java.lang.String str47 = server40.toString();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP49 = null;
    boolean b50 = server48.connect(iP49);
    java.lang.String str51 = server48.toString();
    java.lang.String str52 = server48.toString();
    tp2.IP iP53 = null;
    boolean b54 = server48.removeException(iP53);
    tp2.RealTime realTime55 = new tp2.RealTime();
    long long56 = realTime55.getCurrentTime();
    long long57 = realTime55.getCurrentTime();
    server48.setTime((tp2.ITime)realTime55);
    server40.setTime((tp2.ITime)realTime55);
    server0.setTime((tp2.ITime)realTime55);
    tp2.IP iP61 = null;
    boolean b62 = server0.removeException(iP61);
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b69 = server63.addException(iP68);
    java.lang.String str70 = server63.toString();
    tp2.Server server71 = new tp2.Server();
    tp2.IP iP72 = null;
    boolean b73 = server71.connect(iP72);
    java.lang.String str74 = server71.toString();
    java.lang.String str75 = server71.toString();
    tp2.IP iP76 = null;
    boolean b77 = server71.removeException(iP76);
    tp2.RealTime realTime78 = new tp2.RealTime();
    long long79 = realTime78.getCurrentTime();
    long long80 = realTime78.getCurrentTime();
    server71.setTime((tp2.ITime)realTime78);
    server63.setTime((tp2.ITime)realTime78);
    server0.setTime((tp2.ITime)realTime78);
    tp2.RealTime realTime84 = new tp2.RealTime();
    long long85 = realTime84.getCurrentTime();
    long long86 = realTime84.getCurrentTime();
    long long87 = realTime84.getCurrentTime();
    server0.setTime((tp2.ITime)realTime84);
    long long89 = realTime84.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 0+ "'", i17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"+ "'", str47.equals("Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str52.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long56 == 1466185918211L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long57 == 1466185918211L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"+ "'", str70.equals("Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str74.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str75.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long79 == 1466185918212L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long80 == 1466185918212L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long85 == 1466185918212L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long86 == 1466185918212L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long87 == 1466185918212L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long89 == 1466185918213L);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test068"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    boolean b5 = strictlySortedSinglyLinkedList0.isEmpty();
    int i6 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan8 = strictlySortedSinglyLinkedList0.get((int)(short)10);
    strictlySortedSinglyLinkedList0.size = 11;
    strictlySortedSinglyLinkedList0.size = 'a';
    tp2.IPBan iPBan14 = strictlySortedSinglyLinkedList0.get(10);
    boolean b15 = strictlySortedSinglyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test069"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    java.lang.String str13 = singlyLinkedList0.toString();
    java.util.Set<tp2.IP> set_iP14 = null;
    boolean b15 = singlyLinkedList0.repOk(set_iP14);
    java.util.Set<tp2.IP> set_iP16 = null;
    boolean b17 = singlyLinkedList0.repOk(set_iP16);
    boolean b18 = singlyLinkedList0.isEmpty();
    tp2.IP iP20 = singlyLinkedList0.get(35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "()"+ "'", str13.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP20);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test070"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    server0.update();
    tp2.Server server6 = new tp2.Server();
    tp2.IP iP7 = null;
    boolean b8 = server6.connect(iP7);
    java.lang.String str9 = server6.toString();
    java.lang.String str10 = server6.toString();
    tp2.IP iP11 = null;
    boolean b12 = server6.removeException(iP11);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList13 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList13.size = 10;
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    server16.update();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP23.setFirst((java.lang.Integer)1);
    java.lang.Integer i26 = iP23.getSecond();
    boolean b27 = server16.addException(iP23);
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = server16.addException(iP33);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b43 = server16.removeBan(iP42);
    iP42.setThird((java.lang.Integer)0);
    boolean b46 = strictlySortedSinglyLinkedList13.removeFromIP(iP42);
    tp2.Server server47 = new tp2.Server();
    java.lang.String str48 = server47.toString();
    server47.update();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP54.setFirst((java.lang.Integer)1);
    java.lang.Integer i57 = iP54.getSecond();
    boolean b58 = server47.addException(iP54);
    boolean b59 = strictlySortedSinglyLinkedList13.removeFromIP(iP54);
    boolean b60 = server6.connect(iP54);
    tp2.RealTime realTime61 = new tp2.RealTime();
    long long62 = realTime61.getCurrentTime();
    server6.setTime((tp2.ITime)realTime61);
    long long64 = realTime61.getCurrentTime();
    long long65 = realTime61.getCurrentTime();
    server0.setTime((tp2.ITime)realTime61);
    tp2.Server server67 = new tp2.Server();
    tp2.IP iP68 = null;
    boolean b69 = server67.connect(iP68);
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP74.setFirst((java.lang.Integer)1);
    boolean b77 = server67.removeException(iP74);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList78 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan79 = null;
    boolean b80 = strictlySortedSinglyLinkedList78.contains(iPBan79);
    int i81 = strictlySortedSinglyLinkedList78.getSize();
    tp2.IPBan iPBan83 = strictlySortedSinglyLinkedList78.get((int)'#');
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP88.setSecond((java.lang.Integer)(-1));
    boolean b91 = strictlySortedSinglyLinkedList78.removeFromIP(iP88);
    boolean b92 = server67.removeBan(iP88);
    java.lang.Integer i93 = iP88.getSecond();
    boolean b94 = server0.connect(iP88);
    java.lang.String str95 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 0+ "'", i57.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long62 == 1466185918237L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long64 == 1466185918237L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long65 == 1466185918237L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i93 + "' != '" + (-1)+ "'", i93.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "Server [lastUpdate=1466185918235, exceptions=(), bans={}]"+ "'", str95.equals("Server [lastUpdate=1466185918235, exceptions=(), bans={}]"));

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test071"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)'4');
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    boolean b22 = singlyLinkedList0.contains(iP19);
    java.lang.String str23 = singlyLinkedList0.toString();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList24 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node25 = strictlySortedSinglyLinkedList24.header;
    tp2.SinglyLinkedList singlyLinkedList26 = new tp2.SinglyLinkedList();
    tp2.IP iP28 = singlyLinkedList26.get((int)' ');
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = singlyLinkedList26.remove(iP34);
    tp2.IPBan iPBan40 = new tp2.IPBan(iP34, (java.lang.Long)1L);
    tp2.IP iP41 = iPBan40.ip;
    node25.element = iPBan40;
    java.lang.Long long43 = iPBan40.expires;
    tp2.Entry entry44 = new tp2.Entry();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i50 = iP49.getFirst();
    java.lang.String str51 = iP49.toString();
    entry44.element = iP49;
    tp2.Entry entry53 = new tp2.Entry();
    tp2.Entry entry54 = new tp2.Entry();
    java.lang.String str55 = entry54.toString();
    java.lang.String str56 = entry54.toString();
    tp2.Entry entry57 = entry54.next;
    entry53.next = entry54;
    tp2.IP iP59 = entry53.element;
    entry44.next = entry53;
    tp2.Entry entry61 = entry44.next;
    tp2.IP iP62 = entry44.element;
    iPBan40.ip = iP62;
    boolean b64 = singlyLinkedList0.remove(iP62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "()"+ "'", str23.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L+ "'", long43.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 10+ "'", i50.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "10.0.0.100"+ "'", str51.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "[null]"+ "'", str55.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "[null]"+ "'", str56.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test072"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = server0.connect(iP10);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    java.lang.String str22 = iP19.toString();
    boolean b23 = server0.removeBan(iP19);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    server24.update();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i32 = iP31.getFirst();
    boolean b33 = server24.connect(iP31);
    java.lang.Integer i34 = iP31.getSecond();
    boolean b35 = server0.removeBan(iP31);
    java.lang.String str36 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 100+ "'", i32.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test073"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP58.setSecond((java.lang.Integer)1);
    boolean b61 = server0.removeBan(iP58);
    tp2.StubTime stubTime62 = new tp2.StubTime();
    long long63 = stubTime62.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime62);
    long long65 = stubTime62.getCurrentTime();
    long long66 = stubTime62.getCurrentTime();
    long long67 = stubTime62.getCurrentTime();
    long long68 = stubTime62.getCurrentTime();
    long long69 = stubTime62.getCurrentTime();
    long long70 = stubTime62.getCurrentTime();
    long long71 = stubTime62.getCurrentTime();
    long long72 = stubTime62.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long63 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long65 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long66 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long67 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long68 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long69 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long70 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long71 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long72 == 200000L);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test074"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    int i3 = singlyLinkedList0.getSize();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    java.lang.Integer i11 = iP8.getFourth();
    boolean b12 = singlyLinkedList0.contains(iP8);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    server13.update();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP20.setFirst((java.lang.Integer)1);
    java.lang.Integer i23 = iP20.getSecond();
    boolean b24 = server13.addException(iP20);
    tp2.Entry entry25 = new tp2.Entry();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i31 = iP30.getFirst();
    java.lang.String str32 = iP30.toString();
    entry25.element = iP30;
    boolean b34 = server13.addException(iP30);
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b40 = server13.removeBan(iP39);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP42 = null;
    boolean b43 = server41.connect(iP42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b49 = server41.connect(iP48);
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP51 = null;
    boolean b52 = server50.connect(iP51);
    java.lang.String str53 = server50.toString();
    java.lang.String str54 = server50.toString();
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    entry55.element = iP60;
    boolean b64 = server50.connect(iP60);
    boolean b65 = server41.removeException(iP60);
    boolean b66 = server13.connect(iP60);
    java.lang.Integer i67 = iP60.getFirst();
    iP60.setFirst((java.lang.Integer)100);
    tp2.SinglyLinkedList singlyLinkedList70 = new tp2.SinglyLinkedList();
    tp2.IP iP72 = singlyLinkedList70.get((int)' ');
    tp2.Entry entry73 = new tp2.Entry();
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i79 = iP78.getFirst();
    java.lang.String str80 = iP78.toString();
    entry73.element = iP78;
    boolean b82 = singlyLinkedList70.remove(iP78);
    tp2.IPBan iPBan84 = new tp2.IPBan(iP78, (java.lang.Long)1L);
    iPBan84.expires = 1466185871428L;
    iPBan84.expires = 0L;
    boolean b89 = iP60.equals((java.lang.Object)iPBan84);
    boolean b90 = singlyLinkedList0.contains(iP60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 100+ "'", i11.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 0+ "'", i23.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 10+ "'", i31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str53.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str54.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 10+ "'", i67.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i79 + "' != '" + 10+ "'", i79.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "10.0.0.100"+ "'", str80.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test075"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b7 = strictlySortedSinglyLinkedList0.containsIP(iP6);
    int i8 = strictlySortedSinglyLinkedList0.getSize();
    int i9 = strictlySortedSinglyLinkedList0.getSize();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    int i11 = strictlySortedSinglyLinkedList10.getSize();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList10.add(iPBan12);
    tp2.Node node14 = strictlySortedSinglyLinkedList10.header;
    tp2.IPBan iPBan15 = node14.element;
    java.lang.String str16 = node14.toString();
    strictlySortedSinglyLinkedList0.header = node14;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[null]"+ "'", str16.equals("[null]"));

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test076"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b6 = server0.addException(iP5);
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    server7.update();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP14.setFirst((java.lang.Integer)1);
    java.lang.Integer i17 = iP14.getSecond();
    boolean b18 = server7.addException(iP14);
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = server7.addException(iP24);
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b34 = server7.removeBan(iP33);
    iP33.setThird((java.lang.Integer)0);
    boolean b38 = iP33.equals((java.lang.Object)'4');
    boolean b39 = server0.removeException(iP33);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b46 = server40.addException(iP45);
    java.lang.String str47 = server40.toString();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP49 = null;
    boolean b50 = server48.connect(iP49);
    java.lang.String str51 = server48.toString();
    java.lang.String str52 = server48.toString();
    tp2.IP iP53 = null;
    boolean b54 = server48.removeException(iP53);
    tp2.RealTime realTime55 = new tp2.RealTime();
    long long56 = realTime55.getCurrentTime();
    long long57 = realTime55.getCurrentTime();
    server48.setTime((tp2.ITime)realTime55);
    server40.setTime((tp2.ITime)realTime55);
    server0.setTime((tp2.ITime)realTime55);
    tp2.IP iP61 = null;
    boolean b62 = server0.removeException(iP61);
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b69 = server63.addException(iP68);
    java.lang.String str70 = server63.toString();
    tp2.Server server71 = new tp2.Server();
    tp2.IP iP72 = null;
    boolean b73 = server71.connect(iP72);
    java.lang.String str74 = server71.toString();
    java.lang.String str75 = server71.toString();
    tp2.IP iP76 = null;
    boolean b77 = server71.removeException(iP76);
    tp2.RealTime realTime78 = new tp2.RealTime();
    long long79 = realTime78.getCurrentTime();
    long long80 = realTime78.getCurrentTime();
    server71.setTime((tp2.ITime)realTime78);
    server63.setTime((tp2.ITime)realTime78);
    server0.setTime((tp2.ITime)realTime78);
    java.lang.String str84 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 0+ "'", i17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"+ "'", str47.equals("Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str52.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long56 == 1466185918343L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long57 == 1466185918343L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"+ "'", str70.equals("Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str74.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str75.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long79 == 1466185918344L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long80 == 1466185918344L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"+ "'", str84.equals("Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"));

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test077"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    java.lang.Long long19 = iPBan14.expires;
    tp2.Server server20 = new tp2.Server();
    java.lang.String str21 = server20.toString();
    server20.update();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP27.setFirst((java.lang.Integer)1);
    java.lang.Integer i30 = iP27.getSecond();
    boolean b31 = server20.addException(iP27);
    tp2.Entry entry32 = new tp2.Entry();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i38 = iP37.getFirst();
    java.lang.String str39 = iP37.toString();
    entry32.element = iP37;
    boolean b41 = server20.addException(iP37);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList42 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList42.size = 10;
    tp2.Server server45 = new tp2.Server();
    java.lang.String str46 = server45.toString();
    server45.update();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP52.setFirst((java.lang.Integer)1);
    java.lang.Integer i55 = iP52.getSecond();
    boolean b56 = server45.addException(iP52);
    tp2.Entry entry57 = new tp2.Entry();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i63 = iP62.getFirst();
    java.lang.String str64 = iP62.toString();
    entry57.element = iP62;
    boolean b66 = server45.addException(iP62);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b72 = server45.removeBan(iP71);
    iP71.setThird((java.lang.Integer)0);
    boolean b75 = strictlySortedSinglyLinkedList42.removeFromIP(iP71);
    boolean b76 = server20.addException(iP71);
    java.lang.String str77 = iP71.toString();
    iPBan14.ip = iP71;
    tp2.SinglyLinkedList singlyLinkedList79 = new tp2.SinglyLinkedList();
    int i80 = singlyLinkedList79.getSize();
    java.lang.String str81 = singlyLinkedList79.toString();
    int i82 = singlyLinkedList79.getSize();
    java.util.Set<tp2.IP> set_iP83 = null;
    boolean b84 = singlyLinkedList79.repOk(set_iP83);
    int i85 = singlyLinkedList79.getSize();
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b91 = singlyLinkedList79.remove(iP90);
    java.lang.Integer i92 = iP90.getFirst();
    iPBan14.setIp(iP90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L+ "'", long19.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 0+ "'", i30.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i38 + "' != '" + 10+ "'", i38.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "10.0.0.100"+ "'", str39.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 0+ "'", i55.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 10+ "'", i63.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "10.0.0.100"+ "'", str64.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.100.0.1"+ "'", str77.equals("10.100.0.1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "()"+ "'", str81.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i92 + "' != '" + 0+ "'", i92.equals(0));

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test078"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)33, (java.lang.Integer)(-1), (java.lang.Integer)0);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test079"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    tp2.Server server2 = new tp2.Server();
    java.lang.String str3 = server2.toString();
    server2.update();
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i10 = iP9.getFirst();
    boolean b11 = server2.connect(iP9);
    entry0.element = iP9;
    tp2.IP iP13 = entry0.element;
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    entry14.element = iP19;
    tp2.IP iP22 = entry14.element;
    tp2.Entry entry23 = null;
    entry14.next = entry23;
    tp2.Entry entry25 = new tp2.Entry();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i31 = iP30.getFirst();
    java.lang.String str32 = iP30.toString();
    entry25.element = iP30;
    tp2.IP iP34 = entry25.element;
    tp2.Server server35 = new tp2.Server();
    tp2.IP iP36 = null;
    boolean b37 = server35.connect(iP36);
    java.lang.String str38 = server35.toString();
    java.lang.String str39 = server35.toString();
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    tp2.IP iP42 = singlyLinkedList40.get((int)' ');
    tp2.Entry entry43 = new tp2.Entry();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i49 = iP48.getFirst();
    java.lang.String str50 = iP48.toString();
    entry43.element = iP48;
    boolean b52 = singlyLinkedList40.remove(iP48);
    tp2.IPBan iPBan54 = new tp2.IPBan(iP48, (java.lang.Long)1L);
    java.lang.String str55 = iPBan54.toString();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    java.lang.String str63 = iP60.toString();
    iPBan54.setIp(iP60);
    java.lang.Integer i65 = iP60.getFirst();
    boolean b66 = server35.removeException(iP60);
    iP60.setThird((java.lang.Integer)(-1));
    entry25.element = iP60;
    java.lang.String str70 = entry25.toString();
    tp2.IP iP71 = entry25.element;
    tp2.Entry entry72 = new tp2.Entry();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i78 = iP77.getFirst();
    java.lang.String str79 = iP77.toString();
    entry72.element = iP77;
    tp2.Entry entry81 = new tp2.Entry();
    tp2.Entry entry82 = new tp2.Entry();
    java.lang.String str83 = entry82.toString();
    java.lang.String str84 = entry82.toString();
    tp2.Entry entry85 = entry82.next;
    entry81.next = entry82;
    tp2.IP iP87 = entry81.element;
    entry72.next = entry81;
    entry25.next = entry81;
    entry14.next = entry25;
    entry0.next = entry14;
    java.lang.String str92 = entry0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 100+ "'", i10.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 10+ "'", i31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i49 + "' != '" + 10+ "'", i49.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "10.0.0.100"+ "'", str50.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str55.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "10.0.0.100"+ "'", str63.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 10+ "'", i65.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "[10.0.-1.100]"+ "'", str70.equals("[10.0.-1.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i78 + "' != '" + 10+ "'", i78.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "10.0.0.100"+ "'", str79.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "[null]"+ "'", str83.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "[null]"+ "'", str84.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "[100.10.-1.10]"+ "'", str92.equals("[100.10.-1.10]"));

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test080"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList15.size = 10;
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    server18.update();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setFirst((java.lang.Integer)1);
    java.lang.Integer i28 = iP25.getSecond();
    boolean b29 = server18.addException(iP25);
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server18.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b45 = server18.removeBan(iP44);
    iP44.setThird((java.lang.Integer)0);
    boolean b48 = strictlySortedSinglyLinkedList15.removeFromIP(iP44);
    boolean b49 = singlyLinkedList0.contains(iP44);
    tp2.Server server50 = new tp2.Server();
    java.lang.String str51 = server50.toString();
    server50.update();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    java.lang.Integer i60 = iP57.getSecond();
    boolean b61 = server50.addException(iP57);
    tp2.Entry entry62 = new tp2.Entry();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i68 = iP67.getFirst();
    java.lang.String str69 = iP67.toString();
    entry62.element = iP67;
    boolean b71 = server50.addException(iP67);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b77 = server50.removeBan(iP76);
    iP76.setThird((java.lang.Integer)0);
    boolean b80 = singlyLinkedList0.remove(iP76);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP85.setFirst((java.lang.Integer)1);
    singlyLinkedList0.add(iP85);
    iP85.setThird((java.lang.Integer)11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 0+ "'", i28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 0+ "'", i60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 10+ "'", i68.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "10.0.0.100"+ "'", str69.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test081"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    java.util.Set<tp2.IPBan> set_iPBan5 = null;
    boolean b6 = strictlySortedSinglyLinkedList0.repOk(set_iPBan5);
    tp2.IPBan iPBan8 = strictlySortedSinglyLinkedList0.get((int)(short)0);
    tp2.Node node9 = strictlySortedSinglyLinkedList0.header;
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP11 = null;
    boolean b12 = server10.connect(iP11);
    java.lang.String str13 = server10.toString();
    java.lang.String str14 = server10.toString();
    tp2.SinglyLinkedList singlyLinkedList15 = new tp2.SinglyLinkedList();
    tp2.IP iP17 = singlyLinkedList15.get((int)' ');
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = singlyLinkedList15.remove(iP23);
    tp2.IPBan iPBan29 = new tp2.IPBan(iP23, (java.lang.Long)1L);
    java.lang.String str30 = iPBan29.toString();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    java.lang.String str38 = iP35.toString();
    iPBan29.setIp(iP35);
    java.lang.Integer i40 = iP35.getFirst();
    boolean b41 = server10.removeException(iP35);
    iP35.setThird((java.lang.Integer)(-1));
    iP35.setSecond((java.lang.Integer)11);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP35);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList47 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan48 = null;
    boolean b49 = strictlySortedSinglyLinkedList47.contains(iPBan48);
    tp2.Server server50 = new tp2.Server();
    java.lang.String str51 = server50.toString();
    server50.update();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i58 = iP57.getFirst();
    boolean b59 = server50.connect(iP57);
    boolean b60 = strictlySortedSinglyLinkedList47.removeFromIP(iP57);
    strictlySortedSinglyLinkedList47.size = (short)10;
    boolean b63 = strictlySortedSinglyLinkedList47.isEmpty();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList64 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan65 = null;
    boolean b66 = strictlySortedSinglyLinkedList64.add(iPBan65);
    boolean b67 = strictlySortedSinglyLinkedList64.isEmpty();
    tp2.Node node68 = strictlySortedSinglyLinkedList64.header;
    strictlySortedSinglyLinkedList47.header = node68;
    strictlySortedSinglyLinkedList0.header = node68;
    strictlySortedSinglyLinkedList0.size = (short)(-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str30.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 100+ "'", i58.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node68);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test082"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.getIp();
    tp2.IP iP20 = iPBan14.ip;
    tp2.IP iP21 = iPBan14.getIp();
    iPBan14.expires = 1466185876788L;
    iPBan14.expires = 0L;
    tp2.Entry entry26 = new tp2.Entry();
    java.lang.String str27 = entry26.toString();
    java.lang.String str28 = entry26.toString();
    tp2.Entry entry29 = entry26.next;
    tp2.IP iP30 = entry26.element;
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    java.lang.String str38 = iP35.toString();
    iP35.setThird((java.lang.Integer)(-1));
    entry26.element = iP35;
    tp2.IP iP42 = entry26.element;
    iP42.setFirst((java.lang.Integer)1);
    iPBan14.setIp(iP42);
    tp2.IP iP46 = iPBan14.ip;
    java.lang.Integer i47 = iP46.getFourth();
    java.lang.Integer i48 = iP46.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[null]"+ "'", str27.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[null]"+ "'", str28.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 100+ "'", i47.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + (-1)+ "'", i48.equals((-1)));

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test083"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan5 = strictlySortedSinglyLinkedList0.get((int)'#');
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setSecond((java.lang.Integer)(-1));
    boolean b13 = strictlySortedSinglyLinkedList0.removeFromIP(iP10);
    tp2.SinglyLinkedList singlyLinkedList14 = new tp2.SinglyLinkedList();
    tp2.IP iP16 = singlyLinkedList14.get((int)' ');
    tp2.Entry entry17 = new tp2.Entry();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i23 = iP22.getFirst();
    java.lang.String str24 = iP22.toString();
    entry17.element = iP22;
    boolean b26 = singlyLinkedList14.remove(iP22);
    tp2.IPBan iPBan28 = new tp2.IPBan(iP22, (java.lang.Long)1L);
    java.lang.String str29 = iPBan28.toString();
    iPBan28.setExpires((java.lang.Long)0L);
    boolean b32 = strictlySortedSinglyLinkedList0.add(iPBan28);
    java.lang.String str33 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node34 = strictlySortedSinglyLinkedList0.header;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 10+ "'", i23.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "10.0.0.100"+ "'", str24.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str29.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{[IPBan [ip=10.0.0.100, expires=0]]}"+ "'", str33.equals("{[IPBan [ip=10.0.0.100, expires=0]]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node34);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test084"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList9.size = 10;
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    server12.update();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP19.setFirst((java.lang.Integer)1);
    java.lang.Integer i22 = iP19.getSecond();
    boolean b23 = server12.addException(iP19);
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = server12.addException(iP29);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b39 = server12.removeBan(iP38);
    iP38.setThird((java.lang.Integer)0);
    boolean b42 = strictlySortedSinglyLinkedList9.removeFromIP(iP38);
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    server43.update();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP50.setFirst((java.lang.Integer)1);
    java.lang.Integer i53 = iP50.getSecond();
    boolean b54 = server43.addException(iP50);
    boolean b55 = strictlySortedSinglyLinkedList9.removeFromIP(iP50);
    boolean b56 = server0.connect(iP50);
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP58 = null;
    boolean b59 = server57.connect(iP58);
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b65 = server57.connect(iP64);
    java.lang.Integer i66 = iP64.getFirst();
    boolean b67 = server0.connect(iP64);
    java.lang.Object obj68 = null;
    boolean b69 = iP64.equals(obj68);
    java.lang.Integer i70 = iP64.getThird();
    iP64.setFirst((java.lang.Integer)(-1));
    java.lang.Integer i73 = iP64.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 0+ "'", i22.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 0+ "'", i53.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i66 + "' != '" + 100+ "'", i66.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + (-1)+ "'", i70.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + (-1)+ "'", i73.equals((-1)));

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test085"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.IP iP3 = entry0.element;
    tp2.Entry entry4 = new tp2.Entry();
    java.lang.String str5 = entry4.toString();
    tp2.Entry entry6 = new tp2.Entry();
    java.lang.String str7 = entry6.toString();
    entry4.next = entry6;
    entry0.next = entry4;
    tp2.Entry entry10 = new tp2.Entry();
    tp2.Entry entry11 = new tp2.Entry();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    entry11.element = iP16;
    tp2.Entry entry20 = new tp2.Entry();
    tp2.Entry entry21 = new tp2.Entry();
    java.lang.String str22 = entry21.toString();
    java.lang.String str23 = entry21.toString();
    tp2.Entry entry24 = entry21.next;
    entry20.next = entry21;
    tp2.IP iP26 = entry20.element;
    entry11.next = entry20;
    entry10.next = entry20;
    entry4.next = entry10;
    tp2.IP iP30 = entry4.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[null]"+ "'", str5.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[null]"+ "'", str7.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[null]"+ "'", str22.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[null]"+ "'", str23.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP30);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test086"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.IP iP4 = singlyLinkedList0.get((int)(byte)100);
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    java.lang.String str11 = iP9.toString();
    java.lang.String str12 = iP9.toString();
    iP9.setThird((java.lang.Integer)100);
    singlyLinkedList0.add(iP9);
    int i16 = singlyLinkedList0.getSize();
    tp2.IP iP18 = singlyLinkedList0.get((int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "10.0.0.100"+ "'", str11.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP18);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test087"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    boolean b39 = iP5.equals((java.lang.Object)iPBan26);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    int i41 = singlyLinkedList40.getSize();
    java.lang.String str42 = singlyLinkedList40.toString();
    int i43 = singlyLinkedList40.getSize();
    java.util.Set<tp2.IP> set_iP44 = null;
    boolean b45 = singlyLinkedList40.repOk(set_iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b51 = singlyLinkedList40.remove(iP50);
    iPBan26.setIp(iP50);
    iPBan26.setExpires((java.lang.Long)1466185875369L);
    tp2.SinglyLinkedList singlyLinkedList55 = new tp2.SinglyLinkedList();
    tp2.IP iP57 = singlyLinkedList55.get((int)' ');
    tp2.IP iP59 = singlyLinkedList55.get((int)(byte)100);
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i65 = iP64.getFirst();
    java.lang.String str66 = iP64.toString();
    java.lang.String str67 = iP64.toString();
    iP64.setThird((java.lang.Integer)100);
    singlyLinkedList55.add(iP64);
    iPBan26.ip = iP64;
    java.lang.Integer i72 = iP64.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "()"+ "'", str42.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 10+ "'", i65.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "10.0.0.100"+ "'", str66.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "10.0.0.100"+ "'", str67.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i72 + "' != '" + 100+ "'", i72.equals(100));

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test088"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i11 = iP10.getFirst();
    boolean b12 = server3.connect(iP10);
    boolean b13 = strictlySortedSinglyLinkedList0.removeFromIP(iP10);
    strictlySortedSinglyLinkedList0.size = (short)10;
    boolean b16 = strictlySortedSinglyLinkedList0.isEmpty();
    boolean b17 = strictlySortedSinglyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 100+ "'", i11.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test089"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    entry6.element = iP11;
    tp2.Entry entry14 = entry6.next;
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP16 = null;
    boolean b17 = server15.connect(iP16);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b23 = server15.connect(iP22);
    java.lang.Integer i24 = iP22.getFirst();
    entry6.element = iP22;
    entry1.next = entry6;
    tp2.Entry entry27 = entry1.next;
    tp2.Entry entry28 = null;
    entry27.next = entry28;
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    tp2.Entry entry39 = new tp2.Entry();
    tp2.Entry entry40 = new tp2.Entry();
    java.lang.String str41 = entry40.toString();
    java.lang.String str42 = entry40.toString();
    tp2.Entry entry43 = entry40.next;
    entry39.next = entry40;
    tp2.IP iP45 = entry39.element;
    entry30.next = entry39;
    tp2.Entry entry47 = entry30.next;
    entry27.next = entry30;
    tp2.Entry entry49 = entry27.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 100+ "'", i24.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[null]"+ "'", str41.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "[null]"+ "'", str42.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry49);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test090"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.ip;
    java.lang.String str20 = iPBan14.toString();
    java.lang.Long long21 = iPBan14.getExpires();
    tp2.Server server22 = new tp2.Server();
    java.lang.String str23 = server22.toString();
    server22.update();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP29.setFirst((java.lang.Integer)1);
    java.lang.Integer i32 = iP29.getSecond();
    boolean b33 = server22.addException(iP29);
    tp2.Entry entry34 = new tp2.Entry();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    entry34.element = iP39;
    boolean b43 = server22.addException(iP39);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b49 = server22.removeBan(iP48);
    iP48.setThird((java.lang.Integer)0);
    boolean b53 = iP48.equals((java.lang.Object)'4');
    iPBan14.setIp(iP48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L+ "'", long21.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 0+ "'", i32.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test091"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    java.lang.String str14 = iP11.toString();
    iP11.setThird((java.lang.Integer)(-1));
    boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP11);
    boolean b18 = strictlySortedSinglyLinkedList0.isEmpty();
    int i19 = strictlySortedSinglyLinkedList0.getSize();
    java.util.Set<tp2.IPBan> set_iPBan20 = null;
    boolean b21 = strictlySortedSinglyLinkedList0.repOk(set_iPBan20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test092"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = server0.connect(iP10);
    iP10.setFirst((java.lang.Integer)0);
    tp2.IPBan iPBan18 = new tp2.IPBan(iP10, (java.lang.Long)0L);
    tp2.IP iP19 = iPBan18.getIp();
    java.lang.String str20 = iPBan18.toString();
    tp2.IP iP21 = iPBan18.ip;
    tp2.IPBan iPBan23 = new tp2.IPBan(iP21, (java.lang.Long)1L);
    java.lang.Integer i24 = iP21.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=0.0.0.100, expires=0]"+ "'", str20.equals("IPBan [ip=0.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 0+ "'", i24.equals(0));

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test093"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)11, (java.lang.Integer)32, (java.lang.Integer)0);
    java.lang.Integer i5 = iP4.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i5 + "' != '" + 32+ "'", i5.equals(32));

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test094"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    boolean b3 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    java.lang.String str5 = node4.toString();
    tp2.IPBan iPBan6 = node4.element;
    java.lang.String str7 = node4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[null]"+ "'", str5.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[null]"+ "'", str7.equals("[null]"));

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test095"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    java.lang.Integer i54 = iP47.getFirst();
    iP47.setSecond((java.lang.Integer)0);
    java.lang.Integer i57 = iP47.getThird();
    tp2.IPBan iPBan59 = new tp2.IPBan(iP47, (java.lang.Long)1466185872784L);
    iPBan59.expires = 1466185909239L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 0+ "'", i57.equals(0));

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test096"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b7 = strictlySortedSinglyLinkedList0.containsIP(iP6);
    int i8 = strictlySortedSinglyLinkedList0.size;
    int i9 = strictlySortedSinglyLinkedList0.size;
    java.lang.String str10 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "{}"+ "'", str10.equals("{}"));

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test097"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList5.size = 10;
    tp2.Server server8 = new tp2.Server();
    java.lang.String str9 = server8.toString();
    server8.update();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP15.setFirst((java.lang.Integer)1);
    java.lang.Integer i18 = iP15.getSecond();
    boolean b19 = server8.addException(iP15);
    tp2.Entry entry20 = new tp2.Entry();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    entry20.element = iP25;
    boolean b29 = server8.addException(iP25);
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b35 = server8.removeBan(iP34);
    iP34.setThird((java.lang.Integer)0);
    boolean b38 = strictlySortedSinglyLinkedList5.removeFromIP(iP34);
    tp2.Server server39 = new tp2.Server();
    java.lang.String str40 = server39.toString();
    server39.update();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP46.setFirst((java.lang.Integer)1);
    java.lang.Integer i49 = iP46.getSecond();
    boolean b50 = server39.addException(iP46);
    boolean b51 = strictlySortedSinglyLinkedList5.removeFromIP(iP46);
    int i52 = strictlySortedSinglyLinkedList5.size;
    strictlySortedSinglyLinkedList5.size = (byte)1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList55 = new tp2.StrictlySortedSinglyLinkedList();
    int i56 = strictlySortedSinglyLinkedList55.getSize();
    tp2.IPBan iPBan57 = null;
    boolean b58 = strictlySortedSinglyLinkedList55.add(iPBan57);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList59 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node60 = strictlySortedSinglyLinkedList59.header;
    strictlySortedSinglyLinkedList55.header = node60;
    tp2.IPBan iPBan62 = node60.element;
    strictlySortedSinglyLinkedList5.header = node60;
    java.lang.String str64 = node60.toString();
    java.lang.String str65 = node60.toString();
    strictlySortedSinglyLinkedList0.header = node60;
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP71.setSecond((java.lang.Integer)1);
    java.lang.Integer i74 = iP71.getThird();
    java.lang.String str75 = iP71.toString();
    boolean b76 = strictlySortedSinglyLinkedList0.containsIP(iP71);
    tp2.IPBan iPBan78 = strictlySortedSinglyLinkedList0.get(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 0+ "'", i18.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i49 + "' != '" + 0+ "'", i49.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "[null]"+ "'", str64.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "[null]"+ "'", str65.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i74 + "' != '" + (-1)+ "'", i74.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "100.1.-1.10"+ "'", str75.equals("100.1.-1.10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan78);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test098"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.ITime iTime3 = null;
    server0.setTime(iTime3);
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i10 = iP9.getFirst();
    tp2.IPBan iPBan12 = new tp2.IPBan(iP9, (java.lang.Long)1466185873844L);
    boolean b13 = server0.removeBan(iP9);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList14 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList14.size = 10;
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    server17.update();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP24.setFirst((java.lang.Integer)1);
    java.lang.Integer i27 = iP24.getSecond();
    boolean b28 = server17.addException(iP24);
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = server17.addException(iP34);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b44 = server17.removeBan(iP43);
    iP43.setThird((java.lang.Integer)0);
    boolean b47 = strictlySortedSinglyLinkedList14.removeFromIP(iP43);
    tp2.Server server48 = new tp2.Server();
    java.lang.String str49 = server48.toString();
    server48.update();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP55.setFirst((java.lang.Integer)1);
    java.lang.Integer i58 = iP55.getSecond();
    boolean b59 = server48.addException(iP55);
    boolean b60 = strictlySortedSinglyLinkedList14.removeFromIP(iP55);
    java.lang.Integer i61 = iP55.getFourth();
    boolean b62 = server0.addException(iP55);
    java.lang.String str63 = server0.toString();
    java.lang.String str64 = server0.toString();
    tp2.SinglyLinkedList singlyLinkedList65 = new tp2.SinglyLinkedList();
    tp2.IP iP67 = singlyLinkedList65.get((int)' ');
    tp2.Entry entry68 = new tp2.Entry();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i74 = iP73.getFirst();
    java.lang.String str75 = iP73.toString();
    entry68.element = iP73;
    boolean b77 = singlyLinkedList65.remove(iP73);
    tp2.IPBan iPBan79 = new tp2.IPBan(iP73, (java.lang.Long)1L);
    java.lang.String str80 = iPBan79.toString();
    java.lang.Long long81 = iPBan79.getExpires();
    iPBan79.expires = 0L;
    tp2.IP iP84 = iPBan79.getIp();
    boolean b85 = server0.removeException(iP84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 100+ "'", i10.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 0+ "'", i27.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str49.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 0+ "'", i58.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 100+ "'", i61.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Server [lastUpdate=1466185918745, exceptions=([1.0.0.100]), bans={}]"+ "'", str63.equals("Server [lastUpdate=1466185918745, exceptions=([1.0.0.100]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Server [lastUpdate=1466185918745, exceptions=([1.0.0.100]), bans={}]"+ "'", str64.equals("Server [lastUpdate=1466185918745, exceptions=([1.0.0.100]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i74 + "' != '" + 10+ "'", i74.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "10.0.0.100"+ "'", str75.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str80.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L+ "'", long81.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test099"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    boolean b3 = singlyLinkedList0.isEmpty();
    tp2.Server server4 = new tp2.Server();
    tp2.IP iP5 = null;
    boolean b6 = server4.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b12 = server4.connect(iP11);
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP14 = null;
    boolean b15 = server13.connect(iP14);
    java.lang.String str16 = server13.toString();
    java.lang.String str17 = server13.toString();
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = server13.connect(iP23);
    boolean b28 = server4.removeException(iP23);
    java.lang.Integer i29 = iP23.getThird();
    boolean b30 = singlyLinkedList0.contains(iP23);
    int i31 = singlyLinkedList0.getSize();
    tp2.IP iP32 = null;
    boolean b33 = singlyLinkedList0.contains(iP32);
    boolean b34 = singlyLinkedList0.isEmpty();
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    server35.update();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP42.setFirst((java.lang.Integer)1);
    java.lang.Integer i45 = iP42.getSecond();
    boolean b46 = server35.addException(iP42);
    tp2.Entry entry47 = new tp2.Entry();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    entry47.element = iP52;
    boolean b56 = server35.addException(iP52);
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b62 = server35.removeBan(iP61);
    java.lang.String str63 = server35.toString();
    server35.update();
    tp2.SinglyLinkedList singlyLinkedList65 = new tp2.SinglyLinkedList();
    int i66 = singlyLinkedList65.getSize();
    java.lang.String str67 = singlyLinkedList65.toString();
    int i68 = singlyLinkedList65.getSize();
    java.util.Set<tp2.IP> set_iP69 = null;
    boolean b70 = singlyLinkedList65.repOk(set_iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b76 = singlyLinkedList65.remove(iP75);
    boolean b77 = server35.removeBan(iP75);
    java.lang.String str78 = iP75.toString();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList79 = new tp2.StrictlySortedSinglyLinkedList();
    int i80 = strictlySortedSinglyLinkedList79.getSize();
    tp2.IPBan iPBan81 = null;
    boolean b82 = strictlySortedSinglyLinkedList79.add(iPBan81);
    java.util.Set<tp2.IPBan> set_iPBan83 = null;
    boolean b84 = strictlySortedSinglyLinkedList79.repOk(set_iPBan83);
    tp2.IPBan iPBan86 = strictlySortedSinglyLinkedList79.get(0);
    java.util.Set<tp2.IPBan> set_iPBan87 = null;
    boolean b88 = strictlySortedSinglyLinkedList79.repOk(set_iPBan87);
    boolean b89 = iP75.equals((java.lang.Object)set_iPBan87);
    singlyLinkedList0.add(iP75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 0+ "'", i29.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 0+ "'", i45.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Server [lastUpdate=1466185918770, exceptions=([10.0.0.100][1.0.0.100]), bans={}]"+ "'", str63.equals("Server [lastUpdate=1466185918770, exceptions=([10.0.0.100][1.0.0.100]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "()"+ "'", str67.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "100.10.-1.10"+ "'", str78.equals("100.10.-1.10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test100"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    java.lang.String str5 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node6 = new tp2.Node();
    tp2.IPBan iPBan7 = null;
    node6.element = iPBan7;
    tp2.IPBan iPBan9 = node6.element;
    strictlySortedSinglyLinkedList0.header = node6;
    tp2.IPBan iPBan12 = strictlySortedSinglyLinkedList0.get(0);
    java.util.Set<tp2.IPBan> set_iPBan13 = null;
    boolean b14 = strictlySortedSinglyLinkedList0.repOk(set_iPBan13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "{[null]}"+ "'", str5.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test101"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.IPBan iPBan3 = null;
    node0.element = iPBan3;
    java.lang.String str5 = node0.toString();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList6.size = 10;
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    server9.update();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP16.setFirst((java.lang.Integer)1);
    java.lang.Integer i19 = iP16.getSecond();
    boolean b20 = server9.addException(iP16);
    tp2.Entry entry21 = new tp2.Entry();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i27 = iP26.getFirst();
    java.lang.String str28 = iP26.toString();
    entry21.element = iP26;
    boolean b30 = server9.addException(iP26);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b36 = server9.removeBan(iP35);
    iP35.setThird((java.lang.Integer)0);
    boolean b39 = strictlySortedSinglyLinkedList6.removeFromIP(iP35);
    tp2.Server server40 = new tp2.Server();
    java.lang.String str41 = server40.toString();
    server40.update();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP47.setFirst((java.lang.Integer)1);
    java.lang.Integer i50 = iP47.getSecond();
    boolean b51 = server40.addException(iP47);
    boolean b52 = strictlySortedSinglyLinkedList6.removeFromIP(iP47);
    int i53 = strictlySortedSinglyLinkedList6.size;
    strictlySortedSinglyLinkedList6.size = (byte)1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList56 = new tp2.StrictlySortedSinglyLinkedList();
    int i57 = strictlySortedSinglyLinkedList56.getSize();
    tp2.IPBan iPBan58 = null;
    boolean b59 = strictlySortedSinglyLinkedList56.add(iPBan58);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList60 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node61 = strictlySortedSinglyLinkedList60.header;
    strictlySortedSinglyLinkedList56.header = node61;
    tp2.IPBan iPBan63 = node61.element;
    strictlySortedSinglyLinkedList6.header = node61;
    node0.next = node61;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList66 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan67 = null;
    boolean b68 = strictlySortedSinglyLinkedList66.contains(iPBan67);
    int i69 = strictlySortedSinglyLinkedList66.getSize();
    tp2.Node node70 = strictlySortedSinglyLinkedList66.header;
    tp2.Node node71 = node70.next;
    node0.next = node70;
    java.lang.String str73 = node70.toString();
    tp2.Node node74 = node70.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[null]"+ "'", str5.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 0+ "'", i19.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 0+ "'", i50.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "[null]"+ "'", str73.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node74);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test102"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node6 = strictlySortedSinglyLinkedList5.header;
    tp2.Node node7 = new tp2.Node();
    tp2.IPBan iPBan8 = null;
    node7.element = iPBan8;
    tp2.IPBan iPBan10 = null;
    node7.element = iPBan10;
    strictlySortedSinglyLinkedList5.header = node7;
    tp2.IPBan iPBan13 = node7.element;
    strictlySortedSinglyLinkedList0.header = node7;
    java.lang.String str15 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node16 = new tp2.Node();
    tp2.IPBan iPBan17 = null;
    node16.element = iPBan17;
    tp2.SinglyLinkedList singlyLinkedList19 = new tp2.SinglyLinkedList();
    tp2.IP iP21 = singlyLinkedList19.get((int)' ');
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = singlyLinkedList19.remove(iP27);
    tp2.IPBan iPBan33 = new tp2.IPBan(iP27, (java.lang.Long)1L);
    java.lang.String str34 = iPBan33.toString();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    java.lang.String str42 = iP39.toString();
    iPBan33.setIp(iP39);
    java.lang.Long long44 = iPBan33.getExpires();
    node16.element = iPBan33;
    iPBan33.expires = 1466185870380L;
    iPBan33.setExpires((java.lang.Long)1466185872205L);
    java.lang.Long long50 = iPBan33.getExpires();
    boolean b51 = strictlySortedSinglyLinkedList0.add(iPBan33);
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i57 = iP56.getFirst();
    tp2.IPBan iPBan59 = new tp2.IPBan(iP56, (java.lang.Long)1466185873844L);
    tp2.IP iP60 = iPBan59.ip;
    iPBan33.ip = iP60;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "{}"+ "'", str15.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str34.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L+ "'", long44.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1466185872205L+ "'", long50.equals(1466185872205L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 100+ "'", i57.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP60);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test103"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)'4');
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    boolean b22 = singlyLinkedList0.contains(iP19);
    tp2.SinglyLinkedList singlyLinkedList23 = new tp2.SinglyLinkedList();
    int i24 = singlyLinkedList23.getSize();
    java.lang.String str25 = singlyLinkedList23.toString();
    int i26 = singlyLinkedList23.getSize();
    java.util.Set<tp2.IP> set_iP27 = null;
    boolean b28 = singlyLinkedList23.repOk(set_iP27);
    int i29 = singlyLinkedList23.getSize();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b35 = singlyLinkedList23.remove(iP34);
    singlyLinkedList0.add(iP34);
    tp2.Entry entry37 = new tp2.Entry();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i43 = iP42.getFirst();
    java.lang.String str44 = iP42.toString();
    entry37.element = iP42;
    tp2.IP iP46 = entry37.element;
    java.lang.String str47 = iP46.toString();
    boolean b48 = singlyLinkedList0.remove(iP46);
    int i49 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "()"+ "'", str25.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 10+ "'", i43.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "10.0.0.100"+ "'", str44.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "10.0.0.100"+ "'", str47.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test104"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP3 = null;
    boolean b4 = server2.connect(iP3);
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b10 = server2.connect(iP9);
    tp2.Server server11 = new tp2.Server();
    tp2.IP iP12 = null;
    boolean b13 = server11.connect(iP12);
    java.lang.String str14 = server11.toString();
    java.lang.String str15 = server11.toString();
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = server11.connect(iP21);
    boolean b26 = server2.removeException(iP21);
    boolean b27 = singlyLinkedList0.remove(iP21);
    java.lang.String str28 = singlyLinkedList0.toString();
    tp2.IP iP30 = singlyLinkedList0.get((int)(byte)10);
    tp2.IP iP32 = singlyLinkedList0.get((int)(byte)10);
    java.util.Set<tp2.IP> set_iP33 = null;
    boolean b34 = singlyLinkedList0.repOk(set_iP33);
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    server35.update();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP42.setFirst((java.lang.Integer)1);
    java.lang.Integer i45 = iP42.getSecond();
    boolean b46 = server35.addException(iP42);
    tp2.Entry entry47 = new tp2.Entry();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    entry47.element = iP52;
    boolean b56 = server35.addException(iP52);
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b62 = server35.removeBan(iP61);
    iP61.setThird((java.lang.Integer)0);
    iP61.setFourth((java.lang.Integer)10);
    java.lang.String str67 = iP61.toString();
    singlyLinkedList0.add(iP61);
    tp2.IP iP70 = singlyLinkedList0.get(0);
    java.lang.String str71 = singlyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "()"+ "'", str28.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 0+ "'", i45.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "10.100.0.10"+ "'", str67.equals("10.100.0.10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "([10.100.0.10])"+ "'", str71.equals("([10.100.0.10])"));

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test105"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan5 = strictlySortedSinglyLinkedList0.get((int)'#');
    strictlySortedSinglyLinkedList0.size = (short)100;
    tp2.Node node8 = strictlySortedSinglyLinkedList0.header;
    java.lang.String str9 = node8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test106"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    java.lang.String str3 = entry0.toString();
    tp2.SinglyLinkedList singlyLinkedList4 = new tp2.SinglyLinkedList();
    int i5 = singlyLinkedList4.getSize();
    java.lang.String str6 = singlyLinkedList4.toString();
    int i7 = singlyLinkedList4.getSize();
    java.util.Set<tp2.IP> set_iP8 = null;
    boolean b9 = singlyLinkedList4.repOk(set_iP8);
    int i10 = singlyLinkedList4.getSize();
    tp2.Server server11 = new tp2.Server();
    tp2.IP iP12 = null;
    boolean b13 = server11.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b19 = server11.connect(iP18);
    java.lang.Integer i20 = iP18.getFirst();
    boolean b21 = singlyLinkedList4.contains(iP18);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP26.setThird((java.lang.Integer)1);
    java.lang.Object obj29 = null;
    boolean b30 = iP26.equals(obj29);
    iP26.setThird((java.lang.Integer)0);
    singlyLinkedList4.add(iP26);
    java.lang.Integer i34 = iP26.getFirst();
    entry0.element = iP26;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "()"+ "'", str6.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 100+ "'", i20.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test107"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    int i7 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    java.lang.String str9 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node10 = new tp2.Node();
    tp2.IPBan iPBan11 = null;
    node10.element = iPBan11;
    tp2.SinglyLinkedList singlyLinkedList13 = new tp2.SinglyLinkedList();
    tp2.IP iP15 = singlyLinkedList13.get((int)' ');
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = singlyLinkedList13.remove(iP21);
    tp2.IPBan iPBan27 = new tp2.IPBan(iP21, (java.lang.Long)1L);
    java.lang.String str28 = iPBan27.toString();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    java.lang.String str36 = iP33.toString();
    iPBan27.setIp(iP33);
    java.lang.Long long38 = iPBan27.getExpires();
    node10.element = iPBan27;
    tp2.IPBan iPBan40 = node10.element;
    strictlySortedSinglyLinkedList0.header = node10;
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    tp2.Node node51 = new tp2.Node();
    tp2.IPBan iPBan52 = null;
    node51.element = iPBan52;
    tp2.SinglyLinkedList singlyLinkedList54 = new tp2.SinglyLinkedList();
    tp2.IP iP56 = singlyLinkedList54.get((int)' ');
    tp2.Entry entry57 = new tp2.Entry();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i63 = iP62.getFirst();
    java.lang.String str64 = iP62.toString();
    entry57.element = iP62;
    boolean b66 = singlyLinkedList54.remove(iP62);
    tp2.IPBan iPBan68 = new tp2.IPBan(iP62, (java.lang.Long)1L);
    java.lang.String str69 = iPBan68.toString();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i75 = iP74.getFirst();
    java.lang.String str76 = iP74.toString();
    java.lang.String str77 = iP74.toString();
    iPBan68.setIp(iP74);
    java.lang.Long long79 = iPBan68.getExpires();
    node51.element = iPBan68;
    boolean b81 = iP47.equals((java.lang.Object)iPBan68);
    tp2.SinglyLinkedList singlyLinkedList82 = new tp2.SinglyLinkedList();
    int i83 = singlyLinkedList82.getSize();
    java.lang.String str84 = singlyLinkedList82.toString();
    int i85 = singlyLinkedList82.getSize();
    java.util.Set<tp2.IP> set_iP86 = null;
    boolean b87 = singlyLinkedList82.repOk(set_iP86);
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b93 = singlyLinkedList82.remove(iP92);
    iPBan68.setIp(iP92);
    boolean b95 = strictlySortedSinglyLinkedList0.contains(iPBan68);
    boolean b96 = strictlySortedSinglyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{}"+ "'", str8.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "{}"+ "'", str9.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str28.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L+ "'", long38.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 10+ "'", i63.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "10.0.0.100"+ "'", str64.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str69.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 10+ "'", i75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "10.0.0.100"+ "'", str76.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L+ "'", long79.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "()"+ "'", str84.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test108"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.IP iP6 = entry0.element;
    tp2.Entry entry7 = entry0.next;
    tp2.Entry entry8 = entry7.next;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    int i10 = strictlySortedSinglyLinkedList9.size;
    tp2.IPBan iPBan11 = null;
    boolean b12 = strictlySortedSinglyLinkedList9.add(iPBan11);
    boolean b13 = strictlySortedSinglyLinkedList9.isEmpty();
    java.lang.String str14 = strictlySortedSinglyLinkedList9.toString();
    tp2.Node node15 = new tp2.Node();
    tp2.IPBan iPBan16 = null;
    node15.element = iPBan16;
    tp2.IPBan iPBan18 = node15.element;
    strictlySortedSinglyLinkedList9.header = node15;
    tp2.IPBan iPBan21 = strictlySortedSinglyLinkedList9.get((-1));
    tp2.IPBan iPBan23 = strictlySortedSinglyLinkedList9.get((int)' ');
    tp2.Node node24 = strictlySortedSinglyLinkedList9.header;
    tp2.SinglyLinkedList singlyLinkedList25 = new tp2.SinglyLinkedList();
    tp2.IP iP27 = singlyLinkedList25.get((int)' ');
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = singlyLinkedList25.remove(iP33);
    tp2.IPBan iPBan39 = new tp2.IPBan(iP33, (java.lang.Long)1L);
    java.lang.String str40 = iPBan39.toString();
    iPBan39.setExpires((java.lang.Long)0L);
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP47.setSecond((java.lang.Integer)(-1));
    iPBan39.ip = iP47;
    java.lang.String str51 = iPBan39.toString();
    boolean b52 = strictlySortedSinglyLinkedList9.add(iPBan39);
    strictlySortedSinglyLinkedList9.size = (short)10;
    tp2.SinglyLinkedList singlyLinkedList55 = new tp2.SinglyLinkedList();
    tp2.IP iP57 = singlyLinkedList55.get((int)' ');
    tp2.Entry entry58 = new tp2.Entry();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i64 = iP63.getFirst();
    java.lang.String str65 = iP63.toString();
    entry58.element = iP63;
    boolean b67 = singlyLinkedList55.remove(iP63);
    tp2.IPBan iPBan69 = new tp2.IPBan(iP63, (java.lang.Long)1L);
    java.lang.String str70 = iPBan69.toString();
    iPBan69.setExpires((java.lang.Long)0L);
    java.lang.Long long73 = iPBan69.expires;
    tp2.Server server74 = new tp2.Server();
    tp2.IP iP75 = null;
    boolean b76 = server74.connect(iP75);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b82 = server74.connect(iP81);
    java.lang.Integer i83 = iP81.getFirst();
    java.lang.Integer i84 = iP81.getFirst();
    iPBan69.setIp(iP81);
    boolean b86 = strictlySortedSinglyLinkedList9.removeFromIP(iP81);
    // The following exception was thrown during execution in test generation
    try {
      entry8.element = iP81;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "{[null]}"+ "'", str14.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str40.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "IPBan [ip=10.-1.0.100, expires=0]"+ "'", str51.equals("IPBan [ip=10.-1.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 10+ "'", i64.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "10.0.0.100"+ "'", str65.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str70.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L+ "'", long73.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i83 + "' != '" + 100+ "'", i83.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i84 + "' != '" + 100+ "'", i84.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test109"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = entry0.next;
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b17 = server9.connect(iP16);
    java.lang.Integer i18 = iP16.getFirst();
    entry0.element = iP16;
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP24.setThird((java.lang.Integer)1);
    entry0.element = iP24;
    tp2.IPBan iPBan29 = new tp2.IPBan(iP24, (java.lang.Long)1466185879376L);
    java.lang.Long long30 = iPBan29.getExpires();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 100+ "'", i18.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1466185879376L+ "'", long30.equals(1466185879376L));

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test110"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    entry6.element = iP11;
    tp2.Entry entry14 = entry6.next;
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP16 = null;
    boolean b17 = server15.connect(iP16);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b23 = server15.connect(iP22);
    java.lang.Integer i24 = iP22.getFirst();
    entry6.element = iP22;
    entry1.next = entry6;
    tp2.SinglyLinkedList singlyLinkedList27 = new tp2.SinglyLinkedList();
    tp2.IP iP29 = singlyLinkedList27.get((int)' ');
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = singlyLinkedList27.remove(iP35);
    tp2.IPBan iPBan41 = new tp2.IPBan(iP35, (java.lang.Long)1L);
    java.lang.String str42 = iPBan41.toString();
    iPBan41.setExpires((java.lang.Long)0L);
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP49.setSecond((java.lang.Integer)(-1));
    iPBan41.ip = iP49;
    entry6.element = iP49;
    java.lang.String str54 = entry6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 100+ "'", i24.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str42.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "[10.-1.0.100]"+ "'", str54.equals("[10.-1.0.100]"));

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test111"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    java.lang.String str47 = iP41.toString();
    iP41.setThird((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "1.0.0.100"+ "'", str47.equals("1.0.0.100"));

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test112"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    java.lang.String str14 = iP11.toString();
    iP11.setThird((java.lang.Integer)(-1));
    boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP11);
    tp2.IPBan iPBan19 = strictlySortedSinglyLinkedList0.get((int)(short)(-1));
    java.util.Set<tp2.IPBan> set_iPBan20 = null;
    boolean b21 = strictlySortedSinglyLinkedList0.repOk(set_iPBan20);
    java.util.Set<tp2.IPBan> set_iPBan22 = null;
    boolean b23 = strictlySortedSinglyLinkedList0.repOk(set_iPBan22);
    tp2.Server server24 = new tp2.Server();
    tp2.IP iP25 = null;
    boolean b26 = server24.connect(iP25);
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b32 = server24.connect(iP31);
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP34 = null;
    boolean b35 = server33.connect(iP34);
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP40.setFirst((java.lang.Integer)1);
    boolean b43 = server33.removeException(iP40);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList44 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan45 = null;
    boolean b46 = strictlySortedSinglyLinkedList44.contains(iPBan45);
    int i47 = strictlySortedSinglyLinkedList44.getSize();
    tp2.IPBan iPBan49 = strictlySortedSinglyLinkedList44.get((int)'#');
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP54.setSecond((java.lang.Integer)(-1));
    boolean b57 = strictlySortedSinglyLinkedList44.removeFromIP(iP54);
    boolean b58 = server33.removeBan(iP54);
    tp2.SinglyLinkedList singlyLinkedList59 = new tp2.SinglyLinkedList();
    tp2.IP iP61 = singlyLinkedList59.get((int)' ');
    tp2.Entry entry62 = new tp2.Entry();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i68 = iP67.getFirst();
    java.lang.String str69 = iP67.toString();
    entry62.element = iP67;
    boolean b71 = singlyLinkedList59.remove(iP67);
    boolean b72 = iP54.equals((java.lang.Object)iP67);
    boolean b73 = server24.removeException(iP54);
    boolean b74 = strictlySortedSinglyLinkedList0.containsIP(iP54);
    java.util.Set<tp2.IPBan> set_iPBan75 = null;
    boolean b76 = strictlySortedSinglyLinkedList0.repOk(set_iPBan75);
    int i77 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 10+ "'", i68.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "10.0.0.100"+ "'", str69.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 1);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test113"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP3 = null;
    boolean b4 = server2.connect(iP3);
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b10 = server2.connect(iP9);
    tp2.Server server11 = new tp2.Server();
    tp2.IP iP12 = null;
    boolean b13 = server11.connect(iP12);
    java.lang.String str14 = server11.toString();
    java.lang.String str15 = server11.toString();
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = server11.connect(iP21);
    boolean b26 = server2.removeException(iP21);
    boolean b27 = singlyLinkedList0.remove(iP21);
    java.lang.String str28 = singlyLinkedList0.toString();
    tp2.IP iP30 = singlyLinkedList0.get((int)(byte)10);
    tp2.Entry entry31 = new tp2.Entry();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i37 = iP36.getFirst();
    entry31.element = iP36;
    tp2.Entry entry39 = entry31.next;
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP41 = null;
    boolean b42 = server40.connect(iP41);
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b48 = server40.connect(iP47);
    java.lang.Integer i49 = iP47.getFirst();
    entry31.element = iP47;
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP55.setThird((java.lang.Integer)1);
    entry31.element = iP55;
    tp2.Entry entry59 = new tp2.Entry();
    java.lang.String str60 = entry59.toString();
    tp2.Entry entry61 = new tp2.Entry();
    java.lang.String str62 = entry61.toString();
    entry59.next = entry61;
    entry31.next = entry59;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList65 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan66 = null;
    boolean b67 = strictlySortedSinglyLinkedList65.contains(iPBan66);
    tp2.Server server68 = new tp2.Server();
    java.lang.String str69 = server68.toString();
    server68.update();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i76 = iP75.getFirst();
    boolean b77 = server68.connect(iP75);
    boolean b78 = strictlySortedSinglyLinkedList65.removeFromIP(iP75);
    java.lang.Integer i79 = iP75.getThird();
    iP75.setFourth((java.lang.Integer)100);
    entry31.element = iP75;
    iP75.setSecond((java.lang.Integer)100);
    boolean b85 = singlyLinkedList0.contains(iP75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "()"+ "'", str28.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i49 + "' != '" + 100+ "'", i49.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "[null]"+ "'", str60.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "[null]"+ "'", str62.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str69.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 100+ "'", i76.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i79 + "' != '" + (-1)+ "'", i79.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test114"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    iP26.setThird((java.lang.Integer)0);
    iP26.setFirst((java.lang.Integer)11);
    java.lang.Integer i32 = iP26.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 0+ "'", i32.equals(0));

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test115"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.Entry entry7 = new tp2.Entry();
    java.lang.String str8 = entry7.toString();
    java.lang.String str9 = entry7.toString();
    tp2.Entry entry10 = entry7.next;
    entry6.next = entry7;
    entry1.next = entry6;
    tp2.Entry entry13 = entry6.next;
    tp2.IP iP14 = entry13.element;
    java.lang.String str15 = entry13.toString();
    tp2.Entry entry16 = new tp2.Entry();
    java.lang.String str17 = entry16.toString();
    java.lang.String str18 = entry16.toString();
    tp2.IP iP19 = entry16.element;
    tp2.Entry entry20 = new tp2.Entry();
    java.lang.String str21 = entry20.toString();
    java.lang.String str22 = entry20.toString();
    tp2.Entry entry23 = entry20.next;
    tp2.IP iP24 = entry20.element;
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    java.lang.String str32 = iP29.toString();
    iP29.setThird((java.lang.Integer)(-1));
    entry20.element = iP29;
    tp2.Node node36 = new tp2.Node();
    tp2.IPBan iPBan37 = null;
    node36.element = iPBan37;
    tp2.SinglyLinkedList singlyLinkedList39 = new tp2.SinglyLinkedList();
    tp2.IP iP41 = singlyLinkedList39.get((int)' ');
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = singlyLinkedList39.remove(iP47);
    tp2.IPBan iPBan53 = new tp2.IPBan(iP47, (java.lang.Long)1L);
    java.lang.String str54 = iPBan53.toString();
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i60 = iP59.getFirst();
    java.lang.String str61 = iP59.toString();
    java.lang.String str62 = iP59.toString();
    iPBan53.setIp(iP59);
    java.lang.Long long64 = iPBan53.getExpires();
    node36.element = iPBan53;
    iPBan53.expires = 1466185870380L;
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    java.lang.Integer i75 = iP72.getFourth();
    iPBan53.ip = iP72;
    entry20.element = iP72;
    tp2.Entry entry78 = entry20.next;
    entry16.next = entry20;
    java.lang.String str80 = entry20.toString();
    java.lang.String str81 = entry20.toString();
    entry13.next = entry20;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[null]"+ "'", str8.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[null]"+ "'", str15.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[null]"+ "'", str17.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[null]"+ "'", str18.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[null]"+ "'", str21.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[null]"+ "'", str22.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str54.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 10+ "'", i60.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "10.0.0.100"+ "'", str61.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L+ "'", long64.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 100+ "'", i75.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "[10.0.0.100]"+ "'", str80.equals("[10.0.0.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "[10.0.0.100]"+ "'", str81.equals("[10.0.0.100]"));

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test116"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    boolean b10 = server0.removeException(iP7);
    tp2.Server server11 = new tp2.Server();
    tp2.IP iP12 = null;
    boolean b13 = server11.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b19 = server11.connect(iP18);
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP21 = null;
    boolean b22 = server20.connect(iP21);
    java.lang.String str23 = server20.toString();
    java.lang.String str24 = server20.toString();
    tp2.Entry entry25 = new tp2.Entry();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i31 = iP30.getFirst();
    java.lang.String str32 = iP30.toString();
    entry25.element = iP30;
    boolean b34 = server20.connect(iP30);
    boolean b35 = server11.removeException(iP30);
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP37 = null;
    boolean b38 = server36.connect(iP37);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b44 = server36.connect(iP43);
    java.lang.Integer i45 = iP43.getFirst();
    boolean b46 = server11.connect(iP43);
    boolean b47 = server0.addException(iP43);
    java.lang.String str48 = server0.toString();
    server0.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP51 = null;
    boolean b52 = server50.connect(iP51);
    java.lang.String str53 = server50.toString();
    java.lang.String str54 = server50.toString();
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    entry55.element = iP60;
    boolean b64 = server50.connect(iP60);
    iP60.setFirst((java.lang.Integer)0);
    tp2.IPBan iPBan68 = new tp2.IPBan(iP60, (java.lang.Long)0L);
    tp2.IP iP69 = iPBan68.getIp();
    tp2.IP iP70 = iPBan68.ip;
    boolean b71 = server0.connect(iP70);
    java.lang.String str72 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 10+ "'", i31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 100+ "'", i45.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"+ "'", str48.equals("Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str53.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str54.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "Server [lastUpdate=1466185919023, exceptions=([100.10.-1.10]), bans={}]"+ "'", str72.equals("Server [lastUpdate=1466185919023, exceptions=([100.10.-1.10]), bans={}]"));

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test117"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = entry0.next;
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b17 = server9.connect(iP16);
    java.lang.Integer i18 = iP16.getFirst();
    entry0.element = iP16;
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP24.setThird((java.lang.Integer)1);
    entry0.element = iP24;
    tp2.IPBan iPBan29 = new tp2.IPBan(iP24, (java.lang.Long)1466185879376L);
    java.lang.Long long30 = iPBan29.expires;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 100+ "'", i18.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1466185879376L+ "'", long30.equals(1466185879376L));

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test118"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    int i7 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    java.lang.String str9 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node10 = new tp2.Node();
    tp2.IPBan iPBan11 = null;
    node10.element = iPBan11;
    tp2.SinglyLinkedList singlyLinkedList13 = new tp2.SinglyLinkedList();
    tp2.IP iP15 = singlyLinkedList13.get((int)' ');
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = singlyLinkedList13.remove(iP21);
    tp2.IPBan iPBan27 = new tp2.IPBan(iP21, (java.lang.Long)1L);
    java.lang.String str28 = iPBan27.toString();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    java.lang.String str36 = iP33.toString();
    iPBan27.setIp(iP33);
    java.lang.Long long38 = iPBan27.getExpires();
    node10.element = iPBan27;
    tp2.IPBan iPBan40 = node10.element;
    strictlySortedSinglyLinkedList0.header = node10;
    strictlySortedSinglyLinkedList0.size = '#';
    java.util.Set<tp2.IPBan> set_iPBan44 = null;
    boolean b45 = strictlySortedSinglyLinkedList0.repOk(set_iPBan44);
    int i46 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{}"+ "'", str8.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "{}"+ "'", str9.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str28.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L+ "'", long38.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 35);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test119"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.contains(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    tp2.Node node14 = new tp2.Node();
    tp2.IPBan iPBan15 = null;
    node14.element = iPBan15;
    tp2.SinglyLinkedList singlyLinkedList17 = new tp2.SinglyLinkedList();
    tp2.IP iP19 = singlyLinkedList17.get((int)' ');
    tp2.Entry entry20 = new tp2.Entry();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    entry20.element = iP25;
    boolean b29 = singlyLinkedList17.remove(iP25);
    tp2.IPBan iPBan31 = new tp2.IPBan(iP25, (java.lang.Long)1L);
    java.lang.String str32 = iPBan31.toString();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i38 = iP37.getFirst();
    java.lang.String str39 = iP37.toString();
    java.lang.String str40 = iP37.toString();
    iPBan31.setIp(iP37);
    java.lang.Long long42 = iPBan31.getExpires();
    node14.element = iPBan31;
    boolean b44 = iP10.equals((java.lang.Object)iPBan31);
    boolean b45 = strictlySortedSinglyLinkedList0.contains(iPBan31);
    tp2.Node node46 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node47 = strictlySortedSinglyLinkedList0.header;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str32.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i38 + "' != '" + 10+ "'", i38.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "10.0.0.100"+ "'", str39.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "10.0.0.100"+ "'", str40.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L+ "'", long42.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node47);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test120"); }


    tp2.Node node0 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList1 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList1.size = 10;
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    server4.update();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP11.setFirst((java.lang.Integer)1);
    java.lang.Integer i14 = iP11.getSecond();
    boolean b15 = server4.addException(iP11);
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = server4.addException(iP21);
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b31 = server4.removeBan(iP30);
    iP30.setThird((java.lang.Integer)0);
    boolean b34 = strictlySortedSinglyLinkedList1.removeFromIP(iP30);
    java.lang.String str35 = strictlySortedSinglyLinkedList1.toString();
    tp2.SinglyLinkedList singlyLinkedList36 = new tp2.SinglyLinkedList();
    tp2.IP iP38 = singlyLinkedList36.get((int)' ');
    tp2.Entry entry39 = new tp2.Entry();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i45 = iP44.getFirst();
    java.lang.String str46 = iP44.toString();
    entry39.element = iP44;
    boolean b48 = singlyLinkedList36.remove(iP44);
    tp2.IPBan iPBan50 = new tp2.IPBan(iP44, (java.lang.Long)1L);
    java.lang.String str51 = iPBan50.toString();
    boolean b52 = strictlySortedSinglyLinkedList1.contains(iPBan50);
    node0.element = iPBan50;
    iPBan50.setExpires((java.lang.Long)1466185871497L);
    java.lang.Long long56 = iPBan50.getExpires();
    java.lang.Long long57 = iPBan50.getExpires();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 0+ "'", i14.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "{}"+ "'", str35.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 10+ "'", i45.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "10.0.0.100"+ "'", str46.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str51.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1466185871497L+ "'", long56.equals(1466185871497L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1466185871497L+ "'", long57.equals(1466185871497L));

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test121"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    boolean b5 = strictlySortedSinglyLinkedList0.isEmpty();
    int i6 = strictlySortedSinglyLinkedList0.size;
    int i7 = strictlySortedSinglyLinkedList0.size;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test122"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.SinglyLinkedList singlyLinkedList16 = new tp2.SinglyLinkedList();
    tp2.IP iP18 = singlyLinkedList16.get((int)' ');
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = singlyLinkedList16.remove(iP24);
    tp2.IPBan iPBan30 = new tp2.IPBan(iP24, (java.lang.Long)1L);
    java.lang.String str31 = iPBan30.toString();
    java.lang.Long long32 = iPBan30.getExpires();
    iPBan30.expires = 0L;
    tp2.IP iP35 = iPBan30.ip;
    node14.element = iPBan30;
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1));
    iPBan30.setIp(iP41);
    iPBan30.setExpires((java.lang.Long)1466185888004L);
    tp2.IP iP45 = iPBan30.ip;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str31.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L+ "'", long32.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP45);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test123"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b24 = server16.connect(iP23);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP26 = null;
    boolean b27 = server25.connect(iP26);
    java.lang.String str28 = server25.toString();
    java.lang.String str29 = server25.toString();
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server25.connect(iP35);
    boolean b40 = server16.removeException(iP35);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP42 = null;
    boolean b43 = server41.connect(iP42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b49 = server41.connect(iP48);
    java.lang.Integer i50 = iP48.getFirst();
    boolean b51 = server16.connect(iP48);
    iPBan14.ip = iP48;
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    java.lang.Integer i60 = iP57.getSecond();
    iPBan14.ip = iP57;
    java.lang.String str62 = iPBan14.toString();
    tp2.IP iP63 = iPBan14.ip;
    tp2.IPBan iPBan65 = new tp2.IPBan(iP63, (java.lang.Long)1466185900385L);
    tp2.Entry entry66 = new tp2.Entry();
    tp2.Entry entry67 = new tp2.Entry();
    java.lang.String str68 = entry67.toString();
    java.lang.String str69 = entry67.toString();
    tp2.Entry entry70 = entry67.next;
    entry66.next = entry67;
    tp2.Entry entry72 = new tp2.Entry();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i78 = iP77.getFirst();
    entry72.element = iP77;
    tp2.Entry entry80 = entry72.next;
    tp2.Server server81 = new tp2.Server();
    tp2.IP iP82 = null;
    boolean b83 = server81.connect(iP82);
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b89 = server81.connect(iP88);
    java.lang.Integer i90 = iP88.getFirst();
    entry72.element = iP88;
    entry67.next = entry72;
    tp2.Entry entry93 = new tp2.Entry();
    java.lang.String str94 = entry93.toString();
    java.lang.String str95 = entry93.toString();
    tp2.Entry entry96 = entry93.next;
    entry72.next = entry96;
    tp2.IP iP98 = entry72.element;
    iPBan65.setIp(iP98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 100+ "'", i50.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 0+ "'", i60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "IPBan [ip=1.0.0.100, expires=1]"+ "'", str62.equals("IPBan [ip=1.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "[null]"+ "'", str68.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "[null]"+ "'", str69.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i78 + "' != '" + 10+ "'", i78.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i90 + "' != '" + 100+ "'", i90.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "[null]"+ "'", str94.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "[null]"+ "'", str95.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP98);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test124"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    tp2.Server server3 = new tp2.Server();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP8.setSecond((java.lang.Integer)(-1));
    boolean b11 = server3.addException(iP8);
    tp2.Server server12 = new tp2.Server();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setSecond((java.lang.Integer)(-1));
    boolean b20 = server12.addException(iP17);
    tp2.SinglyLinkedList singlyLinkedList21 = new tp2.SinglyLinkedList();
    int i22 = singlyLinkedList21.getSize();
    java.lang.String str23 = singlyLinkedList21.toString();
    int i24 = singlyLinkedList21.getSize();
    java.util.Set<tp2.IP> set_iP25 = null;
    boolean b26 = singlyLinkedList21.repOk(set_iP25);
    int i27 = singlyLinkedList21.getSize();
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    entry28.element = iP33;
    tp2.Entry entry36 = entry28.next;
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b45 = server37.connect(iP44);
    java.lang.Integer i46 = iP44.getFirst();
    entry28.element = iP44;
    iP44.setFourth((java.lang.Integer)100);
    java.lang.String str50 = iP44.toString();
    singlyLinkedList21.add(iP44);
    iP44.setFirst((java.lang.Integer)1);
    boolean b54 = server12.removeException(iP44);
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)11, (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)35);
    boolean b60 = server12.connect(iP59);
    boolean b61 = server3.removeException(iP59);
    boolean b62 = singlyLinkedList0.contains(iP59);
    tp2.IP iP64 = singlyLinkedList0.get(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "()"+ "'", str23.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 100+ "'", i46.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "100.10.-1.100"+ "'", str50.equals("100.10.-1.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP64);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test125"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    boolean b9 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    int i11 = strictlySortedSinglyLinkedList10.getSize();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList10.add(iPBan12);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList14 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node15 = strictlySortedSinglyLinkedList14.header;
    strictlySortedSinglyLinkedList10.header = node15;
    strictlySortedSinglyLinkedList10.size = 0;
    int i19 = strictlySortedSinglyLinkedList10.size;
    tp2.Node node20 = strictlySortedSinglyLinkedList10.header;
    tp2.Node node21 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList0.header = node21;
    tp2.Node node23 = strictlySortedSinglyLinkedList0.header;
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    tp2.IPBan iPBan30 = new tp2.IPBan(iP28, (java.lang.Long)(-1L));
    node23.element = iPBan30;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node23);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test126"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    boolean b10 = server0.removeException(iP7);
    tp2.Server server11 = new tp2.Server();
    tp2.IP iP12 = null;
    boolean b13 = server11.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b19 = server11.connect(iP18);
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP21 = null;
    boolean b22 = server20.connect(iP21);
    java.lang.String str23 = server20.toString();
    java.lang.String str24 = server20.toString();
    tp2.Entry entry25 = new tp2.Entry();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i31 = iP30.getFirst();
    java.lang.String str32 = iP30.toString();
    entry25.element = iP30;
    boolean b34 = server20.connect(iP30);
    boolean b35 = server11.removeException(iP30);
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP37 = null;
    boolean b38 = server36.connect(iP37);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b44 = server36.connect(iP43);
    java.lang.Integer i45 = iP43.getFirst();
    boolean b46 = server11.connect(iP43);
    boolean b47 = server0.addException(iP43);
    tp2.Entry entry48 = new tp2.Entry();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i54 = iP53.getFirst();
    java.lang.String str55 = iP53.toString();
    entry48.element = iP53;
    boolean b57 = server0.addException(iP53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 10+ "'", i31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 100+ "'", i45.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "10.0.0.100"+ "'", str55.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test127"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    tp2.Server server4 = new tp2.Server();
    tp2.IP iP5 = null;
    boolean b6 = server4.connect(iP5);
    java.lang.String str7 = server4.toString();
    java.lang.String str8 = server4.toString();
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    java.lang.String str16 = iP14.toString();
    entry9.element = iP14;
    boolean b18 = server4.connect(iP14);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    java.lang.String str26 = iP23.toString();
    boolean b27 = server4.removeBan(iP23);
    iP23.setFirst((java.lang.Integer)10);
    boolean b30 = server0.removeException(iP23);
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP32 = null;
    boolean b33 = server31.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b39 = server31.connect(iP38);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList40 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList40.size = 10;
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    server43.update();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP50.setFirst((java.lang.Integer)1);
    java.lang.Integer i53 = iP50.getSecond();
    boolean b54 = server43.addException(iP50);
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    entry55.element = iP60;
    boolean b64 = server43.addException(iP60);
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b70 = server43.removeBan(iP69);
    iP69.setThird((java.lang.Integer)0);
    boolean b73 = strictlySortedSinglyLinkedList40.removeFromIP(iP69);
    tp2.Server server74 = new tp2.Server();
    java.lang.String str75 = server74.toString();
    server74.update();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP81.setFirst((java.lang.Integer)1);
    java.lang.Integer i84 = iP81.getSecond();
    boolean b85 = server74.addException(iP81);
    boolean b86 = strictlySortedSinglyLinkedList40.removeFromIP(iP81);
    boolean b87 = server31.connect(iP81);
    boolean b88 = server0.connect(iP81);
    java.lang.Integer i89 = iP81.getFourth();
    tp2.IPBan iPBan91 = new tp2.IPBan(iP81, (java.lang.Long)1466185876278L);
    tp2.IPBan iPBan93 = new tp2.IPBan(iP81, (java.lang.Long)1466185902893L);
    tp2.IP iP94 = iPBan93.ip;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 0+ "'", i53.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str75.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i84 + "' != '" + 0+ "'", i84.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i89 + "' != '" + 100+ "'", i89.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP94);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test128"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    int i34 = strictlySortedSinglyLinkedList0.getSize();
    int i35 = strictlySortedSinglyLinkedList0.size;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList36 = new tp2.StrictlySortedSinglyLinkedList();
    int i37 = strictlySortedSinglyLinkedList36.getSize();
    tp2.IPBan iPBan38 = null;
    boolean b39 = strictlySortedSinglyLinkedList36.contains(iPBan38);
    int i40 = strictlySortedSinglyLinkedList36.getSize();
    java.util.Set<tp2.IPBan> set_iPBan41 = null;
    boolean b42 = strictlySortedSinglyLinkedList36.repOk(set_iPBan41);
    tp2.Node node43 = strictlySortedSinglyLinkedList36.header;
    strictlySortedSinglyLinkedList0.header = node43;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node43);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test129"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    int i3 = singlyLinkedList0.getSize();
    boolean b4 = singlyLinkedList0.isEmpty();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList5.size = 10;
    tp2.Server server8 = new tp2.Server();
    java.lang.String str9 = server8.toString();
    server8.update();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP15.setFirst((java.lang.Integer)1);
    java.lang.Integer i18 = iP15.getSecond();
    boolean b19 = server8.addException(iP15);
    tp2.Entry entry20 = new tp2.Entry();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    entry20.element = iP25;
    boolean b29 = server8.addException(iP25);
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b35 = server8.removeBan(iP34);
    iP34.setThird((java.lang.Integer)0);
    boolean b38 = strictlySortedSinglyLinkedList5.removeFromIP(iP34);
    java.lang.String str39 = strictlySortedSinglyLinkedList5.toString();
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    tp2.IP iP42 = singlyLinkedList40.get((int)' ');
    tp2.Entry entry43 = new tp2.Entry();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i49 = iP48.getFirst();
    java.lang.String str50 = iP48.toString();
    entry43.element = iP48;
    boolean b52 = singlyLinkedList40.remove(iP48);
    tp2.IPBan iPBan54 = new tp2.IPBan(iP48, (java.lang.Long)1L);
    java.lang.String str55 = iPBan54.toString();
    boolean b56 = strictlySortedSinglyLinkedList5.contains(iPBan54);
    iPBan54.setExpires((java.lang.Long)1466185873141L);
    iPBan54.expires = 1466185880002L;
    iPBan54.setExpires((java.lang.Long)1466185883774L);
    tp2.Entry entry63 = new tp2.Entry();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i69 = iP68.getFirst();
    entry63.element = iP68;
    tp2.Entry entry71 = entry63.next;
    tp2.Server server72 = new tp2.Server();
    tp2.IP iP73 = null;
    boolean b74 = server72.connect(iP73);
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b80 = server72.connect(iP79);
    java.lang.Integer i81 = iP79.getFirst();
    entry63.element = iP79;
    iP79.setFourth((java.lang.Integer)100);
    iP79.setSecond((java.lang.Integer)1);
    iPBan54.ip = iP79;
    singlyLinkedList0.add(iP79);
    boolean b89 = singlyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 0+ "'", i18.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "{}"+ "'", str39.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i49 + "' != '" + 10+ "'", i49.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "10.0.0.100"+ "'", str50.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str55.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i69 + "' != '" + 10+ "'", i69.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i81 + "' != '" + 100+ "'", i81.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test130"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b24 = server16.connect(iP23);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP26 = null;
    boolean b27 = server25.connect(iP26);
    java.lang.String str28 = server25.toString();
    java.lang.String str29 = server25.toString();
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server25.connect(iP35);
    boolean b40 = server16.removeException(iP35);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP42 = null;
    boolean b43 = server41.connect(iP42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b49 = server41.connect(iP48);
    java.lang.Integer i50 = iP48.getFirst();
    boolean b51 = server16.connect(iP48);
    iPBan14.ip = iP48;
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP54 = null;
    boolean b55 = server53.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b61 = server53.connect(iP60);
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP63 = null;
    boolean b64 = server62.connect(iP63);
    java.lang.String str65 = server62.toString();
    java.lang.String str66 = server62.toString();
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = server62.connect(iP72);
    boolean b77 = server53.removeException(iP72);
    tp2.Server server78 = new tp2.Server();
    tp2.IP iP79 = null;
    boolean b80 = server78.connect(iP79);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b86 = server78.connect(iP85);
    java.lang.Integer i87 = iP85.getFirst();
    boolean b88 = server53.connect(iP85);
    iPBan14.setIp(iP85);
    java.lang.Long long90 = iPBan14.expires;
    java.lang.Long long91 = iPBan14.expires;
    tp2.IP iP92 = iPBan14.ip;
    tp2.IP iP93 = iPBan14.ip;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 100+ "'", i50.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i87 + "' != '" + 100+ "'", i87.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1L+ "'", long90.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long91 + "' != '" + 1L+ "'", long91.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP93);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test131"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    tp2.SinglyLinkedList singlyLinkedList4 = new tp2.SinglyLinkedList();
    tp2.IP iP6 = singlyLinkedList4.get((int)' ');
    tp2.Entry entry7 = new tp2.Entry();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i13 = iP12.getFirst();
    java.lang.String str14 = iP12.toString();
    entry7.element = iP12;
    boolean b16 = singlyLinkedList4.remove(iP12);
    tp2.IPBan iPBan18 = new tp2.IPBan(iP12, (java.lang.Long)1L);
    tp2.IP iP19 = iPBan18.ip;
    boolean b20 = server0.removeException(iP19);
    tp2.Server server21 = new tp2.Server();
    tp2.IP iP22 = null;
    boolean b23 = server21.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP28.setFirst((java.lang.Integer)1);
    boolean b31 = server21.removeException(iP28);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList32 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan33 = null;
    boolean b34 = strictlySortedSinglyLinkedList32.contains(iPBan33);
    int i35 = strictlySortedSinglyLinkedList32.getSize();
    tp2.IPBan iPBan37 = strictlySortedSinglyLinkedList32.get((int)'#');
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP42.setSecond((java.lang.Integer)(-1));
    boolean b45 = strictlySortedSinglyLinkedList32.removeFromIP(iP42);
    boolean b46 = server21.removeBan(iP42);
    boolean b47 = server0.addException(iP42);
    java.lang.String str48 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 10+ "'", i13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=null, exceptions=([10.-1.0.100]), bans={}]"+ "'", str48.equals("Server [lastUpdate=null, exceptions=([10.-1.0.100]), bans={}]"));

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test132"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.IP iP9 = entry0.element;
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP11 = null;
    boolean b12 = server10.connect(iP11);
    java.lang.String str13 = server10.toString();
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    server14.update();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP21.setFirst((java.lang.Integer)1);
    java.lang.Integer i24 = iP21.getSecond();
    boolean b25 = server14.addException(iP21);
    boolean b26 = server10.addException(iP21);
    entry0.element = iP21;
    tp2.IP iP28 = entry0.element;
    tp2.IP iP29 = entry0.element;
    java.lang.String str30 = entry0.toString();
    tp2.IP iP31 = entry0.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 0+ "'", i24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[1.0.0.100]"+ "'", str30.equals("[1.0.0.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP31);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test133"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    int i3 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    boolean b6 = singlyLinkedList0.isEmpty();
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP8 = null;
    boolean b9 = server7.connect(iP8);
    java.lang.String str10 = server7.toString();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    server11.update();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP18.setFirst((java.lang.Integer)1);
    java.lang.Integer i21 = iP18.getSecond();
    boolean b22 = server11.addException(iP18);
    boolean b23 = server7.addException(iP18);
    java.lang.Integer i24 = iP18.getSecond();
    boolean b25 = singlyLinkedList0.contains(iP18);
    java.lang.Integer i26 = iP18.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 0+ "'", i21.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 0+ "'", i24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 100+ "'", i26.equals(100));

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test134"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.getIp();
    tp2.IP iP20 = iPBan14.ip;
    tp2.IP iP21 = iPBan14.getIp();
    iPBan14.expires = 1466185876788L;
    java.lang.Long long24 = iPBan14.getExpires();
    java.lang.Long long25 = iPBan14.expires;
    tp2.SinglyLinkedList singlyLinkedList26 = new tp2.SinglyLinkedList();
    int i27 = singlyLinkedList26.getSize();
    tp2.SinglyLinkedList singlyLinkedList28 = new tp2.SinglyLinkedList();
    tp2.IP iP30 = singlyLinkedList28.get((int)' ');
    tp2.Entry entry31 = new tp2.Entry();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i37 = iP36.getFirst();
    java.lang.String str38 = iP36.toString();
    entry31.element = iP36;
    boolean b40 = singlyLinkedList28.remove(iP36);
    tp2.IP iP42 = singlyLinkedList28.get((int)'4');
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    boolean b50 = singlyLinkedList28.contains(iP47);
    boolean b51 = singlyLinkedList26.remove(iP47);
    iPBan14.ip = iP47;
    iP47.setSecond((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1466185876788L+ "'", long24.equals(1466185876788L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1466185876788L+ "'", long25.equals(1466185876788L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test135"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Entry entry9 = new tp2.Entry();
    tp2.Entry entry10 = new tp2.Entry();
    java.lang.String str11 = entry10.toString();
    java.lang.String str12 = entry10.toString();
    tp2.Entry entry13 = entry10.next;
    entry9.next = entry10;
    tp2.IP iP15 = entry9.element;
    entry0.next = entry9;
    java.lang.String str17 = entry0.toString();
    tp2.IP iP18 = entry0.element;
    java.lang.Integer i19 = iP18.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[null]"+ "'", str11.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[null]"+ "'", str12.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[10.0.0.100]"+ "'", str17.equals("[10.0.0.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 0+ "'", i19.equals(0));

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test136"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    boolean b9 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node10 = strictlySortedSinglyLinkedList0.header;
    boolean b11 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node12 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node13 = node12.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node13);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test137"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get((int)' ');
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    boolean b17 = singlyLinkedList5.remove(iP13);
    tp2.IPBan iPBan19 = new tp2.IPBan(iP13, (java.lang.Long)1L);
    java.lang.String str20 = iPBan19.toString();
    iPBan19.setExpires((java.lang.Long)0L);
    java.lang.Long long23 = iPBan19.expires;
    tp2.IP iP24 = iPBan19.ip;
    java.lang.String str25 = iPBan19.toString();
    boolean b26 = iP4.equals((java.lang.Object)iPBan19);
    java.lang.Integer i27 = iP4.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L+ "'", long23.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str25.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test138"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    int i7 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Node node8 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList9.size = 10;
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    server12.update();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP19.setFirst((java.lang.Integer)1);
    java.lang.Integer i22 = iP19.getSecond();
    boolean b23 = server12.addException(iP19);
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = server12.addException(iP29);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b39 = server12.removeBan(iP38);
    iP38.setThird((java.lang.Integer)0);
    boolean b42 = strictlySortedSinglyLinkedList9.removeFromIP(iP38);
    java.lang.String str43 = strictlySortedSinglyLinkedList9.toString();
    tp2.SinglyLinkedList singlyLinkedList44 = new tp2.SinglyLinkedList();
    tp2.IP iP46 = singlyLinkedList44.get((int)' ');
    tp2.Entry entry47 = new tp2.Entry();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    entry47.element = iP52;
    boolean b56 = singlyLinkedList44.remove(iP52);
    tp2.IPBan iPBan58 = new tp2.IPBan(iP52, (java.lang.Long)1L);
    java.lang.String str59 = iPBan58.toString();
    boolean b60 = strictlySortedSinglyLinkedList9.contains(iPBan58);
    node8.element = iPBan58;
    iPBan58.setExpires((java.lang.Long)1466185871497L);
    tp2.IP iP64 = iPBan58.getIp();
    tp2.IPBan iPBan66 = new tp2.IPBan(iP64, (java.lang.Long)1466185875518L);
    boolean b67 = strictlySortedSinglyLinkedList0.contains(iPBan66);
    tp2.Node node68 = strictlySortedSinglyLinkedList0.header;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 0+ "'", i22.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "{}"+ "'", str43.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str59.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node68);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test139"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP58.setSecond((java.lang.Integer)1);
    boolean b61 = server0.removeBan(iP58);
    boolean b63 = iP58.equals((java.lang.Object)(byte)10);
    tp2.IPBan iPBan65 = new tp2.IPBan(iP58, (java.lang.Long)1466185873844L);
    tp2.IP iP66 = null;
    iPBan65.ip = iP66;
    tp2.IP iP68 = iPBan65.ip;
    java.lang.String str69 = iPBan65.toString();
    tp2.IP iP70 = iPBan65.ip;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "IPBan [ip=null, expires=1466185873844]"+ "'", str69.equals("IPBan [ip=null, expires=1466185873844]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP70);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test140"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    tp2.IPBan iPBan6 = new tp2.IPBan(iP4, (java.lang.Long)(-1L));
    tp2.IP iP7 = iPBan6.getIp();
    java.lang.String str8 = iPBan6.toString();
    java.lang.Long long9 = iPBan6.getExpires();
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b16 = server10.addException(iP15);
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.Integer i23 = iP21.getSecond();
    boolean b24 = server10.addBan(iP21);
    iPBan6.setIp(iP21);
    java.lang.String str26 = iPBan6.toString();
    tp2.SinglyLinkedList singlyLinkedList27 = new tp2.SinglyLinkedList();
    tp2.IP iP29 = singlyLinkedList27.get((int)' ');
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = singlyLinkedList27.remove(iP35);
    tp2.IP iP41 = singlyLinkedList27.get((int)'4');
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i47 = iP46.getFirst();
    java.lang.String str48 = iP46.toString();
    boolean b49 = singlyLinkedList27.contains(iP46);
    tp2.SinglyLinkedList singlyLinkedList50 = new tp2.SinglyLinkedList();
    int i51 = singlyLinkedList50.getSize();
    java.lang.String str52 = singlyLinkedList50.toString();
    int i53 = singlyLinkedList50.getSize();
    java.util.Set<tp2.IP> set_iP54 = null;
    boolean b55 = singlyLinkedList50.repOk(set_iP54);
    int i56 = singlyLinkedList50.getSize();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b62 = singlyLinkedList50.remove(iP61);
    singlyLinkedList27.add(iP61);
    java.lang.Integer i64 = iP61.getThird();
    iPBan6.ip = iP61;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "IPBan [ip=10.100.-1.1, expires=-1]"+ "'", str8.equals("IPBan [ip=10.100.-1.1, expires=-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L)+ "'", long9.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 100+ "'", i22.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 10+ "'", i23.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "IPBan [ip=100.10.-1.10, expires=-1]"+ "'", str26.equals("IPBan [ip=100.10.-1.10, expires=-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 10+ "'", i47.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "10.0.0.100"+ "'", str48.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "()"+ "'", str52.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 1+ "'", i64.equals(1));

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test141"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b6 = server0.addException(iP5);
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    server7.update();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP14.setFirst((java.lang.Integer)1);
    java.lang.Integer i17 = iP14.getSecond();
    boolean b18 = server7.addException(iP14);
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = server7.addException(iP24);
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b34 = server7.removeBan(iP33);
    iP33.setThird((java.lang.Integer)0);
    boolean b38 = iP33.equals((java.lang.Object)'4');
    boolean b39 = server0.removeException(iP33);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b46 = server40.addException(iP45);
    java.lang.String str47 = server40.toString();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP49 = null;
    boolean b50 = server48.connect(iP49);
    java.lang.String str51 = server48.toString();
    java.lang.String str52 = server48.toString();
    tp2.IP iP53 = null;
    boolean b54 = server48.removeException(iP53);
    tp2.RealTime realTime55 = new tp2.RealTime();
    long long56 = realTime55.getCurrentTime();
    long long57 = realTime55.getCurrentTime();
    server48.setTime((tp2.ITime)realTime55);
    server40.setTime((tp2.ITime)realTime55);
    server0.setTime((tp2.ITime)realTime55);
    tp2.IP iP61 = null;
    boolean b62 = server0.removeException(iP61);
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b69 = server63.addException(iP68);
    java.lang.String str70 = server63.toString();
    tp2.Server server71 = new tp2.Server();
    tp2.IP iP72 = null;
    boolean b73 = server71.connect(iP72);
    java.lang.String str74 = server71.toString();
    java.lang.String str75 = server71.toString();
    tp2.IP iP76 = null;
    boolean b77 = server71.removeException(iP76);
    tp2.RealTime realTime78 = new tp2.RealTime();
    long long79 = realTime78.getCurrentTime();
    long long80 = realTime78.getCurrentTime();
    server71.setTime((tp2.ITime)realTime78);
    server63.setTime((tp2.ITime)realTime78);
    server0.setTime((tp2.ITime)realTime78);
    long long84 = realTime78.getCurrentTime();
    long long85 = realTime78.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 0+ "'", i17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"+ "'", str47.equals("Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str52.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long56 == 1466185919598L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long57 == 1466185919599L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"+ "'", str70.equals("Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str74.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str75.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long79 == 1466185919600L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long80 == 1466185919600L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long84 == 1466185919601L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long85 == 1466185919601L);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test142"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    tp2.IPBan iPBan53 = strictlySortedSinglyLinkedList0.get((int)(byte)100);
    int i54 = strictlySortedSinglyLinkedList0.size;
    boolean b55 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.IPBan iPBan57 = strictlySortedSinglyLinkedList0.get((int)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan57);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test143"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = server0.connect(iP10);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    java.lang.String str22 = iP19.toString();
    boolean b23 = server0.removeBan(iP19);
    server0.update();
    tp2.SinglyLinkedList singlyLinkedList25 = new tp2.SinglyLinkedList();
    tp2.IP iP27 = singlyLinkedList25.get(1);
    tp2.SinglyLinkedList singlyLinkedList28 = new tp2.SinglyLinkedList();
    tp2.IP iP30 = singlyLinkedList28.get((int)' ');
    tp2.Entry entry31 = new tp2.Entry();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i37 = iP36.getFirst();
    java.lang.String str38 = iP36.toString();
    entry31.element = iP36;
    boolean b40 = singlyLinkedList28.remove(iP36);
    boolean b41 = singlyLinkedList25.contains(iP36);
    tp2.Server server42 = new tp2.Server();
    java.lang.String str43 = server42.toString();
    server42.update();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP49.setFirst((java.lang.Integer)1);
    java.lang.Integer i52 = iP49.getSecond();
    boolean b53 = server42.addException(iP49);
    tp2.Entry entry54 = new tp2.Entry();
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i60 = iP59.getFirst();
    java.lang.String str61 = iP59.toString();
    entry54.element = iP59;
    boolean b63 = server42.addException(iP59);
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b69 = server42.removeBan(iP68);
    boolean b70 = iP36.equals((java.lang.Object)server42);
    boolean b71 = server0.removeException(iP36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str43.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i52 + "' != '" + 0+ "'", i52.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 10+ "'", i60.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "10.0.0.100"+ "'", str61.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test144"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    boolean b39 = iP5.equals((java.lang.Object)iPBan26);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    int i41 = singlyLinkedList40.getSize();
    java.lang.String str42 = singlyLinkedList40.toString();
    int i43 = singlyLinkedList40.getSize();
    java.util.Set<tp2.IP> set_iP44 = null;
    boolean b45 = singlyLinkedList40.repOk(set_iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b51 = singlyLinkedList40.remove(iP50);
    iPBan26.setIp(iP50);
    iPBan26.setExpires((java.lang.Long)1466185870380L);
    iPBan26.setExpires((java.lang.Long)1466185871428L);
    iPBan26.expires = 1466185873844L;
    iPBan26.expires = 1466185880002L;
    iPBan26.expires = 1466185905801L;
    java.lang.String str63 = iPBan26.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "()"+ "'", str42.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "IPBan [ip=100.10.-1.10, expires=1466185905801]"+ "'", str63.equals("IPBan [ip=100.10.-1.10, expires=1466185905801]"));

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test145"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    java.util.Set<tp2.IPBan> set_iPBan5 = null;
    boolean b6 = strictlySortedSinglyLinkedList0.repOk(set_iPBan5);
    tp2.IPBan iPBan8 = strictlySortedSinglyLinkedList0.get((int)(short)0);
    tp2.Node node9 = strictlySortedSinglyLinkedList0.header;
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP11 = null;
    boolean b12 = server10.connect(iP11);
    java.lang.String str13 = server10.toString();
    java.lang.String str14 = server10.toString();
    tp2.SinglyLinkedList singlyLinkedList15 = new tp2.SinglyLinkedList();
    tp2.IP iP17 = singlyLinkedList15.get((int)' ');
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = singlyLinkedList15.remove(iP23);
    tp2.IPBan iPBan29 = new tp2.IPBan(iP23, (java.lang.Long)1L);
    java.lang.String str30 = iPBan29.toString();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    java.lang.String str38 = iP35.toString();
    iPBan29.setIp(iP35);
    java.lang.Integer i40 = iP35.getFirst();
    boolean b41 = server10.removeException(iP35);
    iP35.setThird((java.lang.Integer)(-1));
    iP35.setSecond((java.lang.Integer)11);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP35);
    java.util.Set<tp2.IPBan> set_iPBan47 = null;
    boolean b48 = strictlySortedSinglyLinkedList0.repOk(set_iPBan47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str30.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test146"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    java.lang.String str12 = server9.toString();
    java.lang.String str13 = server9.toString();
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    entry14.element = iP19;
    boolean b23 = server9.connect(iP19);
    boolean b24 = server0.removeException(iP19);
    java.lang.Integer i25 = iP19.getFourth();
    iP19.setFirst((java.lang.Integer)11);
    tp2.IPBan iPBan29 = new tp2.IPBan(iP19, (java.lang.Long)1466185890280L);
    tp2.IPBan iPBan31 = new tp2.IPBan(iP19, (java.lang.Long)0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 100+ "'", i25.equals(100));

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test147"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    tp2.IPBan iPBan6 = new tp2.IPBan(iP4, (java.lang.Long)(-1L));
    tp2.IP iP7 = iPBan6.getIp();
    java.lang.String str8 = iPBan6.toString();
    java.lang.Long long9 = iPBan6.getExpires();
    java.lang.Long long10 = iPBan6.expires;
    java.lang.String str11 = iPBan6.toString();
    tp2.IP iP12 = iPBan6.ip;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "IPBan [ip=10.100.-1.1, expires=-1]"+ "'", str8.equals("IPBan [ip=10.100.-1.1, expires=-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L)+ "'", long9.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L)+ "'", long10.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "IPBan [ip=10.100.-1.1, expires=-1]"+ "'", str11.equals("IPBan [ip=10.100.-1.1, expires=-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP12);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test148"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    server16.update();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP23.setFirst((java.lang.Integer)1);
    java.lang.Integer i26 = iP23.getSecond();
    boolean b27 = server16.addException(iP23);
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = server16.addException(iP33);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b43 = server16.removeBan(iP42);
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP45 = null;
    boolean b46 = server44.connect(iP45);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b52 = server44.connect(iP51);
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP54 = null;
    boolean b55 = server53.connect(iP54);
    java.lang.String str56 = server53.toString();
    java.lang.String str57 = server53.toString();
    tp2.Entry entry58 = new tp2.Entry();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i64 = iP63.getFirst();
    java.lang.String str65 = iP63.toString();
    entry58.element = iP63;
    boolean b67 = server53.connect(iP63);
    boolean b68 = server44.removeException(iP63);
    boolean b69 = server16.connect(iP63);
    java.lang.Integer i70 = iP63.getFirst();
    boolean b71 = strictlySortedSinglyLinkedList0.removeFromIP(iP63);
    strictlySortedSinglyLinkedList0.size = (byte)100;
    java.lang.String str74 = strictlySortedSinglyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList75 = new tp2.SinglyLinkedList();
    tp2.IP iP77 = singlyLinkedList75.get((int)' ');
    tp2.Entry entry78 = new tp2.Entry();
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i84 = iP83.getFirst();
    java.lang.String str85 = iP83.toString();
    entry78.element = iP83;
    boolean b87 = singlyLinkedList75.remove(iP83);
    tp2.IPBan iPBan89 = new tp2.IPBan(iP83, (java.lang.Long)1L);
    java.lang.String str90 = iPBan89.toString();
    iPBan89.setExpires((java.lang.Long)0L);
    java.lang.Long long93 = iPBan89.expires;
    tp2.IP iP94 = iPBan89.ip;
    java.lang.Long long95 = iPBan89.getExpires();
    java.lang.String str96 = iPBan89.toString();
    boolean b97 = strictlySortedSinglyLinkedList0.add(iPBan89);
    java.lang.String str98 = strictlySortedSinglyLinkedList0.toString();
    int i99 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str57.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 10+ "'", i64.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "10.0.0.100"+ "'", str65.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 10+ "'", i70.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "{}"+ "'", str74.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i84 + "' != '" + 10+ "'", i84.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "10.0.0.100"+ "'", str85.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str90.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L+ "'", long93.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L+ "'", long95.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str96 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str96.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str98 + "' != '" + "{[IPBan [ip=10.0.0.100, expires=0]]}"+ "'", str98.equals("{[IPBan [ip=10.0.0.100, expires=0]]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i99 == 101);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test149"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.contains(iPBan2);
    tp2.SinglyLinkedList singlyLinkedList4 = new tp2.SinglyLinkedList();
    tp2.IP iP6 = singlyLinkedList4.get((int)' ');
    tp2.Entry entry7 = new tp2.Entry();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i13 = iP12.getFirst();
    java.lang.String str14 = iP12.toString();
    entry7.element = iP12;
    boolean b16 = singlyLinkedList4.remove(iP12);
    tp2.IPBan iPBan18 = new tp2.IPBan(iP12, (java.lang.Long)1L);
    java.lang.String str19 = iPBan18.toString();
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP21 = null;
    boolean b22 = server20.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b28 = server20.connect(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP30 = null;
    boolean b31 = server29.connect(iP30);
    java.lang.String str32 = server29.toString();
    java.lang.String str33 = server29.toString();
    tp2.Entry entry34 = new tp2.Entry();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    entry34.element = iP39;
    boolean b43 = server29.connect(iP39);
    boolean b44 = server20.removeException(iP39);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP46 = null;
    boolean b47 = server45.connect(iP46);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b53 = server45.connect(iP52);
    java.lang.Integer i54 = iP52.getFirst();
    boolean b55 = server20.connect(iP52);
    iPBan18.ip = iP52;
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP58 = null;
    boolean b59 = server57.connect(iP58);
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b65 = server57.connect(iP64);
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP67 = null;
    boolean b68 = server66.connect(iP67);
    java.lang.String str69 = server66.toString();
    java.lang.String str70 = server66.toString();
    tp2.Entry entry71 = new tp2.Entry();
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i77 = iP76.getFirst();
    java.lang.String str78 = iP76.toString();
    entry71.element = iP76;
    boolean b80 = server66.connect(iP76);
    boolean b81 = server57.removeException(iP76);
    tp2.Server server82 = new tp2.Server();
    tp2.IP iP83 = null;
    boolean b84 = server82.connect(iP83);
    tp2.IP iP89 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b90 = server82.connect(iP89);
    java.lang.Integer i91 = iP89.getFirst();
    boolean b92 = server57.connect(iP89);
    iPBan18.setIp(iP89);
    boolean b94 = strictlySortedSinglyLinkedList0.add(iPBan18);
    tp2.IPBan iPBan96 = strictlySortedSinglyLinkedList0.get((-1));
    tp2.IPBan iPBan98 = strictlySortedSinglyLinkedList0.get((int)(short)100);
    int i99 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 10+ "'", i13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str19.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 100+ "'", i54.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str69.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str70.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i77 + "' != '" + 10+ "'", i77.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "10.0.0.100"+ "'", str78.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i91 + "' != '" + 100+ "'", i91.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i99 == 1);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test150"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.Entry entry7 = new tp2.Entry();
    java.lang.String str8 = entry7.toString();
    java.lang.String str9 = entry7.toString();
    tp2.Entry entry10 = entry7.next;
    entry6.next = entry7;
    entry1.next = entry6;
    java.lang.String str13 = entry1.toString();
    tp2.Entry entry14 = entry1.next;
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFourth();
    entry14.element = iP19;
    tp2.Entry entry22 = new tp2.Entry();
    java.lang.String str23 = entry22.toString();
    java.lang.String str24 = entry22.toString();
    tp2.Entry entry25 = entry22.next;
    entry14.next = entry22;
    tp2.SinglyLinkedList singlyLinkedList27 = new tp2.SinglyLinkedList();
    tp2.IP iP29 = singlyLinkedList27.get((int)' ');
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = singlyLinkedList27.remove(iP35);
    tp2.IPBan iPBan41 = new tp2.IPBan(iP35, (java.lang.Long)1L);
    tp2.IP iP42 = iPBan41.ip;
    java.lang.Integer i43 = iP42.getSecond();
    java.lang.Integer i44 = iP42.getThird();
    entry14.element = iP42;
    java.lang.String str46 = iP42.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[null]"+ "'", str8.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[null]"+ "'", str13.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 100+ "'", i20.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[null]"+ "'", str23.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[null]"+ "'", str24.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 0+ "'", i43.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "10.0.0.100"+ "'", str46.equals("10.0.0.100"));

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test151"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get(1);
    tp2.IP iP4 = singlyLinkedList0.get(0);
    boolean b5 = singlyLinkedList0.isEmpty();
    java.lang.String str6 = singlyLinkedList0.toString();
    boolean b7 = singlyLinkedList0.isEmpty();
    boolean b8 = singlyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "()"+ "'", str6.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test152"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b7 = strictlySortedSinglyLinkedList0.containsIP(iP6);
    java.util.Set<tp2.IPBan> set_iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList0.repOk(set_iPBan8);
    tp2.Node node10 = strictlySortedSinglyLinkedList0.header;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node10);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test153"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    int i13 = singlyLinkedList12.getSize();
    tp2.SinglyLinkedList singlyLinkedList14 = new tp2.SinglyLinkedList();
    tp2.IP iP16 = singlyLinkedList14.get((int)' ');
    tp2.Entry entry17 = new tp2.Entry();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i23 = iP22.getFirst();
    java.lang.String str24 = iP22.toString();
    entry17.element = iP22;
    boolean b26 = singlyLinkedList14.remove(iP22);
    tp2.IP iP28 = singlyLinkedList14.get((int)'4');
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    boolean b36 = singlyLinkedList14.contains(iP33);
    boolean b37 = singlyLinkedList12.remove(iP33);
    boolean b38 = server0.addException(iP33);
    tp2.Server server39 = new tp2.Server();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP44.setSecond((java.lang.Integer)(-1));
    boolean b47 = server39.addException(iP44);
    iP44.setFourth((java.lang.Integer)0);
    boolean b50 = server0.removeBan(iP44);
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b56 = server0.addBan(iP55);
    tp2.SinglyLinkedList singlyLinkedList57 = new tp2.SinglyLinkedList();
    tp2.IP iP59 = singlyLinkedList57.get((int)' ');
    tp2.Entry entry60 = new tp2.Entry();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i66 = iP65.getFirst();
    java.lang.String str67 = iP65.toString();
    entry60.element = iP65;
    boolean b69 = singlyLinkedList57.remove(iP65);
    tp2.IPBan iPBan71 = new tp2.IPBan(iP65, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList72 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan73 = null;
    boolean b74 = strictlySortedSinglyLinkedList72.contains(iPBan73);
    int i75 = strictlySortedSinglyLinkedList72.getSize();
    tp2.IPBan iPBan77 = strictlySortedSinglyLinkedList72.get((int)'#');
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP82.setSecond((java.lang.Integer)(-1));
    boolean b85 = strictlySortedSinglyLinkedList72.removeFromIP(iP82);
    iPBan71.ip = iP82;
    boolean b87 = server0.connect(iP82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 10+ "'", i23.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "10.0.0.100"+ "'", str24.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i66 + "' != '" + 10+ "'", i66.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "10.0.0.100"+ "'", str67.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test154"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    java.lang.String str3 = singlyLinkedList0.toString();
    java.lang.String str4 = singlyLinkedList0.toString();
    tp2.Server server5 = new tp2.Server();
    tp2.IP iP6 = null;
    boolean b7 = server5.connect(iP6);
    java.lang.String str8 = server5.toString();
    java.lang.String str9 = server5.toString();
    tp2.IP iP10 = null;
    boolean b11 = server5.removeException(iP10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList12 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList12.size = 10;
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    server15.update();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP22.setFirst((java.lang.Integer)1);
    java.lang.Integer i25 = iP22.getSecond();
    boolean b26 = server15.addException(iP22);
    tp2.Entry entry27 = new tp2.Entry();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    entry27.element = iP32;
    boolean b36 = server15.addException(iP32);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b42 = server15.removeBan(iP41);
    iP41.setThird((java.lang.Integer)0);
    boolean b45 = strictlySortedSinglyLinkedList12.removeFromIP(iP41);
    tp2.Server server46 = new tp2.Server();
    java.lang.String str47 = server46.toString();
    server46.update();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP53.setFirst((java.lang.Integer)1);
    java.lang.Integer i56 = iP53.getSecond();
    boolean b57 = server46.addException(iP53);
    boolean b58 = strictlySortedSinglyLinkedList12.removeFromIP(iP53);
    boolean b59 = server5.connect(iP53);
    boolean b60 = singlyLinkedList0.contains(iP53);
    tp2.Server server61 = new tp2.Server();
    java.lang.String str62 = server61.toString();
    server61.update();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP68.setFirst((java.lang.Integer)1);
    java.lang.Integer i71 = iP68.getSecond();
    boolean b72 = server61.addException(iP68);
    boolean b73 = iP53.equals((java.lang.Object)iP68);
    iP53.setThird((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "()"+ "'", str4.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 0+ "'", i25.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 0+ "'", i56.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i71 + "' != '" + 0+ "'", i71.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test155"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList9.size = 10;
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    server12.update();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP19.setFirst((java.lang.Integer)1);
    java.lang.Integer i22 = iP19.getSecond();
    boolean b23 = server12.addException(iP19);
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = server12.addException(iP29);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b39 = server12.removeBan(iP38);
    iP38.setThird((java.lang.Integer)0);
    boolean b42 = strictlySortedSinglyLinkedList9.removeFromIP(iP38);
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    server43.update();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP50.setFirst((java.lang.Integer)1);
    java.lang.Integer i53 = iP50.getSecond();
    boolean b54 = server43.addException(iP50);
    boolean b55 = strictlySortedSinglyLinkedList9.removeFromIP(iP50);
    boolean b56 = server0.connect(iP50);
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP58 = null;
    boolean b59 = server57.connect(iP58);
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b65 = server57.connect(iP64);
    java.lang.Integer i66 = iP64.getFirst();
    boolean b67 = server0.connect(iP64);
    iP64.setSecond((java.lang.Integer)10);
    iP64.setFirst((java.lang.Integer)2);
    iP64.setSecond((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 0+ "'", i22.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 0+ "'", i53.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i66 + "' != '" + 100+ "'", i66.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test156"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    java.lang.String str19 = iP16.toString();
    iP16.setThird((java.lang.Integer)(-1));
    boolean b22 = server0.addBan(iP16);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList23 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node24 = strictlySortedSinglyLinkedList23.header;
    tp2.Node node25 = new tp2.Node();
    tp2.IPBan iPBan26 = null;
    node25.element = iPBan26;
    tp2.IPBan iPBan28 = null;
    node25.element = iPBan28;
    strictlySortedSinglyLinkedList23.header = node25;
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b36 = strictlySortedSinglyLinkedList23.containsIP(iP35);
    iP35.setThird((java.lang.Integer)100);
    boolean b39 = server0.removeException(iP35);
    iP35.setFirst((java.lang.Integer)1);
    tp2.IPBan iPBan43 = new tp2.IPBan(iP35, (java.lang.Long)0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test157"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i11 = iP10.getFirst();
    boolean b12 = server3.connect(iP10);
    boolean b13 = strictlySortedSinglyLinkedList0.removeFromIP(iP10);
    int i14 = strictlySortedSinglyLinkedList0.getSize();
    int i15 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (short)0;
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP19 = null;
    boolean b20 = server18.connect(iP19);
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b26 = server18.connect(iP25);
    java.lang.Integer i27 = iP25.getFirst();
    java.lang.Integer i28 = iP25.getFirst();
    iP25.setFourth((java.lang.Integer)100);
    boolean b31 = strictlySortedSinglyLinkedList0.removeFromIP(iP25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 100+ "'", i11.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 100+ "'", i27.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 100+ "'", i28.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test158"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP5 = entry0.element;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.Entry entry7 = new tp2.Entry();
    java.lang.String str8 = entry7.toString();
    java.lang.String str9 = entry7.toString();
    tp2.Entry entry10 = entry7.next;
    entry6.next = entry7;
    entry0.next = entry6;
    tp2.Entry entry13 = entry0.next;
    tp2.Entry entry14 = entry13.next;
    java.lang.String str15 = entry13.toString();
    tp2.Entry entry16 = new tp2.Entry();
    java.lang.String str17 = entry16.toString();
    java.lang.String str18 = entry16.toString();
    tp2.Entry entry19 = entry16.next;
    tp2.IP iP20 = entry16.element;
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    java.lang.String str28 = iP25.toString();
    iP25.setThird((java.lang.Integer)(-1));
    entry16.element = iP25;
    tp2.Node node32 = new tp2.Node();
    tp2.IPBan iPBan33 = null;
    node32.element = iPBan33;
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    java.lang.String str50 = iPBan49.toString();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i56 = iP55.getFirst();
    java.lang.String str57 = iP55.toString();
    java.lang.String str58 = iP55.toString();
    iPBan49.setIp(iP55);
    java.lang.Long long60 = iPBan49.getExpires();
    node32.element = iPBan49;
    iPBan49.expires = 1466185870380L;
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i69 = iP68.getFirst();
    java.lang.String str70 = iP68.toString();
    java.lang.Integer i71 = iP68.getFourth();
    iPBan49.ip = iP68;
    entry16.element = iP68;
    tp2.Entry entry74 = new tp2.Entry();
    java.lang.String str75 = entry74.toString();
    tp2.Server server76 = new tp2.Server();
    java.lang.String str77 = server76.toString();
    server76.update();
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i84 = iP83.getFirst();
    boolean b85 = server76.connect(iP83);
    entry74.element = iP83;
    entry16.element = iP83;
    entry13.next = entry16;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[null]"+ "'", str8.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[null]"+ "'", str15.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[null]"+ "'", str17.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[null]"+ "'", str18.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 10+ "'", i56.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "10.0.0.100"+ "'", str57.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "10.0.0.100"+ "'", str58.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L+ "'", long60.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i69 + "' != '" + 10+ "'", i69.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "10.0.0.100"+ "'", str70.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i71 + "' != '" + 100+ "'", i71.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "[null]"+ "'", str75.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str77.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i84 + "' != '" + 100+ "'", i84.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test159"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i5 = iP4.getFirst();
    java.lang.String str6 = iP4.toString();
    java.lang.String str7 = iP4.toString();
    iP4.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan11 = new tp2.IPBan(iP4, (java.lang.Long)0L);
    iPBan11.expires = 1466185878456L;
    iPBan11.expires = 1466185888005L;
    java.lang.String str16 = iPBan11.toString();
    tp2.IP iP17 = iPBan11.ip;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i5 + "' != '" + 10+ "'", i5.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "10.0.0.100"+ "'", str6.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "IPBan [ip=10.0.-1.100, expires=1466185888005]"+ "'", str16.equals("IPBan [ip=10.0.-1.100, expires=1466185888005]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP17);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test160"); }


    tp2.IP iP0 = null;
    tp2.IPBan iPBan2 = new tp2.IPBan(iP0, (java.lang.Long)1466185872204L);
    tp2.IP iP3 = iPBan2.getIp();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    int i5 = strictlySortedSinglyLinkedList4.getSize();
    tp2.IPBan iPBan6 = null;
    boolean b7 = strictlySortedSinglyLinkedList4.add(iPBan6);
    tp2.Node node8 = strictlySortedSinglyLinkedList4.header;
    tp2.SinglyLinkedList singlyLinkedList9 = new tp2.SinglyLinkedList();
    tp2.IP iP11 = singlyLinkedList9.get((int)' ');
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = singlyLinkedList9.remove(iP17);
    tp2.IPBan iPBan23 = new tp2.IPBan(iP17, (java.lang.Long)1L);
    java.lang.String str24 = iPBan23.toString();
    iPBan23.setExpires((java.lang.Long)0L);
    java.lang.Long long27 = iPBan23.expires;
    node8.element = iPBan23;
    tp2.IPBan iPBan29 = node8.element;
    tp2.SinglyLinkedList singlyLinkedList30 = new tp2.SinglyLinkedList();
    tp2.IP iP32 = singlyLinkedList30.get((int)' ');
    tp2.Entry entry33 = new tp2.Entry();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i39 = iP38.getFirst();
    java.lang.String str40 = iP38.toString();
    entry33.element = iP38;
    boolean b42 = singlyLinkedList30.remove(iP38);
    tp2.IPBan iPBan44 = new tp2.IPBan(iP38, (java.lang.Long)1L);
    java.lang.String str45 = iPBan44.toString();
    iPBan44.setExpires((java.lang.Long)0L);
    java.lang.Long long48 = iPBan44.expires;
    tp2.IP iP49 = iPBan44.ip;
    java.lang.String str50 = iPBan44.toString();
    tp2.IP iP51 = iPBan44.getIp();
    iPBan29.ip = iP51;
    iPBan2.ip = iP51;
    java.lang.Integer i54 = iP51.getFourth();
    tp2.IPBan iPBan56 = new tp2.IPBan(iP51, (java.lang.Long)1466185872933L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str24.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L+ "'", long27.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + 10+ "'", i39.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "10.0.0.100"+ "'", str40.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str45.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L+ "'", long48.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 100+ "'", i54.equals(100));

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test161"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP58.setSecond((java.lang.Integer)1);
    boolean b61 = server0.removeBan(iP58);
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b68 = server62.addException(iP67);
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i74 = iP73.getFirst();
    java.lang.Integer i75 = iP73.getSecond();
    boolean b76 = server62.addBan(iP73);
    boolean b77 = iP58.equals((java.lang.Object)iP73);
    java.lang.Integer i78 = iP73.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i74 + "' != '" + 100+ "'", i74.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 10+ "'", i75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i78 + "' != '" + 100+ "'", i78.equals(100));

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test162"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    tp2.IPBan iPBan7 = strictlySortedSinglyLinkedList0.get((int)'4');
    int i8 = strictlySortedSinglyLinkedList0.size;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    int i10 = strictlySortedSinglyLinkedList9.getSize();
    tp2.IPBan iPBan11 = null;
    boolean b12 = strictlySortedSinglyLinkedList9.add(iPBan11);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList13 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node14 = strictlySortedSinglyLinkedList13.header;
    strictlySortedSinglyLinkedList9.header = node14;
    java.lang.String str16 = node14.toString();
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList18 = new tp2.StrictlySortedSinglyLinkedList();
    int i19 = strictlySortedSinglyLinkedList18.size;
    tp2.IPBan iPBan20 = null;
    boolean b21 = strictlySortedSinglyLinkedList18.add(iPBan20);
    boolean b22 = strictlySortedSinglyLinkedList18.isEmpty();
    java.lang.String str23 = strictlySortedSinglyLinkedList18.toString();
    tp2.Node node24 = new tp2.Node();
    tp2.IPBan iPBan25 = null;
    node24.element = iPBan25;
    tp2.IPBan iPBan27 = node24.element;
    strictlySortedSinglyLinkedList18.header = node24;
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    entry29.element = iP34;
    tp2.IP iP37 = entry29.element;
    tp2.IPBan iPBan39 = new tp2.IPBan(iP37, (java.lang.Long)1466185871942L);
    node24.element = iPBan39;
    iPBan39.expires = 1466185873141L;
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    tp2.SinglyLinkedList singlyLinkedList48 = new tp2.SinglyLinkedList();
    tp2.IP iP50 = singlyLinkedList48.get((int)' ');
    tp2.Entry entry51 = new tp2.Entry();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i57 = iP56.getFirst();
    java.lang.String str58 = iP56.toString();
    entry51.element = iP56;
    boolean b60 = singlyLinkedList48.remove(iP56);
    tp2.IPBan iPBan62 = new tp2.IPBan(iP56, (java.lang.Long)1L);
    java.lang.String str63 = iPBan62.toString();
    iPBan62.setExpires((java.lang.Long)0L);
    java.lang.Long long66 = iPBan62.expires;
    tp2.IP iP67 = iPBan62.ip;
    java.lang.String str68 = iPBan62.toString();
    boolean b69 = iP47.equals((java.lang.Object)iPBan62);
    iPBan39.setIp(iP47);
    node14.element = iPBan39;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[null]"+ "'", str16.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "{[null]}"+ "'", str23.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 10+ "'", i57.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "10.0.0.100"+ "'", str58.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str63.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L+ "'", long66.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str68.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test163"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.IPBan iPBan3 = null;
    node0.element = iPBan3;
    java.lang.String str5 = node0.toString();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList6.size = 10;
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    server9.update();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP16.setFirst((java.lang.Integer)1);
    java.lang.Integer i19 = iP16.getSecond();
    boolean b20 = server9.addException(iP16);
    tp2.Entry entry21 = new tp2.Entry();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i27 = iP26.getFirst();
    java.lang.String str28 = iP26.toString();
    entry21.element = iP26;
    boolean b30 = server9.addException(iP26);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b36 = server9.removeBan(iP35);
    iP35.setThird((java.lang.Integer)0);
    boolean b39 = strictlySortedSinglyLinkedList6.removeFromIP(iP35);
    tp2.Server server40 = new tp2.Server();
    java.lang.String str41 = server40.toString();
    server40.update();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP47.setFirst((java.lang.Integer)1);
    java.lang.Integer i50 = iP47.getSecond();
    boolean b51 = server40.addException(iP47);
    boolean b52 = strictlySortedSinglyLinkedList6.removeFromIP(iP47);
    int i53 = strictlySortedSinglyLinkedList6.size;
    strictlySortedSinglyLinkedList6.size = (byte)1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList56 = new tp2.StrictlySortedSinglyLinkedList();
    int i57 = strictlySortedSinglyLinkedList56.getSize();
    tp2.IPBan iPBan58 = null;
    boolean b59 = strictlySortedSinglyLinkedList56.add(iPBan58);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList60 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node61 = strictlySortedSinglyLinkedList60.header;
    strictlySortedSinglyLinkedList56.header = node61;
    tp2.IPBan iPBan63 = node61.element;
    strictlySortedSinglyLinkedList6.header = node61;
    node0.next = node61;
    tp2.SinglyLinkedList singlyLinkedList66 = new tp2.SinglyLinkedList();
    tp2.IP iP68 = singlyLinkedList66.get((int)' ');
    tp2.Entry entry69 = new tp2.Entry();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i75 = iP74.getFirst();
    java.lang.String str76 = iP74.toString();
    entry69.element = iP74;
    boolean b78 = singlyLinkedList66.remove(iP74);
    tp2.IPBan iPBan80 = new tp2.IPBan(iP74, (java.lang.Long)1L);
    java.lang.String str81 = iPBan80.toString();
    java.lang.Long long82 = iPBan80.getExpires();
    iPBan80.expires = 0L;
    tp2.IP iP85 = iPBan80.ip;
    node0.element = iPBan80;
    java.lang.String str87 = iPBan80.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[null]"+ "'", str5.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 0+ "'", i19.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 0+ "'", i50.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 10+ "'", i75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "10.0.0.100"+ "'", str76.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str81.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L+ "'", long82.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str87.equals("IPBan [ip=10.0.0.100, expires=0]"));

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test164"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.IPBan iPBan4 = strictlySortedSinglyLinkedList0.get((int)'a');
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList5.size = 10;
    tp2.Server server8 = new tp2.Server();
    java.lang.String str9 = server8.toString();
    server8.update();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP15.setFirst((java.lang.Integer)1);
    java.lang.Integer i18 = iP15.getSecond();
    boolean b19 = server8.addException(iP15);
    tp2.Entry entry20 = new tp2.Entry();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    entry20.element = iP25;
    boolean b29 = server8.addException(iP25);
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b35 = server8.removeBan(iP34);
    iP34.setThird((java.lang.Integer)0);
    boolean b38 = strictlySortedSinglyLinkedList5.removeFromIP(iP34);
    java.lang.String str39 = strictlySortedSinglyLinkedList5.toString();
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    tp2.IP iP42 = singlyLinkedList40.get((int)' ');
    tp2.Entry entry43 = new tp2.Entry();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i49 = iP48.getFirst();
    java.lang.String str50 = iP48.toString();
    entry43.element = iP48;
    boolean b52 = singlyLinkedList40.remove(iP48);
    tp2.IPBan iPBan54 = new tp2.IPBan(iP48, (java.lang.Long)1L);
    java.lang.String str55 = iPBan54.toString();
    boolean b56 = strictlySortedSinglyLinkedList5.contains(iPBan54);
    tp2.IPBan iPBan58 = strictlySortedSinglyLinkedList5.get((int)(short)0);
    int i59 = strictlySortedSinglyLinkedList5.getSize();
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP61 = null;
    boolean b62 = server60.connect(iP61);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b68 = server60.connect(iP67);
    java.lang.Integer i69 = iP67.getFirst();
    boolean b70 = strictlySortedSinglyLinkedList5.removeFromIP(iP67);
    boolean b71 = strictlySortedSinglyLinkedList0.containsIP(iP67);
    strictlySortedSinglyLinkedList0.size = 101;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 0+ "'", i18.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "{}"+ "'", str39.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i49 + "' != '" + 10+ "'", i49.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "10.0.0.100"+ "'", str50.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str55.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i69 + "' != '" + 100+ "'", i69.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test165"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    boolean b3 = singlyLinkedList0.isEmpty();
    tp2.IP iP4 = null;
    boolean b5 = singlyLinkedList0.remove(iP4);
    boolean b6 = singlyLinkedList0.isEmpty();
    int i7 = singlyLinkedList0.getSize();
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    tp2.IP iP17 = entry8.element;
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP19 = null;
    boolean b20 = server18.connect(iP19);
    java.lang.String str21 = server18.toString();
    java.lang.String str22 = server18.toString();
    tp2.SinglyLinkedList singlyLinkedList23 = new tp2.SinglyLinkedList();
    tp2.IP iP25 = singlyLinkedList23.get((int)' ');
    tp2.Entry entry26 = new tp2.Entry();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i32 = iP31.getFirst();
    java.lang.String str33 = iP31.toString();
    entry26.element = iP31;
    boolean b35 = singlyLinkedList23.remove(iP31);
    tp2.IPBan iPBan37 = new tp2.IPBan(iP31, (java.lang.Long)1L);
    java.lang.String str38 = iPBan37.toString();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    java.lang.String str46 = iP43.toString();
    iPBan37.setIp(iP43);
    java.lang.Integer i48 = iP43.getFirst();
    boolean b49 = server18.removeException(iP43);
    iP43.setThird((java.lang.Integer)(-1));
    entry8.element = iP43;
    boolean b53 = singlyLinkedList0.remove(iP43);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)11, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b59 = singlyLinkedList0.contains(iP58);
    iP58.setSecond((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 10+ "'", i32.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "10.0.0.100"+ "'", str33.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str38.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "10.0.0.100"+ "'", str46.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test166"); }


    tp2.IP iP0 = null;
    tp2.IPBan iPBan2 = new tp2.IPBan(iP0, (java.lang.Long)200000L);
    iPBan2.setExpires((java.lang.Long)1466185872933L);
    java.lang.String str5 = iPBan2.toString();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    server11.update();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP18.setFirst((java.lang.Integer)1);
    java.lang.Integer i21 = iP18.getSecond();
    boolean b22 = server11.addException(iP18);
    tp2.Entry entry23 = new tp2.Entry();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i29 = iP28.getFirst();
    java.lang.String str30 = iP28.toString();
    entry23.element = iP28;
    boolean b32 = server11.addException(iP28);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList33 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList33.size = 10;
    tp2.Server server36 = new tp2.Server();
    java.lang.String str37 = server36.toString();
    server36.update();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP43.setFirst((java.lang.Integer)1);
    java.lang.Integer i46 = iP43.getSecond();
    boolean b47 = server36.addException(iP43);
    tp2.Entry entry48 = new tp2.Entry();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i54 = iP53.getFirst();
    java.lang.String str55 = iP53.toString();
    entry48.element = iP53;
    boolean b57 = server36.addException(iP53);
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b63 = server36.removeBan(iP62);
    iP62.setThird((java.lang.Integer)0);
    boolean b66 = strictlySortedSinglyLinkedList33.removeFromIP(iP62);
    boolean b67 = server11.addException(iP62);
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP69 = null;
    boolean b70 = server68.connect(iP69);
    java.lang.String str71 = server68.toString();
    tp2.Server server72 = new tp2.Server();
    java.lang.String str73 = server72.toString();
    server72.update();
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP79.setFirst((java.lang.Integer)1);
    java.lang.Integer i82 = iP79.getSecond();
    boolean b83 = server72.addException(iP79);
    boolean b84 = server68.addException(iP79);
    boolean b85 = server11.addException(iP79);
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i91 = iP90.getFirst();
    iP90.setFourth((java.lang.Integer)1);
    boolean b94 = server11.addException(iP90);
    boolean b95 = iP10.equals((java.lang.Object)iP90);
    iPBan2.ip = iP90;
    java.lang.Long long97 = iPBan2.expires;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "IPBan [ip=null, expires=1466185872933]"+ "'", str5.equals("IPBan [ip=null, expires=1466185872933]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 0+ "'", i21.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 10+ "'", i29.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "10.0.0.100"+ "'", str30.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 0+ "'", i46.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "10.0.0.100"+ "'", str55.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str71.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str73.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i82 + "' != '" + 0+ "'", i82.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i91 + "' != '" + 100+ "'", i91.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long97 + "' != '" + 1466185872933L+ "'", long97.equals(1466185872933L));

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test167"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    java.lang.String str13 = singlyLinkedList0.toString();
    tp2.IP iP15 = singlyLinkedList0.get((int)(byte)100);
    tp2.SinglyLinkedList singlyLinkedList16 = new tp2.SinglyLinkedList();
    tp2.IP iP18 = singlyLinkedList16.get((int)' ');
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = singlyLinkedList16.remove(iP24);
    tp2.IPBan iPBan30 = new tp2.IPBan(iP24, (java.lang.Long)1L);
    java.lang.String str31 = iPBan30.toString();
    java.lang.Long long32 = iPBan30.getExpires();
    iPBan30.expires = 0L;
    tp2.IP iP35 = iPBan30.ip;
    boolean b36 = singlyLinkedList0.contains(iP35);
    boolean b37 = singlyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "()"+ "'", str13.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str31.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L+ "'", long32.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test168"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.SinglyLinkedList singlyLinkedList3 = new tp2.SinglyLinkedList();
    tp2.IP iP5 = singlyLinkedList3.get((int)' ');
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    entry6.element = iP11;
    boolean b15 = singlyLinkedList3.remove(iP11);
    tp2.IPBan iPBan17 = new tp2.IPBan(iP11, (java.lang.Long)1L);
    java.lang.String str18 = iPBan17.toString();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    java.lang.String str26 = iP23.toString();
    iPBan17.setIp(iP23);
    java.lang.Long long28 = iPBan17.getExpires();
    node0.element = iPBan17;
    tp2.IPBan iPBan30 = node0.element;
    tp2.IP iP31 = iPBan30.getIp();
    tp2.IP iP32 = iPBan30.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str18.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L+ "'", long28.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP32);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test169"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    server0.update();
    java.lang.String str23 = server0.toString();
    java.lang.String str24 = server0.toString();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=1466185920181, exceptions=([10.0.0.100][1.0.0.100]), bans={}]"+ "'", str23.equals("Server [lastUpdate=1466185920181, exceptions=([10.0.0.100][1.0.0.100]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=1466185920181, exceptions=([10.0.0.100][1.0.0.100]), bans={}]"+ "'", str24.equals("Server [lastUpdate=1466185920181, exceptions=([10.0.0.100][1.0.0.100]), bans={}]"));

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test170"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    boolean b3 = singlyLinkedList0.isEmpty();
    tp2.IP iP4 = null;
    boolean b5 = singlyLinkedList0.remove(iP4);
    boolean b6 = singlyLinkedList0.isEmpty();
    int i7 = singlyLinkedList0.getSize();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP9 = null;
    boolean b10 = server8.connect(iP9);
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    server11.update();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP18.setFirst((java.lang.Integer)1);
    java.lang.Integer i21 = iP18.getSecond();
    boolean b22 = server11.addException(iP18);
    tp2.Entry entry23 = new tp2.Entry();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i29 = iP28.getFirst();
    java.lang.String str30 = iP28.toString();
    entry23.element = iP28;
    boolean b32 = server11.addException(iP28);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList33 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList33.size = 10;
    tp2.Server server36 = new tp2.Server();
    java.lang.String str37 = server36.toString();
    server36.update();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP43.setFirst((java.lang.Integer)1);
    java.lang.Integer i46 = iP43.getSecond();
    boolean b47 = server36.addException(iP43);
    tp2.Entry entry48 = new tp2.Entry();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i54 = iP53.getFirst();
    java.lang.String str55 = iP53.toString();
    entry48.element = iP53;
    boolean b57 = server36.addException(iP53);
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b63 = server36.removeBan(iP62);
    iP62.setThird((java.lang.Integer)0);
    boolean b66 = strictlySortedSinglyLinkedList33.removeFromIP(iP62);
    boolean b67 = server11.addException(iP62);
    java.lang.String str68 = iP62.toString();
    boolean b69 = server8.removeBan(iP62);
    java.lang.Integer i70 = iP62.getThird();
    boolean b71 = singlyLinkedList0.contains(iP62);
    tp2.IP iP73 = singlyLinkedList0.get(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 0+ "'", i21.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 10+ "'", i29.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "10.0.0.100"+ "'", str30.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 0+ "'", i46.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "10.0.0.100"+ "'", str55.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "10.100.0.1"+ "'", str68.equals("10.100.0.1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 0+ "'", i70.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP73);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test171"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    int i7 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    java.util.Set<tp2.IPBan> set_iPBan9 = null;
    boolean b10 = strictlySortedSinglyLinkedList0.repOk(set_iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{}"+ "'", str8.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test172"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)0);
    iP4.setFirst((java.lang.Integer)97);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test173"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP58.setSecond((java.lang.Integer)1);
    boolean b61 = server0.removeBan(iP58);
    tp2.RealTime realTime62 = new tp2.RealTime();
    long long63 = realTime62.getCurrentTime();
    long long64 = realTime62.getCurrentTime();
    server0.setTime((tp2.ITime)realTime62);
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP67 = null;
    boolean b68 = server66.connect(iP67);
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP73.setFirst((java.lang.Integer)1);
    boolean b76 = server66.removeException(iP73);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList77 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan78 = null;
    boolean b79 = strictlySortedSinglyLinkedList77.contains(iPBan78);
    int i80 = strictlySortedSinglyLinkedList77.getSize();
    tp2.IPBan iPBan82 = strictlySortedSinglyLinkedList77.get((int)'#');
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP87.setSecond((java.lang.Integer)(-1));
    boolean b90 = strictlySortedSinglyLinkedList77.removeFromIP(iP87);
    boolean b91 = server66.removeBan(iP87);
    java.lang.Integer i92 = iP87.getSecond();
    java.lang.Integer i93 = iP87.getFirst();
    boolean b94 = server0.removeException(iP87);
    iP87.setSecond((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long63 == 1466185920246L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long64 == 1466185920247L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i92 + "' != '" + (-1)+ "'", i92.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i93 + "' != '" + 10+ "'", i93.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test174"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    boolean b5 = strictlySortedSinglyLinkedList0.isEmpty();
    int i6 = strictlySortedSinglyLinkedList0.size;
    int i7 = strictlySortedSinglyLinkedList0.size;
    tp2.Node node8 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    int i10 = strictlySortedSinglyLinkedList9.getSize();
    tp2.IPBan iPBan11 = null;
    boolean b12 = strictlySortedSinglyLinkedList9.add(iPBan11);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList13 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node14 = strictlySortedSinglyLinkedList13.header;
    strictlySortedSinglyLinkedList9.header = node14;
    node8.next = node14;
    tp2.IPBan iPBan17 = node14.element;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.IPBan iPBan19 = node14.element;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList20 = new tp2.StrictlySortedSinglyLinkedList();
    int i21 = strictlySortedSinglyLinkedList20.getSize();
    tp2.IPBan iPBan22 = null;
    boolean b23 = strictlySortedSinglyLinkedList20.add(iPBan22);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList24 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node25 = strictlySortedSinglyLinkedList24.header;
    strictlySortedSinglyLinkedList20.header = node25;
    strictlySortedSinglyLinkedList20.size = 0;
    tp2.Node node29 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList30 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList30.size = 10;
    tp2.Server server33 = new tp2.Server();
    java.lang.String str34 = server33.toString();
    server33.update();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP40.setFirst((java.lang.Integer)1);
    java.lang.Integer i43 = iP40.getSecond();
    boolean b44 = server33.addException(iP40);
    tp2.Entry entry45 = new tp2.Entry();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i51 = iP50.getFirst();
    java.lang.String str52 = iP50.toString();
    entry45.element = iP50;
    boolean b54 = server33.addException(iP50);
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b60 = server33.removeBan(iP59);
    iP59.setThird((java.lang.Integer)0);
    boolean b63 = strictlySortedSinglyLinkedList30.removeFromIP(iP59);
    java.lang.String str64 = strictlySortedSinglyLinkedList30.toString();
    tp2.SinglyLinkedList singlyLinkedList65 = new tp2.SinglyLinkedList();
    tp2.IP iP67 = singlyLinkedList65.get((int)' ');
    tp2.Entry entry68 = new tp2.Entry();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i74 = iP73.getFirst();
    java.lang.String str75 = iP73.toString();
    entry68.element = iP73;
    boolean b77 = singlyLinkedList65.remove(iP73);
    tp2.IPBan iPBan79 = new tp2.IPBan(iP73, (java.lang.Long)1L);
    java.lang.String str80 = iPBan79.toString();
    boolean b81 = strictlySortedSinglyLinkedList30.contains(iPBan79);
    node29.element = iPBan79;
    tp2.IPBan iPBan83 = node29.element;
    boolean b84 = strictlySortedSinglyLinkedList20.add(iPBan83);
    java.lang.Long long85 = iPBan83.expires;
    java.lang.Long long86 = iPBan83.expires;
    node14.element = iPBan83;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 0+ "'", i43.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 10+ "'", i51.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "10.0.0.100"+ "'", str52.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "{}"+ "'", str64.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i74 + "' != '" + 10+ "'", i74.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "10.0.0.100"+ "'", str75.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str80.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1L+ "'", long85.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1L+ "'", long86.equals(1L));

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test175"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    server16.update();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP23.setFirst((java.lang.Integer)1);
    java.lang.Integer i26 = iP23.getSecond();
    boolean b27 = server16.addException(iP23);
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = server16.addException(iP33);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b43 = server16.removeBan(iP42);
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP45 = null;
    boolean b46 = server44.connect(iP45);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b52 = server44.connect(iP51);
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP54 = null;
    boolean b55 = server53.connect(iP54);
    java.lang.String str56 = server53.toString();
    java.lang.String str57 = server53.toString();
    tp2.Entry entry58 = new tp2.Entry();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i64 = iP63.getFirst();
    java.lang.String str65 = iP63.toString();
    entry58.element = iP63;
    boolean b67 = server53.connect(iP63);
    boolean b68 = server44.removeException(iP63);
    boolean b69 = server16.connect(iP63);
    java.lang.Integer i70 = iP63.getFirst();
    boolean b71 = strictlySortedSinglyLinkedList0.removeFromIP(iP63);
    boolean b72 = strictlySortedSinglyLinkedList0.isEmpty();
    strictlySortedSinglyLinkedList0.size = (byte)100;
    java.lang.String str75 = strictlySortedSinglyLinkedList0.toString();
    int i76 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str57.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 10+ "'", i64.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "10.0.0.100"+ "'", str65.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 10+ "'", i70.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "{}"+ "'", str75.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 100);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test176"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    java.lang.String str11 = iP9.toString();
    java.lang.String str12 = iP9.toString();
    iP9.setThird((java.lang.Integer)(-1));
    entry0.element = iP9;
    tp2.Node node16 = new tp2.Node();
    tp2.IPBan iPBan17 = null;
    node16.element = iPBan17;
    tp2.SinglyLinkedList singlyLinkedList19 = new tp2.SinglyLinkedList();
    tp2.IP iP21 = singlyLinkedList19.get((int)' ');
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = singlyLinkedList19.remove(iP27);
    tp2.IPBan iPBan33 = new tp2.IPBan(iP27, (java.lang.Long)1L);
    java.lang.String str34 = iPBan33.toString();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    java.lang.String str42 = iP39.toString();
    iPBan33.setIp(iP39);
    java.lang.Long long44 = iPBan33.getExpires();
    node16.element = iPBan33;
    iPBan33.expires = 1466185870380L;
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    java.lang.Integer i55 = iP52.getFourth();
    iPBan33.ip = iP52;
    entry0.element = iP52;
    tp2.Entry entry58 = new tp2.Entry();
    java.lang.String str59 = entry58.toString();
    java.lang.String str60 = entry58.toString();
    tp2.Entry entry61 = entry58.next;
    tp2.IP iP62 = entry58.element;
    tp2.IP iP63 = entry58.element;
    tp2.Entry entry64 = new tp2.Entry();
    tp2.Entry entry65 = new tp2.Entry();
    java.lang.String str66 = entry65.toString();
    java.lang.String str67 = entry65.toString();
    tp2.Entry entry68 = entry65.next;
    entry64.next = entry65;
    entry58.next = entry64;
    entry0.next = entry64;
    tp2.Entry entry72 = entry64.next;
    tp2.Entry entry73 = entry72.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "10.0.0.100"+ "'", str11.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str34.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L+ "'", long44.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 100+ "'", i55.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "[null]"+ "'", str59.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "[null]"+ "'", str60.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "[null]"+ "'", str66.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[null]"+ "'", str67.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry73);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test177"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList3 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList3.size = 10;
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    server6.update();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP13.setFirst((java.lang.Integer)1);
    java.lang.Integer i16 = iP13.getSecond();
    boolean b17 = server6.addException(iP13);
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = server6.addException(iP23);
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b33 = server6.removeBan(iP32);
    iP32.setThird((java.lang.Integer)0);
    boolean b36 = strictlySortedSinglyLinkedList3.removeFromIP(iP32);
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    server37.update();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP44.setFirst((java.lang.Integer)1);
    java.lang.Integer i47 = iP44.getSecond();
    boolean b48 = server37.addException(iP44);
    boolean b49 = strictlySortedSinglyLinkedList3.removeFromIP(iP44);
    singlyLinkedList0.add(iP44);
    boolean b51 = singlyLinkedList0.isEmpty();
    tp2.IP iP53 = singlyLinkedList0.get((int)(byte)1);
    int i54 = singlyLinkedList0.getSize();
    int i55 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 0+ "'", i16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 0+ "'", i47.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test178"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    boolean b39 = iP5.equals((java.lang.Object)iPBan26);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    int i41 = singlyLinkedList40.getSize();
    java.lang.String str42 = singlyLinkedList40.toString();
    int i43 = singlyLinkedList40.getSize();
    java.util.Set<tp2.IP> set_iP44 = null;
    boolean b45 = singlyLinkedList40.repOk(set_iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b51 = singlyLinkedList40.remove(iP50);
    iPBan26.setIp(iP50);
    iPBan26.expires = 1466185886129L;
    tp2.IP iP55 = iPBan26.ip;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "()"+ "'", str42.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP55);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test179"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    boolean b39 = iP5.equals((java.lang.Object)iPBan26);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    int i41 = singlyLinkedList40.getSize();
    java.lang.String str42 = singlyLinkedList40.toString();
    int i43 = singlyLinkedList40.getSize();
    java.util.Set<tp2.IP> set_iP44 = null;
    boolean b45 = singlyLinkedList40.repOk(set_iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b51 = singlyLinkedList40.remove(iP50);
    iPBan26.setIp(iP50);
    iPBan26.setExpires((java.lang.Long)1466185870380L);
    java.lang.String str55 = iPBan26.toString();
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP57 = null;
    boolean b58 = server56.connect(iP57);
    java.lang.String str59 = server56.toString();
    java.lang.String str60 = server56.toString();
    tp2.Entry entry61 = new tp2.Entry();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i67 = iP66.getFirst();
    java.lang.String str68 = iP66.toString();
    entry61.element = iP66;
    boolean b70 = server56.connect(iP66);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i76 = iP75.getFirst();
    java.lang.String str77 = iP75.toString();
    java.lang.String str78 = iP75.toString();
    boolean b79 = server56.removeBan(iP75);
    java.lang.Integer i80 = iP75.getFirst();
    iPBan26.ip = iP75;
    iPBan26.setExpires((java.lang.Long)1466185888008L);
    java.lang.Long long84 = iPBan26.expires;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "()"+ "'", str42.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "IPBan [ip=100.10.-1.10, expires=1466185870380]"+ "'", str55.equals("IPBan [ip=100.10.-1.10, expires=1466185870380]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str59.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 10+ "'", i67.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "10.0.0.100"+ "'", str68.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 10+ "'", i76.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "10.0.0.100"+ "'", str78.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 10+ "'", i80.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1466185888008L+ "'", long84.equals(1466185888008L));

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test180"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.size;
    int i5 = strictlySortedSinglyLinkedList0.getSize();
    int i6 = strictlySortedSinglyLinkedList0.getSize();
    boolean b7 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.IPBan iPBan9 = strictlySortedSinglyLinkedList0.get((int)(short)(-1));
    tp2.Node node10 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    int i12 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan13 = null;
    boolean b14 = strictlySortedSinglyLinkedList11.add(iPBan13);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node16 = strictlySortedSinglyLinkedList15.header;
    strictlySortedSinglyLinkedList11.header = node16;
    node10.next = node16;
    tp2.IPBan iPBan19 = null;
    node10.element = iPBan19;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList21 = new tp2.StrictlySortedSinglyLinkedList();
    int i22 = strictlySortedSinglyLinkedList21.getSize();
    tp2.IPBan iPBan23 = null;
    boolean b24 = strictlySortedSinglyLinkedList21.add(iPBan23);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList25 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node26 = strictlySortedSinglyLinkedList25.header;
    strictlySortedSinglyLinkedList21.header = node26;
    tp2.IPBan iPBan28 = node26.element;
    node10.next = node26;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList30 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node31 = strictlySortedSinglyLinkedList30.header;
    node26.next = node31;
    strictlySortedSinglyLinkedList0.header = node26;
    int i34 = strictlySortedSinglyLinkedList0.size;
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP39.setSecond((java.lang.Integer)1);
    // The following exception was thrown during execution in test generation
    try {
      boolean b42 = strictlySortedSinglyLinkedList0.removeFromIP(iP39);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test181"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node1 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node2 = strictlySortedSinglyLinkedList0.header;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList3 = new tp2.StrictlySortedSinglyLinkedList();
    int i4 = strictlySortedSinglyLinkedList3.getSize();
    tp2.IPBan iPBan5 = null;
    boolean b6 = strictlySortedSinglyLinkedList3.add(iPBan5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node8 = strictlySortedSinglyLinkedList7.header;
    strictlySortedSinglyLinkedList3.header = node8;
    node2.next = node8;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    int i12 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan13 = null;
    boolean b14 = strictlySortedSinglyLinkedList11.add(iPBan13);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node16 = strictlySortedSinglyLinkedList15.header;
    strictlySortedSinglyLinkedList11.header = node16;
    int i18 = strictlySortedSinglyLinkedList11.size;
    tp2.Node node19 = strictlySortedSinglyLinkedList11.header;
    tp2.Node node20 = strictlySortedSinglyLinkedList11.header;
    node2.next = node20;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node20);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test182"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    boolean b5 = strictlySortedSinglyLinkedList0.isEmpty();
    int i6 = strictlySortedSinglyLinkedList0.size;
    int i7 = strictlySortedSinglyLinkedList0.size;
    tp2.Node node8 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    int i10 = strictlySortedSinglyLinkedList9.getSize();
    tp2.IPBan iPBan11 = null;
    boolean b12 = strictlySortedSinglyLinkedList9.add(iPBan11);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList13 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node14 = strictlySortedSinglyLinkedList13.header;
    strictlySortedSinglyLinkedList9.header = node14;
    node8.next = node14;
    tp2.IPBan iPBan17 = node14.element;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.SinglyLinkedList singlyLinkedList19 = new tp2.SinglyLinkedList();
    int i20 = singlyLinkedList19.getSize();
    java.lang.String str21 = singlyLinkedList19.toString();
    tp2.SinglyLinkedList singlyLinkedList22 = new tp2.SinglyLinkedList();
    tp2.IP iP24 = singlyLinkedList22.get((int)' ');
    tp2.Entry entry25 = new tp2.Entry();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i31 = iP30.getFirst();
    java.lang.String str32 = iP30.toString();
    entry25.element = iP30;
    boolean b34 = singlyLinkedList22.remove(iP30);
    tp2.IPBan iPBan36 = new tp2.IPBan(iP30, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList37 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan38 = null;
    boolean b39 = strictlySortedSinglyLinkedList37.contains(iPBan38);
    int i40 = strictlySortedSinglyLinkedList37.getSize();
    tp2.IPBan iPBan42 = strictlySortedSinglyLinkedList37.get((int)'#');
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP47.setSecond((java.lang.Integer)(-1));
    boolean b50 = strictlySortedSinglyLinkedList37.removeFromIP(iP47);
    iPBan36.ip = iP47;
    tp2.IP iP52 = iPBan36.ip;
    boolean b53 = singlyLinkedList19.contains(iP52);
    iP52.setThird((java.lang.Integer)32);
    boolean b56 = strictlySortedSinglyLinkedList0.removeFromIP(iP52);
    iP52.setSecond((java.lang.Integer)97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "()"+ "'", str21.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 10+ "'", i31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test183"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    java.lang.String str34 = strictlySortedSinglyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    java.lang.String str50 = iPBan49.toString();
    boolean b51 = strictlySortedSinglyLinkedList0.contains(iPBan49);
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP56.setFirst((java.lang.Integer)1);
    java.lang.Integer i59 = iP56.getSecond();
    boolean b60 = strictlySortedSinglyLinkedList0.removeFromIP(iP56);
    tp2.IPBan iPBan62 = strictlySortedSinglyLinkedList0.get(10);
    strictlySortedSinglyLinkedList0.size = 1;
    tp2.IPBan iPBan66 = strictlySortedSinglyLinkedList0.get(32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "{}"+ "'", str34.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 0+ "'", i59.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan66);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test184"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    int i7 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    java.lang.String str9 = strictlySortedSinglyLinkedList0.toString();
    strictlySortedSinglyLinkedList0.size = 35;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{}"+ "'", str8.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "{}"+ "'", str9.equals("{}"));

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test185"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList15.size = 10;
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    server18.update();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setFirst((java.lang.Integer)1);
    java.lang.Integer i28 = iP25.getSecond();
    boolean b29 = server18.addException(iP25);
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server18.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b45 = server18.removeBan(iP44);
    iP44.setThird((java.lang.Integer)0);
    boolean b48 = strictlySortedSinglyLinkedList15.removeFromIP(iP44);
    boolean b49 = singlyLinkedList0.contains(iP44);
    int i50 = singlyLinkedList0.getSize();
    tp2.Node node51 = new tp2.Node();
    tp2.IPBan iPBan52 = null;
    node51.element = iPBan52;
    tp2.SinglyLinkedList singlyLinkedList54 = new tp2.SinglyLinkedList();
    tp2.IP iP56 = singlyLinkedList54.get((int)' ');
    tp2.Entry entry57 = new tp2.Entry();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i63 = iP62.getFirst();
    java.lang.String str64 = iP62.toString();
    entry57.element = iP62;
    boolean b66 = singlyLinkedList54.remove(iP62);
    tp2.IPBan iPBan68 = new tp2.IPBan(iP62, (java.lang.Long)1L);
    java.lang.String str69 = iPBan68.toString();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i75 = iP74.getFirst();
    java.lang.String str76 = iP74.toString();
    java.lang.String str77 = iP74.toString();
    iPBan68.setIp(iP74);
    java.lang.Long long79 = iPBan68.getExpires();
    node51.element = iPBan68;
    iPBan68.expires = 1466185870380L;
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i88 = iP87.getFirst();
    java.lang.String str89 = iP87.toString();
    java.lang.Integer i90 = iP87.getFourth();
    iPBan68.ip = iP87;
    boolean b92 = singlyLinkedList0.remove(iP87);
    boolean b93 = singlyLinkedList0.isEmpty();
    boolean b94 = singlyLinkedList0.isEmpty();
    java.lang.String str95 = singlyLinkedList0.toString();
    java.util.Set<tp2.IP> set_iP96 = null;
    boolean b97 = singlyLinkedList0.repOk(set_iP96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 0+ "'", i28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 10+ "'", i63.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "10.0.0.100"+ "'", str64.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str69.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 10+ "'", i75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "10.0.0.100"+ "'", str76.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L+ "'", long79.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 10+ "'", i88.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "10.0.0.100"+ "'", str89.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i90 + "' != '" + 100+ "'", i90.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "()"+ "'", str95.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test186"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.IP iP3 = entry0.element;
    tp2.Entry entry4 = new tp2.Entry();
    java.lang.String str5 = entry4.toString();
    java.lang.String str6 = entry4.toString();
    tp2.Entry entry7 = entry4.next;
    tp2.IP iP8 = entry4.element;
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    java.lang.String str16 = iP13.toString();
    iP13.setThird((java.lang.Integer)(-1));
    entry4.element = iP13;
    tp2.Node node20 = new tp2.Node();
    tp2.IPBan iPBan21 = null;
    node20.element = iPBan21;
    tp2.SinglyLinkedList singlyLinkedList23 = new tp2.SinglyLinkedList();
    tp2.IP iP25 = singlyLinkedList23.get((int)' ');
    tp2.Entry entry26 = new tp2.Entry();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i32 = iP31.getFirst();
    java.lang.String str33 = iP31.toString();
    entry26.element = iP31;
    boolean b35 = singlyLinkedList23.remove(iP31);
    tp2.IPBan iPBan37 = new tp2.IPBan(iP31, (java.lang.Long)1L);
    java.lang.String str38 = iPBan37.toString();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    java.lang.String str46 = iP43.toString();
    iPBan37.setIp(iP43);
    java.lang.Long long48 = iPBan37.getExpires();
    node20.element = iPBan37;
    iPBan37.expires = 1466185870380L;
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i57 = iP56.getFirst();
    java.lang.String str58 = iP56.toString();
    java.lang.Integer i59 = iP56.getFourth();
    iPBan37.ip = iP56;
    entry4.element = iP56;
    tp2.Entry entry62 = entry4.next;
    entry0.next = entry4;
    tp2.Entry entry64 = new tp2.Entry();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i70 = iP69.getFirst();
    java.lang.String str71 = iP69.toString();
    entry64.element = iP69;
    tp2.IP iP73 = entry64.element;
    java.lang.Integer i74 = iP73.getFirst();
    entry0.element = iP73;
    tp2.IP iP76 = entry0.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[null]"+ "'", str5.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[null]"+ "'", str6.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 10+ "'", i32.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "10.0.0.100"+ "'", str33.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str38.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "10.0.0.100"+ "'", str46.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L+ "'", long48.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 10+ "'", i57.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "10.0.0.100"+ "'", str58.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 100+ "'", i59.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 10+ "'", i70.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "10.0.0.100"+ "'", str71.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i74 + "' != '" + 10+ "'", i74.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP76);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test187"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.IP iP9 = entry0.element;
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)10);
    entry0.element = iP14;
    java.lang.String str16 = entry0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[1.0.1.10]"+ "'", str16.equals("[1.0.1.10]"));

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test188"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    tp2.IPBan iPBan7 = strictlySortedSinglyLinkedList0.get(0);
    tp2.SinglyLinkedList singlyLinkedList8 = new tp2.SinglyLinkedList();
    tp2.IP iP10 = singlyLinkedList8.get((int)' ');
    tp2.Entry entry11 = new tp2.Entry();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    entry11.element = iP16;
    boolean b20 = singlyLinkedList8.remove(iP16);
    tp2.IPBan iPBan22 = new tp2.IPBan(iP16, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList23 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan24 = null;
    boolean b25 = strictlySortedSinglyLinkedList23.contains(iPBan24);
    int i26 = strictlySortedSinglyLinkedList23.getSize();
    tp2.IPBan iPBan28 = strictlySortedSinglyLinkedList23.get((int)'#');
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP33.setSecond((java.lang.Integer)(-1));
    boolean b36 = strictlySortedSinglyLinkedList23.removeFromIP(iP33);
    iPBan22.ip = iP33;
    java.lang.Long long38 = iPBan22.expires;
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.Integer i45 = iP43.getSecond();
    iPBan22.setIp(iP43);
    tp2.SinglyLinkedList singlyLinkedList47 = new tp2.SinglyLinkedList();
    tp2.IP iP49 = singlyLinkedList47.get((int)' ');
    tp2.Entry entry50 = new tp2.Entry();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i56 = iP55.getFirst();
    java.lang.String str57 = iP55.toString();
    entry50.element = iP55;
    boolean b59 = singlyLinkedList47.remove(iP55);
    tp2.IPBan iPBan61 = new tp2.IPBan(iP55, (java.lang.Long)1L);
    java.lang.Integer i62 = iP55.getFirst();
    iPBan22.setIp(iP55);
    // The following exception was thrown during execution in test generation
    try {
      boolean b64 = strictlySortedSinglyLinkedList0.add(iPBan22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L+ "'", long38.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 100+ "'", i44.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 10+ "'", i45.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 10+ "'", i56.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "10.0.0.100"+ "'", str57.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i62 + "' != '" + 10+ "'", i62.equals(10));

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test189"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.getIp();
    java.lang.Long long20 = iPBan14.getExpires();
    iPBan14.expires = 1466185872523L;
    java.lang.String str23 = iPBan14.toString();
    tp2.SinglyLinkedList singlyLinkedList24 = new tp2.SinglyLinkedList();
    tp2.IP iP26 = singlyLinkedList24.get((int)' ');
    tp2.Entry entry27 = new tp2.Entry();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    entry27.element = iP32;
    boolean b36 = singlyLinkedList24.remove(iP32);
    tp2.IPBan iPBan38 = new tp2.IPBan(iP32, (java.lang.Long)1L);
    tp2.Server server39 = new tp2.Server();
    java.lang.String str40 = server39.toString();
    server39.update();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i47 = iP46.getFirst();
    boolean b48 = server39.connect(iP46);
    iPBan38.ip = iP46;
    tp2.IP iP50 = iPBan38.ip;
    iPBan14.ip = iP50;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L+ "'", long20.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "IPBan [ip=10.0.0.100, expires=1466185872523]"+ "'", str23.equals("IPBan [ip=10.0.0.100, expires=1466185872523]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 100+ "'", i47.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP50);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test190"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    tp2.IPBan iPBan53 = strictlySortedSinglyLinkedList0.get((int)(byte)100);
    int i54 = strictlySortedSinglyLinkedList0.size;
    int i55 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan57 = strictlySortedSinglyLinkedList0.get((int)(byte)(-1));
    strictlySortedSinglyLinkedList0.size = (short)10;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan57);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test191"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    int i3 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    boolean b6 = singlyLinkedList0.isEmpty();
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP8 = null;
    boolean b9 = server7.connect(iP8);
    java.lang.String str10 = server7.toString();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    server11.update();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP18.setFirst((java.lang.Integer)1);
    java.lang.Integer i21 = iP18.getSecond();
    boolean b22 = server11.addException(iP18);
    boolean b23 = server7.addException(iP18);
    java.lang.Integer i24 = iP18.getSecond();
    boolean b25 = singlyLinkedList0.contains(iP18);
    int i26 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 0+ "'", i21.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 0+ "'", i24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test192"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get(1);
    tp2.IP iP4 = singlyLinkedList0.get((int)(byte)1);
    tp2.IP iP6 = singlyLinkedList0.get((int)(short)100);
    java.lang.String str7 = singlyLinkedList0.toString();
    java.lang.String str8 = singlyLinkedList0.toString();
    int i9 = singlyLinkedList0.getSize();
    java.lang.String str10 = singlyLinkedList0.toString();
    java.util.Set<tp2.IP> set_iP11 = null;
    boolean b12 = singlyLinkedList0.repOk(set_iP11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "()"+ "'", str7.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "()"+ "'", str8.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "()"+ "'", str10.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test193"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    int i6 = strictlySortedSinglyLinkedList5.getSize();
    tp2.IPBan iPBan7 = null;
    boolean b8 = strictlySortedSinglyLinkedList5.add(iPBan7);
    tp2.Node node9 = strictlySortedSinglyLinkedList5.header;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    tp2.Node node12 = new tp2.Node();
    tp2.IPBan iPBan13 = null;
    node12.element = iPBan13;
    tp2.IPBan iPBan15 = null;
    node12.element = iPBan15;
    strictlySortedSinglyLinkedList10.header = node12;
    tp2.IPBan iPBan18 = node12.element;
    strictlySortedSinglyLinkedList5.header = node12;
    strictlySortedSinglyLinkedList0.header = node12;
    int i21 = strictlySortedSinglyLinkedList0.size;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test194"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    java.lang.String str5 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node6 = new tp2.Node();
    tp2.IPBan iPBan7 = null;
    node6.element = iPBan7;
    tp2.IPBan iPBan9 = node6.element;
    strictlySortedSinglyLinkedList0.header = node6;
    tp2.IPBan iPBan12 = strictlySortedSinglyLinkedList0.get((-1));
    tp2.IPBan iPBan14 = strictlySortedSinglyLinkedList0.get((int)' ');
    tp2.Node node15 = strictlySortedSinglyLinkedList0.header;
    tp2.SinglyLinkedList singlyLinkedList16 = new tp2.SinglyLinkedList();
    tp2.IP iP18 = singlyLinkedList16.get((int)' ');
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = singlyLinkedList16.remove(iP24);
    tp2.IPBan iPBan30 = new tp2.IPBan(iP24, (java.lang.Long)1L);
    java.lang.String str31 = iPBan30.toString();
    iPBan30.setExpires((java.lang.Long)0L);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP38.setSecond((java.lang.Integer)(-1));
    iPBan30.ip = iP38;
    java.lang.String str42 = iPBan30.toString();
    boolean b43 = strictlySortedSinglyLinkedList0.add(iPBan30);
    strictlySortedSinglyLinkedList0.size = (short)10;
    tp2.SinglyLinkedList singlyLinkedList46 = new tp2.SinglyLinkedList();
    tp2.IP iP48 = singlyLinkedList46.get((int)' ');
    tp2.Entry entry49 = new tp2.Entry();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i55 = iP54.getFirst();
    java.lang.String str56 = iP54.toString();
    entry49.element = iP54;
    boolean b58 = singlyLinkedList46.remove(iP54);
    tp2.IPBan iPBan60 = new tp2.IPBan(iP54, (java.lang.Long)1L);
    java.lang.String str61 = iPBan60.toString();
    iPBan60.setExpires((java.lang.Long)0L);
    iPBan60.expires = 1466185877442L;
    tp2.IP iP66 = iPBan60.ip;
    java.lang.Integer i67 = iP66.getSecond();
    boolean b68 = strictlySortedSinglyLinkedList0.containsIP(iP66);
    java.lang.String str69 = iP66.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "{[null]}"+ "'", str5.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str31.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "IPBan [ip=10.-1.0.100, expires=0]"+ "'", str42.equals("IPBan [ip=10.-1.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 10+ "'", i55.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "10.0.0.100"+ "'", str56.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str61.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 0+ "'", i67.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "10.0.0.100"+ "'", str69.equals("10.0.0.100"));

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test195"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    java.lang.String str3 = singlyLinkedList0.toString();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    tp2.IP iP7 = singlyLinkedList0.get(32);
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP9 = null;
    boolean b10 = server8.connect(iP9);
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP15.setFirst((java.lang.Integer)1);
    boolean b18 = server8.removeException(iP15);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList19 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan20 = null;
    boolean b21 = strictlySortedSinglyLinkedList19.contains(iPBan20);
    int i22 = strictlySortedSinglyLinkedList19.getSize();
    tp2.IPBan iPBan24 = strictlySortedSinglyLinkedList19.get((int)'#');
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP29.setSecond((java.lang.Integer)(-1));
    boolean b32 = strictlySortedSinglyLinkedList19.removeFromIP(iP29);
    boolean b33 = server8.removeBan(iP29);
    boolean b34 = singlyLinkedList0.remove(iP29);
    boolean b35 = singlyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test196"); }


    tp2.IP iP0 = null;
    tp2.IPBan iPBan2 = new tp2.IPBan(iP0, (java.lang.Long)200000L);
    iPBan2.setExpires((java.lang.Long)1466185872933L);
    tp2.IP iP5 = iPBan2.ip;
    iPBan2.setExpires((java.lang.Long)1466185881326L);
    tp2.IP iP8 = iPBan2.ip;
    java.lang.Long long9 = iPBan2.expires;
    java.lang.String str10 = iPBan2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1466185881326L+ "'", long9.equals(1466185881326L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "IPBan [ip=null, expires=1466185881326]"+ "'", str10.equals("IPBan [ip=null, expires=1466185881326]"));

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test197"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    server0.update();
    tp2.Server server6 = new tp2.Server();
    tp2.IP iP7 = null;
    boolean b8 = server6.connect(iP7);
    java.lang.String str9 = server6.toString();
    java.lang.String str10 = server6.toString();
    tp2.IP iP11 = null;
    boolean b12 = server6.removeException(iP11);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList13 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList13.size = 10;
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    server16.update();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP23.setFirst((java.lang.Integer)1);
    java.lang.Integer i26 = iP23.getSecond();
    boolean b27 = server16.addException(iP23);
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = server16.addException(iP33);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b43 = server16.removeBan(iP42);
    iP42.setThird((java.lang.Integer)0);
    boolean b46 = strictlySortedSinglyLinkedList13.removeFromIP(iP42);
    tp2.Server server47 = new tp2.Server();
    java.lang.String str48 = server47.toString();
    server47.update();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP54.setFirst((java.lang.Integer)1);
    java.lang.Integer i57 = iP54.getSecond();
    boolean b58 = server47.addException(iP54);
    boolean b59 = strictlySortedSinglyLinkedList13.removeFromIP(iP54);
    boolean b60 = server6.connect(iP54);
    tp2.RealTime realTime61 = new tp2.RealTime();
    long long62 = realTime61.getCurrentTime();
    server6.setTime((tp2.ITime)realTime61);
    long long64 = realTime61.getCurrentTime();
    long long65 = realTime61.getCurrentTime();
    server0.setTime((tp2.ITime)realTime61);
    server0.update();
    tp2.Entry entry68 = new tp2.Entry();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i74 = iP73.getFirst();
    entry68.element = iP73;
    tp2.Entry entry76 = entry68.next;
    tp2.Server server77 = new tp2.Server();
    tp2.IP iP78 = null;
    boolean b79 = server77.connect(iP78);
    tp2.IP iP84 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b85 = server77.connect(iP84);
    java.lang.Integer i86 = iP84.getFirst();
    entry68.element = iP84;
    iP84.setFourth((java.lang.Integer)100);
    java.lang.String str90 = iP84.toString();
    boolean b91 = server0.addBan(iP84);
    java.lang.Integer i92 = iP84.getSecond();
    tp2.IPBan iPBan94 = new tp2.IPBan(iP84, (java.lang.Long)1466185872120L);
    iPBan94.setExpires((java.lang.Long)1466185894666L);
    tp2.IP iP97 = iPBan94.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 0+ "'", i57.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long62 == 1466185920668L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long64 == 1466185920669L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long65 == 1466185920669L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i74 + "' != '" + 10+ "'", i74.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i86 + "' != '" + 100+ "'", i86.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "100.10.-1.100"+ "'", str90.equals("100.10.-1.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i92 + "' != '" + 10+ "'", i92.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP97);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test198"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList9.size = 10;
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    server12.update();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP19.setFirst((java.lang.Integer)1);
    java.lang.Integer i22 = iP19.getSecond();
    boolean b23 = server12.addException(iP19);
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = server12.addException(iP29);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b39 = server12.removeBan(iP38);
    iP38.setThird((java.lang.Integer)0);
    boolean b42 = strictlySortedSinglyLinkedList9.removeFromIP(iP38);
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    server43.update();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP50.setFirst((java.lang.Integer)1);
    java.lang.Integer i53 = iP50.getSecond();
    boolean b54 = server43.addException(iP50);
    boolean b55 = strictlySortedSinglyLinkedList9.removeFromIP(iP50);
    boolean b56 = server0.connect(iP50);
    java.lang.String str57 = server0.toString();
    tp2.SinglyLinkedList singlyLinkedList58 = new tp2.SinglyLinkedList();
    tp2.IP iP60 = singlyLinkedList58.get((int)' ');
    tp2.Entry entry61 = new tp2.Entry();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i67 = iP66.getFirst();
    java.lang.String str68 = iP66.toString();
    entry61.element = iP66;
    boolean b70 = singlyLinkedList58.remove(iP66);
    tp2.IPBan iPBan72 = new tp2.IPBan(iP66, (java.lang.Long)1L);
    tp2.Server server73 = new tp2.Server();
    java.lang.String str74 = server73.toString();
    server73.update();
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i81 = iP80.getFirst();
    boolean b82 = server73.connect(iP80);
    iPBan72.ip = iP80;
    tp2.IP iP84 = iPBan72.ip;
    boolean b85 = server0.removeBan(iP84);
    java.lang.String str86 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 0+ "'", i22.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 0+ "'", i53.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str57.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 10+ "'", i67.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "10.0.0.100"+ "'", str68.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str74.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i81 + "' != '" + 100+ "'", i81.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str86.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test199"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    java.lang.Long long16 = iPBan14.getExpires();
    iPBan14.expires = 0L;
    java.lang.Long long19 = iPBan14.getExpires();
    java.lang.Long long20 = iPBan14.expires;
    tp2.IP iP21 = iPBan14.ip;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L+ "'", long16.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L+ "'", long19.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L+ "'", long20.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP21);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test200"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    java.lang.String str16 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node17 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList18 = new tp2.StrictlySortedSinglyLinkedList();
    int i19 = strictlySortedSinglyLinkedList18.getSize();
    tp2.IPBan iPBan20 = null;
    boolean b21 = strictlySortedSinglyLinkedList18.add(iPBan20);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList22 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node23 = strictlySortedSinglyLinkedList22.header;
    strictlySortedSinglyLinkedList18.header = node23;
    node17.next = node23;
    tp2.Node node26 = node17.next;
    tp2.Node node27 = node17.next;
    strictlySortedSinglyLinkedList0.header = node27;
    boolean b29 = strictlySortedSinglyLinkedList0.isEmpty();
    int i30 = strictlySortedSinglyLinkedList0.size;
    java.lang.String str31 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "{}"+ "'", str16.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "{}"+ "'", str31.equals("{}"));

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test201"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get(1);
    tp2.IP iP4 = singlyLinkedList0.get(0);
    java.lang.String str5 = singlyLinkedList0.toString();
    tp2.IP iP7 = singlyLinkedList0.get((int)(byte)100);
    tp2.IP iP8 = null;
    boolean b9 = singlyLinkedList0.remove(iP8);
    tp2.SinglyLinkedList singlyLinkedList10 = new tp2.SinglyLinkedList();
    tp2.IP iP12 = singlyLinkedList10.get((int)' ');
    tp2.Entry entry13 = new tp2.Entry();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i19 = iP18.getFirst();
    java.lang.String str20 = iP18.toString();
    entry13.element = iP18;
    boolean b22 = singlyLinkedList10.remove(iP18);
    tp2.IPBan iPBan24 = new tp2.IPBan(iP18, (java.lang.Long)1L);
    java.lang.String str25 = iPBan24.toString();
    iPBan24.setExpires((java.lang.Long)0L);
    java.lang.Long long28 = iPBan24.expires;
    tp2.IP iP29 = iPBan24.ip;
    java.lang.String str30 = iPBan24.toString();
    java.lang.Long long31 = iPBan24.getExpires();
    tp2.IP iP32 = iPBan24.getIp();
    tp2.IP iP33 = iPBan24.ip;
    singlyLinkedList0.add(iP33);
    java.util.Set<tp2.IP> set_iP35 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b36 = singlyLinkedList0.repOk(set_iP35);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "()"+ "'", str5.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 10+ "'", i19.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "10.0.0.100"+ "'", str20.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str25.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L+ "'", long28.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str30.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L+ "'", long31.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP33);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test202"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = new tp2.Node();
    tp2.IPBan iPBan5 = null;
    node4.element = iPBan5;
    tp2.IPBan iPBan7 = null;
    node4.element = iPBan7;
    tp2.IPBan iPBan9 = node4.element;
    strictlySortedSinglyLinkedList0.header = node4;
    int i11 = strictlySortedSinglyLinkedList0.size;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList12 = new tp2.StrictlySortedSinglyLinkedList();
    int i13 = strictlySortedSinglyLinkedList12.size;
    tp2.IPBan iPBan14 = null;
    boolean b15 = strictlySortedSinglyLinkedList12.add(iPBan14);
    boolean b16 = strictlySortedSinglyLinkedList12.isEmpty();
    tp2.Node node17 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList18 = new tp2.StrictlySortedSinglyLinkedList();
    int i19 = strictlySortedSinglyLinkedList18.getSize();
    tp2.IPBan iPBan20 = null;
    boolean b21 = strictlySortedSinglyLinkedList18.add(iPBan20);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList22 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node23 = strictlySortedSinglyLinkedList22.header;
    strictlySortedSinglyLinkedList18.header = node23;
    node17.next = node23;
    tp2.Node node26 = node17.next;
    strictlySortedSinglyLinkedList12.header = node26;
    tp2.Node node28 = node26.next;
    strictlySortedSinglyLinkedList0.header = node26;
    strictlySortedSinglyLinkedList0.size = (-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node28);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test203"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get(1);
    tp2.IP iP4 = singlyLinkedList0.get(0);
    tp2.IP iP6 = singlyLinkedList0.get(32);
    java.lang.String str7 = singlyLinkedList0.toString();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList8 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan9 = null;
    boolean b10 = strictlySortedSinglyLinkedList8.add(iPBan9);
    java.util.Set<tp2.IPBan> set_iPBan11 = null;
    boolean b12 = strictlySortedSinglyLinkedList8.repOk(set_iPBan11);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList13 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList13.size = 10;
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    server16.update();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP23.setFirst((java.lang.Integer)1);
    java.lang.Integer i26 = iP23.getSecond();
    boolean b27 = server16.addException(iP23);
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = server16.addException(iP33);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b43 = server16.removeBan(iP42);
    iP42.setThird((java.lang.Integer)0);
    boolean b46 = strictlySortedSinglyLinkedList13.removeFromIP(iP42);
    tp2.Server server47 = new tp2.Server();
    java.lang.String str48 = server47.toString();
    server47.update();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP54.setFirst((java.lang.Integer)1);
    java.lang.Integer i57 = iP54.getSecond();
    boolean b58 = server47.addException(iP54);
    boolean b59 = strictlySortedSinglyLinkedList13.removeFromIP(iP54);
    int i60 = strictlySortedSinglyLinkedList13.size;
    strictlySortedSinglyLinkedList13.size = (byte)1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList63 = new tp2.StrictlySortedSinglyLinkedList();
    int i64 = strictlySortedSinglyLinkedList63.getSize();
    tp2.IPBan iPBan65 = null;
    boolean b66 = strictlySortedSinglyLinkedList63.add(iPBan65);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList67 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node68 = strictlySortedSinglyLinkedList67.header;
    strictlySortedSinglyLinkedList63.header = node68;
    tp2.IPBan iPBan70 = node68.element;
    strictlySortedSinglyLinkedList13.header = node68;
    java.lang.String str72 = node68.toString();
    java.lang.String str73 = node68.toString();
    strictlySortedSinglyLinkedList8.header = node68;
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP79.setSecond((java.lang.Integer)1);
    java.lang.Integer i82 = iP79.getThird();
    java.lang.String str83 = iP79.toString();
    boolean b84 = strictlySortedSinglyLinkedList8.containsIP(iP79);
    singlyLinkedList0.add(iP79);
    tp2.IP iP87 = singlyLinkedList0.get((int)(byte)100);
    boolean b88 = singlyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "()"+ "'", str7.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 0+ "'", i57.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "[null]"+ "'", str72.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "[null]"+ "'", str73.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i82 + "' != '" + (-1)+ "'", i82.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "100.1.-1.10"+ "'", str83.equals("100.1.-1.10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test204"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    java.lang.String str34 = strictlySortedSinglyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    java.lang.String str50 = iPBan49.toString();
    boolean b51 = strictlySortedSinglyLinkedList0.contains(iPBan49);
    iPBan49.setExpires((java.lang.Long)1466185873141L);
    tp2.IP iP54 = iPBan49.ip;
    tp2.IP iP55 = iPBan49.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "{}"+ "'", str34.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP55);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test205"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    int i3 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    tp2.IP iP6 = null;
    boolean b7 = singlyLinkedList0.remove(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test206"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    boolean b3 = singlyLinkedList0.isEmpty();
    java.lang.String str4 = singlyLinkedList0.toString();
    java.lang.String str5 = singlyLinkedList0.toString();
    java.lang.String str6 = singlyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "()"+ "'", str4.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "()"+ "'", str5.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "()"+ "'", str6.equals("()"));

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test207"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    tp2.IPBan iPBan11 = new tp2.IPBan(iP9, (java.lang.Long)(-1L));
    tp2.IP iP12 = iPBan11.getIp();
    java.lang.String str13 = iPBan11.toString();
    java.lang.Long long14 = iPBan11.getExpires();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan16 = null;
    boolean b17 = strictlySortedSinglyLinkedList15.contains(iPBan16);
    int i18 = strictlySortedSinglyLinkedList15.getSize();
    tp2.IPBan iPBan20 = strictlySortedSinglyLinkedList15.get((int)'#');
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setSecond((java.lang.Integer)(-1));
    boolean b28 = strictlySortedSinglyLinkedList15.removeFromIP(iP25);
    tp2.SinglyLinkedList singlyLinkedList29 = new tp2.SinglyLinkedList();
    tp2.IP iP31 = singlyLinkedList29.get((int)' ');
    tp2.Entry entry32 = new tp2.Entry();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i38 = iP37.getFirst();
    java.lang.String str39 = iP37.toString();
    entry32.element = iP37;
    boolean b41 = singlyLinkedList29.remove(iP37);
    tp2.IPBan iPBan43 = new tp2.IPBan(iP37, (java.lang.Long)1L);
    java.lang.String str44 = iPBan43.toString();
    iPBan43.setExpires((java.lang.Long)0L);
    boolean b47 = strictlySortedSinglyLinkedList15.add(iPBan43);
    tp2.IP iP48 = iPBan43.getIp();
    iPBan11.ip = iP48;
    boolean b50 = server0.removeBan(iP48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "IPBan [ip=10.100.-1.1, expires=-1]"+ "'", str13.equals("IPBan [ip=10.100.-1.1, expires=-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L)+ "'", long14.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i38 + "' != '" + 10+ "'", i38.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "10.0.0.100"+ "'", str39.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str44.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test208"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b6 = server0.addException(iP5);
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    server7.update();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP14.setFirst((java.lang.Integer)1);
    java.lang.Integer i17 = iP14.getSecond();
    boolean b18 = server7.addException(iP14);
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = server7.addException(iP24);
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b34 = server7.removeBan(iP33);
    iP33.setThird((java.lang.Integer)0);
    boolean b38 = iP33.equals((java.lang.Object)'4');
    boolean b39 = server0.removeException(iP33);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b46 = server40.addException(iP45);
    java.lang.String str47 = server40.toString();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP49 = null;
    boolean b50 = server48.connect(iP49);
    java.lang.String str51 = server48.toString();
    java.lang.String str52 = server48.toString();
    tp2.IP iP53 = null;
    boolean b54 = server48.removeException(iP53);
    tp2.RealTime realTime55 = new tp2.RealTime();
    long long56 = realTime55.getCurrentTime();
    long long57 = realTime55.getCurrentTime();
    server48.setTime((tp2.ITime)realTime55);
    server40.setTime((tp2.ITime)realTime55);
    server0.setTime((tp2.ITime)realTime55);
    long long61 = realTime55.getCurrentTime();
    long long62 = realTime55.getCurrentTime();
    long long63 = realTime55.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 0+ "'", i17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"+ "'", str47.equals("Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str52.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long56 == 1466185920873L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long57 == 1466185920873L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long61 == 1466185920873L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long62 == 1466185920873L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long63 == 1466185920873L);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test209"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan6 = strictlySortedSinglyLinkedList0.get(100);
    strictlySortedSinglyLinkedList0.size = '#';
    tp2.Node node9 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    int i11 = strictlySortedSinglyLinkedList10.getSize();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList10.add(iPBan12);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList14 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node15 = strictlySortedSinglyLinkedList14.header;
    strictlySortedSinglyLinkedList10.header = node15;
    node9.next = node15;
    tp2.Node node18 = node9.next;
    tp2.Node node19 = node9.next;
    strictlySortedSinglyLinkedList0.header = node19;
    java.lang.String str21 = node19.toString();
    tp2.SinglyLinkedList singlyLinkedList22 = new tp2.SinglyLinkedList();
    tp2.IP iP24 = singlyLinkedList22.get((int)' ');
    tp2.Entry entry25 = new tp2.Entry();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i31 = iP30.getFirst();
    java.lang.String str32 = iP30.toString();
    entry25.element = iP30;
    boolean b34 = singlyLinkedList22.remove(iP30);
    tp2.IPBan iPBan36 = new tp2.IPBan(iP30, (java.lang.Long)1L);
    iPBan36.expires = 1466185871428L;
    iPBan36.expires = 0L;
    node19.element = iPBan36;
    tp2.IP iP42 = iPBan36.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[null]"+ "'", str21.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 10+ "'", i31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP42);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test210"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP58.setSecond((java.lang.Integer)1);
    boolean b61 = server0.removeBan(iP58);
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP63 = null;
    boolean b64 = server62.connect(iP63);
    java.lang.String str65 = server62.toString();
    java.lang.String str66 = server62.toString();
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = server62.connect(iP72);
    boolean b77 = server0.addBan(iP72);
    server0.update();
    tp2.SinglyLinkedList singlyLinkedList79 = new tp2.SinglyLinkedList();
    tp2.IP iP81 = singlyLinkedList79.get((int)' ');
    tp2.Entry entry82 = new tp2.Entry();
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i88 = iP87.getFirst();
    java.lang.String str89 = iP87.toString();
    entry82.element = iP87;
    boolean b91 = singlyLinkedList79.remove(iP87);
    tp2.IPBan iPBan93 = new tp2.IPBan(iP87, (java.lang.Long)1L);
    tp2.IP iP94 = iPBan93.ip;
    boolean b95 = server0.removeException(iP94);
    java.lang.Integer i96 = iP94.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 10+ "'", i88.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "10.0.0.100"+ "'", str89.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i96 + "' != '" + 10+ "'", i96.equals(10));

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test211"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    java.util.Set<tp2.IP> set_iP3 = null;
    boolean b4 = singlyLinkedList0.repOk(set_iP3);
    boolean b5 = singlyLinkedList0.isEmpty();
    int i6 = singlyLinkedList0.getSize();
    int i7 = singlyLinkedList0.getSize();
    java.lang.String str8 = singlyLinkedList0.toString();
    java.util.Set<tp2.IP> set_iP9 = null;
    boolean b10 = singlyLinkedList0.repOk(set_iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "()"+ "'", str8.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test212"); }


    tp2.RealTime realTime0 = new tp2.RealTime();
    long long1 = realTime0.getCurrentTime();
    long long2 = realTime0.getCurrentTime();
    long long3 = realTime0.getCurrentTime();
    long long4 = realTime0.getCurrentTime();
    long long5 = realTime0.getCurrentTime();
    long long6 = realTime0.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 1466185920949L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long2 == 1466185920949L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long3 == 1466185920949L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 1466185920949L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1466185920949L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1466185920950L);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test213"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.contains(iPBan2);
    strictlySortedSinglyLinkedList0.size = '4';
    tp2.IPBan iPBan7 = strictlySortedSinglyLinkedList0.get(97);
    tp2.SinglyLinkedList singlyLinkedList8 = new tp2.SinglyLinkedList();
    java.lang.String str9 = singlyLinkedList8.toString();
    java.lang.String str10 = singlyLinkedList8.toString();
    boolean b11 = singlyLinkedList8.isEmpty();
    tp2.IP iP12 = null;
    boolean b13 = singlyLinkedList8.remove(iP12);
    boolean b14 = singlyLinkedList8.isEmpty();
    int i15 = singlyLinkedList8.getSize();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    server19.update();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP26.setFirst((java.lang.Integer)1);
    java.lang.Integer i29 = iP26.getSecond();
    boolean b30 = server19.addException(iP26);
    tp2.Entry entry31 = new tp2.Entry();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i37 = iP36.getFirst();
    java.lang.String str38 = iP36.toString();
    entry31.element = iP36;
    boolean b40 = server19.addException(iP36);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList41 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList41.size = 10;
    tp2.Server server44 = new tp2.Server();
    java.lang.String str45 = server44.toString();
    server44.update();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP51.setFirst((java.lang.Integer)1);
    java.lang.Integer i54 = iP51.getSecond();
    boolean b55 = server44.addException(iP51);
    tp2.Entry entry56 = new tp2.Entry();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i62 = iP61.getFirst();
    java.lang.String str63 = iP61.toString();
    entry56.element = iP61;
    boolean b65 = server44.addException(iP61);
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b71 = server44.removeBan(iP70);
    iP70.setThird((java.lang.Integer)0);
    boolean b74 = strictlySortedSinglyLinkedList41.removeFromIP(iP70);
    boolean b75 = server19.addException(iP70);
    java.lang.String str76 = iP70.toString();
    boolean b77 = server16.removeBan(iP70);
    java.lang.Integer i78 = iP70.getThird();
    boolean b79 = singlyLinkedList8.contains(iP70);
    boolean b80 = strictlySortedSinglyLinkedList0.removeFromIP(iP70);
    java.lang.Integer i81 = iP70.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "()"+ "'", str9.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "()"+ "'", str10.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 0+ "'", i29.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 0+ "'", i54.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i62 + "' != '" + 10+ "'", i62.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "10.0.0.100"+ "'", str63.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "10.100.0.1"+ "'", str76.equals("10.100.0.1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i78 + "' != '" + 0+ "'", i78.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i81 + "' != '" + 0+ "'", i81.equals(0));

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test214"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    entry55.element = iP60;
    tp2.Entry entry63 = entry55.next;
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP65 = null;
    boolean b66 = server64.connect(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b72 = server64.connect(iP71);
    java.lang.Integer i73 = iP71.getFirst();
    entry55.element = iP71;
    iP71.setFourth((java.lang.Integer)100);
    boolean b77 = server0.removeException(iP71);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList78 = new tp2.StrictlySortedSinglyLinkedList();
    boolean b79 = iP71.equals((java.lang.Object)strictlySortedSinglyLinkedList78);
    java.lang.String str80 = strictlySortedSinglyLinkedList78.toString();
    tp2.Node node81 = strictlySortedSinglyLinkedList78.header;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList82 = new tp2.StrictlySortedSinglyLinkedList();
    int i83 = strictlySortedSinglyLinkedList82.getSize();
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b89 = strictlySortedSinglyLinkedList82.containsIP(iP88);
    tp2.Node node90 = strictlySortedSinglyLinkedList82.header;
    node81.next = node90;
    tp2.Node node92 = node81.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 100+ "'", i73.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "{}"+ "'", str80.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node92);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test215"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList9.size = 10;
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    server12.update();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP19.setFirst((java.lang.Integer)1);
    java.lang.Integer i22 = iP19.getSecond();
    boolean b23 = server12.addException(iP19);
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = server12.addException(iP29);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b39 = server12.removeBan(iP38);
    iP38.setThird((java.lang.Integer)0);
    boolean b42 = strictlySortedSinglyLinkedList9.removeFromIP(iP38);
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    server43.update();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP50.setFirst((java.lang.Integer)1);
    java.lang.Integer i53 = iP50.getSecond();
    boolean b54 = server43.addException(iP50);
    boolean b55 = strictlySortedSinglyLinkedList9.removeFromIP(iP50);
    boolean b56 = server0.connect(iP50);
    java.lang.Integer i57 = iP50.getFourth();
    java.lang.String str58 = iP50.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 0+ "'", i22.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 0+ "'", i53.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 100+ "'", i57.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "1.0.0.100"+ "'", str58.equals("1.0.0.100"));

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test216"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    tp2.IPBan iPBan7 = strictlySortedSinglyLinkedList0.get((int)'4');
    java.util.Set<tp2.IPBan> set_iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList0.repOk(set_iPBan8);
    boolean b10 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.IPBan iPBan12 = strictlySortedSinglyLinkedList0.get(1);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList13 = new tp2.StrictlySortedSinglyLinkedList();
    int i14 = strictlySortedSinglyLinkedList13.size;
    tp2.IPBan iPBan15 = null;
    boolean b16 = strictlySortedSinglyLinkedList13.add(iPBan15);
    int i17 = strictlySortedSinglyLinkedList13.size;
    tp2.Node node18 = strictlySortedSinglyLinkedList13.header;
    tp2.IPBan iPBan19 = node18.element;
    strictlySortedSinglyLinkedList0.header = node18;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan19);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test217"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    java.util.Set<tp2.IPBan> set_iPBan9 = null;
    boolean b10 = strictlySortedSinglyLinkedList0.repOk(set_iPBan9);
    int i11 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str12 = strictlySortedSinglyLinkedList0.toString();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList13 = new tp2.StrictlySortedSinglyLinkedList();
    int i14 = strictlySortedSinglyLinkedList13.getSize();
    tp2.IPBan iPBan15 = null;
    boolean b16 = strictlySortedSinglyLinkedList13.add(iPBan15);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList17 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node18 = strictlySortedSinglyLinkedList17.header;
    strictlySortedSinglyLinkedList13.header = node18;
    java.lang.String str20 = strictlySortedSinglyLinkedList13.toString();
    tp2.SinglyLinkedList singlyLinkedList21 = new tp2.SinglyLinkedList();
    tp2.IP iP23 = singlyLinkedList21.get((int)' ');
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = singlyLinkedList21.remove(iP29);
    tp2.IPBan iPBan35 = new tp2.IPBan(iP29, (java.lang.Long)1L);
    java.lang.String str36 = iPBan35.toString();
    iPBan35.setExpires((java.lang.Long)0L);
    java.lang.Long long39 = iPBan35.expires;
    tp2.IP iP40 = iPBan35.getIp();
    tp2.IP iP41 = iPBan35.ip;
    tp2.IP iP42 = iPBan35.getIp();
    java.lang.Long long43 = iPBan35.expires;
    boolean b44 = strictlySortedSinglyLinkedList13.add(iPBan35);
    iPBan35.setExpires((java.lang.Long)1466185888007L);
    tp2.IP iP47 = iPBan35.getIp();
    // The following exception was thrown during execution in test generation
    try {
      boolean b48 = strictlySortedSinglyLinkedList0.contains(iPBan35);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "{[null]}"+ "'", str12.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "{}"+ "'", str20.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str36.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L+ "'", long39.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L+ "'", long43.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP47);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test218"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    iPBan14.expires = 1466185871428L;
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP18 = null;
    boolean b19 = server17.connect(iP18);
    java.lang.String str20 = server17.toString();
    java.lang.String str21 = server17.toString();
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server17.connect(iP27);
    iPBan14.ip = iP27;
    tp2.SinglyLinkedList singlyLinkedList33 = new tp2.SinglyLinkedList();
    tp2.IP iP35 = singlyLinkedList33.get((int)' ');
    tp2.Entry entry36 = new tp2.Entry();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i42 = iP41.getFirst();
    java.lang.String str43 = iP41.toString();
    entry36.element = iP41;
    boolean b45 = singlyLinkedList33.remove(iP41);
    tp2.IPBan iPBan47 = new tp2.IPBan(iP41, (java.lang.Long)1L);
    iPBan47.expires = 1466185871428L;
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP51 = null;
    boolean b52 = server50.connect(iP51);
    java.lang.String str53 = server50.toString();
    java.lang.String str54 = server50.toString();
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    entry55.element = iP60;
    boolean b64 = server50.connect(iP60);
    iPBan47.ip = iP60;
    iPBan14.ip = iP60;
    iPBan14.expires = (-1L);
    java.lang.String str69 = iPBan14.toString();
    java.lang.Long long70 = iPBan14.expires;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 10+ "'", i42.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str53.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str54.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "IPBan [ip=10.0.0.100, expires=-1]"+ "'", str69.equals("IPBan [ip=10.0.0.100, expires=-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L)+ "'", long70.equals((-1L)));

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test219"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)32, (java.lang.Integer)35, (java.lang.Integer)35);
    tp2.IPBan iPBan6 = new tp2.IPBan(iP4, (java.lang.Long)1466185901113L);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test220"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    iPBan14.expires = 1466185871428L;
    iPBan14.expires = 0L;
    tp2.IP iP19 = iPBan14.getIp();
    tp2.IP iP20 = iPBan14.getIp();
    tp2.IP iP21 = iPBan14.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP21);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test221"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    int i7 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    java.lang.String str9 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node10 = new tp2.Node();
    tp2.IPBan iPBan11 = null;
    node10.element = iPBan11;
    tp2.SinglyLinkedList singlyLinkedList13 = new tp2.SinglyLinkedList();
    tp2.IP iP15 = singlyLinkedList13.get((int)' ');
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = singlyLinkedList13.remove(iP21);
    tp2.IPBan iPBan27 = new tp2.IPBan(iP21, (java.lang.Long)1L);
    java.lang.String str28 = iPBan27.toString();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    java.lang.String str36 = iP33.toString();
    iPBan27.setIp(iP33);
    java.lang.Long long38 = iPBan27.getExpires();
    node10.element = iPBan27;
    tp2.IPBan iPBan40 = node10.element;
    strictlySortedSinglyLinkedList0.header = node10;
    strictlySortedSinglyLinkedList0.size = '#';
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP45 = null;
    boolean b46 = server44.connect(iP45);
    java.lang.String str47 = server44.toString();
    java.lang.String str48 = server44.toString();
    tp2.Entry entry49 = new tp2.Entry();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i55 = iP54.getFirst();
    java.lang.String str56 = iP54.toString();
    entry49.element = iP54;
    boolean b58 = server44.connect(iP54);
    iP54.setFirst((java.lang.Integer)0);
    tp2.IPBan iPBan62 = new tp2.IPBan(iP54, (java.lang.Long)0L);
    tp2.IP iP63 = iPBan62.getIp();
    tp2.IP iP64 = iPBan62.ip;
    boolean b65 = strictlySortedSinglyLinkedList0.add(iPBan62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{}"+ "'", str8.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "{}"+ "'", str9.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str28.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L+ "'", long38.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 10+ "'", i55.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "10.0.0.100"+ "'", str56.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test222"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList15.size = 10;
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    server18.update();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setFirst((java.lang.Integer)1);
    java.lang.Integer i28 = iP25.getSecond();
    boolean b29 = server18.addException(iP25);
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server18.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b45 = server18.removeBan(iP44);
    iP44.setThird((java.lang.Integer)0);
    boolean b48 = strictlySortedSinglyLinkedList15.removeFromIP(iP44);
    boolean b49 = singlyLinkedList0.contains(iP44);
    tp2.Server server50 = new tp2.Server();
    java.lang.String str51 = server50.toString();
    server50.update();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    java.lang.Integer i60 = iP57.getSecond();
    boolean b61 = server50.addException(iP57);
    tp2.Entry entry62 = new tp2.Entry();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i68 = iP67.getFirst();
    java.lang.String str69 = iP67.toString();
    entry62.element = iP67;
    boolean b71 = server50.addException(iP67);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b77 = server50.removeBan(iP76);
    iP76.setThird((java.lang.Integer)0);
    boolean b80 = singlyLinkedList0.remove(iP76);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP85.setFirst((java.lang.Integer)1);
    singlyLinkedList0.add(iP85);
    tp2.IP iP90 = singlyLinkedList0.get((int)(byte)1);
    java.lang.String str91 = singlyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 0+ "'", i28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 0+ "'", i60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 10+ "'", i68.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "10.0.0.100"+ "'", str69.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "([1.0.0.100])"+ "'", str91.equals("([1.0.0.100])"));

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test223"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    iPBan14.expires = 1466185871428L;
    iPBan14.expires = 0L;
    tp2.IP iP19 = iPBan14.getIp();
    tp2.IP iP20 = iPBan14.getIp();
    iPBan14.setExpires((java.lang.Long)1466185897881L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test224"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    tp2.SinglyLinkedList singlyLinkedList2 = new tp2.SinglyLinkedList();
    tp2.IP iP4 = singlyLinkedList2.get((int)' ');
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = singlyLinkedList2.remove(iP10);
    tp2.IP iP16 = singlyLinkedList2.get((int)'4');
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    boolean b24 = singlyLinkedList2.contains(iP21);
    boolean b25 = singlyLinkedList0.remove(iP21);
    iP21.setFirst((java.lang.Integer)2);
    tp2.SinglyLinkedList singlyLinkedList28 = new tp2.SinglyLinkedList();
    tp2.IP iP30 = singlyLinkedList28.get((int)' ');
    tp2.Entry entry31 = new tp2.Entry();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i37 = iP36.getFirst();
    java.lang.String str38 = iP36.toString();
    entry31.element = iP36;
    boolean b40 = singlyLinkedList28.remove(iP36);
    tp2.IPBan iPBan42 = new tp2.IPBan(iP36, (java.lang.Long)1L);
    java.lang.String str43 = iPBan42.toString();
    iPBan42.setExpires((java.lang.Long)0L);
    java.lang.Long long46 = iPBan42.expires;
    tp2.IP iP47 = iPBan42.getIp();
    tp2.IP iP48 = iPBan42.ip;
    boolean b49 = iP21.equals((java.lang.Object)iPBan42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str43.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L+ "'", long46.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test225"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    int i7 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    java.lang.String str9 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node10 = new tp2.Node();
    tp2.IPBan iPBan11 = null;
    node10.element = iPBan11;
    tp2.SinglyLinkedList singlyLinkedList13 = new tp2.SinglyLinkedList();
    tp2.IP iP15 = singlyLinkedList13.get((int)' ');
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = singlyLinkedList13.remove(iP21);
    tp2.IPBan iPBan27 = new tp2.IPBan(iP21, (java.lang.Long)1L);
    java.lang.String str28 = iPBan27.toString();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    java.lang.String str36 = iP33.toString();
    iPBan27.setIp(iP33);
    java.lang.Long long38 = iPBan27.getExpires();
    node10.element = iPBan27;
    tp2.IPBan iPBan40 = node10.element;
    strictlySortedSinglyLinkedList0.header = node10;
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    tp2.Node node51 = new tp2.Node();
    tp2.IPBan iPBan52 = null;
    node51.element = iPBan52;
    tp2.SinglyLinkedList singlyLinkedList54 = new tp2.SinglyLinkedList();
    tp2.IP iP56 = singlyLinkedList54.get((int)' ');
    tp2.Entry entry57 = new tp2.Entry();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i63 = iP62.getFirst();
    java.lang.String str64 = iP62.toString();
    entry57.element = iP62;
    boolean b66 = singlyLinkedList54.remove(iP62);
    tp2.IPBan iPBan68 = new tp2.IPBan(iP62, (java.lang.Long)1L);
    java.lang.String str69 = iPBan68.toString();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i75 = iP74.getFirst();
    java.lang.String str76 = iP74.toString();
    java.lang.String str77 = iP74.toString();
    iPBan68.setIp(iP74);
    java.lang.Long long79 = iPBan68.getExpires();
    node51.element = iPBan68;
    boolean b81 = iP47.equals((java.lang.Object)iPBan68);
    tp2.SinglyLinkedList singlyLinkedList82 = new tp2.SinglyLinkedList();
    int i83 = singlyLinkedList82.getSize();
    java.lang.String str84 = singlyLinkedList82.toString();
    int i85 = singlyLinkedList82.getSize();
    java.util.Set<tp2.IP> set_iP86 = null;
    boolean b87 = singlyLinkedList82.repOk(set_iP86);
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b93 = singlyLinkedList82.remove(iP92);
    iPBan68.setIp(iP92);
    boolean b95 = strictlySortedSinglyLinkedList0.contains(iPBan68);
    tp2.Node node96 = strictlySortedSinglyLinkedList0.header;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{}"+ "'", str8.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "{}"+ "'", str9.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str28.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L+ "'", long38.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 10+ "'", i63.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "10.0.0.100"+ "'", str64.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str69.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 10+ "'", i75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "10.0.0.100"+ "'", str76.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L+ "'", long79.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "()"+ "'", str84.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node96);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test226"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    boolean b39 = iP5.equals((java.lang.Object)iPBan26);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    int i41 = singlyLinkedList40.getSize();
    java.lang.String str42 = singlyLinkedList40.toString();
    int i43 = singlyLinkedList40.getSize();
    java.util.Set<tp2.IP> set_iP44 = null;
    boolean b45 = singlyLinkedList40.repOk(set_iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b51 = singlyLinkedList40.remove(iP50);
    iPBan26.setIp(iP50);
    iPBan26.setExpires((java.lang.Long)1466185875369L);
    tp2.SinglyLinkedList singlyLinkedList55 = new tp2.SinglyLinkedList();
    tp2.IP iP57 = singlyLinkedList55.get((int)' ');
    tp2.IP iP59 = singlyLinkedList55.get((int)(byte)100);
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i65 = iP64.getFirst();
    java.lang.String str66 = iP64.toString();
    java.lang.String str67 = iP64.toString();
    iP64.setThird((java.lang.Integer)100);
    singlyLinkedList55.add(iP64);
    iPBan26.ip = iP64;
    java.lang.Long long72 = iPBan26.expires;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "()"+ "'", str42.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 10+ "'", i65.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "10.0.0.100"+ "'", str66.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "10.0.0.100"+ "'", str67.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1466185875369L+ "'", long72.equals(1466185875369L));

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test227"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.SinglyLinkedList singlyLinkedList3 = new tp2.SinglyLinkedList();
    tp2.IP iP5 = singlyLinkedList3.get((int)' ');
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    entry6.element = iP11;
    boolean b15 = singlyLinkedList3.remove(iP11);
    tp2.IPBan iPBan17 = new tp2.IPBan(iP11, (java.lang.Long)1L);
    java.lang.String str18 = iPBan17.toString();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    java.lang.String str26 = iP23.toString();
    iPBan17.setIp(iP23);
    java.lang.Long long28 = iPBan17.getExpires();
    node0.element = iPBan17;
    tp2.IPBan iPBan30 = node0.element;
    java.lang.String str31 = node0.toString();
    tp2.IPBan iPBan32 = node0.element;
    tp2.SinglyLinkedList singlyLinkedList33 = new tp2.SinglyLinkedList();
    tp2.IP iP35 = singlyLinkedList33.get((int)' ');
    tp2.Entry entry36 = new tp2.Entry();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i42 = iP41.getFirst();
    java.lang.String str43 = iP41.toString();
    entry36.element = iP41;
    boolean b45 = singlyLinkedList33.remove(iP41);
    tp2.IPBan iPBan47 = new tp2.IPBan(iP41, (java.lang.Long)1L);
    java.lang.String str48 = iPBan47.toString();
    java.lang.Long long49 = iPBan47.getExpires();
    iPBan47.expires = 0L;
    java.lang.Long long52 = iPBan47.getExpires();
    node0.element = iPBan47;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str18.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L+ "'", long28.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[IPBan [ip=10.0.0.100, expires=1]]"+ "'", str31.equals("[IPBan [ip=10.0.0.100, expires=1]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 10+ "'", i42.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str48.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L+ "'", long49.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L+ "'", long52.equals(0L));

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test228"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    java.lang.String str3 = singlyLinkedList0.toString();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    tp2.IP iP7 = singlyLinkedList0.get(32);
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP9 = null;
    boolean b10 = server8.connect(iP9);
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP15.setFirst((java.lang.Integer)1);
    boolean b18 = server8.removeException(iP15);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList19 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan20 = null;
    boolean b21 = strictlySortedSinglyLinkedList19.contains(iPBan20);
    int i22 = strictlySortedSinglyLinkedList19.getSize();
    tp2.IPBan iPBan24 = strictlySortedSinglyLinkedList19.get((int)'#');
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP29.setSecond((java.lang.Integer)(-1));
    boolean b32 = strictlySortedSinglyLinkedList19.removeFromIP(iP29);
    boolean b33 = server8.removeBan(iP29);
    boolean b34 = singlyLinkedList0.remove(iP29);
    tp2.Server server35 = new tp2.Server();
    tp2.IP iP36 = null;
    boolean b37 = server35.connect(iP36);
    java.lang.String str38 = server35.toString();
    java.lang.String str39 = server35.toString();
    tp2.Entry entry40 = new tp2.Entry();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i46 = iP45.getFirst();
    java.lang.String str47 = iP45.toString();
    entry40.element = iP45;
    boolean b49 = server35.connect(iP45);
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i55 = iP54.getFirst();
    java.lang.String str56 = iP54.toString();
    java.lang.String str57 = iP54.toString();
    boolean b58 = server35.removeBan(iP54);
    java.lang.Integer i59 = iP54.getFirst();
    java.lang.Integer i60 = iP54.getFirst();
    java.lang.Integer i61 = iP54.getThird();
    singlyLinkedList0.add(iP54);
    boolean b63 = singlyLinkedList0.isEmpty();
    java.util.Set<tp2.IP> set_iP64 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b65 = singlyLinkedList0.repOk(set_iP64);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 10+ "'", i46.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "10.0.0.100"+ "'", str47.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 10+ "'", i55.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "10.0.0.100"+ "'", str56.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "10.0.0.100"+ "'", str57.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 10+ "'", i59.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 10+ "'", i60.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 0+ "'", i61.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test229"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    tp2.IPBan iPBan7 = strictlySortedSinglyLinkedList0.get((int)'4');
    int i8 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (-1);
    strictlySortedSinglyLinkedList0.size = 2;
    int i13 = strictlySortedSinglyLinkedList0.size;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test230"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = node0.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan1);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test231"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    java.lang.String str34 = strictlySortedSinglyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    java.lang.String str50 = iPBan49.toString();
    boolean b51 = strictlySortedSinglyLinkedList0.contains(iPBan49);
    iPBan49.setExpires((java.lang.Long)1466185873141L);
    iPBan49.setExpires((java.lang.Long)1466185872933L);
    iPBan49.expires = 1466185888005L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "{}"+ "'", str34.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test232"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    tp2.IPBan iPBan7 = strictlySortedSinglyLinkedList0.get((int)'4');
    java.util.Set<tp2.IPBan> set_iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList0.repOk(set_iPBan8);
    boolean b10 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.IPBan iPBan12 = strictlySortedSinglyLinkedList0.get(1);
    java.lang.String str13 = strictlySortedSinglyLinkedList0.toString();
    boolean b14 = strictlySortedSinglyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "{[null]}"+ "'", str13.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test233"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    java.lang.String str3 = singlyLinkedList0.toString();
    java.lang.String str4 = singlyLinkedList0.toString();
    tp2.Server server5 = new tp2.Server();
    tp2.IP iP6 = null;
    boolean b7 = server5.connect(iP6);
    java.lang.String str8 = server5.toString();
    java.lang.String str9 = server5.toString();
    tp2.IP iP10 = null;
    boolean b11 = server5.removeException(iP10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList12 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList12.size = 10;
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    server15.update();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP22.setFirst((java.lang.Integer)1);
    java.lang.Integer i25 = iP22.getSecond();
    boolean b26 = server15.addException(iP22);
    tp2.Entry entry27 = new tp2.Entry();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    entry27.element = iP32;
    boolean b36 = server15.addException(iP32);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b42 = server15.removeBan(iP41);
    iP41.setThird((java.lang.Integer)0);
    boolean b45 = strictlySortedSinglyLinkedList12.removeFromIP(iP41);
    tp2.Server server46 = new tp2.Server();
    java.lang.String str47 = server46.toString();
    server46.update();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP53.setFirst((java.lang.Integer)1);
    java.lang.Integer i56 = iP53.getSecond();
    boolean b57 = server46.addException(iP53);
    boolean b58 = strictlySortedSinglyLinkedList12.removeFromIP(iP53);
    boolean b59 = server5.connect(iP53);
    boolean b60 = singlyLinkedList0.contains(iP53);
    tp2.IP iP62 = singlyLinkedList0.get(0);
    java.util.Set<tp2.IP> set_iP63 = null;
    boolean b64 = singlyLinkedList0.repOk(set_iP63);
    java.lang.String str65 = singlyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "()"+ "'", str4.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 0+ "'", i25.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 0+ "'", i56.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "()"+ "'", str65.equals("()"));

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test234"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    java.lang.String str5 = strictlySortedSinglyLinkedList0.toString();
    boolean b6 = strictlySortedSinglyLinkedList0.isEmpty();
    int i7 = strictlySortedSinglyLinkedList0.size;
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    tp2.Node node17 = new tp2.Node();
    tp2.IPBan iPBan18 = null;
    node17.element = iPBan18;
    tp2.SinglyLinkedList singlyLinkedList20 = new tp2.SinglyLinkedList();
    tp2.IP iP22 = singlyLinkedList20.get((int)' ');
    tp2.Entry entry23 = new tp2.Entry();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i29 = iP28.getFirst();
    java.lang.String str30 = iP28.toString();
    entry23.element = iP28;
    boolean b32 = singlyLinkedList20.remove(iP28);
    tp2.IPBan iPBan34 = new tp2.IPBan(iP28, (java.lang.Long)1L);
    java.lang.String str35 = iPBan34.toString();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i41 = iP40.getFirst();
    java.lang.String str42 = iP40.toString();
    java.lang.String str43 = iP40.toString();
    iPBan34.setIp(iP40);
    java.lang.Long long45 = iPBan34.getExpires();
    node17.element = iPBan34;
    boolean b47 = iP13.equals((java.lang.Object)iPBan34);
    tp2.SinglyLinkedList singlyLinkedList48 = new tp2.SinglyLinkedList();
    int i49 = singlyLinkedList48.getSize();
    java.lang.String str50 = singlyLinkedList48.toString();
    int i51 = singlyLinkedList48.getSize();
    java.util.Set<tp2.IP> set_iP52 = null;
    boolean b53 = singlyLinkedList48.repOk(set_iP52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b59 = singlyLinkedList48.remove(iP58);
    iPBan34.setIp(iP58);
    iPBan34.setExpires((java.lang.Long)1466185870380L);
    java.lang.String str63 = iPBan34.toString();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP69.setSecond((java.lang.Integer)(-1));
    boolean b72 = server64.addException(iP69);
    iPBan34.setIp(iP69);
    java.lang.String str74 = iP69.toString();
    boolean b75 = strictlySortedSinglyLinkedList0.containsIP(iP69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "{}"+ "'", str5.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 10+ "'", i29.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "10.0.0.100"+ "'", str30.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str35.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i41 + "' != '" + 10+ "'", i41.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L+ "'", long45.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "()"+ "'", str50.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "IPBan [ip=100.10.-1.10, expires=1466185870380]"+ "'", str63.equals("IPBan [ip=100.10.-1.10, expires=1466185870380]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.-1.0.100"+ "'", str74.equals("10.-1.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test235"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan5 = strictlySortedSinglyLinkedList0.get((int)'#');
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList6.size = 10;
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    server9.update();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP16.setFirst((java.lang.Integer)1);
    java.lang.Integer i19 = iP16.getSecond();
    boolean b20 = server9.addException(iP16);
    tp2.Entry entry21 = new tp2.Entry();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i27 = iP26.getFirst();
    java.lang.String str28 = iP26.toString();
    entry21.element = iP26;
    boolean b30 = server9.addException(iP26);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b36 = server9.removeBan(iP35);
    iP35.setThird((java.lang.Integer)0);
    boolean b39 = strictlySortedSinglyLinkedList6.removeFromIP(iP35);
    java.lang.String str40 = strictlySortedSinglyLinkedList6.toString();
    tp2.SinglyLinkedList singlyLinkedList41 = new tp2.SinglyLinkedList();
    tp2.IP iP43 = singlyLinkedList41.get((int)' ');
    tp2.Entry entry44 = new tp2.Entry();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i50 = iP49.getFirst();
    java.lang.String str51 = iP49.toString();
    entry44.element = iP49;
    boolean b53 = singlyLinkedList41.remove(iP49);
    tp2.IPBan iPBan55 = new tp2.IPBan(iP49, (java.lang.Long)1L);
    java.lang.String str56 = iPBan55.toString();
    boolean b57 = strictlySortedSinglyLinkedList6.contains(iPBan55);
    tp2.SinglyLinkedList singlyLinkedList58 = new tp2.SinglyLinkedList();
    tp2.IP iP60 = singlyLinkedList58.get((int)' ');
    tp2.Entry entry61 = new tp2.Entry();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i67 = iP66.getFirst();
    java.lang.String str68 = iP66.toString();
    entry61.element = iP66;
    boolean b70 = singlyLinkedList58.remove(iP66);
    tp2.IPBan iPBan72 = new tp2.IPBan(iP66, (java.lang.Long)1L);
    tp2.Server server73 = new tp2.Server();
    java.lang.String str74 = server73.toString();
    server73.update();
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i81 = iP80.getFirst();
    boolean b82 = server73.connect(iP80);
    iPBan72.ip = iP80;
    tp2.IP iP84 = iPBan72.ip;
    boolean b85 = strictlySortedSinglyLinkedList6.add(iPBan72);
    boolean b86 = strictlySortedSinglyLinkedList0.add(iPBan72);
    tp2.IP iP87 = null;
    tp2.IPBan iPBan89 = new tp2.IPBan(iP87, (java.lang.Long)200000L);
    boolean b90 = strictlySortedSinglyLinkedList0.add(iPBan89);
    java.lang.Long long91 = iPBan89.getExpires();
    iPBan89.expires = 1466185873038L;
    java.lang.Long long94 = iPBan89.getExpires();
    java.lang.Long long95 = iPBan89.expires;
    tp2.IP iP96 = iPBan89.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 0+ "'", i19.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "{}"+ "'", str40.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 10+ "'", i50.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "10.0.0.100"+ "'", str51.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str56.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 10+ "'", i67.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "10.0.0.100"+ "'", str68.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str74.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i81 + "' != '" + 100+ "'", i81.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long91 + "' != '" + 200000L+ "'", long91.equals(200000L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1466185873038L+ "'", long94.equals(1466185873038L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long95 + "' != '" + 1466185873038L+ "'", long95.equals(1466185873038L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP96);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test236"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    iPBan14.expires = 1466185871428L;
    iPBan14.expires = 0L;
    iPBan14.setExpires((java.lang.Long)1466185872205L);
    iPBan14.expires = 1466185887014L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test237"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i11 = iP10.getFirst();
    boolean b12 = server3.connect(iP10);
    boolean b13 = strictlySortedSinglyLinkedList0.removeFromIP(iP10);
    java.lang.String str14 = strictlySortedSinglyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList15 = new tp2.SinglyLinkedList();
    tp2.IP iP17 = singlyLinkedList15.get((int)' ');
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = singlyLinkedList15.remove(iP23);
    tp2.IPBan iPBan29 = new tp2.IPBan(iP23, (java.lang.Long)1L);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    server30.update();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i38 = iP37.getFirst();
    boolean b39 = server30.connect(iP37);
    iPBan29.ip = iP37;
    tp2.IP iP41 = iPBan29.getIp();
    boolean b42 = strictlySortedSinglyLinkedList0.contains(iPBan29);
    tp2.Node node43 = new tp2.Node();
    tp2.IPBan iPBan44 = null;
    node43.element = iPBan44;
    tp2.SinglyLinkedList singlyLinkedList46 = new tp2.SinglyLinkedList();
    tp2.IP iP48 = singlyLinkedList46.get((int)' ');
    tp2.Entry entry49 = new tp2.Entry();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i55 = iP54.getFirst();
    java.lang.String str56 = iP54.toString();
    entry49.element = iP54;
    boolean b58 = singlyLinkedList46.remove(iP54);
    tp2.IPBan iPBan60 = new tp2.IPBan(iP54, (java.lang.Long)1L);
    java.lang.String str61 = iPBan60.toString();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i67 = iP66.getFirst();
    java.lang.String str68 = iP66.toString();
    java.lang.String str69 = iP66.toString();
    iPBan60.setIp(iP66);
    java.lang.Long long71 = iPBan60.getExpires();
    node43.element = iPBan60;
    tp2.IPBan iPBan73 = node43.element;
    strictlySortedSinglyLinkedList0.header = node43;
    tp2.Node node75 = strictlySortedSinglyLinkedList0.header;
    java.lang.String str76 = strictlySortedSinglyLinkedList0.toString();
    java.util.Set<tp2.IPBan> set_iPBan77 = null;
    boolean b78 = strictlySortedSinglyLinkedList0.repOk(set_iPBan77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 100+ "'", i11.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "{}"+ "'", str14.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i38 + "' != '" + 100+ "'", i38.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 10+ "'", i55.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "10.0.0.100"+ "'", str56.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str61.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 10+ "'", i67.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "10.0.0.100"+ "'", str68.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "10.0.0.100"+ "'", str69.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L+ "'", long71.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "{}"+ "'", str76.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test238"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    java.lang.String str14 = iP11.toString();
    iP11.setThird((java.lang.Integer)(-1));
    boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP11);
    tp2.IPBan iPBan19 = strictlySortedSinglyLinkedList0.get((int)(short)(-1));
    java.util.Set<tp2.IPBan> set_iPBan20 = null;
    boolean b21 = strictlySortedSinglyLinkedList0.repOk(set_iPBan20);
    java.util.Set<tp2.IPBan> set_iPBan22 = null;
    boolean b23 = strictlySortedSinglyLinkedList0.repOk(set_iPBan22);
    tp2.Server server24 = new tp2.Server();
    tp2.IP iP25 = null;
    boolean b26 = server24.connect(iP25);
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b32 = server24.connect(iP31);
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP34 = null;
    boolean b35 = server33.connect(iP34);
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP40.setFirst((java.lang.Integer)1);
    boolean b43 = server33.removeException(iP40);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList44 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan45 = null;
    boolean b46 = strictlySortedSinglyLinkedList44.contains(iPBan45);
    int i47 = strictlySortedSinglyLinkedList44.getSize();
    tp2.IPBan iPBan49 = strictlySortedSinglyLinkedList44.get((int)'#');
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP54.setSecond((java.lang.Integer)(-1));
    boolean b57 = strictlySortedSinglyLinkedList44.removeFromIP(iP54);
    boolean b58 = server33.removeBan(iP54);
    tp2.SinglyLinkedList singlyLinkedList59 = new tp2.SinglyLinkedList();
    tp2.IP iP61 = singlyLinkedList59.get((int)' ');
    tp2.Entry entry62 = new tp2.Entry();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i68 = iP67.getFirst();
    java.lang.String str69 = iP67.toString();
    entry62.element = iP67;
    boolean b71 = singlyLinkedList59.remove(iP67);
    boolean b72 = iP54.equals((java.lang.Object)iP67);
    boolean b73 = server24.removeException(iP54);
    boolean b74 = strictlySortedSinglyLinkedList0.containsIP(iP54);
    java.util.Set<tp2.IPBan> set_iPBan75 = null;
    boolean b76 = strictlySortedSinglyLinkedList0.repOk(set_iPBan75);
    tp2.IPBan iPBan78 = strictlySortedSinglyLinkedList0.get((int)(byte)100);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList79 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan80 = null;
    boolean b81 = strictlySortedSinglyLinkedList79.contains(iPBan80);
    tp2.Server server82 = new tp2.Server();
    java.lang.String str83 = server82.toString();
    server82.update();
    tp2.IP iP89 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i90 = iP89.getFirst();
    boolean b91 = server82.connect(iP89);
    boolean b92 = strictlySortedSinglyLinkedList79.removeFromIP(iP89);
    java.lang.Integer i93 = iP89.getFourth();
    boolean b94 = strictlySortedSinglyLinkedList0.containsIP(iP89);
    tp2.IPBan iPBan96 = strictlySortedSinglyLinkedList0.get(101);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 10+ "'", i68.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "10.0.0.100"+ "'", str69.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str83.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i90 + "' != '" + 100+ "'", i90.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i93 + "' != '" + 10+ "'", i93.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan96);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test239"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.ITime iTime3 = null;
    server0.setTime(iTime3);
    tp2.Entry entry5 = new tp2.Entry();
    tp2.Entry entry6 = entry5.next;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)10, (java.lang.Integer)11, (java.lang.Integer)2);
    entry5.element = iP11;
    boolean b13 = server0.addException(iP11);
    tp2.SinglyLinkedList singlyLinkedList14 = new tp2.SinglyLinkedList();
    tp2.IP iP16 = singlyLinkedList14.get((int)' ');
    tp2.Entry entry17 = new tp2.Entry();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i23 = iP22.getFirst();
    java.lang.String str24 = iP22.toString();
    entry17.element = iP22;
    boolean b26 = singlyLinkedList14.remove(iP22);
    tp2.IP iP28 = singlyLinkedList14.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList29 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList29.size = 10;
    tp2.Server server32 = new tp2.Server();
    java.lang.String str33 = server32.toString();
    server32.update();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP39.setFirst((java.lang.Integer)1);
    java.lang.Integer i42 = iP39.getSecond();
    boolean b43 = server32.addException(iP39);
    tp2.Entry entry44 = new tp2.Entry();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i50 = iP49.getFirst();
    java.lang.String str51 = iP49.toString();
    entry44.element = iP49;
    boolean b53 = server32.addException(iP49);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b59 = server32.removeBan(iP58);
    iP58.setThird((java.lang.Integer)0);
    boolean b62 = strictlySortedSinglyLinkedList29.removeFromIP(iP58);
    boolean b63 = singlyLinkedList14.contains(iP58);
    tp2.Server server64 = new tp2.Server();
    java.lang.String str65 = server64.toString();
    server64.update();
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP71.setFirst((java.lang.Integer)1);
    java.lang.Integer i74 = iP71.getSecond();
    boolean b75 = server64.addException(iP71);
    tp2.Entry entry76 = new tp2.Entry();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i82 = iP81.getFirst();
    java.lang.String str83 = iP81.toString();
    entry76.element = iP81;
    boolean b85 = server64.addException(iP81);
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b91 = server64.removeBan(iP90);
    iP90.setThird((java.lang.Integer)0);
    boolean b94 = singlyLinkedList14.remove(iP90);
    java.lang.Integer i95 = iP90.getSecond();
    boolean b96 = server0.addException(iP90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 10+ "'", i23.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "10.0.0.100"+ "'", str24.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 0+ "'", i42.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 10+ "'", i50.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "10.0.0.100"+ "'", str51.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i74 + "' != '" + 0+ "'", i74.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i82 + "' != '" + 10+ "'", i82.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "10.0.0.100"+ "'", str83.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i95 + "' != '" + 100+ "'", i95.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test240"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.IPBan iPBan3 = null;
    node0.element = iPBan3;
    java.lang.String str5 = node0.toString();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList6.size = 10;
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    server9.update();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP16.setFirst((java.lang.Integer)1);
    java.lang.Integer i19 = iP16.getSecond();
    boolean b20 = server9.addException(iP16);
    tp2.Entry entry21 = new tp2.Entry();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i27 = iP26.getFirst();
    java.lang.String str28 = iP26.toString();
    entry21.element = iP26;
    boolean b30 = server9.addException(iP26);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b36 = server9.removeBan(iP35);
    iP35.setThird((java.lang.Integer)0);
    boolean b39 = strictlySortedSinglyLinkedList6.removeFromIP(iP35);
    tp2.Server server40 = new tp2.Server();
    java.lang.String str41 = server40.toString();
    server40.update();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP47.setFirst((java.lang.Integer)1);
    java.lang.Integer i50 = iP47.getSecond();
    boolean b51 = server40.addException(iP47);
    boolean b52 = strictlySortedSinglyLinkedList6.removeFromIP(iP47);
    int i53 = strictlySortedSinglyLinkedList6.size;
    strictlySortedSinglyLinkedList6.size = (byte)1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList56 = new tp2.StrictlySortedSinglyLinkedList();
    int i57 = strictlySortedSinglyLinkedList56.getSize();
    tp2.IPBan iPBan58 = null;
    boolean b59 = strictlySortedSinglyLinkedList56.add(iPBan58);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList60 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node61 = strictlySortedSinglyLinkedList60.header;
    strictlySortedSinglyLinkedList56.header = node61;
    tp2.IPBan iPBan63 = node61.element;
    strictlySortedSinglyLinkedList6.header = node61;
    node0.next = node61;
    java.lang.String str66 = node61.toString();
    tp2.Node node67 = node61.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[null]"+ "'", str5.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 0+ "'", i19.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 0+ "'", i50.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "[null]"+ "'", str66.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node67);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test241"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.contains(iPBan2);
    tp2.SinglyLinkedList singlyLinkedList4 = new tp2.SinglyLinkedList();
    tp2.IP iP6 = singlyLinkedList4.get((int)' ');
    tp2.Entry entry7 = new tp2.Entry();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i13 = iP12.getFirst();
    java.lang.String str14 = iP12.toString();
    entry7.element = iP12;
    boolean b16 = singlyLinkedList4.remove(iP12);
    tp2.IPBan iPBan18 = new tp2.IPBan(iP12, (java.lang.Long)1L);
    java.lang.String str19 = iPBan18.toString();
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP21 = null;
    boolean b22 = server20.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b28 = server20.connect(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP30 = null;
    boolean b31 = server29.connect(iP30);
    java.lang.String str32 = server29.toString();
    java.lang.String str33 = server29.toString();
    tp2.Entry entry34 = new tp2.Entry();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    entry34.element = iP39;
    boolean b43 = server29.connect(iP39);
    boolean b44 = server20.removeException(iP39);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP46 = null;
    boolean b47 = server45.connect(iP46);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b53 = server45.connect(iP52);
    java.lang.Integer i54 = iP52.getFirst();
    boolean b55 = server20.connect(iP52);
    iPBan18.ip = iP52;
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP58 = null;
    boolean b59 = server57.connect(iP58);
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b65 = server57.connect(iP64);
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP67 = null;
    boolean b68 = server66.connect(iP67);
    java.lang.String str69 = server66.toString();
    java.lang.String str70 = server66.toString();
    tp2.Entry entry71 = new tp2.Entry();
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i77 = iP76.getFirst();
    java.lang.String str78 = iP76.toString();
    entry71.element = iP76;
    boolean b80 = server66.connect(iP76);
    boolean b81 = server57.removeException(iP76);
    tp2.Server server82 = new tp2.Server();
    tp2.IP iP83 = null;
    boolean b84 = server82.connect(iP83);
    tp2.IP iP89 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b90 = server82.connect(iP89);
    java.lang.Integer i91 = iP89.getFirst();
    boolean b92 = server57.connect(iP89);
    iPBan18.setIp(iP89);
    boolean b94 = strictlySortedSinglyLinkedList0.add(iPBan18);
    java.lang.Long long95 = iPBan18.getExpires();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 10+ "'", i13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str19.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 100+ "'", i54.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str69.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str70.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i77 + "' != '" + 10+ "'", i77.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "10.0.0.100"+ "'", str78.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i91 + "' != '" + 100+ "'", i91.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long95 + "' != '" + 1L+ "'", long95.equals(1L));

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test242"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i5 = iP4.getFirst();
    java.lang.String str6 = iP4.toString();
    java.lang.String str7 = iP4.toString();
    iP4.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan11 = new tp2.IPBan(iP4, (java.lang.Long)0L);
    tp2.IP iP12 = iPBan11.ip;
    tp2.IP iP13 = iPBan11.ip;
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    entry14.element = iP19;
    tp2.IP iP23 = entry14.element;
    iPBan11.ip = iP23;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i5 + "' != '" + 10+ "'", i5.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "10.0.0.100"+ "'", str6.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP23);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test243"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    int i3 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    int i6 = singlyLinkedList0.getSize();
    int i7 = singlyLinkedList0.getSize();
    int i8 = singlyLinkedList0.getSize();
    boolean b9 = singlyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test244"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.IP iP9 = entry0.element;
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP11 = null;
    boolean b12 = server10.connect(iP11);
    java.lang.String str13 = server10.toString();
    java.lang.String str14 = server10.toString();
    tp2.SinglyLinkedList singlyLinkedList15 = new tp2.SinglyLinkedList();
    tp2.IP iP17 = singlyLinkedList15.get((int)' ');
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = singlyLinkedList15.remove(iP23);
    tp2.IPBan iPBan29 = new tp2.IPBan(iP23, (java.lang.Long)1L);
    java.lang.String str30 = iPBan29.toString();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    java.lang.String str38 = iP35.toString();
    iPBan29.setIp(iP35);
    java.lang.Integer i40 = iP35.getFirst();
    boolean b41 = server10.removeException(iP35);
    iP35.setThird((java.lang.Integer)(-1));
    entry0.element = iP35;
    java.lang.String str45 = entry0.toString();
    tp2.Entry entry46 = new tp2.Entry();
    java.lang.String str47 = entry46.toString();
    java.lang.String str48 = entry46.toString();
    tp2.IP iP49 = entry46.element;
    entry0.next = entry46;
    tp2.IP iP51 = entry0.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str30.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[10.0.-1.100]"+ "'", str45.equals("[10.0.-1.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "[null]"+ "'", str47.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "[null]"+ "'", str48.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP51);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test245"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    java.lang.String str14 = iP11.toString();
    iP11.setThird((java.lang.Integer)(-1));
    boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP11);
    tp2.SinglyLinkedList singlyLinkedList18 = new tp2.SinglyLinkedList();
    tp2.IP iP20 = singlyLinkedList18.get((int)' ');
    tp2.Entry entry21 = new tp2.Entry();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i27 = iP26.getFirst();
    java.lang.String str28 = iP26.toString();
    entry21.element = iP26;
    boolean b30 = singlyLinkedList18.remove(iP26);
    tp2.IPBan iPBan32 = new tp2.IPBan(iP26, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList33 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan34 = null;
    boolean b35 = strictlySortedSinglyLinkedList33.contains(iPBan34);
    int i36 = strictlySortedSinglyLinkedList33.getSize();
    tp2.IPBan iPBan38 = strictlySortedSinglyLinkedList33.get((int)'#');
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP43.setSecond((java.lang.Integer)(-1));
    boolean b46 = strictlySortedSinglyLinkedList33.removeFromIP(iP43);
    iPBan32.ip = iP43;
    boolean b48 = strictlySortedSinglyLinkedList0.removeFromIP(iP43);
    java.util.Set<tp2.IPBan> set_iPBan49 = null;
    boolean b50 = strictlySortedSinglyLinkedList0.repOk(set_iPBan49);
    boolean b51 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.SinglyLinkedList singlyLinkedList52 = new tp2.SinglyLinkedList();
    tp2.IP iP54 = singlyLinkedList52.get((int)' ');
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    entry55.element = iP60;
    boolean b64 = singlyLinkedList52.remove(iP60);
    tp2.IPBan iPBan66 = new tp2.IPBan(iP60, (java.lang.Long)1L);
    java.lang.String str67 = iPBan66.toString();
    iPBan66.setExpires((java.lang.Long)0L);
    java.lang.Long long70 = iPBan66.expires;
    tp2.IP iP71 = iPBan66.getIp();
    tp2.IP iP72 = iPBan66.ip;
    tp2.IP iP73 = iPBan66.getIp();
    iPBan66.expires = 1466185876788L;
    iPBan66.expires = 0L;
    boolean b78 = strictlySortedSinglyLinkedList0.add(iPBan66);
    iPBan66.expires = 1466185888008L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str67.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L+ "'", long70.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test246"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = server0.connect(iP10);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    java.lang.String str22 = iP19.toString();
    boolean b23 = server0.removeBan(iP19);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    server24.update();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i32 = iP31.getFirst();
    boolean b33 = server24.connect(iP31);
    java.lang.Integer i34 = iP31.getSecond();
    boolean b35 = server0.removeBan(iP31);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 100+ "'", i32.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test247"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.IPBan iPBan3 = node0.element;
    java.lang.String str4 = node0.toString();
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get((int)' ');
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    boolean b17 = singlyLinkedList5.remove(iP13);
    tp2.IPBan iPBan19 = new tp2.IPBan(iP13, (java.lang.Long)1L);
    iPBan19.expires = 1466185871428L;
    iPBan19.expires = 0L;
    iPBan19.setExpires((java.lang.Long)1466185872205L);
    iPBan19.expires = 1466185877431L;
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.Integer i35 = iP32.getFourth();
    java.lang.Integer i36 = iP32.getSecond();
    iPBan19.ip = iP32;
    node0.element = iPBan19;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[null]"+ "'", str4.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 100+ "'", i35.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 0+ "'", i36.equals(0));

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test248"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = new tp2.Node();
    tp2.IPBan iPBan5 = null;
    node4.element = iPBan5;
    tp2.IPBan iPBan7 = null;
    node4.element = iPBan7;
    tp2.IPBan iPBan9 = node4.element;
    strictlySortedSinglyLinkedList0.header = node4;
    int i11 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan13 = strictlySortedSinglyLinkedList0.get((int)(byte)100);
    java.lang.String str14 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node15 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node16 = node15.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "{}"+ "'", str14.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node16);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test249"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = entry0.next;
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)10, (java.lang.Integer)11, (java.lang.Integer)2);
    entry0.element = iP6;
    tp2.Entry entry8 = new tp2.Entry();
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    java.lang.String str16 = iP14.toString();
    entry9.element = iP14;
    tp2.Entry entry18 = new tp2.Entry();
    tp2.Entry entry19 = new tp2.Entry();
    java.lang.String str20 = entry19.toString();
    java.lang.String str21 = entry19.toString();
    tp2.Entry entry22 = entry19.next;
    entry18.next = entry19;
    tp2.IP iP24 = entry18.element;
    entry9.next = entry18;
    entry8.next = entry18;
    tp2.IP iP27 = entry18.element;
    entry0.next = entry18;
    java.lang.String str29 = entry18.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[null]"+ "'", str20.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[null]"+ "'", str21.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[null]"+ "'", str29.equals("[null]"));

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test250"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    int i3 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    int i6 = singlyLinkedList0.getSize();
    tp2.IP iP8 = singlyLinkedList0.get(0);
    java.util.Set<tp2.IP> set_iP9 = null;
    boolean b10 = singlyLinkedList0.repOk(set_iP9);
    int i11 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP12 = null;
    boolean b13 = singlyLinkedList0.repOk(set_iP12);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList14 = new tp2.StrictlySortedSinglyLinkedList();
    int i15 = strictlySortedSinglyLinkedList14.getSize();
    tp2.IPBan iPBan16 = null;
    boolean b17 = strictlySortedSinglyLinkedList14.add(iPBan16);
    tp2.Node node18 = new tp2.Node();
    tp2.IPBan iPBan19 = null;
    node18.element = iPBan19;
    tp2.IPBan iPBan21 = null;
    node18.element = iPBan21;
    tp2.IPBan iPBan23 = node18.element;
    strictlySortedSinglyLinkedList14.header = node18;
    int i25 = strictlySortedSinglyLinkedList14.size;
    tp2.SinglyLinkedList singlyLinkedList26 = new tp2.SinglyLinkedList();
    int i27 = singlyLinkedList26.getSize();
    tp2.SinglyLinkedList singlyLinkedList28 = new tp2.SinglyLinkedList();
    tp2.IP iP30 = singlyLinkedList28.get((int)' ');
    tp2.Entry entry31 = new tp2.Entry();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i37 = iP36.getFirst();
    java.lang.String str38 = iP36.toString();
    entry31.element = iP36;
    boolean b40 = singlyLinkedList28.remove(iP36);
    tp2.IP iP42 = singlyLinkedList28.get((int)'4');
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    boolean b50 = singlyLinkedList28.contains(iP47);
    boolean b51 = singlyLinkedList26.remove(iP47);
    tp2.Entry entry52 = new tp2.Entry();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i58 = iP57.getFirst();
    entry52.element = iP57;
    tp2.Entry entry60 = entry52.next;
    tp2.Server server61 = new tp2.Server();
    tp2.IP iP62 = null;
    boolean b63 = server61.connect(iP62);
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b69 = server61.connect(iP68);
    java.lang.Integer i70 = iP68.getFirst();
    entry52.element = iP68;
    iP68.setFourth((java.lang.Integer)100);
    boolean b74 = singlyLinkedList26.remove(iP68);
    boolean b75 = strictlySortedSinglyLinkedList14.removeFromIP(iP68);
    singlyLinkedList0.add(iP68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 10+ "'", i58.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 100+ "'", i70.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test251"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    int i9 = strictlySortedSinglyLinkedList0.getSize();
    int i10 = strictlySortedSinglyLinkedList0.getSize();
    boolean b11 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.IPBan iPBan13 = strictlySortedSinglyLinkedList0.get((int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan13);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test252"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    boolean b9 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    int i11 = strictlySortedSinglyLinkedList10.getSize();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList10.add(iPBan12);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList14 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node15 = strictlySortedSinglyLinkedList14.header;
    strictlySortedSinglyLinkedList10.header = node15;
    strictlySortedSinglyLinkedList10.size = 0;
    int i19 = strictlySortedSinglyLinkedList10.size;
    tp2.Node node20 = strictlySortedSinglyLinkedList10.header;
    tp2.Node node21 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList0.header = node21;
    boolean b23 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.SinglyLinkedList singlyLinkedList24 = new tp2.SinglyLinkedList();
    int i25 = singlyLinkedList24.getSize();
    tp2.SinglyLinkedList singlyLinkedList26 = new tp2.SinglyLinkedList();
    tp2.IP iP28 = singlyLinkedList26.get((int)' ');
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = singlyLinkedList26.remove(iP34);
    tp2.IP iP40 = singlyLinkedList26.get((int)'4');
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i46 = iP45.getFirst();
    java.lang.String str47 = iP45.toString();
    boolean b48 = singlyLinkedList26.contains(iP45);
    boolean b49 = singlyLinkedList24.remove(iP45);
    boolean b50 = strictlySortedSinglyLinkedList0.containsIP(iP45);
    strictlySortedSinglyLinkedList0.size = 1;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 10+ "'", i46.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "10.0.0.100"+ "'", str47.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test253"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b7 = strictlySortedSinglyLinkedList0.containsIP(iP6);
    int i8 = strictlySortedSinglyLinkedList0.size;
    tp2.Node node9 = strictlySortedSinglyLinkedList0.header;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node9);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test254"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    java.lang.Integer i22 = iP17.getFirst();
    java.lang.Integer i23 = iP17.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 0+ "'", i23.equals(0));

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test255"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP22.setSecond((java.lang.Integer)(-1));
    iPBan14.ip = iP22;
    iPBan14.setExpires((java.lang.Long)200000L);
    iPBan14.expires = 1466185890638L;
    tp2.SinglyLinkedList singlyLinkedList30 = new tp2.SinglyLinkedList();
    tp2.IP iP32 = singlyLinkedList30.get((int)' ');
    tp2.Entry entry33 = new tp2.Entry();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i39 = iP38.getFirst();
    java.lang.String str40 = iP38.toString();
    entry33.element = iP38;
    boolean b42 = singlyLinkedList30.remove(iP38);
    tp2.IPBan iPBan44 = new tp2.IPBan(iP38, (java.lang.Long)1L);
    java.lang.String str45 = iPBan44.toString();
    iPBan44.setExpires((java.lang.Long)0L);
    java.lang.Long long48 = iPBan44.expires;
    tp2.IP iP49 = iPBan44.getIp();
    tp2.IP iP50 = iPBan44.ip;
    tp2.IP iP51 = iPBan44.getIp();
    iPBan44.expires = 1466185876788L;
    iPBan44.expires = 0L;
    tp2.Entry entry56 = new tp2.Entry();
    java.lang.String str57 = entry56.toString();
    java.lang.String str58 = entry56.toString();
    tp2.Entry entry59 = entry56.next;
    tp2.IP iP60 = entry56.element;
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i66 = iP65.getFirst();
    java.lang.String str67 = iP65.toString();
    java.lang.String str68 = iP65.toString();
    iP65.setThird((java.lang.Integer)(-1));
    entry56.element = iP65;
    tp2.IP iP72 = entry56.element;
    iP72.setFirst((java.lang.Integer)1);
    iPBan44.setIp(iP72);
    tp2.IP iP76 = iPBan44.ip;
    java.lang.Integer i77 = iP76.getFourth();
    java.lang.Integer i78 = iP76.getSecond();
    tp2.IPBan iPBan80 = new tp2.IPBan(iP76, (java.lang.Long)1466185884639L);
    iPBan14.ip = iP76;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + 10+ "'", i39.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "10.0.0.100"+ "'", str40.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str45.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L+ "'", long48.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "[null]"+ "'", str57.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "[null]"+ "'", str58.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i66 + "' != '" + 10+ "'", i66.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "10.0.0.100"+ "'", str67.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "10.0.0.100"+ "'", str68.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i77 + "' != '" + 100+ "'", i77.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i78 + "' != '" + 0+ "'", i78.equals(0));

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test256"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b24 = server16.connect(iP23);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP26 = null;
    boolean b27 = server25.connect(iP26);
    java.lang.String str28 = server25.toString();
    java.lang.String str29 = server25.toString();
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server25.connect(iP35);
    boolean b40 = server16.removeException(iP35);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP42 = null;
    boolean b43 = server41.connect(iP42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b49 = server41.connect(iP48);
    java.lang.Integer i50 = iP48.getFirst();
    boolean b51 = server16.connect(iP48);
    iPBan14.ip = iP48;
    java.lang.Long long53 = iPBan14.expires;
    iPBan14.setExpires((java.lang.Long)1466185884035L);
    tp2.IP iP56 = iPBan14.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 100+ "'", i50.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L+ "'", long53.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP56);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test257"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.Server server5 = new tp2.Server();
    tp2.IP iP6 = null;
    boolean b7 = server5.connect(iP6);
    java.lang.String str8 = server5.toString();
    java.lang.String str9 = server5.toString();
    tp2.IP iP10 = null;
    boolean b11 = server5.removeException(iP10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList12 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList12.size = 10;
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    server15.update();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP22.setFirst((java.lang.Integer)1);
    java.lang.Integer i25 = iP22.getSecond();
    boolean b26 = server15.addException(iP22);
    tp2.Entry entry27 = new tp2.Entry();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    entry27.element = iP32;
    boolean b36 = server15.addException(iP32);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b42 = server15.removeBan(iP41);
    iP41.setThird((java.lang.Integer)0);
    boolean b45 = strictlySortedSinglyLinkedList12.removeFromIP(iP41);
    tp2.Server server46 = new tp2.Server();
    java.lang.String str47 = server46.toString();
    server46.update();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP53.setFirst((java.lang.Integer)1);
    java.lang.Integer i56 = iP53.getSecond();
    boolean b57 = server46.addException(iP53);
    boolean b58 = strictlySortedSinglyLinkedList12.removeFromIP(iP53);
    boolean b59 = server5.connect(iP53);
    tp2.Entry entry60 = new tp2.Entry();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i66 = iP65.getFirst();
    entry60.element = iP65;
    tp2.Entry entry68 = entry60.next;
    tp2.Server server69 = new tp2.Server();
    tp2.IP iP70 = null;
    boolean b71 = server69.connect(iP70);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b77 = server69.connect(iP76);
    java.lang.Integer i78 = iP76.getFirst();
    entry60.element = iP76;
    iP76.setFourth((java.lang.Integer)100);
    boolean b82 = server5.removeException(iP76);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList83 = new tp2.StrictlySortedSinglyLinkedList();
    boolean b84 = iP76.equals((java.lang.Object)strictlySortedSinglyLinkedList83);
    java.lang.String str85 = strictlySortedSinglyLinkedList83.toString();
    tp2.Node node86 = strictlySortedSinglyLinkedList83.header;
    strictlySortedSinglyLinkedList0.header = node86;
    strictlySortedSinglyLinkedList0.size = (short)0;
    int i90 = strictlySortedSinglyLinkedList0.size;
    tp2.Node node91 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan93 = strictlySortedSinglyLinkedList0.get((int)(byte)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 0+ "'", i25.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 0+ "'", i56.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i66 + "' != '" + 10+ "'", i66.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i78 + "' != '" + 100+ "'", i78.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "{}"+ "'", str85.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan93);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test258"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    int i52 = strictlySortedSinglyLinkedList0.size;
    tp2.Node node53 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList54 = new tp2.StrictlySortedSinglyLinkedList();
    int i55 = strictlySortedSinglyLinkedList54.getSize();
    tp2.IPBan iPBan56 = null;
    boolean b57 = strictlySortedSinglyLinkedList54.add(iPBan56);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList58 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node59 = strictlySortedSinglyLinkedList58.header;
    strictlySortedSinglyLinkedList54.header = node59;
    node53.next = node59;
    tp2.Node node62 = node53.next;
    tp2.Node node63 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList64 = new tp2.StrictlySortedSinglyLinkedList();
    int i65 = strictlySortedSinglyLinkedList64.getSize();
    tp2.IPBan iPBan66 = null;
    boolean b67 = strictlySortedSinglyLinkedList64.add(iPBan66);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList68 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node69 = strictlySortedSinglyLinkedList68.header;
    strictlySortedSinglyLinkedList64.header = node69;
    node63.next = node69;
    tp2.IPBan iPBan72 = null;
    node63.element = iPBan72;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList74 = new tp2.StrictlySortedSinglyLinkedList();
    int i75 = strictlySortedSinglyLinkedList74.getSize();
    tp2.IPBan iPBan76 = null;
    boolean b77 = strictlySortedSinglyLinkedList74.add(iPBan76);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList78 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node79 = strictlySortedSinglyLinkedList78.header;
    strictlySortedSinglyLinkedList74.header = node79;
    tp2.IPBan iPBan81 = node79.element;
    node63.next = node79;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList83 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node84 = strictlySortedSinglyLinkedList83.header;
    node79.next = node84;
    node53.next = node84;
    strictlySortedSinglyLinkedList0.header = node53;
    java.lang.String str88 = node53.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "[null]"+ "'", str88.equals("[null]"));

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test259"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    java.lang.String str13 = singlyLinkedList0.toString();
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    server14.update();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP21.setFirst((java.lang.Integer)1);
    java.lang.Integer i24 = iP21.getSecond();
    boolean b25 = server14.addException(iP21);
    tp2.Entry entry26 = new tp2.Entry();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i32 = iP31.getFirst();
    java.lang.String str33 = iP31.toString();
    entry26.element = iP31;
    boolean b35 = server14.addException(iP31);
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b41 = server14.removeBan(iP40);
    java.lang.String str42 = server14.toString();
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    server43.update();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP50.setFirst((java.lang.Integer)1);
    java.lang.Integer i53 = iP50.getSecond();
    boolean b54 = server43.addException(iP50);
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    entry55.element = iP60;
    boolean b64 = server43.addException(iP60);
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b70 = server43.removeBan(iP69);
    boolean b71 = server14.removeException(iP69);
    boolean b72 = singlyLinkedList0.remove(iP69);
    tp2.Entry entry73 = new tp2.Entry();
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i79 = iP78.getFirst();
    java.lang.String str80 = iP78.toString();
    entry73.element = iP78;
    tp2.IP iP82 = entry73.element;
    java.lang.Integer i83 = iP82.getFirst();
    boolean b84 = singlyLinkedList0.contains(iP82);
    int i85 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "()"+ "'", str13.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 0+ "'", i24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 10+ "'", i32.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "10.0.0.100"+ "'", str33.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=1466185922230, exceptions=([10.0.0.100][1.0.0.100]), bans={}]"+ "'", str42.equals("Server [lastUpdate=1466185922230, exceptions=([10.0.0.100][1.0.0.100]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 0+ "'", i53.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i79 + "' != '" + 10+ "'", i79.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "10.0.0.100"+ "'", str80.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i83 + "' != '" + 10+ "'", i83.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test260"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    java.lang.String str15 = singlyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "()"+ "'", str15.equals("()"));

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test261"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    java.lang.String str14 = iP11.toString();
    iP11.setThird((java.lang.Integer)(-1));
    boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP11);
    java.lang.String str18 = strictlySortedSinglyLinkedList0.toString();
    int i19 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "{}"+ "'", str18.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test262"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    int i3 = singlyLinkedList0.getSize();
    int i4 = singlyLinkedList0.getSize();
    java.lang.String str5 = singlyLinkedList0.toString();
    int i6 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "()"+ "'", str5.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test263"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)32, (java.lang.Integer)2, (java.lang.Integer)10);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test264"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    tp2.IP iP15 = iPBan14.ip;
    tp2.IP iP16 = iPBan14.getIp();
    tp2.SinglyLinkedList singlyLinkedList17 = new tp2.SinglyLinkedList();
    tp2.IP iP19 = singlyLinkedList17.get(1);
    tp2.IP iP21 = singlyLinkedList17.get(0);
    java.util.Set<tp2.IP> set_iP22 = null;
    boolean b23 = singlyLinkedList17.repOk(set_iP22);
    java.lang.String str24 = singlyLinkedList17.toString();
    int i25 = singlyLinkedList17.getSize();
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP27 = null;
    boolean b28 = server26.connect(iP27);
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP33.setFirst((java.lang.Integer)1);
    boolean b36 = server26.removeException(iP33);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b45 = server37.connect(iP44);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList46 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList46.size = 10;
    tp2.Server server49 = new tp2.Server();
    java.lang.String str50 = server49.toString();
    server49.update();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP56.setFirst((java.lang.Integer)1);
    java.lang.Integer i59 = iP56.getSecond();
    boolean b60 = server49.addException(iP56);
    tp2.Entry entry61 = new tp2.Entry();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i67 = iP66.getFirst();
    java.lang.String str68 = iP66.toString();
    entry61.element = iP66;
    boolean b70 = server49.addException(iP66);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b76 = server49.removeBan(iP75);
    iP75.setThird((java.lang.Integer)0);
    boolean b79 = strictlySortedSinglyLinkedList46.removeFromIP(iP75);
    tp2.Server server80 = new tp2.Server();
    java.lang.String str81 = server80.toString();
    server80.update();
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP87.setFirst((java.lang.Integer)1);
    java.lang.Integer i90 = iP87.getSecond();
    boolean b91 = server80.addException(iP87);
    boolean b92 = strictlySortedSinglyLinkedList46.removeFromIP(iP87);
    boolean b93 = server37.connect(iP87);
    boolean b94 = server26.removeBan(iP87);
    boolean b95 = singlyLinkedList17.contains(iP87);
    java.lang.Integer i96 = iP87.getSecond();
    iPBan14.setIp(iP87);
    tp2.IP iP98 = iPBan14.ip;
    java.lang.Integer i99 = iP98.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "()"+ "'", str24.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 0+ "'", i59.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 10+ "'", i67.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "10.0.0.100"+ "'", str68.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str81.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i90 + "' != '" + 0+ "'", i90.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i96 + "' != '" + 0+ "'", i96.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i99 + "' != '" + 0+ "'", i99.equals(0));

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test265"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    tp2.IP iP2 = entry0.element;
    tp2.IP iP3 = entry0.element;
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)100);
    iP8.setFourth((java.lang.Integer)1);
    java.lang.Integer i11 = iP8.getFourth();
    iP8.setFirst((java.lang.Integer)0);
    entry0.element = iP8;
    iP8.setThird((java.lang.Integer)11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 1+ "'", i11.equals(1));

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test266"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)'4');
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP16 = null;
    boolean b17 = server15.connect(iP16);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b23 = server15.connect(iP22);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList24 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList24.size = 10;
    tp2.Server server27 = new tp2.Server();
    java.lang.String str28 = server27.toString();
    server27.update();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP34.setFirst((java.lang.Integer)1);
    java.lang.Integer i37 = iP34.getSecond();
    boolean b38 = server27.addException(iP34);
    tp2.Entry entry39 = new tp2.Entry();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i45 = iP44.getFirst();
    java.lang.String str46 = iP44.toString();
    entry39.element = iP44;
    boolean b48 = server27.addException(iP44);
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b54 = server27.removeBan(iP53);
    iP53.setThird((java.lang.Integer)0);
    boolean b57 = strictlySortedSinglyLinkedList24.removeFromIP(iP53);
    tp2.Server server58 = new tp2.Server();
    java.lang.String str59 = server58.toString();
    server58.update();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP65.setFirst((java.lang.Integer)1);
    java.lang.Integer i68 = iP65.getSecond();
    boolean b69 = server58.addException(iP65);
    boolean b70 = strictlySortedSinglyLinkedList24.removeFromIP(iP65);
    boolean b71 = server15.connect(iP65);
    tp2.Server server72 = new tp2.Server();
    tp2.IP iP73 = null;
    boolean b74 = server72.connect(iP73);
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b80 = server72.connect(iP79);
    java.lang.Integer i81 = iP79.getFirst();
    boolean b82 = server15.connect(iP79);
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP87.setFirst((java.lang.Integer)1);
    boolean b90 = server15.removeException(iP87);
    boolean b91 = singlyLinkedList0.contains(iP87);
    java.util.Set<tp2.IP> set_iP92 = null;
    boolean b93 = singlyLinkedList0.repOk(set_iP92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 0+ "'", i37.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 10+ "'", i45.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "10.0.0.100"+ "'", str46.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str59.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 0+ "'", i68.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i81 + "' != '" + 100+ "'", i81.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test267"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    boolean b2 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList3 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList3.add(iPBan4);
    java.util.Set<tp2.IPBan> set_iPBan6 = null;
    boolean b7 = strictlySortedSinglyLinkedList3.repOk(set_iPBan6);
    boolean b8 = strictlySortedSinglyLinkedList3.isEmpty();
    int i9 = strictlySortedSinglyLinkedList3.size;
    tp2.IPBan iPBan11 = strictlySortedSinglyLinkedList3.get((int)(short)10);
    strictlySortedSinglyLinkedList3.size = 11;
    strictlySortedSinglyLinkedList3.size = 'a';
    java.lang.String str16 = strictlySortedSinglyLinkedList3.toString();
    int i17 = strictlySortedSinglyLinkedList3.getSize();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList18 = new tp2.StrictlySortedSinglyLinkedList();
    int i19 = strictlySortedSinglyLinkedList18.getSize();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b25 = strictlySortedSinglyLinkedList18.containsIP(iP24);
    tp2.Node node26 = strictlySortedSinglyLinkedList18.header;
    tp2.Node node27 = node26.next;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList28 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan29 = null;
    boolean b30 = strictlySortedSinglyLinkedList28.add(iPBan29);
    java.util.Set<tp2.IPBan> set_iPBan31 = null;
    boolean b32 = strictlySortedSinglyLinkedList28.repOk(set_iPBan31);
    tp2.Node node33 = new tp2.Node();
    tp2.IPBan iPBan34 = null;
    node33.element = iPBan34;
    tp2.IPBan iPBan36 = null;
    node33.element = iPBan36;
    tp2.IPBan iPBan38 = node33.element;
    strictlySortedSinglyLinkedList28.header = node33;
    node26.next = node33;
    strictlySortedSinglyLinkedList3.header = node33;
    strictlySortedSinglyLinkedList0.header = node33;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "{[null]}"+ "'", str16.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan38);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test268"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = entry0.next;
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b17 = server9.connect(iP16);
    java.lang.Integer i18 = iP16.getFirst();
    entry0.element = iP16;
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP24.setThird((java.lang.Integer)1);
    entry0.element = iP24;
    tp2.Entry entry28 = new tp2.Entry();
    java.lang.String str29 = entry28.toString();
    tp2.Entry entry30 = new tp2.Entry();
    java.lang.String str31 = entry30.toString();
    entry28.next = entry30;
    entry0.next = entry28;
    tp2.IP iP34 = entry0.element;
    iP34.setSecond((java.lang.Integer)32);
    java.lang.Integer i37 = iP34.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 100+ "'", i18.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[null]"+ "'", str29.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[null]"+ "'", str31.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test269"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i8 = iP7.getFirst();
    java.lang.String str9 = iP7.toString();
    java.lang.String str10 = iP7.toString();
    boolean b11 = server0.connect(iP7);
    tp2.IP iP12 = null;
    tp2.IPBan iPBan14 = new tp2.IPBan(iP12, (java.lang.Long)200000L);
    iPBan14.setExpires((java.lang.Long)1466185872933L);
    tp2.SinglyLinkedList singlyLinkedList17 = new tp2.SinglyLinkedList();
    tp2.IP iP19 = singlyLinkedList17.get((int)' ');
    tp2.Entry entry20 = new tp2.Entry();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    entry20.element = iP25;
    boolean b29 = singlyLinkedList17.remove(iP25);
    tp2.IPBan iPBan31 = new tp2.IPBan(iP25, (java.lang.Long)1L);
    java.lang.String str32 = iPBan31.toString();
    iPBan31.setExpires((java.lang.Long)0L);
    java.lang.Long long35 = iPBan31.expires;
    tp2.IP iP36 = iPBan31.ip;
    iP36.setFirst((java.lang.Integer)0);
    iP36.setSecond((java.lang.Integer)(-1));
    iPBan14.setIp(iP36);
    boolean b42 = server0.connect(iP36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i8 + "' != '" + 10+ "'", i8.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "10.0.0.100"+ "'", str9.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str32.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L+ "'", long35.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test270"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    java.lang.String str34 = strictlySortedSinglyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    java.lang.String str50 = iPBan49.toString();
    boolean b51 = strictlySortedSinglyLinkedList0.contains(iPBan49);
    tp2.IP iP52 = iPBan49.getIp();
    iPBan49.setExpires((java.lang.Long)100L);
    iPBan49.expires = 1466185886103L;
    tp2.IP iP57 = iPBan49.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "{}"+ "'", str34.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP57);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test271"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    tp2.Node node3 = strictlySortedSinglyLinkedList0.header;
    tp2.Server server4 = new tp2.Server();
    tp2.IP iP5 = null;
    boolean b6 = server4.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b12 = server4.connect(iP11);
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP14 = null;
    boolean b15 = server13.connect(iP14);
    java.lang.String str16 = server13.toString();
    java.lang.String str17 = server13.toString();
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = server13.connect(iP23);
    boolean b28 = server4.removeException(iP23);
    java.lang.Integer i29 = iP23.getFourth();
    boolean b30 = strictlySortedSinglyLinkedList0.removeFromIP(iP23);
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP32 = null;
    boolean b33 = server31.connect(iP32);
    java.lang.String str34 = server31.toString();
    tp2.Server server35 = new tp2.Server();
    tp2.IP iP36 = null;
    boolean b37 = server35.connect(iP36);
    java.lang.String str38 = server35.toString();
    java.lang.String str39 = server35.toString();
    tp2.Entry entry40 = new tp2.Entry();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i46 = iP45.getFirst();
    java.lang.String str47 = iP45.toString();
    entry40.element = iP45;
    boolean b49 = server35.connect(iP45);
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i55 = iP54.getFirst();
    java.lang.String str56 = iP54.toString();
    java.lang.String str57 = iP54.toString();
    boolean b58 = server35.removeBan(iP54);
    iP54.setFirst((java.lang.Integer)10);
    boolean b61 = server31.removeException(iP54);
    tp2.IPBan iPBan63 = new tp2.IPBan(iP54, (java.lang.Long)1L);
    java.lang.Long long64 = iPBan63.expires;
    tp2.IP iP65 = iPBan63.ip;
    tp2.SinglyLinkedList singlyLinkedList66 = new tp2.SinglyLinkedList();
    tp2.IP iP68 = singlyLinkedList66.get((int)' ');
    tp2.Entry entry69 = new tp2.Entry();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i75 = iP74.getFirst();
    java.lang.String str76 = iP74.toString();
    entry69.element = iP74;
    boolean b78 = singlyLinkedList66.remove(iP74);
    tp2.IP iP80 = singlyLinkedList66.get((int)'4');
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i86 = iP85.getFirst();
    java.lang.String str87 = iP85.toString();
    boolean b88 = singlyLinkedList66.contains(iP85);
    iPBan63.setIp(iP85);
    iPBan63.setExpires((java.lang.Long)200000L);
    boolean b92 = strictlySortedSinglyLinkedList0.contains(iPBan63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 100+ "'", i29.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 10+ "'", i46.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "10.0.0.100"+ "'", str47.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 10+ "'", i55.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "10.0.0.100"+ "'", str56.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "10.0.0.100"+ "'", str57.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L+ "'", long64.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 10+ "'", i75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "10.0.0.100"+ "'", str76.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i86 + "' != '" + 10+ "'", i86.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "10.0.0.100"+ "'", str87.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test272"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = server0.connect(iP10);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    java.lang.String str22 = iP19.toString();
    boolean b23 = server0.removeBan(iP19);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    server24.update();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i32 = iP31.getFirst();
    boolean b33 = server24.connect(iP31);
    java.lang.Integer i34 = iP31.getSecond();
    boolean b35 = server0.removeBan(iP31);
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP37 = null;
    boolean b38 = server36.connect(iP37);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b44 = server36.connect(iP43);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP46 = null;
    boolean b47 = server45.connect(iP46);
    java.lang.String str48 = server45.toString();
    java.lang.String str49 = server45.toString();
    tp2.Entry entry50 = new tp2.Entry();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i56 = iP55.getFirst();
    java.lang.String str57 = iP55.toString();
    entry50.element = iP55;
    boolean b59 = server45.connect(iP55);
    boolean b60 = server36.removeException(iP55);
    tp2.Server server61 = new tp2.Server();
    tp2.IP iP62 = null;
    boolean b63 = server61.connect(iP62);
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b69 = server61.connect(iP68);
    java.lang.Integer i70 = iP68.getFirst();
    boolean b71 = server36.connect(iP68);
    tp2.IPBan iPBan73 = new tp2.IPBan(iP68, (java.lang.Long)1466185872881L);
    boolean b74 = server0.removeBan(iP68);
    tp2.SinglyLinkedList singlyLinkedList75 = new tp2.SinglyLinkedList();
    tp2.IP iP77 = singlyLinkedList75.get((int)' ');
    tp2.Entry entry78 = new tp2.Entry();
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i84 = iP83.getFirst();
    java.lang.String str85 = iP83.toString();
    entry78.element = iP83;
    boolean b87 = singlyLinkedList75.remove(iP83);
    tp2.IPBan iPBan89 = new tp2.IPBan(iP83, (java.lang.Long)1L);
    java.lang.String str90 = iPBan89.toString();
    iPBan89.setExpires((java.lang.Long)0L);
    java.lang.Long long93 = iPBan89.expires;
    tp2.IP iP94 = iPBan89.ip;
    tp2.IP iP95 = iPBan89.ip;
    tp2.IP iP96 = iPBan89.ip;
    tp2.IP iP97 = iPBan89.getIp();
    boolean b98 = server0.removeException(iP97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 100+ "'", i32.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str49.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 10+ "'", i56.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "10.0.0.100"+ "'", str57.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 100+ "'", i70.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i84 + "' != '" + 10+ "'", i84.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "10.0.0.100"+ "'", str85.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str90.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L+ "'", long93.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == false);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test273"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan6 = strictlySortedSinglyLinkedList0.get(100);
    tp2.IPBan iPBan8 = strictlySortedSinglyLinkedList0.get((int)(byte)100);
    boolean b9 = strictlySortedSinglyLinkedList0.isEmpty();
    boolean b10 = strictlySortedSinglyLinkedList0.isEmpty();
    int i11 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test274"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP4.setFirst((java.lang.Integer)1);
    java.lang.Integer i7 = iP4.getSecond();
    iP4.setThird((java.lang.Integer)(-1));
    java.lang.Integer i10 = iP4.getFirst();
    iP4.setFourth((java.lang.Integer)100);
    iP4.setFirst((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i7 + "' != '" + 0+ "'", i7.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 1+ "'", i10.equals(1));

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test275"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)'4');
    java.lang.String str15 = singlyLinkedList0.toString();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList16 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList16.size = 10;
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    server19.update();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP26.setFirst((java.lang.Integer)1);
    java.lang.Integer i29 = iP26.getSecond();
    boolean b30 = server19.addException(iP26);
    tp2.Entry entry31 = new tp2.Entry();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i37 = iP36.getFirst();
    java.lang.String str38 = iP36.toString();
    entry31.element = iP36;
    boolean b40 = server19.addException(iP36);
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b46 = server19.removeBan(iP45);
    iP45.setThird((java.lang.Integer)0);
    boolean b49 = strictlySortedSinglyLinkedList16.removeFromIP(iP45);
    java.lang.Integer i50 = iP45.getFourth();
    singlyLinkedList0.add(iP45);
    tp2.Entry entry52 = new tp2.Entry();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i58 = iP57.getFirst();
    java.lang.String str59 = iP57.toString();
    entry52.element = iP57;
    tp2.Node node61 = new tp2.Node();
    tp2.IPBan iPBan62 = null;
    node61.element = iPBan62;
    tp2.SinglyLinkedList singlyLinkedList64 = new tp2.SinglyLinkedList();
    tp2.IP iP66 = singlyLinkedList64.get((int)' ');
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = singlyLinkedList64.remove(iP72);
    tp2.IPBan iPBan78 = new tp2.IPBan(iP72, (java.lang.Long)1L);
    java.lang.String str79 = iPBan78.toString();
    tp2.IP iP84 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i85 = iP84.getFirst();
    java.lang.String str86 = iP84.toString();
    java.lang.String str87 = iP84.toString();
    iPBan78.setIp(iP84);
    java.lang.Long long89 = iPBan78.getExpires();
    node61.element = iPBan78;
    boolean b91 = iP57.equals((java.lang.Object)iPBan78);
    tp2.IPBan iPBan93 = new tp2.IPBan(iP57, (java.lang.Long)1466185894666L);
    boolean b94 = singlyLinkedList0.remove(iP57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "()"+ "'", str15.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 0+ "'", i29.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 1+ "'", i50.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 10+ "'", i58.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "10.0.0.100"+ "'", str59.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str79.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i85 + "' != '" + 10+ "'", i85.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "10.0.0.100"+ "'", str86.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "10.0.0.100"+ "'", str87.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1L+ "'", long89.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test276"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)11, (java.lang.Integer)101, (java.lang.Integer)1);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test277"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    java.lang.String str19 = iP16.toString();
    iP16.setThird((java.lang.Integer)(-1));
    boolean b22 = server0.addBan(iP16);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList23 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node24 = strictlySortedSinglyLinkedList23.header;
    tp2.Node node25 = new tp2.Node();
    tp2.IPBan iPBan26 = null;
    node25.element = iPBan26;
    tp2.IPBan iPBan28 = null;
    node25.element = iPBan28;
    strictlySortedSinglyLinkedList23.header = node25;
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b36 = strictlySortedSinglyLinkedList23.containsIP(iP35);
    iP35.setThird((java.lang.Integer)100);
    boolean b39 = server0.removeException(iP35);
    iP35.setFirst((java.lang.Integer)1);
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    entry42.element = iP47;
    tp2.IP iP50 = entry42.element;
    tp2.IPBan iPBan52 = new tp2.IPBan(iP50, (java.lang.Long)1466185871942L);
    tp2.IP iP53 = iPBan52.ip;
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)100);
    iP58.setFourth((java.lang.Integer)(-1));
    iPBan52.ip = iP58;
    boolean b62 = iP35.equals((java.lang.Object)iP58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test278"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    java.lang.String str14 = iP11.toString();
    iP11.setThird((java.lang.Integer)(-1));
    boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP11);
    tp2.SinglyLinkedList singlyLinkedList18 = new tp2.SinglyLinkedList();
    tp2.IP iP20 = singlyLinkedList18.get((int)' ');
    tp2.Entry entry21 = new tp2.Entry();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i27 = iP26.getFirst();
    java.lang.String str28 = iP26.toString();
    entry21.element = iP26;
    boolean b30 = singlyLinkedList18.remove(iP26);
    tp2.IPBan iPBan32 = new tp2.IPBan(iP26, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList33 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan34 = null;
    boolean b35 = strictlySortedSinglyLinkedList33.contains(iPBan34);
    int i36 = strictlySortedSinglyLinkedList33.getSize();
    tp2.IPBan iPBan38 = strictlySortedSinglyLinkedList33.get((int)'#');
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP43.setSecond((java.lang.Integer)(-1));
    boolean b46 = strictlySortedSinglyLinkedList33.removeFromIP(iP43);
    iPBan32.ip = iP43;
    boolean b48 = strictlySortedSinglyLinkedList0.removeFromIP(iP43);
    tp2.IP iP49 = null;
    boolean b50 = strictlySortedSinglyLinkedList0.removeFromIP(iP49);
    java.util.Set<tp2.IPBan> set_iPBan51 = null;
    boolean b52 = strictlySortedSinglyLinkedList0.repOk(set_iPBan51);
    tp2.SinglyLinkedList singlyLinkedList53 = new tp2.SinglyLinkedList();
    int i54 = singlyLinkedList53.getSize();
    java.lang.String str55 = singlyLinkedList53.toString();
    int i56 = singlyLinkedList53.getSize();
    java.util.Set<tp2.IP> set_iP57 = null;
    boolean b58 = singlyLinkedList53.repOk(set_iP57);
    int i59 = singlyLinkedList53.getSize();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b65 = singlyLinkedList53.remove(iP64);
    java.lang.Integer i66 = iP64.getFirst();
    java.lang.Integer i67 = iP64.getFourth();
    boolean b68 = strictlySortedSinglyLinkedList0.removeFromIP(iP64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "()"+ "'", str55.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i66 + "' != '" + 0+ "'", i66.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 100+ "'", i67.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test279"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    java.lang.Integer i9 = iP7.getFirst();
    java.lang.Integer i10 = iP7.getFirst();
    iP7.setFourth((java.lang.Integer)100);
    java.lang.Integer i13 = iP7.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 100+ "'", i9.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 100+ "'", i10.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 100+ "'", i13.equals(100));

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test280"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = entry0.next;
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b17 = server9.connect(iP16);
    java.lang.Integer i18 = iP16.getFirst();
    entry0.element = iP16;
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP24.setThird((java.lang.Integer)1);
    entry0.element = iP24;
    tp2.Entry entry28 = new tp2.Entry();
    java.lang.String str29 = entry28.toString();
    tp2.Entry entry30 = new tp2.Entry();
    java.lang.String str31 = entry30.toString();
    entry28.next = entry30;
    entry0.next = entry28;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList34 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan35 = null;
    boolean b36 = strictlySortedSinglyLinkedList34.contains(iPBan35);
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    server37.update();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i45 = iP44.getFirst();
    boolean b46 = server37.connect(iP44);
    boolean b47 = strictlySortedSinglyLinkedList34.removeFromIP(iP44);
    java.lang.Integer i48 = iP44.getThird();
    iP44.setFourth((java.lang.Integer)100);
    entry0.element = iP44;
    tp2.Entry entry52 = new tp2.Entry();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i58 = iP57.getFirst();
    java.lang.String str59 = iP57.toString();
    entry52.element = iP57;
    tp2.IP iP61 = entry52.element;
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP63 = null;
    boolean b64 = server62.connect(iP63);
    java.lang.String str65 = server62.toString();
    java.lang.String str66 = server62.toString();
    tp2.SinglyLinkedList singlyLinkedList67 = new tp2.SinglyLinkedList();
    tp2.IP iP69 = singlyLinkedList67.get((int)' ');
    tp2.Entry entry70 = new tp2.Entry();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i76 = iP75.getFirst();
    java.lang.String str77 = iP75.toString();
    entry70.element = iP75;
    boolean b79 = singlyLinkedList67.remove(iP75);
    tp2.IPBan iPBan81 = new tp2.IPBan(iP75, (java.lang.Long)1L);
    java.lang.String str82 = iPBan81.toString();
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i88 = iP87.getFirst();
    java.lang.String str89 = iP87.toString();
    java.lang.String str90 = iP87.toString();
    iPBan81.setIp(iP87);
    java.lang.Integer i92 = iP87.getFirst();
    boolean b93 = server62.removeException(iP87);
    iP87.setThird((java.lang.Integer)(-1));
    entry52.element = iP87;
    java.lang.String str97 = entry52.toString();
    entry0.next = entry52;
    tp2.IP iP99 = entry52.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 100+ "'", i18.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[null]"+ "'", str29.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[null]"+ "'", str31.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 100+ "'", i45.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + (-1)+ "'", i48.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 10+ "'", i58.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "10.0.0.100"+ "'", str59.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 10+ "'", i76.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str82.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 10+ "'", i88.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "10.0.0.100"+ "'", str89.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "10.0.0.100"+ "'", str90.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i92 + "' != '" + 10+ "'", i92.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str97 + "' != '" + "[10.0.-1.100]"+ "'", str97.equals("[10.0.-1.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP99);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test281"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    entry55.element = iP60;
    tp2.Entry entry63 = entry55.next;
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP65 = null;
    boolean b66 = server64.connect(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b72 = server64.connect(iP71);
    java.lang.Integer i73 = iP71.getFirst();
    entry55.element = iP71;
    iP71.setFourth((java.lang.Integer)100);
    boolean b77 = server0.removeException(iP71);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList78 = new tp2.StrictlySortedSinglyLinkedList();
    boolean b79 = iP71.equals((java.lang.Object)strictlySortedSinglyLinkedList78);
    int i80 = strictlySortedSinglyLinkedList78.size;
    java.util.Set<tp2.IPBan> set_iPBan81 = null;
    boolean b82 = strictlySortedSinglyLinkedList78.repOk(set_iPBan81);
    java.util.Set<tp2.IPBan> set_iPBan83 = null;
    boolean b84 = strictlySortedSinglyLinkedList78.repOk(set_iPBan83);
    java.lang.String str85 = strictlySortedSinglyLinkedList78.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 100+ "'", i73.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "{}"+ "'", str85.equals("{}"));

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test282"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.IPBan iPBan3 = null;
    node0.element = iPBan3;
    java.lang.String str5 = node0.toString();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList6.size = 10;
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    server9.update();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP16.setFirst((java.lang.Integer)1);
    java.lang.Integer i19 = iP16.getSecond();
    boolean b20 = server9.addException(iP16);
    tp2.Entry entry21 = new tp2.Entry();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i27 = iP26.getFirst();
    java.lang.String str28 = iP26.toString();
    entry21.element = iP26;
    boolean b30 = server9.addException(iP26);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b36 = server9.removeBan(iP35);
    iP35.setThird((java.lang.Integer)0);
    boolean b39 = strictlySortedSinglyLinkedList6.removeFromIP(iP35);
    tp2.Server server40 = new tp2.Server();
    java.lang.String str41 = server40.toString();
    server40.update();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP47.setFirst((java.lang.Integer)1);
    java.lang.Integer i50 = iP47.getSecond();
    boolean b51 = server40.addException(iP47);
    boolean b52 = strictlySortedSinglyLinkedList6.removeFromIP(iP47);
    int i53 = strictlySortedSinglyLinkedList6.size;
    strictlySortedSinglyLinkedList6.size = (byte)1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList56 = new tp2.StrictlySortedSinglyLinkedList();
    int i57 = strictlySortedSinglyLinkedList56.getSize();
    tp2.IPBan iPBan58 = null;
    boolean b59 = strictlySortedSinglyLinkedList56.add(iPBan58);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList60 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node61 = strictlySortedSinglyLinkedList60.header;
    strictlySortedSinglyLinkedList56.header = node61;
    tp2.IPBan iPBan63 = node61.element;
    strictlySortedSinglyLinkedList6.header = node61;
    node0.next = node61;
    java.lang.String str66 = node61.toString();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList67 = new tp2.StrictlySortedSinglyLinkedList();
    int i68 = strictlySortedSinglyLinkedList67.getSize();
    tp2.IPBan iPBan69 = null;
    boolean b70 = strictlySortedSinglyLinkedList67.add(iPBan69);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList71 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node72 = strictlySortedSinglyLinkedList71.header;
    strictlySortedSinglyLinkedList67.header = node72;
    strictlySortedSinglyLinkedList67.size = 0;
    int i76 = strictlySortedSinglyLinkedList67.size;
    tp2.Node node77 = strictlySortedSinglyLinkedList67.header;
    tp2.Node node78 = strictlySortedSinglyLinkedList67.header;
    node61.next = node78;
    tp2.Node node80 = node78.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[null]"+ "'", str5.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 0+ "'", i19.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 0+ "'", i50.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "[null]"+ "'", str66.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node80);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test283"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    int i7 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    server9.update();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP16.setFirst((java.lang.Integer)1);
    java.lang.Integer i19 = iP16.getSecond();
    boolean b20 = server9.addException(iP16);
    tp2.Entry entry21 = new tp2.Entry();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i27 = iP26.getFirst();
    java.lang.String str28 = iP26.toString();
    entry21.element = iP26;
    boolean b30 = server9.addException(iP26);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b36 = server9.removeBan(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b45 = server37.connect(iP44);
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP47 = null;
    boolean b48 = server46.connect(iP47);
    java.lang.String str49 = server46.toString();
    java.lang.String str50 = server46.toString();
    tp2.Entry entry51 = new tp2.Entry();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i57 = iP56.getFirst();
    java.lang.String str58 = iP56.toString();
    entry51.element = iP56;
    boolean b60 = server46.connect(iP56);
    boolean b61 = server37.removeException(iP56);
    boolean b62 = server9.connect(iP56);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP67.setSecond((java.lang.Integer)1);
    boolean b70 = server9.removeBan(iP67);
    tp2.Server server71 = new tp2.Server();
    tp2.IP iP72 = null;
    boolean b73 = server71.connect(iP72);
    java.lang.String str74 = server71.toString();
    java.lang.String str75 = server71.toString();
    tp2.Entry entry76 = new tp2.Entry();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i82 = iP81.getFirst();
    java.lang.String str83 = iP81.toString();
    entry76.element = iP81;
    boolean b85 = server71.connect(iP81);
    boolean b86 = server9.addBan(iP81);
    boolean b87 = strictlySortedSinglyLinkedList0.containsIP(iP81);
    tp2.Node node88 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList89 = new tp2.StrictlySortedSinglyLinkedList();
    int i90 = strictlySortedSinglyLinkedList89.getSize();
    tp2.IPBan iPBan91 = null;
    boolean b92 = strictlySortedSinglyLinkedList89.add(iPBan91);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList93 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node94 = strictlySortedSinglyLinkedList93.header;
    strictlySortedSinglyLinkedList89.header = node94;
    node88.next = node94;
    tp2.Node node97 = node88.next;
    tp2.IPBan iPBan98 = node97.element;
    boolean b99 = iP81.equals((java.lang.Object)node97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{}"+ "'", str8.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 0+ "'", i19.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str49.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 10+ "'", i57.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "10.0.0.100"+ "'", str58.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str74.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str75.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i82 + "' != '" + 10+ "'", i82.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "10.0.0.100"+ "'", str83.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test284"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    int i3 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b11 = singlyLinkedList0.remove(iP10);
    tp2.Node node12 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList13 = new tp2.StrictlySortedSinglyLinkedList();
    int i14 = strictlySortedSinglyLinkedList13.getSize();
    tp2.IPBan iPBan15 = null;
    boolean b16 = strictlySortedSinglyLinkedList13.add(iPBan15);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList17 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node18 = strictlySortedSinglyLinkedList17.header;
    strictlySortedSinglyLinkedList13.header = node18;
    node12.next = node18;
    tp2.IPBan iPBan21 = node18.element;
    boolean b22 = iP10.equals((java.lang.Object)iPBan21);
    java.lang.Integer i23 = iP10.getFirst();
    iP10.setThird((java.lang.Integer)32);
    iP10.setFourth((java.lang.Integer)1);
    tp2.SinglyLinkedList singlyLinkedList28 = new tp2.SinglyLinkedList();
    tp2.IP iP30 = singlyLinkedList28.get((int)' ');
    tp2.Entry entry31 = new tp2.Entry();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i37 = iP36.getFirst();
    java.lang.String str38 = iP36.toString();
    entry31.element = iP36;
    boolean b40 = singlyLinkedList28.remove(iP36);
    tp2.IPBan iPBan42 = new tp2.IPBan(iP36, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList43 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan44 = null;
    boolean b45 = strictlySortedSinglyLinkedList43.contains(iPBan44);
    int i46 = strictlySortedSinglyLinkedList43.getSize();
    tp2.IPBan iPBan48 = strictlySortedSinglyLinkedList43.get((int)'#');
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP53.setSecond((java.lang.Integer)(-1));
    boolean b56 = strictlySortedSinglyLinkedList43.removeFromIP(iP53);
    iPBan42.ip = iP53;
    tp2.IP iP58 = iPBan42.ip;
    iP58.setSecond((java.lang.Integer)11);
    boolean b61 = iP10.equals((java.lang.Object)iP58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 100+ "'", i23.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test285"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node6 = strictlySortedSinglyLinkedList5.header;
    tp2.Node node7 = new tp2.Node();
    tp2.IPBan iPBan8 = null;
    node7.element = iPBan8;
    tp2.IPBan iPBan10 = null;
    node7.element = iPBan10;
    strictlySortedSinglyLinkedList5.header = node7;
    tp2.IPBan iPBan13 = node7.element;
    strictlySortedSinglyLinkedList0.header = node7;
    java.lang.String str15 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node16 = new tp2.Node();
    tp2.IPBan iPBan17 = null;
    node16.element = iPBan17;
    tp2.SinglyLinkedList singlyLinkedList19 = new tp2.SinglyLinkedList();
    tp2.IP iP21 = singlyLinkedList19.get((int)' ');
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = singlyLinkedList19.remove(iP27);
    tp2.IPBan iPBan33 = new tp2.IPBan(iP27, (java.lang.Long)1L);
    java.lang.String str34 = iPBan33.toString();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    java.lang.String str42 = iP39.toString();
    iPBan33.setIp(iP39);
    java.lang.Long long44 = iPBan33.getExpires();
    node16.element = iPBan33;
    iPBan33.expires = 1466185870380L;
    iPBan33.setExpires((java.lang.Long)1466185872205L);
    java.lang.Long long50 = iPBan33.getExpires();
    boolean b51 = strictlySortedSinglyLinkedList0.add(iPBan33);
    java.lang.Long long52 = iPBan33.expires;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "{}"+ "'", str15.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str34.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L+ "'", long44.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1466185872205L+ "'", long50.equals(1466185872205L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1466185872205L+ "'", long52.equals(1466185872205L));

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test286"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList15.size = 10;
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    server18.update();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setFirst((java.lang.Integer)1);
    java.lang.Integer i28 = iP25.getSecond();
    boolean b29 = server18.addException(iP25);
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server18.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b45 = server18.removeBan(iP44);
    iP44.setThird((java.lang.Integer)0);
    boolean b48 = strictlySortedSinglyLinkedList15.removeFromIP(iP44);
    boolean b49 = singlyLinkedList0.contains(iP44);
    tp2.Server server50 = new tp2.Server();
    java.lang.String str51 = server50.toString();
    server50.update();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    java.lang.Integer i60 = iP57.getSecond();
    boolean b61 = server50.addException(iP57);
    tp2.Entry entry62 = new tp2.Entry();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i68 = iP67.getFirst();
    java.lang.String str69 = iP67.toString();
    entry62.element = iP67;
    boolean b71 = server50.addException(iP67);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b77 = server50.removeBan(iP76);
    iP76.setThird((java.lang.Integer)0);
    boolean b80 = singlyLinkedList0.remove(iP76);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP85.setFirst((java.lang.Integer)1);
    singlyLinkedList0.add(iP85);
    tp2.IP iP90 = singlyLinkedList0.get((int)(byte)10);
    int i91 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP92 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b93 = singlyLinkedList0.repOk(set_iP92);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 0+ "'", i28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 0+ "'", i60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 10+ "'", i68.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "10.0.0.100"+ "'", str69.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 1);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test287"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.SinglyLinkedList singlyLinkedList3 = new tp2.SinglyLinkedList();
    tp2.IP iP5 = singlyLinkedList3.get((int)' ');
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    entry6.element = iP11;
    boolean b15 = singlyLinkedList3.remove(iP11);
    tp2.IPBan iPBan17 = new tp2.IPBan(iP11, (java.lang.Long)1L);
    java.lang.String str18 = iPBan17.toString();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    java.lang.String str26 = iP23.toString();
    iPBan17.setIp(iP23);
    java.lang.Long long28 = iPBan17.getExpires();
    node0.element = iPBan17;
    iPBan17.expires = 1466185870380L;
    iPBan17.setExpires((java.lang.Long)1466185872205L);
    java.lang.Long long34 = iPBan17.getExpires();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList50 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan51 = null;
    boolean b52 = strictlySortedSinglyLinkedList50.contains(iPBan51);
    int i53 = strictlySortedSinglyLinkedList50.getSize();
    tp2.IPBan iPBan55 = strictlySortedSinglyLinkedList50.get((int)'#');
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP60.setSecond((java.lang.Integer)(-1));
    boolean b63 = strictlySortedSinglyLinkedList50.removeFromIP(iP60);
    iPBan49.ip = iP60;
    tp2.IP iP65 = iPBan49.ip;
    iP65.setSecond((java.lang.Integer)11);
    iPBan17.setIp(iP65);
    tp2.IPBan iPBan70 = new tp2.IPBan(iP65, (java.lang.Long)1466185917192L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str18.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L+ "'", long28.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1466185872205L+ "'", long34.equals(1466185872205L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP65);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test288"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan5 = strictlySortedSinglyLinkedList0.get((int)'#');
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setSecond((java.lang.Integer)(-1));
    boolean b13 = strictlySortedSinglyLinkedList0.removeFromIP(iP10);
    tp2.SinglyLinkedList singlyLinkedList14 = new tp2.SinglyLinkedList();
    tp2.IP iP16 = singlyLinkedList14.get((int)' ');
    tp2.Entry entry17 = new tp2.Entry();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i23 = iP22.getFirst();
    java.lang.String str24 = iP22.toString();
    entry17.element = iP22;
    boolean b26 = singlyLinkedList14.remove(iP22);
    tp2.IPBan iPBan28 = new tp2.IPBan(iP22, (java.lang.Long)1L);
    java.lang.String str29 = iPBan28.toString();
    iPBan28.setExpires((java.lang.Long)0L);
    boolean b32 = strictlySortedSinglyLinkedList0.add(iPBan28);
    java.lang.String str33 = strictlySortedSinglyLinkedList0.toString();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList34 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan35 = null;
    boolean b36 = strictlySortedSinglyLinkedList34.contains(iPBan35);
    int i37 = strictlySortedSinglyLinkedList34.getSize();
    tp2.IPBan iPBan39 = strictlySortedSinglyLinkedList34.get((int)'#');
    strictlySortedSinglyLinkedList34.size = (short)100;
    tp2.SinglyLinkedList singlyLinkedList42 = new tp2.SinglyLinkedList();
    java.lang.String str43 = singlyLinkedList42.toString();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP45 = null;
    boolean b46 = server44.connect(iP45);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b52 = server44.connect(iP51);
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP54 = null;
    boolean b55 = server53.connect(iP54);
    java.lang.String str56 = server53.toString();
    java.lang.String str57 = server53.toString();
    tp2.Entry entry58 = new tp2.Entry();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i64 = iP63.getFirst();
    java.lang.String str65 = iP63.toString();
    entry58.element = iP63;
    boolean b67 = server53.connect(iP63);
    boolean b68 = server44.removeException(iP63);
    boolean b69 = singlyLinkedList42.remove(iP63);
    boolean b70 = strictlySortedSinglyLinkedList34.removeFromIP(iP63);
    boolean b71 = strictlySortedSinglyLinkedList0.removeFromIP(iP63);
    int i72 = strictlySortedSinglyLinkedList0.size;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 10+ "'", i23.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "10.0.0.100"+ "'", str24.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str29.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{[IPBan [ip=10.0.0.100, expires=0]]}"+ "'", str33.equals("{[IPBan [ip=10.0.0.100, expires=0]]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "()"+ "'", str43.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str57.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 10+ "'", i64.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "10.0.0.100"+ "'", str65.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test289"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    boolean b1 = singlyLinkedList0.isEmpty();
    tp2.IP iP3 = singlyLinkedList0.get((int)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP3);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test290"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    int i15 = singlyLinkedList0.getSize();
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    server16.update();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP23.setFirst((java.lang.Integer)1);
    java.lang.Integer i26 = iP23.getSecond();
    boolean b27 = server16.addException(iP23);
    tp2.SinglyLinkedList singlyLinkedList28 = new tp2.SinglyLinkedList();
    int i29 = singlyLinkedList28.getSize();
    tp2.SinglyLinkedList singlyLinkedList30 = new tp2.SinglyLinkedList();
    tp2.IP iP32 = singlyLinkedList30.get((int)' ');
    tp2.Entry entry33 = new tp2.Entry();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i39 = iP38.getFirst();
    java.lang.String str40 = iP38.toString();
    entry33.element = iP38;
    boolean b42 = singlyLinkedList30.remove(iP38);
    tp2.IP iP44 = singlyLinkedList30.get((int)'4');
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i50 = iP49.getFirst();
    java.lang.String str51 = iP49.toString();
    boolean b52 = singlyLinkedList30.contains(iP49);
    boolean b53 = singlyLinkedList28.remove(iP49);
    boolean b54 = server16.addException(iP49);
    iP49.setThird((java.lang.Integer)0);
    singlyLinkedList0.add(iP49);
    int i58 = singlyLinkedList0.getSize();
    tp2.SinglyLinkedList singlyLinkedList59 = new tp2.SinglyLinkedList();
    int i60 = singlyLinkedList59.getSize();
    java.lang.String str61 = singlyLinkedList59.toString();
    int i62 = singlyLinkedList59.getSize();
    java.util.Set<tp2.IP> set_iP63 = null;
    boolean b64 = singlyLinkedList59.repOk(set_iP63);
    int i65 = singlyLinkedList59.getSize();
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP67 = null;
    boolean b68 = server66.connect(iP67);
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b74 = server66.connect(iP73);
    java.lang.Integer i75 = iP73.getFirst();
    boolean b76 = singlyLinkedList59.contains(iP73);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP81.setThird((java.lang.Integer)1);
    java.lang.Object obj84 = null;
    boolean b85 = iP81.equals(obj84);
    iP81.setThird((java.lang.Integer)0);
    singlyLinkedList59.add(iP81);
    java.lang.Integer i89 = iP81.getFirst();
    boolean b90 = singlyLinkedList0.contains(iP81);
    tp2.IP iP92 = singlyLinkedList0.get(33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + 10+ "'", i39.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "10.0.0.100"+ "'", str40.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 10+ "'", i50.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "10.0.0.100"+ "'", str51.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "()"+ "'", str61.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 100+ "'", i75.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i89 + "' != '" + 10+ "'", i89.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP92);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test291"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    java.lang.String str14 = iP11.toString();
    iP11.setThird((java.lang.Integer)(-1));
    boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP11);
    tp2.IPBan iPBan19 = strictlySortedSinglyLinkedList0.get((int)(short)(-1));
    java.util.Set<tp2.IPBan> set_iPBan20 = null;
    boolean b21 = strictlySortedSinglyLinkedList0.repOk(set_iPBan20);
    tp2.Node node22 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan23 = node22.element;
    tp2.Node node24 = node22.next;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList25 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node26 = strictlySortedSinglyLinkedList25.header;
    tp2.Node node27 = new tp2.Node();
    tp2.IPBan iPBan28 = null;
    node27.element = iPBan28;
    tp2.IPBan iPBan30 = null;
    node27.element = iPBan30;
    strictlySortedSinglyLinkedList25.header = node27;
    tp2.IPBan iPBan33 = node27.element;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList34 = new tp2.StrictlySortedSinglyLinkedList();
    int i35 = strictlySortedSinglyLinkedList34.getSize();
    tp2.IPBan iPBan36 = null;
    boolean b37 = strictlySortedSinglyLinkedList34.add(iPBan36);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList38 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node39 = strictlySortedSinglyLinkedList38.header;
    strictlySortedSinglyLinkedList34.header = node39;
    strictlySortedSinglyLinkedList34.size = 0;
    int i43 = strictlySortedSinglyLinkedList34.size;
    tp2.Node node44 = strictlySortedSinglyLinkedList34.header;
    java.lang.String str45 = node44.toString();
    node27.next = node44;
    tp2.SinglyLinkedList singlyLinkedList47 = new tp2.SinglyLinkedList();
    tp2.IP iP49 = singlyLinkedList47.get((int)' ');
    tp2.Entry entry50 = new tp2.Entry();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i56 = iP55.getFirst();
    java.lang.String str57 = iP55.toString();
    entry50.element = iP55;
    boolean b59 = singlyLinkedList47.remove(iP55);
    tp2.IPBan iPBan61 = new tp2.IPBan(iP55, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList62 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan63 = null;
    boolean b64 = strictlySortedSinglyLinkedList62.contains(iPBan63);
    int i65 = strictlySortedSinglyLinkedList62.getSize();
    tp2.IPBan iPBan67 = strictlySortedSinglyLinkedList62.get((int)'#');
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP72.setSecond((java.lang.Integer)(-1));
    boolean b75 = strictlySortedSinglyLinkedList62.removeFromIP(iP72);
    iPBan61.ip = iP72;
    java.lang.Long long77 = iPBan61.expires;
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i83 = iP82.getFirst();
    java.lang.Integer i84 = iP82.getSecond();
    iPBan61.setIp(iP82);
    node27.element = iPBan61;
    // The following exception was thrown during execution in test generation
    try {
      node24.element = iPBan61;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[null]"+ "'", str45.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 10+ "'", i56.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "10.0.0.100"+ "'", str57.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L+ "'", long77.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i83 + "' != '" + 100+ "'", i83.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i84 + "' != '" + 10+ "'", i84.equals(10));

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test292"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList9.size = 10;
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    server12.update();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP19.setFirst((java.lang.Integer)1);
    java.lang.Integer i22 = iP19.getSecond();
    boolean b23 = server12.addException(iP19);
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = server12.addException(iP29);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b39 = server12.removeBan(iP38);
    iP38.setThird((java.lang.Integer)0);
    boolean b42 = strictlySortedSinglyLinkedList9.removeFromIP(iP38);
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    server43.update();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP50.setFirst((java.lang.Integer)1);
    java.lang.Integer i53 = iP50.getSecond();
    boolean b54 = server43.addException(iP50);
    boolean b55 = strictlySortedSinglyLinkedList9.removeFromIP(iP50);
    boolean b56 = server0.connect(iP50);
    java.lang.String str57 = server0.toString();
    tp2.SinglyLinkedList singlyLinkedList58 = new tp2.SinglyLinkedList();
    tp2.IP iP60 = singlyLinkedList58.get((int)' ');
    tp2.Entry entry61 = new tp2.Entry();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i67 = iP66.getFirst();
    java.lang.String str68 = iP66.toString();
    entry61.element = iP66;
    boolean b70 = singlyLinkedList58.remove(iP66);
    tp2.IPBan iPBan72 = new tp2.IPBan(iP66, (java.lang.Long)1L);
    tp2.Server server73 = new tp2.Server();
    java.lang.String str74 = server73.toString();
    server73.update();
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i81 = iP80.getFirst();
    boolean b82 = server73.connect(iP80);
    iPBan72.ip = iP80;
    tp2.IP iP84 = iPBan72.ip;
    boolean b85 = server0.removeBan(iP84);
    java.lang.Integer i86 = iP84.getThird();
    java.lang.Integer i87 = iP84.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 0+ "'", i22.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 0+ "'", i53.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str57.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 10+ "'", i67.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "10.0.0.100"+ "'", str68.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str74.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i81 + "' != '" + 100+ "'", i81.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i86 + "' != '" + (-1)+ "'", i86.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i87 + "' != '" + 10+ "'", i87.equals(10));

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test293"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan16 = null;
    boolean b17 = strictlySortedSinglyLinkedList15.contains(iPBan16);
    int i18 = strictlySortedSinglyLinkedList15.getSize();
    tp2.IPBan iPBan20 = strictlySortedSinglyLinkedList15.get((int)'#');
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setSecond((java.lang.Integer)(-1));
    boolean b28 = strictlySortedSinglyLinkedList15.removeFromIP(iP25);
    iPBan14.ip = iP25;
    iP25.setSecond((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test294"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Node node34 = strictlySortedSinglyLinkedList0.header;
    java.lang.String str35 = node34.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[null]"+ "'", str35.equals("[null]"));

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test295"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.SinglyLinkedList singlyLinkedList13 = new tp2.SinglyLinkedList();
    tp2.IP iP15 = singlyLinkedList13.get((int)' ');
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = singlyLinkedList13.remove(iP21);
    tp2.IPBan iPBan27 = new tp2.IPBan(iP21, (java.lang.Long)1L);
    java.lang.String str28 = iPBan27.toString();
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP30 = null;
    boolean b31 = server29.connect(iP30);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b37 = server29.connect(iP36);
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP39 = null;
    boolean b40 = server38.connect(iP39);
    java.lang.String str41 = server38.toString();
    java.lang.String str42 = server38.toString();
    tp2.Entry entry43 = new tp2.Entry();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i49 = iP48.getFirst();
    java.lang.String str50 = iP48.toString();
    entry43.element = iP48;
    boolean b52 = server38.connect(iP48);
    boolean b53 = server29.removeException(iP48);
    tp2.Server server54 = new tp2.Server();
    tp2.IP iP55 = null;
    boolean b56 = server54.connect(iP55);
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b62 = server54.connect(iP61);
    java.lang.Integer i63 = iP61.getFirst();
    boolean b64 = server29.connect(iP61);
    iPBan27.ip = iP61;
    boolean b66 = singlyLinkedList0.contains(iP61);
    java.util.Set<tp2.IP> set_iP67 = null;
    boolean b68 = singlyLinkedList0.repOk(set_iP67);
    java.util.Set<tp2.IP> set_iP69 = null;
    boolean b70 = singlyLinkedList0.repOk(set_iP69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str28.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i49 + "' != '" + 10+ "'", i49.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "10.0.0.100"+ "'", str50.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 100+ "'", i63.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test296"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    tp2.IPBan iPBan6 = new tp2.IPBan(iP4, (java.lang.Long)(-1L));
    tp2.IP iP7 = iPBan6.getIp();
    java.lang.String str8 = iPBan6.toString();
    iPBan6.setExpires((java.lang.Long)1466185895712L);
    tp2.IP iP11 = iPBan6.ip;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "IPBan [ip=10.100.-1.1, expires=-1]"+ "'", str8.equals("IPBan [ip=10.100.-1.1, expires=-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP11);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test297"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Entry entry9 = new tp2.Entry();
    tp2.Entry entry10 = new tp2.Entry();
    java.lang.String str11 = entry10.toString();
    java.lang.String str12 = entry10.toString();
    tp2.Entry entry13 = entry10.next;
    entry9.next = entry10;
    tp2.IP iP15 = entry9.element;
    entry0.next = entry9;
    java.lang.String str17 = entry9.toString();
    java.lang.String str18 = entry9.toString();
    tp2.Entry entry19 = entry9.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[null]"+ "'", str11.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[null]"+ "'", str12.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[null]"+ "'", str17.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[null]"+ "'", str18.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry19);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test298"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan6 = strictlySortedSinglyLinkedList0.get(100);
    strictlySortedSinglyLinkedList0.size = '#';
    strictlySortedSinglyLinkedList0.size = 100;
    int i11 = strictlySortedSinglyLinkedList0.size;
    java.lang.String str12 = strictlySortedSinglyLinkedList0.toString();
    java.lang.String str13 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node14 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    int i16 = strictlySortedSinglyLinkedList15.getSize();
    tp2.IPBan iPBan17 = null;
    boolean b18 = strictlySortedSinglyLinkedList15.add(iPBan17);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList19 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node20 = strictlySortedSinglyLinkedList19.header;
    strictlySortedSinglyLinkedList15.header = node20;
    node14.next = node20;
    tp2.Node node23 = node14.next;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList24 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan25 = null;
    boolean b26 = strictlySortedSinglyLinkedList24.contains(iPBan25);
    int i27 = strictlySortedSinglyLinkedList24.getSize();
    tp2.Node node28 = strictlySortedSinglyLinkedList24.header;
    tp2.Node node29 = node28.next;
    node23.next = node28;
    java.lang.String str31 = node23.toString();
    strictlySortedSinglyLinkedList0.header = node23;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "{[null]}"+ "'", str12.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "{[null]}"+ "'", str13.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[null]"+ "'", str31.equals("[null]"));

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test299"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    tp2.IPBan iPBan53 = strictlySortedSinglyLinkedList0.get((int)(byte)100);
    int i54 = strictlySortedSinglyLinkedList0.size;
    int i55 = strictlySortedSinglyLinkedList0.getSize();
    boolean b56 = strictlySortedSinglyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test300"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.Server server19 = new tp2.Server();
    tp2.IP iP20 = null;
    boolean b21 = server19.connect(iP20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b27 = server19.connect(iP26);
    java.lang.Integer i28 = iP26.getFirst();
    java.lang.Integer i29 = iP26.getFirst();
    iPBan14.setIp(iP26);
    tp2.IP iP31 = iPBan14.getIp();
    iPBan14.expires = 1466185879670L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 100+ "'", i28.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 100+ "'", i29.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP31);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test301"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    java.lang.String str14 = iP11.toString();
    iP11.setThird((java.lang.Integer)(-1));
    boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP11);
    boolean b18 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node19 = new tp2.Node();
    tp2.IPBan iPBan20 = null;
    node19.element = iPBan20;
    tp2.SinglyLinkedList singlyLinkedList22 = new tp2.SinglyLinkedList();
    tp2.IP iP24 = singlyLinkedList22.get((int)' ');
    tp2.Entry entry25 = new tp2.Entry();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i31 = iP30.getFirst();
    java.lang.String str32 = iP30.toString();
    entry25.element = iP30;
    boolean b34 = singlyLinkedList22.remove(iP30);
    tp2.IPBan iPBan36 = new tp2.IPBan(iP30, (java.lang.Long)1L);
    java.lang.String str37 = iPBan36.toString();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i43 = iP42.getFirst();
    java.lang.String str44 = iP42.toString();
    java.lang.String str45 = iP42.toString();
    iPBan36.setIp(iP42);
    java.lang.Long long47 = iPBan36.getExpires();
    node19.element = iPBan36;
    boolean b49 = strictlySortedSinglyLinkedList0.add(iPBan36);
    tp2.Node node50 = strictlySortedSinglyLinkedList0.header;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 10+ "'", i31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str37.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 10+ "'", i43.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "10.0.0.100"+ "'", str44.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L+ "'", long47.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node50);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test302"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.size;
    tp2.Node node5 = strictlySortedSinglyLinkedList0.header;
    boolean b6 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node7 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList8 = new tp2.StrictlySortedSinglyLinkedList();
    int i9 = strictlySortedSinglyLinkedList8.getSize();
    tp2.IPBan iPBan10 = null;
    boolean b11 = strictlySortedSinglyLinkedList8.add(iPBan10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList12 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node13 = strictlySortedSinglyLinkedList12.header;
    strictlySortedSinglyLinkedList8.header = node13;
    node7.next = node13;
    tp2.Node node16 = node7.next;
    java.lang.String str17 = node7.toString();
    tp2.SinglyLinkedList singlyLinkedList18 = new tp2.SinglyLinkedList();
    tp2.IP iP20 = singlyLinkedList18.get((int)' ');
    tp2.Entry entry21 = new tp2.Entry();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i27 = iP26.getFirst();
    java.lang.String str28 = iP26.toString();
    entry21.element = iP26;
    boolean b30 = singlyLinkedList18.remove(iP26);
    tp2.IPBan iPBan32 = new tp2.IPBan(iP26, (java.lang.Long)1L);
    java.lang.String str33 = iPBan32.toString();
    iPBan32.setExpires((java.lang.Long)0L);
    java.lang.Long long36 = iPBan32.expires;
    tp2.IP iP37 = iPBan32.ip;
    node7.element = iPBan32;
    // The following exception was thrown during execution in test generation
    try {
      boolean b39 = strictlySortedSinglyLinkedList0.add(iPBan32);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[null]"+ "'", str17.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str33.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L+ "'", long36.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP37);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test303"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    int i15 = singlyLinkedList0.getSize();
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    server16.update();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP23.setFirst((java.lang.Integer)1);
    java.lang.Integer i26 = iP23.getSecond();
    boolean b27 = server16.addException(iP23);
    tp2.SinglyLinkedList singlyLinkedList28 = new tp2.SinglyLinkedList();
    int i29 = singlyLinkedList28.getSize();
    tp2.SinglyLinkedList singlyLinkedList30 = new tp2.SinglyLinkedList();
    tp2.IP iP32 = singlyLinkedList30.get((int)' ');
    tp2.Entry entry33 = new tp2.Entry();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i39 = iP38.getFirst();
    java.lang.String str40 = iP38.toString();
    entry33.element = iP38;
    boolean b42 = singlyLinkedList30.remove(iP38);
    tp2.IP iP44 = singlyLinkedList30.get((int)'4');
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i50 = iP49.getFirst();
    java.lang.String str51 = iP49.toString();
    boolean b52 = singlyLinkedList30.contains(iP49);
    boolean b53 = singlyLinkedList28.remove(iP49);
    boolean b54 = server16.addException(iP49);
    iP49.setThird((java.lang.Integer)0);
    singlyLinkedList0.add(iP49);
    int i58 = singlyLinkedList0.getSize();
    tp2.SinglyLinkedList singlyLinkedList59 = new tp2.SinglyLinkedList();
    tp2.IP iP61 = singlyLinkedList59.get((int)' ');
    tp2.Entry entry62 = new tp2.Entry();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i68 = iP67.getFirst();
    java.lang.String str69 = iP67.toString();
    entry62.element = iP67;
    boolean b71 = singlyLinkedList59.remove(iP67);
    tp2.IPBan iPBan73 = new tp2.IPBan(iP67, (java.lang.Long)1L);
    java.lang.String str74 = iPBan73.toString();
    iPBan73.setExpires((java.lang.Long)0L);
    java.lang.Long long77 = iPBan73.expires;
    tp2.IP iP78 = iPBan73.ip;
    java.lang.Long long79 = iPBan73.getExpires();
    tp2.IP iP80 = iPBan73.getIp();
    boolean b81 = singlyLinkedList0.remove(iP80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + 10+ "'", i39.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "10.0.0.100"+ "'", str40.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 10+ "'", i50.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "10.0.0.100"+ "'", str51.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 10+ "'", i68.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "10.0.0.100"+ "'", str69.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str74.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L+ "'", long77.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L+ "'", long79.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test304"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP4.setSecond((java.lang.Integer)(-1));
    java.lang.Integer i7 = iP4.getFourth();
    iP4.setSecond((java.lang.Integer)101);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i7 + "' != '" + 100+ "'", i7.equals(100));

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test305"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.ITime iTime3 = null;
    server0.setTime(iTime3);
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP9.setFirst((java.lang.Integer)1);
    java.lang.Integer i12 = iP9.getFourth();
    tp2.IPBan iPBan14 = new tp2.IPBan(iP9, (java.lang.Long)1466185886166L);
    iP9.setSecond((java.lang.Integer)11);
    tp2.Entry entry17 = new tp2.Entry();
    java.lang.String str18 = entry17.toString();
    java.lang.String str19 = entry17.toString();
    tp2.Entry entry20 = new tp2.Entry();
    java.lang.String str21 = entry20.toString();
    entry17.next = entry20;
    tp2.Entry entry23 = new tp2.Entry();
    java.lang.String str24 = entry23.toString();
    entry17.next = entry23;
    tp2.IP iP26 = entry17.element;
    tp2.Server server27 = new tp2.Server();
    java.lang.String str28 = server27.toString();
    server27.update();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i35 = iP34.getFirst();
    boolean b36 = server27.connect(iP34);
    java.lang.Integer i37 = iP34.getSecond();
    java.lang.String str38 = iP34.toString();
    java.lang.Integer i39 = iP34.getSecond();
    entry17.element = iP34;
    tp2.IP iP41 = entry17.element;
    boolean b42 = iP9.equals((java.lang.Object)entry17);
    boolean b43 = server0.removeBan(iP9);
    tp2.IP iP44 = null;
    boolean b45 = server0.addBan(iP44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 100+ "'", i12.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[null]"+ "'", str18.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[null]"+ "'", str19.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[null]"+ "'", str21.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[null]"+ "'", str24.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 100+ "'", i35.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "100.10.-1.10"+ "'", str38.equals("100.10.-1.10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + 10+ "'", i39.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test306"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.IP iP9 = entry0.element;
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP11 = null;
    boolean b12 = server10.connect(iP11);
    java.lang.String str13 = server10.toString();
    java.lang.String str14 = server10.toString();
    tp2.SinglyLinkedList singlyLinkedList15 = new tp2.SinglyLinkedList();
    tp2.IP iP17 = singlyLinkedList15.get((int)' ');
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = singlyLinkedList15.remove(iP23);
    tp2.IPBan iPBan29 = new tp2.IPBan(iP23, (java.lang.Long)1L);
    java.lang.String str30 = iPBan29.toString();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    java.lang.String str38 = iP35.toString();
    iPBan29.setIp(iP35);
    java.lang.Integer i40 = iP35.getFirst();
    boolean b41 = server10.removeException(iP35);
    iP35.setThird((java.lang.Integer)(-1));
    entry0.element = iP35;
    java.lang.String str45 = entry0.toString();
    tp2.IP iP46 = entry0.element;
    java.lang.String str47 = entry0.toString();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    java.lang.String str55 = iP52.toString();
    iP52.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan59 = new tp2.IPBan(iP52, (java.lang.Long)0L);
    tp2.IP iP60 = iPBan59.getIp();
    iP60.setThird((java.lang.Integer)0);
    entry0.element = iP60;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str30.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[10.0.-1.100]"+ "'", str45.equals("[10.0.-1.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "[10.0.-1.100]"+ "'", str47.equals("[10.0.-1.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "10.0.0.100"+ "'", str55.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP60);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test307"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    boolean b3 = singlyLinkedList0.isEmpty();
    tp2.IP iP4 = null;
    boolean b5 = singlyLinkedList0.remove(iP4);
    boolean b6 = singlyLinkedList0.isEmpty();
    int i7 = singlyLinkedList0.getSize();
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    tp2.IP iP17 = entry8.element;
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP19 = null;
    boolean b20 = server18.connect(iP19);
    java.lang.String str21 = server18.toString();
    java.lang.String str22 = server18.toString();
    tp2.SinglyLinkedList singlyLinkedList23 = new tp2.SinglyLinkedList();
    tp2.IP iP25 = singlyLinkedList23.get((int)' ');
    tp2.Entry entry26 = new tp2.Entry();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i32 = iP31.getFirst();
    java.lang.String str33 = iP31.toString();
    entry26.element = iP31;
    boolean b35 = singlyLinkedList23.remove(iP31);
    tp2.IPBan iPBan37 = new tp2.IPBan(iP31, (java.lang.Long)1L);
    java.lang.String str38 = iPBan37.toString();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    java.lang.String str46 = iP43.toString();
    iPBan37.setIp(iP43);
    java.lang.Integer i48 = iP43.getFirst();
    boolean b49 = server18.removeException(iP43);
    iP43.setThird((java.lang.Integer)(-1));
    entry8.element = iP43;
    boolean b53 = singlyLinkedList0.remove(iP43);
    java.lang.Integer i54 = iP43.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 10+ "'", i32.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "10.0.0.100"+ "'", str33.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str38.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "10.0.0.100"+ "'", str46.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 0+ "'", i54.equals(0));

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test308"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = server0.connect(iP10);
    iP10.setFirst((java.lang.Integer)0);
    tp2.IPBan iPBan18 = new tp2.IPBan(iP10, (java.lang.Long)0L);
    tp2.IP iP19 = iPBan18.getIp();
    tp2.IP iP20 = iPBan18.ip;
    java.lang.String str21 = iPBan18.toString();
    tp2.IP iP22 = iPBan18.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "IPBan [ip=0.0.0.100, expires=0]"+ "'", str21.equals("IPBan [ip=0.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP22);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test309"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList15.size = 10;
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    server18.update();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setFirst((java.lang.Integer)1);
    java.lang.Integer i28 = iP25.getSecond();
    boolean b29 = server18.addException(iP25);
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server18.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b45 = server18.removeBan(iP44);
    iP44.setThird((java.lang.Integer)0);
    boolean b48 = strictlySortedSinglyLinkedList15.removeFromIP(iP44);
    boolean b49 = singlyLinkedList0.contains(iP44);
    tp2.Server server50 = new tp2.Server();
    java.lang.String str51 = server50.toString();
    server50.update();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    java.lang.Integer i60 = iP57.getSecond();
    boolean b61 = server50.addException(iP57);
    tp2.Entry entry62 = new tp2.Entry();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i68 = iP67.getFirst();
    java.lang.String str69 = iP67.toString();
    entry62.element = iP67;
    boolean b71 = server50.addException(iP67);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b77 = server50.removeBan(iP76);
    iP76.setThird((java.lang.Integer)0);
    boolean b80 = singlyLinkedList0.remove(iP76);
    java.lang.Integer i81 = iP76.getSecond();
    java.lang.Integer i82 = iP76.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 0+ "'", i28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 0+ "'", i60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 10+ "'", i68.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "10.0.0.100"+ "'", str69.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i81 + "' != '" + 100+ "'", i81.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i82 + "' != '" + 100+ "'", i82.equals(100));

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test310"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b7 = strictlySortedSinglyLinkedList0.containsIP(iP6);
    tp2.Node node8 = strictlySortedSinglyLinkedList0.header;
    java.lang.String str9 = node8.toString();
    tp2.Node node10 = node8.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node10);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test311"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList15.size = 10;
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    server18.update();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setFirst((java.lang.Integer)1);
    java.lang.Integer i28 = iP25.getSecond();
    boolean b29 = server18.addException(iP25);
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server18.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b45 = server18.removeBan(iP44);
    iP44.setThird((java.lang.Integer)0);
    boolean b48 = strictlySortedSinglyLinkedList15.removeFromIP(iP44);
    boolean b49 = singlyLinkedList0.contains(iP44);
    int i50 = singlyLinkedList0.getSize();
    tp2.Node node51 = new tp2.Node();
    tp2.IPBan iPBan52 = null;
    node51.element = iPBan52;
    tp2.SinglyLinkedList singlyLinkedList54 = new tp2.SinglyLinkedList();
    tp2.IP iP56 = singlyLinkedList54.get((int)' ');
    tp2.Entry entry57 = new tp2.Entry();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i63 = iP62.getFirst();
    java.lang.String str64 = iP62.toString();
    entry57.element = iP62;
    boolean b66 = singlyLinkedList54.remove(iP62);
    tp2.IPBan iPBan68 = new tp2.IPBan(iP62, (java.lang.Long)1L);
    java.lang.String str69 = iPBan68.toString();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i75 = iP74.getFirst();
    java.lang.String str76 = iP74.toString();
    java.lang.String str77 = iP74.toString();
    iPBan68.setIp(iP74);
    java.lang.Long long79 = iPBan68.getExpires();
    node51.element = iPBan68;
    iPBan68.expires = 1466185870380L;
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i88 = iP87.getFirst();
    java.lang.String str89 = iP87.toString();
    java.lang.Integer i90 = iP87.getFourth();
    iPBan68.ip = iP87;
    boolean b92 = singlyLinkedList0.remove(iP87);
    boolean b93 = singlyLinkedList0.isEmpty();
    java.lang.String str94 = singlyLinkedList0.toString();
    java.lang.String str95 = singlyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 0+ "'", i28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 10+ "'", i63.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "10.0.0.100"+ "'", str64.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str69.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 10+ "'", i75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "10.0.0.100"+ "'", str76.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L+ "'", long79.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 10+ "'", i88.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "10.0.0.100"+ "'", str89.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i90 + "' != '" + 100+ "'", i90.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "()"+ "'", str94.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "()"+ "'", str95.equals("()"));

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test312"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP5 = entry0.element;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.Entry entry7 = new tp2.Entry();
    java.lang.String str8 = entry7.toString();
    java.lang.String str9 = entry7.toString();
    tp2.Entry entry10 = entry7.next;
    entry6.next = entry7;
    entry0.next = entry6;
    tp2.Entry entry13 = entry0.next;
    tp2.Entry entry14 = entry13.next;
    java.lang.String str15 = entry13.toString();
    tp2.Entry entry16 = entry13.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[null]"+ "'", str8.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[null]"+ "'", str15.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry16);

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test313"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = new tp2.Entry();
    java.lang.String str4 = entry3.toString();
    entry0.next = entry3;
    tp2.Entry entry6 = new tp2.Entry();
    java.lang.String str7 = entry6.toString();
    entry0.next = entry6;
    java.lang.String str9 = entry0.toString();
    tp2.Entry entry10 = entry0.next;
    tp2.Entry entry11 = new tp2.Entry();
    java.lang.String str12 = entry11.toString();
    java.lang.String str13 = entry11.toString();
    tp2.Entry entry14 = new tp2.Entry();
    java.lang.String str15 = entry14.toString();
    entry11.next = entry14;
    tp2.Entry entry17 = new tp2.Entry();
    java.lang.String str18 = entry17.toString();
    entry11.next = entry17;
    entry10.next = entry11;
    tp2.IP iP21 = entry10.element;
    tp2.Entry entry22 = entry10.next;
    java.lang.String str23 = entry10.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[null]"+ "'", str4.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[null]"+ "'", str7.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[null]"+ "'", str12.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[null]"+ "'", str13.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[null]"+ "'", str15.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[null]"+ "'", str18.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[null]"+ "'", str23.equals("[null]"));

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test314"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    boolean b9 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    int i11 = strictlySortedSinglyLinkedList10.getSize();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList10.add(iPBan12);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList14 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node15 = strictlySortedSinglyLinkedList14.header;
    strictlySortedSinglyLinkedList10.header = node15;
    strictlySortedSinglyLinkedList10.size = 0;
    int i19 = strictlySortedSinglyLinkedList10.size;
    tp2.Node node20 = strictlySortedSinglyLinkedList10.header;
    tp2.Node node21 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList0.header = node21;
    tp2.IPBan iPBan24 = strictlySortedSinglyLinkedList0.get(1);
    tp2.Node node25 = strictlySortedSinglyLinkedList0.header;
    java.lang.String str26 = node25.toString();
    tp2.Node node27 = node25.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[null]"+ "'", str26.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node27);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test315"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)'4');
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    boolean b22 = singlyLinkedList0.contains(iP19);
    java.lang.String str23 = singlyLinkedList0.toString();
    java.lang.String str24 = singlyLinkedList0.toString();
    int i25 = singlyLinkedList0.getSize();
    tp2.SinglyLinkedList singlyLinkedList26 = new tp2.SinglyLinkedList();
    tp2.IP iP28 = singlyLinkedList26.get((int)' ');
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = singlyLinkedList26.remove(iP34);
    tp2.IPBan iPBan40 = new tp2.IPBan(iP34, (java.lang.Long)1L);
    java.lang.String str41 = iPBan40.toString();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP43 = null;
    boolean b44 = server42.connect(iP43);
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b50 = server42.connect(iP49);
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP52 = null;
    boolean b53 = server51.connect(iP52);
    java.lang.String str54 = server51.toString();
    java.lang.String str55 = server51.toString();
    tp2.Entry entry56 = new tp2.Entry();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i62 = iP61.getFirst();
    java.lang.String str63 = iP61.toString();
    entry56.element = iP61;
    boolean b65 = server51.connect(iP61);
    boolean b66 = server42.removeException(iP61);
    tp2.Server server67 = new tp2.Server();
    tp2.IP iP68 = null;
    boolean b69 = server67.connect(iP68);
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b75 = server67.connect(iP74);
    java.lang.Integer i76 = iP74.getFirst();
    boolean b77 = server42.connect(iP74);
    iPBan40.ip = iP74;
    java.lang.Integer i79 = iP74.getThird();
    java.lang.Integer i80 = iP74.getThird();
    singlyLinkedList0.add(iP74);
    java.lang.String str82 = singlyLinkedList0.toString();
    tp2.Server server83 = new tp2.Server();
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP88.setSecond((java.lang.Integer)(-1));
    boolean b91 = server83.addException(iP88);
    iP88.setFourth((java.lang.Integer)0);
    boolean b94 = singlyLinkedList0.contains(iP88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "()"+ "'", str23.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "()"+ "'", str24.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str41.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str54.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str55.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i62 + "' != '" + 10+ "'", i62.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "10.0.0.100"+ "'", str63.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 100+ "'", i76.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i79 + "' != '" + (-1)+ "'", i79.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + (-1)+ "'", i80.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "([100.10.-1.10])"+ "'", str82.equals("([100.10.-1.10])"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test316"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.contains(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Node node5 = new tp2.Node();
    tp2.IPBan iPBan6 = null;
    node5.element = iPBan6;
    tp2.SinglyLinkedList singlyLinkedList8 = new tp2.SinglyLinkedList();
    tp2.IP iP10 = singlyLinkedList8.get((int)' ');
    tp2.Entry entry11 = new tp2.Entry();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    entry11.element = iP16;
    boolean b20 = singlyLinkedList8.remove(iP16);
    tp2.IPBan iPBan22 = new tp2.IPBan(iP16, (java.lang.Long)1L);
    java.lang.String str23 = iPBan22.toString();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i29 = iP28.getFirst();
    java.lang.String str30 = iP28.toString();
    java.lang.String str31 = iP28.toString();
    iPBan22.setIp(iP28);
    java.lang.Long long33 = iPBan22.getExpires();
    node5.element = iPBan22;
    tp2.IPBan iPBan35 = node5.element;
    java.lang.String str36 = node5.toString();
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.Node node38 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList39 = new tp2.StrictlySortedSinglyLinkedList();
    int i40 = strictlySortedSinglyLinkedList39.getSize();
    tp2.IPBan iPBan41 = null;
    boolean b42 = strictlySortedSinglyLinkedList39.add(iPBan41);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList43 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node44 = strictlySortedSinglyLinkedList43.header;
    strictlySortedSinglyLinkedList39.header = node44;
    node38.next = node44;
    tp2.IPBan iPBan47 = null;
    node38.element = iPBan47;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList49 = new tp2.StrictlySortedSinglyLinkedList();
    int i50 = strictlySortedSinglyLinkedList49.getSize();
    tp2.IPBan iPBan51 = null;
    boolean b52 = strictlySortedSinglyLinkedList49.add(iPBan51);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList53 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node54 = strictlySortedSinglyLinkedList53.header;
    strictlySortedSinglyLinkedList49.header = node54;
    tp2.IPBan iPBan56 = node54.element;
    node38.next = node54;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList58 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node59 = strictlySortedSinglyLinkedList58.header;
    node54.next = node59;
    java.lang.String str61 = node54.toString();
    tp2.Node node62 = node54.next;
    java.lang.String str63 = node54.toString();
    node5.next = node54;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str23.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 10+ "'", i29.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "10.0.0.100"+ "'", str30.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L+ "'", long33.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[IPBan [ip=10.0.0.100, expires=1]]"+ "'", str36.equals("[IPBan [ip=10.0.0.100, expires=1]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "[null]"+ "'", str61.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "[null]"+ "'", str63.equals("[null]"));

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test317"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    java.util.Set<tp2.IP> set_iP3 = null;
    boolean b4 = singlyLinkedList0.repOk(set_iP3);
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get((int)' ');
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    boolean b17 = singlyLinkedList5.remove(iP13);
    tp2.IP iP19 = singlyLinkedList5.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList20 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList20.size = 10;
    tp2.Server server23 = new tp2.Server();
    java.lang.String str24 = server23.toString();
    server23.update();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP30.setFirst((java.lang.Integer)1);
    java.lang.Integer i33 = iP30.getSecond();
    boolean b34 = server23.addException(iP30);
    tp2.Entry entry35 = new tp2.Entry();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i41 = iP40.getFirst();
    java.lang.String str42 = iP40.toString();
    entry35.element = iP40;
    boolean b44 = server23.addException(iP40);
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b50 = server23.removeBan(iP49);
    iP49.setThird((java.lang.Integer)0);
    boolean b53 = strictlySortedSinglyLinkedList20.removeFromIP(iP49);
    boolean b54 = singlyLinkedList5.contains(iP49);
    boolean b55 = singlyLinkedList0.contains(iP49);
    java.util.Set<tp2.IP> set_iP56 = null;
    boolean b57 = singlyLinkedList0.repOk(set_iP56);
    tp2.IP iP59 = singlyLinkedList0.get((int)(short)100);
    boolean b60 = singlyLinkedList0.isEmpty();
    boolean b61 = singlyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 0+ "'", i33.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i41 + "' != '" + 10+ "'", i41.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test318"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    entry55.element = iP60;
    tp2.Entry entry63 = entry55.next;
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP65 = null;
    boolean b66 = server64.connect(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b72 = server64.connect(iP71);
    java.lang.Integer i73 = iP71.getFirst();
    entry55.element = iP71;
    iP71.setFourth((java.lang.Integer)100);
    boolean b77 = server0.removeException(iP71);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList78 = new tp2.StrictlySortedSinglyLinkedList();
    boolean b79 = iP71.equals((java.lang.Object)strictlySortedSinglyLinkedList78);
    int i80 = strictlySortedSinglyLinkedList78.size;
    java.util.Set<tp2.IPBan> set_iPBan81 = null;
    boolean b82 = strictlySortedSinglyLinkedList78.repOk(set_iPBan81);
    tp2.IPBan iPBan84 = strictlySortedSinglyLinkedList78.get(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 100+ "'", i73.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan84);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test319"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Entry entry9 = new tp2.Entry();
    tp2.Entry entry10 = new tp2.Entry();
    java.lang.String str11 = entry10.toString();
    java.lang.String str12 = entry10.toString();
    tp2.Entry entry13 = entry10.next;
    entry9.next = entry10;
    tp2.IP iP15 = entry9.element;
    entry0.next = entry9;
    tp2.Entry entry17 = entry0.next;
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP19 = null;
    boolean b20 = server18.connect(iP19);
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b26 = server18.connect(iP25);
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP28 = null;
    boolean b29 = server27.connect(iP28);
    java.lang.String str30 = server27.toString();
    java.lang.String str31 = server27.toString();
    tp2.Entry entry32 = new tp2.Entry();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i38 = iP37.getFirst();
    java.lang.String str39 = iP37.toString();
    entry32.element = iP37;
    boolean b41 = server27.connect(iP37);
    boolean b42 = server18.removeException(iP37);
    java.lang.Integer i43 = iP37.getFourth();
    entry0.element = iP37;
    tp2.SinglyLinkedList singlyLinkedList45 = new tp2.SinglyLinkedList();
    tp2.IP iP47 = singlyLinkedList45.get((int)' ');
    tp2.Entry entry48 = new tp2.Entry();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i54 = iP53.getFirst();
    java.lang.String str55 = iP53.toString();
    entry48.element = iP53;
    boolean b57 = singlyLinkedList45.remove(iP53);
    tp2.IPBan iPBan59 = new tp2.IPBan(iP53, (java.lang.Long)1L);
    java.lang.String str60 = iPBan59.toString();
    iPBan59.setExpires((java.lang.Long)0L);
    java.lang.Long long63 = iPBan59.expires;
    tp2.IP iP64 = iPBan59.getIp();
    tp2.IP iP65 = iPBan59.ip;
    tp2.IP iP66 = iPBan59.getIp();
    iPBan59.expires = 1466185876788L;
    iPBan59.expires = 0L;
    tp2.Entry entry71 = new tp2.Entry();
    java.lang.String str72 = entry71.toString();
    java.lang.String str73 = entry71.toString();
    tp2.Entry entry74 = entry71.next;
    tp2.IP iP75 = entry71.element;
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i81 = iP80.getFirst();
    java.lang.String str82 = iP80.toString();
    java.lang.String str83 = iP80.toString();
    iP80.setThird((java.lang.Integer)(-1));
    entry71.element = iP80;
    tp2.IP iP87 = entry71.element;
    iP87.setFirst((java.lang.Integer)1);
    iPBan59.setIp(iP87);
    tp2.IP iP91 = iPBan59.ip;
    entry0.element = iP91;
    java.lang.String str93 = entry0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[null]"+ "'", str11.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[null]"+ "'", str12.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i38 + "' != '" + 10+ "'", i38.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "10.0.0.100"+ "'", str39.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 100+ "'", i43.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "10.0.0.100"+ "'", str55.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str60.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L+ "'", long63.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "[null]"+ "'", str72.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "[null]"+ "'", str73.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i81 + "' != '" + 10+ "'", i81.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "10.0.0.100"+ "'", str82.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "10.0.0.100"+ "'", str83.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str93 + "' != '" + "[1.0.-1.100]"+ "'", str93.equals("[1.0.-1.100]"));

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test320"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = entry0.next;
    java.lang.String str9 = entry0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[10.0.0.100]"+ "'", str9.equals("[10.0.0.100]"));

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test321"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)97, (java.lang.Integer)0, (java.lang.Integer)10);
    iP4.setSecond((java.lang.Integer)32);
    iP4.setSecond((java.lang.Integer)32);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test322"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    java.util.Set<tp2.IPBan> set_iPBan9 = null;
    boolean b10 = strictlySortedSinglyLinkedList0.repOk(set_iPBan9);
    int i11 = strictlySortedSinglyLinkedList0.size;
    int i12 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan14 = strictlySortedSinglyLinkedList0.get((int)'a');
    boolean b15 = strictlySortedSinglyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test323"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b7 = strictlySortedSinglyLinkedList0.containsIP(iP6);
    int i8 = strictlySortedSinglyLinkedList0.getSize();
    int i9 = strictlySortedSinglyLinkedList0.getSize();
    java.util.Set<tp2.IPBan> set_iPBan10 = null;
    boolean b11 = strictlySortedSinglyLinkedList0.repOk(set_iPBan10);
    strictlySortedSinglyLinkedList0.size = 1;
    boolean b14 = strictlySortedSinglyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test324"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get((int)' ');
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    boolean b17 = singlyLinkedList5.remove(iP13);
    tp2.IPBan iPBan19 = new tp2.IPBan(iP13, (java.lang.Long)1L);
    java.lang.String str20 = iPBan19.toString();
    iPBan19.setExpires((java.lang.Long)0L);
    java.lang.Long long23 = iPBan19.expires;
    tp2.IP iP24 = iPBan19.ip;
    java.lang.String str25 = iPBan19.toString();
    boolean b26 = iP4.equals((java.lang.Object)iPBan19);
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP28 = null;
    boolean b29 = server27.connect(iP28);
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP34.setFirst((java.lang.Integer)1);
    boolean b37 = server27.removeException(iP34);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList38 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan39 = null;
    boolean b40 = strictlySortedSinglyLinkedList38.contains(iPBan39);
    int i41 = strictlySortedSinglyLinkedList38.getSize();
    tp2.IPBan iPBan43 = strictlySortedSinglyLinkedList38.get((int)'#');
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setSecond((java.lang.Integer)(-1));
    boolean b51 = strictlySortedSinglyLinkedList38.removeFromIP(iP48);
    boolean b52 = server27.removeBan(iP48);
    java.lang.Integer i53 = iP48.getFourth();
    iP48.setFourth((java.lang.Integer)0);
    java.lang.Integer i56 = iP48.getThird();
    iPBan19.setIp(iP48);
    iP48.setSecond((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L+ "'", long23.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str25.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 100+ "'", i53.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 0+ "'", i56.equals(0));

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test325"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.ip;
    java.lang.String str20 = iPBan14.toString();
    java.lang.Long long21 = iPBan14.getExpires();
    tp2.IP iP22 = iPBan14.getIp();
    tp2.IP iP23 = iPBan14.ip;
    tp2.Server server24 = new tp2.Server();
    tp2.IP iP25 = null;
    boolean b26 = server24.connect(iP25);
    java.lang.String str27 = server24.toString();
    java.lang.String str28 = server24.toString();
    tp2.IP iP29 = null;
    boolean b30 = server24.removeException(iP29);
    tp2.RealTime realTime31 = new tp2.RealTime();
    long long32 = realTime31.getCurrentTime();
    long long33 = realTime31.getCurrentTime();
    server24.setTime((tp2.ITime)realTime31);
    boolean b35 = iP23.equals((java.lang.Object)server24);
    tp2.SinglyLinkedList singlyLinkedList36 = new tp2.SinglyLinkedList();
    int i37 = singlyLinkedList36.getSize();
    java.lang.String str38 = singlyLinkedList36.toString();
    int i39 = singlyLinkedList36.getSize();
    java.util.Set<tp2.IP> set_iP40 = null;
    boolean b41 = singlyLinkedList36.repOk(set_iP40);
    int i42 = singlyLinkedList36.getSize();
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP44 = null;
    boolean b45 = server43.connect(iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b51 = server43.connect(iP50);
    java.lang.Integer i52 = iP50.getFirst();
    boolean b53 = singlyLinkedList36.contains(iP50);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP58.setThird((java.lang.Integer)1);
    java.lang.Object obj61 = null;
    boolean b62 = iP58.equals(obj61);
    iP58.setThird((java.lang.Integer)0);
    singlyLinkedList36.add(iP58);
    java.lang.Integer i66 = iP58.getFirst();
    boolean b67 = server24.addException(iP58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L+ "'", long21.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str27.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long32 == 1466185923705L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long33 == 1466185923705L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "()"+ "'", str38.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i52 + "' != '" + 100+ "'", i52.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i66 + "' != '" + 10+ "'", i66.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test326"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get(1);
    tp2.IP iP4 = singlyLinkedList0.get(0);
    java.util.Set<tp2.IP> set_iP5 = null;
    boolean b6 = singlyLinkedList0.repOk(set_iP5);
    java.lang.String str7 = singlyLinkedList0.toString();
    int i8 = singlyLinkedList0.getSize();
    tp2.SinglyLinkedList singlyLinkedList9 = new tp2.SinglyLinkedList();
    tp2.IP iP11 = singlyLinkedList9.get(1);
    tp2.IP iP13 = singlyLinkedList9.get(0);
    int i14 = singlyLinkedList9.getSize();
    tp2.SinglyLinkedList singlyLinkedList15 = new tp2.SinglyLinkedList();
    tp2.IP iP17 = singlyLinkedList15.get((int)' ');
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = singlyLinkedList15.remove(iP23);
    tp2.IPBan iPBan29 = new tp2.IPBan(iP23, (java.lang.Long)1L);
    java.lang.String str30 = iPBan29.toString();
    java.lang.Long long31 = iPBan29.getExpires();
    iPBan29.expires = 0L;
    tp2.IP iP34 = iPBan29.ip;
    java.lang.String str35 = iP34.toString();
    boolean b36 = singlyLinkedList9.contains(iP34);
    boolean b37 = singlyLinkedList0.remove(iP34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "()"+ "'", str7.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str30.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L+ "'", long31.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test327"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList50 = new tp2.StrictlySortedSinglyLinkedList();
    int i51 = strictlySortedSinglyLinkedList50.getSize();
    tp2.IPBan iPBan52 = null;
    boolean b53 = strictlySortedSinglyLinkedList50.add(iPBan52);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList54 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node55 = strictlySortedSinglyLinkedList54.header;
    strictlySortedSinglyLinkedList50.header = node55;
    tp2.IPBan iPBan57 = node55.element;
    strictlySortedSinglyLinkedList0.header = node55;
    java.lang.String str59 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "{}"+ "'", str59.equals("{}"));

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test328"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node5 = node4.next;
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    server6.update();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP13.setFirst((java.lang.Integer)1);
    java.lang.Integer i16 = iP13.getSecond();
    boolean b17 = server6.addException(iP13);
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = server6.addException(iP23);
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b33 = server6.removeBan(iP32);
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP35 = null;
    boolean b36 = server34.connect(iP35);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b42 = server34.connect(iP41);
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP44 = null;
    boolean b45 = server43.connect(iP44);
    java.lang.String str46 = server43.toString();
    java.lang.String str47 = server43.toString();
    tp2.Entry entry48 = new tp2.Entry();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i54 = iP53.getFirst();
    java.lang.String str55 = iP53.toString();
    entry48.element = iP53;
    boolean b57 = server43.connect(iP53);
    boolean b58 = server34.removeException(iP53);
    boolean b59 = server6.connect(iP53);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList60 = new tp2.StrictlySortedSinglyLinkedList();
    int i61 = strictlySortedSinglyLinkedList60.size;
    tp2.IPBan iPBan62 = null;
    boolean b63 = strictlySortedSinglyLinkedList60.add(iPBan62);
    boolean b64 = strictlySortedSinglyLinkedList60.isEmpty();
    tp2.Node node65 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList66 = new tp2.StrictlySortedSinglyLinkedList();
    int i67 = strictlySortedSinglyLinkedList66.getSize();
    tp2.IPBan iPBan68 = null;
    boolean b69 = strictlySortedSinglyLinkedList66.add(iPBan68);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList70 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node71 = strictlySortedSinglyLinkedList70.header;
    strictlySortedSinglyLinkedList66.header = node71;
    node65.next = node71;
    tp2.Node node74 = node65.next;
    strictlySortedSinglyLinkedList60.header = node74;
    java.lang.String str76 = strictlySortedSinglyLinkedList60.toString();
    tp2.Node node77 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList78 = new tp2.StrictlySortedSinglyLinkedList();
    int i79 = strictlySortedSinglyLinkedList78.getSize();
    tp2.IPBan iPBan80 = null;
    boolean b81 = strictlySortedSinglyLinkedList78.add(iPBan80);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList82 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node83 = strictlySortedSinglyLinkedList82.header;
    strictlySortedSinglyLinkedList78.header = node83;
    node77.next = node83;
    tp2.Node node86 = node77.next;
    tp2.Node node87 = node77.next;
    strictlySortedSinglyLinkedList60.header = node87;
    boolean b89 = iP53.equals((java.lang.Object)strictlySortedSinglyLinkedList60);
    tp2.Node node90 = strictlySortedSinglyLinkedList60.header;
    // The following exception was thrown during execution in test generation
    try {
      node5.next = node90;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 0+ "'", i16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "10.0.0.100"+ "'", str55.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "{}"+ "'", str76.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node90);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test329"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b24 = server16.connect(iP23);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP26 = null;
    boolean b27 = server25.connect(iP26);
    java.lang.String str28 = server25.toString();
    java.lang.String str29 = server25.toString();
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server25.connect(iP35);
    boolean b40 = server16.removeException(iP35);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP42 = null;
    boolean b43 = server41.connect(iP42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b49 = server41.connect(iP48);
    java.lang.Integer i50 = iP48.getFirst();
    boolean b51 = server16.connect(iP48);
    iPBan14.ip = iP48;
    java.lang.Integer i53 = iP48.getFirst();
    iP48.setFirst((java.lang.Integer)97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 100+ "'", i50.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 100+ "'", i53.equals(100));

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test330"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)'4');
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    boolean b22 = singlyLinkedList0.contains(iP19);
    java.lang.String str23 = singlyLinkedList0.toString();
    java.lang.String str24 = singlyLinkedList0.toString();
    int i25 = singlyLinkedList0.getSize();
    tp2.SinglyLinkedList singlyLinkedList26 = new tp2.SinglyLinkedList();
    tp2.IP iP28 = singlyLinkedList26.get((int)' ');
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = singlyLinkedList26.remove(iP34);
    tp2.IPBan iPBan40 = new tp2.IPBan(iP34, (java.lang.Long)1L);
    java.lang.String str41 = iPBan40.toString();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP43 = null;
    boolean b44 = server42.connect(iP43);
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b50 = server42.connect(iP49);
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP52 = null;
    boolean b53 = server51.connect(iP52);
    java.lang.String str54 = server51.toString();
    java.lang.String str55 = server51.toString();
    tp2.Entry entry56 = new tp2.Entry();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i62 = iP61.getFirst();
    java.lang.String str63 = iP61.toString();
    entry56.element = iP61;
    boolean b65 = server51.connect(iP61);
    boolean b66 = server42.removeException(iP61);
    tp2.Server server67 = new tp2.Server();
    tp2.IP iP68 = null;
    boolean b69 = server67.connect(iP68);
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b75 = server67.connect(iP74);
    java.lang.Integer i76 = iP74.getFirst();
    boolean b77 = server42.connect(iP74);
    iPBan40.ip = iP74;
    java.lang.Integer i79 = iP74.getThird();
    java.lang.Integer i80 = iP74.getThird();
    singlyLinkedList0.add(iP74);
    java.lang.String str82 = singlyLinkedList0.toString();
    boolean b83 = singlyLinkedList0.isEmpty();
    java.util.Set<tp2.IP> set_iP84 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b85 = singlyLinkedList0.repOk(set_iP84);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "()"+ "'", str23.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "()"+ "'", str24.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str41.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str54.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str55.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i62 + "' != '" + 10+ "'", i62.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "10.0.0.100"+ "'", str63.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 100+ "'", i76.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i79 + "' != '" + (-1)+ "'", i79.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + (-1)+ "'", i80.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "([100.10.-1.10])"+ "'", str82.equals("([100.10.-1.10])"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test331"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan16 = null;
    boolean b17 = strictlySortedSinglyLinkedList15.contains(iPBan16);
    int i18 = strictlySortedSinglyLinkedList15.getSize();
    tp2.IPBan iPBan20 = strictlySortedSinglyLinkedList15.get((int)'#');
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setSecond((java.lang.Integer)(-1));
    boolean b28 = strictlySortedSinglyLinkedList15.removeFromIP(iP25);
    iPBan14.ip = iP25;
    java.lang.Long long30 = iPBan14.expires;
    java.lang.Long long31 = iPBan14.getExpires();
    iPBan14.expires = 1466185875390L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L+ "'", long30.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L+ "'", long31.equals(1L));

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test332"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = new tp2.Entry();
    java.lang.String str4 = entry3.toString();
    entry0.next = entry3;
    tp2.Entry entry6 = new tp2.Entry();
    java.lang.String str7 = entry6.toString();
    entry0.next = entry6;
    java.lang.String str9 = entry0.toString();
    tp2.Entry entry10 = entry0.next;
    tp2.Entry entry11 = new tp2.Entry();
    java.lang.String str12 = entry11.toString();
    java.lang.String str13 = entry11.toString();
    tp2.IP iP14 = entry11.element;
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    entry15.element = iP20;
    tp2.IP iP23 = entry15.element;
    entry11.next = entry15;
    tp2.Entry entry25 = entry11.next;
    entry10.next = entry25;
    java.lang.String str27 = entry25.toString();
    java.lang.String str28 = entry25.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[null]"+ "'", str4.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[null]"+ "'", str7.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[null]"+ "'", str12.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[null]"+ "'", str13.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[10.0.0.100]"+ "'", str27.equals("[10.0.0.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[10.0.0.100]"+ "'", str28.equals("[10.0.0.100]"));

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test333"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    java.lang.String str5 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node6 = new tp2.Node();
    tp2.IPBan iPBan7 = null;
    node6.element = iPBan7;
    tp2.IPBan iPBan9 = node6.element;
    strictlySortedSinglyLinkedList0.header = node6;
    tp2.IPBan iPBan12 = strictlySortedSinglyLinkedList0.get((-1));
    tp2.SinglyLinkedList singlyLinkedList13 = new tp2.SinglyLinkedList();
    tp2.IP iP15 = singlyLinkedList13.get((int)' ');
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = singlyLinkedList13.remove(iP21);
    tp2.IPBan iPBan27 = new tp2.IPBan(iP21, (java.lang.Long)1L);
    java.lang.String str28 = iPBan27.toString();
    iPBan27.setExpires((java.lang.Long)0L);
    java.lang.Long long31 = iPBan27.expires;
    tp2.IP iP32 = iPBan27.getIp();
    tp2.IP iP33 = iPBan27.ip;
    tp2.IP iP34 = iPBan27.getIp();
    iPBan27.expires = 1466185876788L;
    java.lang.Long long37 = iPBan27.getExpires();
    tp2.IP iP38 = iPBan27.getIp();
    boolean b39 = strictlySortedSinglyLinkedList0.add(iPBan27);
    java.lang.Long long40 = iPBan27.getExpires();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP45.setSecond((java.lang.Integer)1);
    java.lang.Integer i48 = iP45.getThird();
    java.lang.String str49 = iP45.toString();
    iPBan27.setIp(iP45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "{[null]}"+ "'", str5.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str28.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L+ "'", long31.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1466185876788L+ "'", long37.equals(1466185876788L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1466185876788L+ "'", long40.equals(1466185876788L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + (-1)+ "'", i48.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "100.1.-1.10"+ "'", str49.equals("100.1.-1.10"));

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test334"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.ITime iTime6 = null;
    server3.setTime(iTime6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i13 = iP12.getFirst();
    tp2.IPBan iPBan15 = new tp2.IPBan(iP12, (java.lang.Long)1466185873844L);
    boolean b16 = server3.removeBan(iP12);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList17 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList17.size = 10;
    tp2.Server server20 = new tp2.Server();
    java.lang.String str21 = server20.toString();
    server20.update();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP27.setFirst((java.lang.Integer)1);
    java.lang.Integer i30 = iP27.getSecond();
    boolean b31 = server20.addException(iP27);
    tp2.Entry entry32 = new tp2.Entry();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i38 = iP37.getFirst();
    java.lang.String str39 = iP37.toString();
    entry32.element = iP37;
    boolean b41 = server20.addException(iP37);
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b47 = server20.removeBan(iP46);
    iP46.setThird((java.lang.Integer)0);
    boolean b50 = strictlySortedSinglyLinkedList17.removeFromIP(iP46);
    tp2.Server server51 = new tp2.Server();
    java.lang.String str52 = server51.toString();
    server51.update();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP58.setFirst((java.lang.Integer)1);
    java.lang.Integer i61 = iP58.getSecond();
    boolean b62 = server51.addException(iP58);
    boolean b63 = strictlySortedSinglyLinkedList17.removeFromIP(iP58);
    java.lang.Integer i64 = iP58.getFourth();
    boolean b65 = server3.addException(iP58);
    iP58.setFourth((java.lang.Integer)11);
    java.lang.String str68 = iP58.toString();
    boolean b69 = singlyLinkedList0.remove(iP58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 100+ "'", i13.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 0+ "'", i30.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i38 + "' != '" + 10+ "'", i38.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "10.0.0.100"+ "'", str39.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str52.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 0+ "'", i61.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 100+ "'", i64.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "1.0.0.11"+ "'", str68.equals("1.0.0.11"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test335"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    tp2.Node node5 = new tp2.Node();
    tp2.IPBan iPBan6 = null;
    node5.element = iPBan6;
    tp2.IPBan iPBan8 = null;
    node5.element = iPBan8;
    tp2.IPBan iPBan10 = node5.element;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.Node node12 = strictlySortedSinglyLinkedList0.header;
    strictlySortedSinglyLinkedList0.size = ' ';
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node12);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test336"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.SinglyLinkedList singlyLinkedList4 = new tp2.SinglyLinkedList();
    tp2.IP iP6 = singlyLinkedList4.get((int)' ');
    tp2.Entry entry7 = new tp2.Entry();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i13 = iP12.getFirst();
    java.lang.String str14 = iP12.toString();
    entry7.element = iP12;
    boolean b16 = singlyLinkedList4.remove(iP12);
    tp2.IPBan iPBan18 = new tp2.IPBan(iP12, (java.lang.Long)1L);
    java.lang.String str19 = iPBan18.toString();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    java.lang.String str27 = iP24.toString();
    iPBan18.setIp(iP24);
    java.lang.Long long29 = iPBan18.getExpires();
    iPBan18.setExpires((java.lang.Long)0L);
    java.lang.String str32 = iPBan18.toString();
    tp2.Entry entry33 = new tp2.Entry();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i39 = iP38.getFirst();
    java.lang.String str40 = iP38.toString();
    entry33.element = iP38;
    tp2.IP iP42 = entry33.element;
    iPBan18.setIp(iP42);
    tp2.IP iP44 = iPBan18.getIp();
    // The following exception was thrown during execution in test generation
    try {
      boolean b45 = strictlySortedSinglyLinkedList0.contains(iPBan18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 10+ "'", i13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str19.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L+ "'", long29.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str32.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + 10+ "'", i39.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "10.0.0.100"+ "'", str40.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP44);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test337"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    boolean b10 = server0.removeException(iP7);
    tp2.SinglyLinkedList singlyLinkedList11 = new tp2.SinglyLinkedList();
    tp2.IP iP13 = singlyLinkedList11.get((int)' ');
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    entry14.element = iP19;
    boolean b23 = singlyLinkedList11.remove(iP19);
    tp2.IPBan iPBan25 = new tp2.IPBan(iP19, (java.lang.Long)1L);
    java.lang.String str26 = iPBan25.toString();
    iPBan25.setExpires((java.lang.Long)0L);
    java.lang.Long long29 = iPBan25.expires;
    tp2.IP iP30 = iPBan25.ip;
    java.lang.String str31 = iPBan25.toString();
    tp2.IP iP32 = iPBan25.getIp();
    iP32.setFirst((java.lang.Integer)100);
    boolean b35 = server0.addException(iP32);
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP37 = null;
    boolean b38 = server36.connect(iP37);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP43.setFirst((java.lang.Integer)1);
    boolean b46 = server36.removeException(iP43);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList47 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan48 = null;
    boolean b49 = strictlySortedSinglyLinkedList47.contains(iPBan48);
    int i50 = strictlySortedSinglyLinkedList47.getSize();
    tp2.IPBan iPBan52 = strictlySortedSinglyLinkedList47.get((int)'#');
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setSecond((java.lang.Integer)(-1));
    boolean b60 = strictlySortedSinglyLinkedList47.removeFromIP(iP57);
    boolean b61 = server36.removeBan(iP57);
    tp2.SinglyLinkedList singlyLinkedList62 = new tp2.SinglyLinkedList();
    tp2.IP iP64 = singlyLinkedList62.get((int)' ');
    tp2.Entry entry65 = new tp2.Entry();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i71 = iP70.getFirst();
    java.lang.String str72 = iP70.toString();
    entry65.element = iP70;
    boolean b74 = singlyLinkedList62.remove(iP70);
    boolean b75 = iP57.equals((java.lang.Object)iP70);
    iP70.setFirst((java.lang.Integer)1);
    boolean b78 = server0.connect(iP70);
    java.lang.Integer i79 = iP70.getFirst();
    java.lang.Integer i80 = iP70.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str26.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L+ "'", long29.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str31.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i71 + "' != '" + 10+ "'", i71.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "10.0.0.100"+ "'", str72.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i79 + "' != '" + 1+ "'", i79.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 100+ "'", i80.equals(100));

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test338"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)2, (java.lang.Integer)0, (java.lang.Integer)32, (java.lang.Integer)32);
    iP4.setThird((java.lang.Integer)100);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test339"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan5 = strictlySortedSinglyLinkedList0.get((int)'#');
    int i6 = strictlySortedSinglyLinkedList0.size;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test340"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan5 = strictlySortedSinglyLinkedList0.get((int)'#');
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setSecond((java.lang.Integer)(-1));
    boolean b13 = strictlySortedSinglyLinkedList0.removeFromIP(iP10);
    tp2.Node node14 = strictlySortedSinglyLinkedList0.header;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList15.size = 10;
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    server18.update();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setFirst((java.lang.Integer)1);
    java.lang.Integer i28 = iP25.getSecond();
    boolean b29 = server18.addException(iP25);
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server18.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b45 = server18.removeBan(iP44);
    iP44.setThird((java.lang.Integer)0);
    boolean b48 = strictlySortedSinglyLinkedList15.removeFromIP(iP44);
    java.lang.String str49 = strictlySortedSinglyLinkedList15.toString();
    tp2.SinglyLinkedList singlyLinkedList50 = new tp2.SinglyLinkedList();
    tp2.IP iP52 = singlyLinkedList50.get((int)' ');
    tp2.Entry entry53 = new tp2.Entry();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i59 = iP58.getFirst();
    java.lang.String str60 = iP58.toString();
    entry53.element = iP58;
    boolean b62 = singlyLinkedList50.remove(iP58);
    tp2.IPBan iPBan64 = new tp2.IPBan(iP58, (java.lang.Long)1L);
    java.lang.String str65 = iPBan64.toString();
    boolean b66 = strictlySortedSinglyLinkedList15.contains(iPBan64);
    boolean b67 = strictlySortedSinglyLinkedList0.add(iPBan64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 0+ "'", i28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "{}"+ "'", str49.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 10+ "'", i59.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "10.0.0.100"+ "'", str60.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str65.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test341"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    int i3 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    int i6 = singlyLinkedList0.getSize();
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP8 = null;
    boolean b9 = server7.connect(iP8);
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b15 = server7.connect(iP14);
    java.lang.Integer i16 = iP14.getFirst();
    boolean b17 = singlyLinkedList0.contains(iP14);
    tp2.IP iP19 = singlyLinkedList0.get((int)'4');
    int i20 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 100+ "'", i16.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test342"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.size;
    int i5 = strictlySortedSinglyLinkedList0.getSize();
    int i6 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str7 = strictlySortedSinglyLinkedList0.toString();
    boolean b8 = strictlySortedSinglyLinkedList0.isEmpty();
    int i9 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "{[null]}"+ "'", str7.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test343"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP3 = null;
    boolean b4 = server2.connect(iP3);
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b10 = server2.connect(iP9);
    tp2.Server server11 = new tp2.Server();
    tp2.IP iP12 = null;
    boolean b13 = server11.connect(iP12);
    java.lang.String str14 = server11.toString();
    java.lang.String str15 = server11.toString();
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = server11.connect(iP21);
    boolean b26 = server2.removeException(iP21);
    boolean b27 = singlyLinkedList0.remove(iP21);
    java.lang.String str28 = singlyLinkedList0.toString();
    tp2.IP iP30 = singlyLinkedList0.get((int)(byte)10);
    tp2.IP iP32 = singlyLinkedList0.get((int)(byte)10);
    java.util.Set<tp2.IP> set_iP33 = null;
    boolean b34 = singlyLinkedList0.repOk(set_iP33);
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    server35.update();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP42.setFirst((java.lang.Integer)1);
    java.lang.Integer i45 = iP42.getSecond();
    boolean b46 = server35.addException(iP42);
    tp2.Entry entry47 = new tp2.Entry();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    entry47.element = iP52;
    boolean b56 = server35.addException(iP52);
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b62 = server35.removeBan(iP61);
    iP61.setThird((java.lang.Integer)0);
    iP61.setFourth((java.lang.Integer)10);
    java.lang.String str67 = iP61.toString();
    singlyLinkedList0.add(iP61);
    tp2.IP iP70 = singlyLinkedList0.get(0);
    int i71 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "()"+ "'", str28.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 0+ "'", i45.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "10.100.0.10"+ "'", str67.equals("10.100.0.10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test344"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.IP iP3 = entry0.element;
    tp2.Entry entry4 = new tp2.Entry();
    java.lang.String str5 = entry4.toString();
    tp2.Entry entry6 = new tp2.Entry();
    java.lang.String str7 = entry6.toString();
    entry4.next = entry6;
    entry0.next = entry4;
    tp2.Entry entry10 = new tp2.Entry();
    tp2.Entry entry11 = new tp2.Entry();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    entry11.element = iP16;
    tp2.Entry entry20 = new tp2.Entry();
    tp2.Entry entry21 = new tp2.Entry();
    java.lang.String str22 = entry21.toString();
    java.lang.String str23 = entry21.toString();
    tp2.Entry entry24 = entry21.next;
    entry20.next = entry21;
    tp2.IP iP26 = entry20.element;
    entry11.next = entry20;
    entry10.next = entry20;
    entry4.next = entry10;
    tp2.IP iP30 = entry10.element;
    java.lang.String str31 = entry10.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[null]"+ "'", str5.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[null]"+ "'", str7.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[null]"+ "'", str22.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[null]"+ "'", str23.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[null]"+ "'", str31.equals("[null]"));

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test345"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.getIp();
    tp2.IP iP20 = iPBan14.ip;
    tp2.IP iP21 = iPBan14.getIp();
    iPBan14.expires = 1466185876788L;
    iPBan14.expires = 0L;
    tp2.Entry entry26 = new tp2.Entry();
    java.lang.String str27 = entry26.toString();
    java.lang.String str28 = entry26.toString();
    tp2.Entry entry29 = entry26.next;
    tp2.IP iP30 = entry26.element;
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    java.lang.String str38 = iP35.toString();
    iP35.setThird((java.lang.Integer)(-1));
    entry26.element = iP35;
    tp2.IP iP42 = entry26.element;
    iP42.setFirst((java.lang.Integer)1);
    iPBan14.setIp(iP42);
    tp2.IP iP46 = iPBan14.ip;
    iPBan14.setExpires((java.lang.Long)1466185870901L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[null]"+ "'", str27.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[null]"+ "'", str28.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP46);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test346"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    java.lang.String str19 = iP16.toString();
    iP16.setThird((java.lang.Integer)(-1));
    boolean b22 = server0.addBan(iP16);
    tp2.IP iP23 = null;
    boolean b24 = server0.removeException(iP23);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b30 = server0.removeException(iP29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test347"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList25 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList25.size = 10;
    tp2.Server server28 = new tp2.Server();
    java.lang.String str29 = server28.toString();
    server28.update();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP35.setFirst((java.lang.Integer)1);
    java.lang.Integer i38 = iP35.getSecond();
    boolean b39 = server28.addException(iP35);
    tp2.Entry entry40 = new tp2.Entry();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i46 = iP45.getFirst();
    java.lang.String str47 = iP45.toString();
    entry40.element = iP45;
    boolean b49 = server28.addException(iP45);
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b55 = server28.removeBan(iP54);
    iP54.setThird((java.lang.Integer)0);
    boolean b58 = strictlySortedSinglyLinkedList25.removeFromIP(iP54);
    boolean b59 = server3.addException(iP54);
    java.lang.String str60 = iP54.toString();
    boolean b61 = server0.removeBan(iP54);
    server0.update();
    java.lang.String str63 = server0.toString();
    java.lang.String str64 = server0.toString();
    tp2.Server server65 = new tp2.Server();
    java.lang.String str66 = server65.toString();
    server65.update();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP72.setFirst((java.lang.Integer)1);
    java.lang.Integer i75 = iP72.getSecond();
    boolean b76 = server65.addException(iP72);
    tp2.Entry entry77 = new tp2.Entry();
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i83 = iP82.getFirst();
    java.lang.String str84 = iP82.toString();
    entry77.element = iP82;
    boolean b86 = server65.addException(iP82);
    tp2.IP iP91 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b92 = server65.removeBan(iP91);
    iP91.setThird((java.lang.Integer)0);
    iP91.setFirst((java.lang.Integer)11);
    boolean b97 = server0.removeBan(iP91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i38 + "' != '" + 0+ "'", i38.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 10+ "'", i46.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "10.0.0.100"+ "'", str47.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "10.100.0.1"+ "'", str60.equals("10.100.0.1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Server [lastUpdate=1466185923961, exceptions=(), bans={}]"+ "'", str63.equals("Server [lastUpdate=1466185923961, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Server [lastUpdate=1466185923961, exceptions=(), bans={}]"+ "'", str64.equals("Server [lastUpdate=1466185923961, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 0+ "'", i75.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i83 + "' != '" + 10+ "'", i83.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "10.0.0.100"+ "'", str84.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test348"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    int i3 = singlyLinkedList0.getSize();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    server4.update();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP11.setFirst((java.lang.Integer)1);
    java.lang.Integer i14 = iP11.getSecond();
    boolean b15 = server4.addException(iP11);
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = server4.addException(iP21);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList26 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList26.size = 10;
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    server29.update();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP36.setFirst((java.lang.Integer)1);
    java.lang.Integer i39 = iP36.getSecond();
    boolean b40 = server29.addException(iP36);
    tp2.Entry entry41 = new tp2.Entry();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i47 = iP46.getFirst();
    java.lang.String str48 = iP46.toString();
    entry41.element = iP46;
    boolean b50 = server29.addException(iP46);
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b56 = server29.removeBan(iP55);
    iP55.setThird((java.lang.Integer)0);
    boolean b59 = strictlySortedSinglyLinkedList26.removeFromIP(iP55);
    boolean b60 = server4.addException(iP55);
    java.lang.String str61 = iP55.toString();
    boolean b62 = singlyLinkedList0.contains(iP55);
    java.lang.Integer i63 = iP55.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 0+ "'", i14.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + 0+ "'", i39.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 10+ "'", i47.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "10.0.0.100"+ "'", str48.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "10.100.0.1"+ "'", str61.equals("10.100.0.1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 0+ "'", i63.equals(0));

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test349"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get(1);
    java.lang.String str3 = singlyLinkedList0.toString();
    boolean b4 = singlyLinkedList0.isEmpty();
    tp2.Server server5 = new tp2.Server();
    tp2.IP iP6 = null;
    boolean b7 = server5.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b13 = server5.connect(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP15 = null;
    boolean b16 = server14.connect(iP15);
    java.lang.String str17 = server14.toString();
    java.lang.String str18 = server14.toString();
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = server14.connect(iP24);
    boolean b29 = server5.removeException(iP24);
    java.lang.Integer i30 = iP24.getFirst();
    boolean b31 = singlyLinkedList0.contains(iP24);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP33 = null;
    boolean b34 = server32.connect(iP33);
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b40 = server32.connect(iP39);
    java.lang.Integer i41 = iP39.getFirst();
    java.lang.Integer i42 = iP39.getFirst();
    iP39.setFourth((java.lang.Integer)100);
    singlyLinkedList0.add(iP39);
    java.lang.String str46 = singlyLinkedList0.toString();
    java.util.Set<tp2.IP> set_iP47 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b48 = singlyLinkedList0.repOk(set_iP47);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i41 + "' != '" + 100+ "'", i41.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 100+ "'", i42.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "([100.10.-1.100])"+ "'", str46.equals("([100.10.-1.100])"));

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test350"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i5 = iP4.getFirst();
    java.lang.String str6 = iP4.toString();
    java.lang.String str7 = iP4.toString();
    iP4.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan11 = new tp2.IPBan(iP4, (java.lang.Long)0L);
    tp2.Server server12 = new tp2.Server();
    tp2.IP iP13 = null;
    boolean b14 = server12.connect(iP13);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b20 = server12.connect(iP19);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList21 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList21.size = 10;
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    server24.update();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP31.setFirst((java.lang.Integer)1);
    java.lang.Integer i34 = iP31.getSecond();
    boolean b35 = server24.addException(iP31);
    tp2.Entry entry36 = new tp2.Entry();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i42 = iP41.getFirst();
    java.lang.String str43 = iP41.toString();
    entry36.element = iP41;
    boolean b45 = server24.addException(iP41);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b51 = server24.removeBan(iP50);
    iP50.setThird((java.lang.Integer)0);
    boolean b54 = strictlySortedSinglyLinkedList21.removeFromIP(iP50);
    tp2.Server server55 = new tp2.Server();
    java.lang.String str56 = server55.toString();
    server55.update();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP62.setFirst((java.lang.Integer)1);
    java.lang.Integer i65 = iP62.getSecond();
    boolean b66 = server55.addException(iP62);
    boolean b67 = strictlySortedSinglyLinkedList21.removeFromIP(iP62);
    boolean b68 = server12.connect(iP62);
    tp2.Server server69 = new tp2.Server();
    tp2.IP iP70 = null;
    boolean b71 = server69.connect(iP70);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b77 = server69.connect(iP76);
    java.lang.Integer i78 = iP76.getFirst();
    boolean b79 = server12.connect(iP76);
    java.lang.Integer i80 = iP76.getFirst();
    iPBan11.ip = iP76;
    tp2.IP iP82 = iPBan11.ip;
    iPBan11.setExpires((java.lang.Long)1466185872933L);
    tp2.Entry entry85 = new tp2.Entry();
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i91 = iP90.getFirst();
    entry85.element = iP90;
    iP90.setFirst((java.lang.Integer)1);
    iPBan11.setIp(iP90);
    tp2.IP iP96 = iPBan11.ip;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i5 + "' != '" + 10+ "'", i5.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "10.0.0.100"+ "'", str6.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 0+ "'", i34.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 10+ "'", i42.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 0+ "'", i65.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i78 + "' != '" + 100+ "'", i78.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 100+ "'", i80.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i91 + "' != '" + 10+ "'", i91.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP96);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test351"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.SinglyLinkedList singlyLinkedList3 = new tp2.SinglyLinkedList();
    tp2.IP iP5 = singlyLinkedList3.get((int)' ');
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    entry6.element = iP11;
    boolean b15 = singlyLinkedList3.remove(iP11);
    tp2.IPBan iPBan17 = new tp2.IPBan(iP11, (java.lang.Long)1L);
    java.lang.String str18 = iPBan17.toString();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    java.lang.String str26 = iP23.toString();
    iPBan17.setIp(iP23);
    java.lang.Long long28 = iPBan17.getExpires();
    node0.element = iPBan17;
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.SinglyLinkedList singlyLinkedList32 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP33 = null;
    boolean b34 = singlyLinkedList32.repOk(set_iP33);
    java.util.Set<tp2.IP> set_iP35 = null;
    boolean b36 = singlyLinkedList32.repOk(set_iP35);
    tp2.SinglyLinkedList singlyLinkedList37 = new tp2.SinglyLinkedList();
    tp2.IP iP39 = singlyLinkedList37.get((int)' ');
    tp2.Entry entry40 = new tp2.Entry();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i46 = iP45.getFirst();
    java.lang.String str47 = iP45.toString();
    entry40.element = iP45;
    boolean b49 = singlyLinkedList37.remove(iP45);
    tp2.IP iP51 = singlyLinkedList37.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList52 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList52.size = 10;
    tp2.Server server55 = new tp2.Server();
    java.lang.String str56 = server55.toString();
    server55.update();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP62.setFirst((java.lang.Integer)1);
    java.lang.Integer i65 = iP62.getSecond();
    boolean b66 = server55.addException(iP62);
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = server55.addException(iP72);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b82 = server55.removeBan(iP81);
    iP81.setThird((java.lang.Integer)0);
    boolean b85 = strictlySortedSinglyLinkedList52.removeFromIP(iP81);
    boolean b86 = singlyLinkedList37.contains(iP81);
    boolean b87 = singlyLinkedList32.contains(iP81);
    boolean b88 = server30.removeBan(iP81);
    iPBan17.ip = iP81;
    iPBan17.expires = 1466185875390L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str18.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L+ "'", long28.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 10+ "'", i46.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "10.0.0.100"+ "'", str47.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 0+ "'", i65.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test352"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    int i3 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b11 = singlyLinkedList0.remove(iP10);
    tp2.Node node12 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList13 = new tp2.StrictlySortedSinglyLinkedList();
    int i14 = strictlySortedSinglyLinkedList13.getSize();
    tp2.IPBan iPBan15 = null;
    boolean b16 = strictlySortedSinglyLinkedList13.add(iPBan15);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList17 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node18 = strictlySortedSinglyLinkedList17.header;
    strictlySortedSinglyLinkedList13.header = node18;
    node12.next = node18;
    tp2.IPBan iPBan21 = node18.element;
    boolean b22 = iP10.equals((java.lang.Object)iPBan21);
    java.lang.Integer i23 = iP10.getFirst();
    java.lang.Integer i24 = iP10.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 100+ "'", i23.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test353"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    boolean b10 = server0.removeException(iP7);
    tp2.SinglyLinkedList singlyLinkedList11 = new tp2.SinglyLinkedList();
    tp2.IP iP13 = singlyLinkedList11.get((int)' ');
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    entry14.element = iP19;
    boolean b23 = singlyLinkedList11.remove(iP19);
    tp2.IPBan iPBan25 = new tp2.IPBan(iP19, (java.lang.Long)1L);
    java.lang.String str26 = iPBan25.toString();
    iPBan25.setExpires((java.lang.Long)0L);
    java.lang.Long long29 = iPBan25.expires;
    tp2.IP iP30 = iPBan25.ip;
    java.lang.String str31 = iPBan25.toString();
    tp2.IP iP32 = iPBan25.getIp();
    iP32.setFirst((java.lang.Integer)100);
    boolean b35 = server0.addException(iP32);
    server0.update();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList37 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node38 = strictlySortedSinglyLinkedList37.header;
    tp2.Node node39 = new tp2.Node();
    tp2.IPBan iPBan40 = null;
    node39.element = iPBan40;
    tp2.IPBan iPBan42 = null;
    node39.element = iPBan42;
    strictlySortedSinglyLinkedList37.header = node39;
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b50 = strictlySortedSinglyLinkedList37.containsIP(iP49);
    java.lang.String str51 = iP49.toString();
    iP49.setSecond((java.lang.Integer)100);
    tp2.IPBan iPBan55 = new tp2.IPBan(iP49, (java.lang.Long)100L);
    boolean b56 = server0.connect(iP49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str26.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L+ "'", long29.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str31.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "10.0.0.0"+ "'", str51.equals("10.0.0.0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test354"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    int i3 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    int i6 = singlyLinkedList0.getSize();
    boolean b7 = singlyLinkedList0.isEmpty();
    java.lang.String str8 = singlyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "()"+ "'", str8.equals("()"));

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test355"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.ip;
    java.lang.Long long20 = iPBan14.getExpires();
    tp2.Node node21 = new tp2.Node();
    tp2.IPBan iPBan22 = null;
    node21.element = iPBan22;
    tp2.SinglyLinkedList singlyLinkedList24 = new tp2.SinglyLinkedList();
    tp2.IP iP26 = singlyLinkedList24.get((int)' ');
    tp2.Entry entry27 = new tp2.Entry();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    entry27.element = iP32;
    boolean b36 = singlyLinkedList24.remove(iP32);
    tp2.IPBan iPBan38 = new tp2.IPBan(iP32, (java.lang.Long)1L);
    java.lang.String str39 = iPBan38.toString();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i45 = iP44.getFirst();
    java.lang.String str46 = iP44.toString();
    java.lang.String str47 = iP44.toString();
    iPBan38.setIp(iP44);
    java.lang.Long long49 = iPBan38.getExpires();
    node21.element = iPBan38;
    iPBan38.expires = 1466185870380L;
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i58 = iP57.getFirst();
    java.lang.String str59 = iP57.toString();
    java.lang.Integer i60 = iP57.getFourth();
    iPBan38.ip = iP57;
    iPBan14.ip = iP57;
    iPBan14.expires = 0L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L+ "'", long20.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str39.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 10+ "'", i45.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "10.0.0.100"+ "'", str46.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "10.0.0.100"+ "'", str47.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L+ "'", long49.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 10+ "'", i58.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "10.0.0.100"+ "'", str59.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 100+ "'", i60.equals(100));

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test356"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan6 = strictlySortedSinglyLinkedList0.get(100);
    tp2.IPBan iPBan8 = strictlySortedSinglyLinkedList0.get((int)(byte)100);
    boolean b9 = strictlySortedSinglyLinkedList0.isEmpty();
    boolean b10 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.IPBan iPBan12 = strictlySortedSinglyLinkedList0.get(1);
    tp2.Entry entry13 = new tp2.Entry();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i19 = iP18.getFirst();
    java.lang.String str20 = iP18.toString();
    entry13.element = iP18;
    tp2.Node node22 = new tp2.Node();
    tp2.IPBan iPBan23 = null;
    node22.element = iPBan23;
    tp2.SinglyLinkedList singlyLinkedList25 = new tp2.SinglyLinkedList();
    tp2.IP iP27 = singlyLinkedList25.get((int)' ');
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = singlyLinkedList25.remove(iP33);
    tp2.IPBan iPBan39 = new tp2.IPBan(iP33, (java.lang.Long)1L);
    java.lang.String str40 = iPBan39.toString();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i46 = iP45.getFirst();
    java.lang.String str47 = iP45.toString();
    java.lang.String str48 = iP45.toString();
    iPBan39.setIp(iP45);
    java.lang.Long long50 = iPBan39.getExpires();
    node22.element = iPBan39;
    boolean b52 = iP18.equals((java.lang.Object)iPBan39);
    tp2.SinglyLinkedList singlyLinkedList53 = new tp2.SinglyLinkedList();
    int i54 = singlyLinkedList53.getSize();
    java.lang.String str55 = singlyLinkedList53.toString();
    int i56 = singlyLinkedList53.getSize();
    java.util.Set<tp2.IP> set_iP57 = null;
    boolean b58 = singlyLinkedList53.repOk(set_iP57);
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b64 = singlyLinkedList53.remove(iP63);
    iPBan39.setIp(iP63);
    iPBan39.setExpires((java.lang.Long)1466185870380L);
    java.lang.String str68 = iPBan39.toString();
    tp2.Server server69 = new tp2.Server();
    tp2.IP iP70 = null;
    boolean b71 = server69.connect(iP70);
    java.lang.String str72 = server69.toString();
    java.lang.String str73 = server69.toString();
    tp2.Entry entry74 = new tp2.Entry();
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i80 = iP79.getFirst();
    java.lang.String str81 = iP79.toString();
    entry74.element = iP79;
    boolean b83 = server69.connect(iP79);
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i89 = iP88.getFirst();
    java.lang.String str90 = iP88.toString();
    java.lang.String str91 = iP88.toString();
    boolean b92 = server69.removeBan(iP88);
    java.lang.Integer i93 = iP88.getFirst();
    iPBan39.ip = iP88;
    // The following exception was thrown during execution in test generation
    try {
      boolean b95 = strictlySortedSinglyLinkedList0.add(iPBan39);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 10+ "'", i19.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "10.0.0.100"+ "'", str20.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str40.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 10+ "'", i46.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "10.0.0.100"+ "'", str47.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "10.0.0.100"+ "'", str48.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L+ "'", long50.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "()"+ "'", str55.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "IPBan [ip=100.10.-1.10, expires=1466185870380]"+ "'", str68.equals("IPBan [ip=100.10.-1.10, expires=1466185870380]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str72.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str73.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 10+ "'", i80.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "10.0.0.100"+ "'", str81.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i89 + "' != '" + 10+ "'", i89.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "10.0.0.100"+ "'", str90.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "10.0.0.100"+ "'", str91.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i93 + "' != '" + 10+ "'", i93.equals(10));

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test357"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = entry0.next;
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b17 = server9.connect(iP16);
    java.lang.Integer i18 = iP16.getFirst();
    entry0.element = iP16;
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP24.setThird((java.lang.Integer)1);
    entry0.element = iP24;
    java.lang.String str28 = entry0.toString();
    java.lang.String str29 = entry0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 100+ "'", i18.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[10.0.1.100]"+ "'", str28.equals("[10.0.1.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[10.0.1.100]"+ "'", str29.equals("[10.0.1.100]"));

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test358"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    iPBan14.expires = 1466185871428L;
    java.lang.Long long17 = iPBan14.getExpires();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1466185871428L+ "'", long17.equals(1466185871428L));

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test359"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b7 = strictlySortedSinglyLinkedList0.containsIP(iP6);
    int i8 = strictlySortedSinglyLinkedList0.size;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList9.size = 10;
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    server12.update();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP19.setFirst((java.lang.Integer)1);
    java.lang.Integer i22 = iP19.getSecond();
    boolean b23 = server12.addException(iP19);
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = server12.addException(iP29);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b39 = server12.removeBan(iP38);
    iP38.setThird((java.lang.Integer)0);
    boolean b42 = strictlySortedSinglyLinkedList9.removeFromIP(iP38);
    java.lang.String str43 = strictlySortedSinglyLinkedList9.toString();
    tp2.SinglyLinkedList singlyLinkedList44 = new tp2.SinglyLinkedList();
    tp2.IP iP46 = singlyLinkedList44.get((int)' ');
    tp2.Entry entry47 = new tp2.Entry();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    entry47.element = iP52;
    boolean b56 = singlyLinkedList44.remove(iP52);
    tp2.IPBan iPBan58 = new tp2.IPBan(iP52, (java.lang.Long)1L);
    java.lang.String str59 = iPBan58.toString();
    boolean b60 = strictlySortedSinglyLinkedList9.contains(iPBan58);
    tp2.IP iP61 = iPBan58.getIp();
    boolean b62 = strictlySortedSinglyLinkedList0.contains(iPBan58);
    tp2.SinglyLinkedList singlyLinkedList63 = new tp2.SinglyLinkedList();
    tp2.IP iP65 = singlyLinkedList63.get((int)' ');
    tp2.Entry entry66 = new tp2.Entry();
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i72 = iP71.getFirst();
    java.lang.String str73 = iP71.toString();
    entry66.element = iP71;
    boolean b75 = singlyLinkedList63.remove(iP71);
    tp2.IP iP77 = singlyLinkedList63.get((int)'4');
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i83 = iP82.getFirst();
    java.lang.String str84 = iP82.toString();
    boolean b85 = singlyLinkedList63.contains(iP82);
    tp2.IPBan iPBan87 = new tp2.IPBan(iP82, (java.lang.Long)200000L);
    java.lang.Long long88 = iPBan87.getExpires();
    java.lang.Long long89 = iPBan87.getExpires();
    boolean b90 = strictlySortedSinglyLinkedList0.contains(iPBan87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 0+ "'", i22.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "{}"+ "'", str43.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str59.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i72 + "' != '" + 10+ "'", i72.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "10.0.0.100"+ "'", str73.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i83 + "' != '" + 10+ "'", i83.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "10.0.0.100"+ "'", str84.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long88 + "' != '" + 200000L+ "'", long88.equals(200000L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long89 + "' != '" + 200000L+ "'", long89.equals(200000L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test360"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    int i3 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    int i6 = singlyLinkedList0.getSize();
    java.lang.String str7 = singlyLinkedList0.toString();
    int i8 = singlyLinkedList0.getSize();
    int i9 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP10 = null;
    boolean b11 = singlyLinkedList0.repOk(set_iP10);
    java.util.Set<tp2.IP> set_iP12 = null;
    boolean b13 = singlyLinkedList0.repOk(set_iP12);
    int i14 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "()"+ "'", str7.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test361"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.Entry entry7 = new tp2.Entry();
    java.lang.String str8 = entry7.toString();
    java.lang.String str9 = entry7.toString();
    tp2.Entry entry10 = entry7.next;
    entry6.next = entry7;
    entry1.next = entry6;
    tp2.Entry entry13 = entry6.next;
    java.lang.String str14 = entry6.toString();
    tp2.Entry entry15 = entry6.next;
    tp2.Entry entry16 = new tp2.Entry();
    java.lang.String str17 = entry16.toString();
    java.lang.String str18 = entry16.toString();
    tp2.IP iP19 = entry16.element;
    tp2.Entry entry20 = new tp2.Entry();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    entry20.element = iP25;
    tp2.IP iP28 = entry20.element;
    entry16.next = entry20;
    tp2.Entry entry30 = new tp2.Entry();
    java.lang.String str31 = entry30.toString();
    java.lang.String str32 = entry30.toString();
    tp2.Entry entry33 = entry30.next;
    tp2.IP iP34 = entry30.element;
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    java.lang.String str42 = iP39.toString();
    iP39.setThird((java.lang.Integer)(-1));
    entry30.element = iP39;
    tp2.Node node46 = new tp2.Node();
    tp2.IPBan iPBan47 = null;
    node46.element = iPBan47;
    tp2.SinglyLinkedList singlyLinkedList49 = new tp2.SinglyLinkedList();
    tp2.IP iP51 = singlyLinkedList49.get((int)' ');
    tp2.Entry entry52 = new tp2.Entry();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i58 = iP57.getFirst();
    java.lang.String str59 = iP57.toString();
    entry52.element = iP57;
    boolean b61 = singlyLinkedList49.remove(iP57);
    tp2.IPBan iPBan63 = new tp2.IPBan(iP57, (java.lang.Long)1L);
    java.lang.String str64 = iPBan63.toString();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i70 = iP69.getFirst();
    java.lang.String str71 = iP69.toString();
    java.lang.String str72 = iP69.toString();
    iPBan63.setIp(iP69);
    java.lang.Long long74 = iPBan63.getExpires();
    node46.element = iPBan63;
    iPBan63.expires = 1466185870380L;
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i83 = iP82.getFirst();
    java.lang.String str84 = iP82.toString();
    java.lang.Integer i85 = iP82.getFourth();
    iPBan63.ip = iP82;
    entry30.element = iP82;
    entry16.next = entry30;
    tp2.IP iP89 = entry30.element;
    entry6.next = entry30;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[null]"+ "'", str8.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[null]"+ "'", str14.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[null]"+ "'", str17.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[null]"+ "'", str18.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[null]"+ "'", str31.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[null]"+ "'", str32.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 10+ "'", i58.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "10.0.0.100"+ "'", str59.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str64.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 10+ "'", i70.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "10.0.0.100"+ "'", str71.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "10.0.0.100"+ "'", str72.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L+ "'", long74.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i83 + "' != '" + 10+ "'", i83.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "10.0.0.100"+ "'", str84.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i85 + "' != '" + 100+ "'", i85.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP89);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test362"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan6 = strictlySortedSinglyLinkedList0.get(100);
    strictlySortedSinglyLinkedList0.size = '#';
    strictlySortedSinglyLinkedList0.size = 100;
    int i11 = strictlySortedSinglyLinkedList0.getSize();
    strictlySortedSinglyLinkedList0.size = (byte)10;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 100);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test363"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList3 = new tp2.SinglyLinkedList();
    tp2.IP iP5 = singlyLinkedList3.get((int)' ');
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    entry6.element = iP11;
    boolean b15 = singlyLinkedList3.remove(iP11);
    tp2.IPBan iPBan17 = new tp2.IPBan(iP11, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList18 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan19 = null;
    boolean b20 = strictlySortedSinglyLinkedList18.contains(iPBan19);
    int i21 = strictlySortedSinglyLinkedList18.getSize();
    tp2.IPBan iPBan23 = strictlySortedSinglyLinkedList18.get((int)'#');
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP28.setSecond((java.lang.Integer)(-1));
    boolean b31 = strictlySortedSinglyLinkedList18.removeFromIP(iP28);
    iPBan17.ip = iP28;
    tp2.IP iP33 = iPBan17.ip;
    boolean b34 = singlyLinkedList0.contains(iP33);
    java.util.Set<tp2.IP> set_iP35 = null;
    boolean b36 = singlyLinkedList0.repOk(set_iP35);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList37 = new tp2.StrictlySortedSinglyLinkedList();
    int i38 = strictlySortedSinglyLinkedList37.getSize();
    tp2.IPBan iPBan39 = null;
    boolean b40 = strictlySortedSinglyLinkedList37.add(iPBan39);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList41 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node42 = strictlySortedSinglyLinkedList41.header;
    strictlySortedSinglyLinkedList37.header = node42;
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i49 = iP48.getFirst();
    java.lang.String str50 = iP48.toString();
    java.lang.String str51 = iP48.toString();
    iP48.setThird((java.lang.Integer)(-1));
    boolean b54 = strictlySortedSinglyLinkedList37.containsIP(iP48);
    tp2.SinglyLinkedList singlyLinkedList55 = new tp2.SinglyLinkedList();
    tp2.IP iP57 = singlyLinkedList55.get((int)' ');
    tp2.Entry entry58 = new tp2.Entry();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i64 = iP63.getFirst();
    java.lang.String str65 = iP63.toString();
    entry58.element = iP63;
    boolean b67 = singlyLinkedList55.remove(iP63);
    tp2.IPBan iPBan69 = new tp2.IPBan(iP63, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList70 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan71 = null;
    boolean b72 = strictlySortedSinglyLinkedList70.contains(iPBan71);
    int i73 = strictlySortedSinglyLinkedList70.getSize();
    tp2.IPBan iPBan75 = strictlySortedSinglyLinkedList70.get((int)'#');
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP80.setSecond((java.lang.Integer)(-1));
    boolean b83 = strictlySortedSinglyLinkedList70.removeFromIP(iP80);
    iPBan69.ip = iP80;
    boolean b85 = strictlySortedSinglyLinkedList37.removeFromIP(iP80);
    boolean b86 = singlyLinkedList0.remove(iP80);
    tp2.IP iP88 = singlyLinkedList0.get(100);
    java.lang.String str89 = singlyLinkedList0.toString();
    tp2.IP iP91 = singlyLinkedList0.get((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i49 + "' != '" + 10+ "'", i49.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "10.0.0.100"+ "'", str50.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "10.0.0.100"+ "'", str51.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 10+ "'", i64.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "10.0.0.100"+ "'", str65.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "()"+ "'", str89.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP91);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test364"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get(1);
    tp2.IP iP4 = singlyLinkedList0.get(0);
    java.util.Set<tp2.IP> set_iP5 = null;
    boolean b6 = singlyLinkedList0.repOk(set_iP5);
    java.lang.String str7 = singlyLinkedList0.toString();
    tp2.IP iP9 = singlyLinkedList0.get((int)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "()"+ "'", str7.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP9);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test365"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i5 = iP4.getFirst();
    java.lang.String str6 = iP4.toString();
    java.lang.String str7 = iP4.toString();
    iP4.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan11 = new tp2.IPBan(iP4, (java.lang.Long)0L);
    tp2.IP iP12 = iPBan11.ip;
    tp2.IP iP13 = iPBan11.ip;
    java.lang.Integer i14 = iP13.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i5 + "' != '" + 10+ "'", i5.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "10.0.0.100"+ "'", str6.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 0+ "'", i14.equals(0));

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test366"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = server0.connect(iP10);
    tp2.SinglyLinkedList singlyLinkedList15 = new tp2.SinglyLinkedList();
    tp2.IP iP17 = singlyLinkedList15.get((int)' ');
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = singlyLinkedList15.remove(iP23);
    tp2.IPBan iPBan29 = new tp2.IPBan(iP23, (java.lang.Long)1L);
    java.lang.String str30 = iPBan29.toString();
    iPBan29.setExpires((java.lang.Long)0L);
    java.lang.Long long33 = iPBan29.expires;
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP35 = null;
    boolean b36 = server34.connect(iP35);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b42 = server34.connect(iP41);
    java.lang.Integer i43 = iP41.getFirst();
    java.lang.Integer i44 = iP41.getFirst();
    iPBan29.setIp(iP41);
    boolean b46 = server0.removeException(iP41);
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP48 = null;
    boolean b49 = server47.connect(iP48);
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b55 = server47.connect(iP54);
    java.lang.Integer i56 = iP54.getFirst();
    java.lang.Integer i57 = iP54.getSecond();
    boolean b58 = server0.connect(iP54);
    java.lang.String str59 = server0.toString();
    java.lang.String str60 = server0.toString();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)2, (java.lang.Integer)1, (java.lang.Integer)1, (java.lang.Integer)11);
    java.lang.Integer i66 = iP65.getFirst();
    boolean b67 = server0.connect(iP65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str30.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L+ "'", long33.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 100+ "'", i43.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 100+ "'", i44.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 100+ "'", i56.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 10+ "'", i57.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str59.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i66 + "' != '" + 2+ "'", i66.equals(2));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test367"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node1 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node2 = new tp2.Node();
    tp2.IPBan iPBan3 = null;
    node2.element = iPBan3;
    tp2.IPBan iPBan5 = null;
    node2.element = iPBan5;
    strictlySortedSinglyLinkedList0.header = node2;
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b13 = strictlySortedSinglyLinkedList0.containsIP(iP12);
    tp2.Node node14 = new tp2.Node();
    tp2.IPBan iPBan15 = null;
    node14.element = iPBan15;
    tp2.IPBan iPBan17 = null;
    node14.element = iPBan17;
    java.lang.String str19 = node14.toString();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList20 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList20.size = 10;
    tp2.Server server23 = new tp2.Server();
    java.lang.String str24 = server23.toString();
    server23.update();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP30.setFirst((java.lang.Integer)1);
    java.lang.Integer i33 = iP30.getSecond();
    boolean b34 = server23.addException(iP30);
    tp2.Entry entry35 = new tp2.Entry();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i41 = iP40.getFirst();
    java.lang.String str42 = iP40.toString();
    entry35.element = iP40;
    boolean b44 = server23.addException(iP40);
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b50 = server23.removeBan(iP49);
    iP49.setThird((java.lang.Integer)0);
    boolean b53 = strictlySortedSinglyLinkedList20.removeFromIP(iP49);
    tp2.Server server54 = new tp2.Server();
    java.lang.String str55 = server54.toString();
    server54.update();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP61.setFirst((java.lang.Integer)1);
    java.lang.Integer i64 = iP61.getSecond();
    boolean b65 = server54.addException(iP61);
    boolean b66 = strictlySortedSinglyLinkedList20.removeFromIP(iP61);
    int i67 = strictlySortedSinglyLinkedList20.size;
    strictlySortedSinglyLinkedList20.size = (byte)1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList70 = new tp2.StrictlySortedSinglyLinkedList();
    int i71 = strictlySortedSinglyLinkedList70.getSize();
    tp2.IPBan iPBan72 = null;
    boolean b73 = strictlySortedSinglyLinkedList70.add(iPBan72);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList74 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node75 = strictlySortedSinglyLinkedList74.header;
    strictlySortedSinglyLinkedList70.header = node75;
    tp2.IPBan iPBan77 = node75.element;
    strictlySortedSinglyLinkedList20.header = node75;
    node14.next = node75;
    strictlySortedSinglyLinkedList0.header = node14;
    int i81 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan83 = strictlySortedSinglyLinkedList0.get((int)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[null]"+ "'", str19.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 0+ "'", i33.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i41 + "' != '" + 10+ "'", i41.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str55.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 0+ "'", i64.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan83);

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test368"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList3 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList3.size = 10;
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    server6.update();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP13.setFirst((java.lang.Integer)1);
    java.lang.Integer i16 = iP13.getSecond();
    boolean b17 = server6.addException(iP13);
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = server6.addException(iP23);
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b33 = server6.removeBan(iP32);
    iP32.setThird((java.lang.Integer)0);
    boolean b36 = strictlySortedSinglyLinkedList3.removeFromIP(iP32);
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    server37.update();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP44.setFirst((java.lang.Integer)1);
    java.lang.Integer i47 = iP44.getSecond();
    boolean b48 = server37.addException(iP44);
    boolean b49 = strictlySortedSinglyLinkedList3.removeFromIP(iP44);
    singlyLinkedList0.add(iP44);
    boolean b51 = singlyLinkedList0.isEmpty();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i57 = iP56.getFirst();
    java.lang.String str58 = iP56.toString();
    java.lang.String str59 = iP56.toString();
    iP56.setThird((java.lang.Integer)(-1));
    boolean b62 = singlyLinkedList0.contains(iP56);
    java.lang.String str63 = singlyLinkedList0.toString();
    int i64 = singlyLinkedList0.getSize();
    int i65 = singlyLinkedList0.getSize();
    java.lang.String str66 = singlyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 0+ "'", i16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 0+ "'", i47.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 10+ "'", i57.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "10.0.0.100"+ "'", str58.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "10.0.0.100"+ "'", str59.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "([1.0.0.100])"+ "'", str63.equals("([1.0.0.100])"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "([1.0.0.100])"+ "'", str66.equals("([1.0.0.100])"));

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test369"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    iPBan14.expires = 1466185877442L;
    tp2.IP iP20 = iPBan14.ip;
    java.lang.String str21 = iPBan14.toString();
    tp2.IP iP22 = iPBan14.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "IPBan [ip=10.0.0.100, expires=1466185877442]"+ "'", str21.equals("IPBan [ip=10.0.0.100, expires=1466185877442]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP22);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test370"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    boolean b1 = singlyLinkedList0.isEmpty();
    tp2.SinglyLinkedList singlyLinkedList2 = new tp2.SinglyLinkedList();
    java.lang.String str3 = singlyLinkedList2.toString();
    java.lang.String str4 = singlyLinkedList2.toString();
    java.lang.String str5 = singlyLinkedList2.toString();
    java.lang.String str6 = singlyLinkedList2.toString();
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP8 = null;
    boolean b9 = server7.connect(iP8);
    java.lang.String str10 = server7.toString();
    java.lang.String str11 = server7.toString();
    tp2.IP iP12 = null;
    boolean b13 = server7.removeException(iP12);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList14 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList14.size = 10;
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    server17.update();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP24.setFirst((java.lang.Integer)1);
    java.lang.Integer i27 = iP24.getSecond();
    boolean b28 = server17.addException(iP24);
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = server17.addException(iP34);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b44 = server17.removeBan(iP43);
    iP43.setThird((java.lang.Integer)0);
    boolean b47 = strictlySortedSinglyLinkedList14.removeFromIP(iP43);
    tp2.Server server48 = new tp2.Server();
    java.lang.String str49 = server48.toString();
    server48.update();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP55.setFirst((java.lang.Integer)1);
    java.lang.Integer i58 = iP55.getSecond();
    boolean b59 = server48.addException(iP55);
    boolean b60 = strictlySortedSinglyLinkedList14.removeFromIP(iP55);
    boolean b61 = server7.connect(iP55);
    boolean b62 = singlyLinkedList2.contains(iP55);
    tp2.Server server63 = new tp2.Server();
    java.lang.String str64 = server63.toString();
    server63.update();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP70.setFirst((java.lang.Integer)1);
    java.lang.Integer i73 = iP70.getSecond();
    boolean b74 = server63.addException(iP70);
    boolean b75 = iP55.equals((java.lang.Object)iP70);
    java.lang.String str76 = iP55.toString();
    singlyLinkedList0.add(iP55);
    java.lang.Integer i78 = iP55.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "()"+ "'", str4.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "()"+ "'", str5.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "()"+ "'", str6.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 0+ "'", i27.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str49.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 0+ "'", i58.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str64.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 0+ "'", i73.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "1.0.0.100"+ "'", str76.equals("1.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i78 + "' != '" + 1+ "'", i78.equals(1));

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test371"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    java.lang.String str34 = strictlySortedSinglyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    java.lang.String str50 = iPBan49.toString();
    boolean b51 = strictlySortedSinglyLinkedList0.contains(iPBan49);
    iPBan49.setExpires((java.lang.Long)1466185873141L);
    iPBan49.expires = 1466185886129L;
    java.lang.Long long56 = iPBan49.expires;
    java.lang.Long long57 = iPBan49.getExpires();
    tp2.SinglyLinkedList singlyLinkedList58 = new tp2.SinglyLinkedList();
    int i59 = singlyLinkedList58.getSize();
    java.lang.String str60 = singlyLinkedList58.toString();
    int i61 = singlyLinkedList58.getSize();
    java.util.Set<tp2.IP> set_iP62 = null;
    boolean b63 = singlyLinkedList58.repOk(set_iP62);
    int i64 = singlyLinkedList58.getSize();
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP66 = null;
    boolean b67 = server65.connect(iP66);
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b73 = server65.connect(iP72);
    java.lang.Integer i74 = iP72.getFirst();
    boolean b75 = singlyLinkedList58.contains(iP72);
    iPBan49.ip = iP72;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "{}"+ "'", str34.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1466185886129L+ "'", long56.equals(1466185886129L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1466185886129L+ "'", long57.equals(1466185886129L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "()"+ "'", str60.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i74 + "' != '" + 100+ "'", i74.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test372"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    tp2.SinglyLinkedList singlyLinkedList2 = new tp2.SinglyLinkedList();
    tp2.IP iP4 = singlyLinkedList2.get((int)' ');
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = singlyLinkedList2.remove(iP10);
    tp2.IP iP16 = singlyLinkedList2.get((int)'4');
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    boolean b24 = singlyLinkedList2.contains(iP21);
    boolean b25 = singlyLinkedList0.remove(iP21);
    int i26 = singlyLinkedList0.getSize();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i32 = iP31.getFirst();
    java.lang.String str33 = iP31.toString();
    java.lang.String str34 = iP31.toString();
    iP31.setThird((java.lang.Integer)(-1));
    java.lang.String str37 = iP31.toString();
    boolean b38 = singlyLinkedList0.contains(iP31);
    java.util.Set<tp2.IP> set_iP39 = null;
    boolean b40 = singlyLinkedList0.repOk(set_iP39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 10+ "'", i32.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "10.0.0.100"+ "'", str33.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.-1.100"+ "'", str37.equals("10.0.-1.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test373"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP4.setFirst((java.lang.Integer)1);
    java.lang.Integer i7 = iP4.getFourth();
    tp2.IPBan iPBan9 = new tp2.IPBan(iP4, (java.lang.Long)1466185886166L);
    java.lang.Long long10 = iPBan9.expires;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i7 + "' != '" + 100+ "'", i7.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1466185886166L+ "'", long10.equals(1466185886166L));

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test374"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b24 = server16.connect(iP23);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP26 = null;
    boolean b27 = server25.connect(iP26);
    java.lang.String str28 = server25.toString();
    java.lang.String str29 = server25.toString();
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server25.connect(iP35);
    boolean b40 = server16.removeException(iP35);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP42 = null;
    boolean b43 = server41.connect(iP42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b49 = server41.connect(iP48);
    java.lang.Integer i50 = iP48.getFirst();
    boolean b51 = server16.connect(iP48);
    iPBan14.ip = iP48;
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    java.lang.Integer i60 = iP57.getSecond();
    iPBan14.ip = iP57;
    java.lang.String str62 = iPBan14.toString();
    tp2.IP iP63 = iPBan14.ip;
    iP63.setFirst((java.lang.Integer)10);
    tp2.IPBan iPBan67 = new tp2.IPBan(iP63, (java.lang.Long)1466185886103L);
    java.lang.Long long68 = iPBan67.expires;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 100+ "'", i50.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 0+ "'", i60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "IPBan [ip=1.0.0.100, expires=1]"+ "'", str62.equals("IPBan [ip=1.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1466185886103L+ "'", long68.equals(1466185886103L));

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test375"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = new tp2.Entry();
    java.lang.String str4 = entry3.toString();
    entry0.next = entry3;
    tp2.Entry entry6 = entry0.next;
    tp2.Entry entry7 = entry0.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[null]"+ "'", str4.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry7);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test376"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP58.setSecond((java.lang.Integer)1);
    boolean b61 = server0.removeBan(iP58);
    boolean b63 = iP58.equals((java.lang.Object)(byte)10);
    java.lang.Integer i64 = iP58.getFirst();
    iP58.setThird((java.lang.Integer)32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 100+ "'", i64.equals(100));

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test377"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    boolean b3 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.IP iP5 = null;
    tp2.IPBan iPBan7 = new tp2.IPBan(iP5, (java.lang.Long)1466185872204L);
    node4.element = iPBan7;
    java.lang.String str9 = node4.toString();
    tp2.SinglyLinkedList singlyLinkedList10 = new tp2.SinglyLinkedList();
    tp2.IP iP12 = singlyLinkedList10.get((int)' ');
    tp2.Entry entry13 = new tp2.Entry();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i19 = iP18.getFirst();
    java.lang.String str20 = iP18.toString();
    entry13.element = iP18;
    boolean b22 = singlyLinkedList10.remove(iP18);
    tp2.IPBan iPBan24 = new tp2.IPBan(iP18, (java.lang.Long)1L);
    java.lang.String str25 = iPBan24.toString();
    iPBan24.setExpires((java.lang.Long)0L);
    java.lang.Long long28 = iPBan24.expires;
    tp2.IP iP29 = iPBan24.getIp();
    java.lang.Long long30 = iPBan24.getExpires();
    iPBan24.expires = 1466185872523L;
    java.lang.String str33 = iPBan24.toString();
    tp2.IP iP34 = iPBan24.ip;
    node4.element = iPBan24;
    tp2.Node node36 = node4.next;
    tp2.SinglyLinkedList singlyLinkedList37 = new tp2.SinglyLinkedList();
    tp2.IP iP39 = singlyLinkedList37.get((int)' ');
    tp2.Entry entry40 = new tp2.Entry();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i46 = iP45.getFirst();
    java.lang.String str47 = iP45.toString();
    entry40.element = iP45;
    boolean b49 = singlyLinkedList37.remove(iP45);
    tp2.IPBan iPBan51 = new tp2.IPBan(iP45, (java.lang.Long)1L);
    java.lang.String str52 = iPBan51.toString();
    iPBan51.setExpires((java.lang.Long)0L);
    java.lang.Long long55 = iPBan51.expires;
    tp2.IP iP56 = iPBan51.getIp();
    iPBan51.setExpires((java.lang.Long)1466185873142L);
    iPBan51.expires = 1466185883554L;
    node4.element = iPBan51;
    java.lang.String str62 = iPBan51.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[IPBan [ip=null, expires=1466185872204]]"+ "'", str9.equals("[IPBan [ip=null, expires=1466185872204]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 10+ "'", i19.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "10.0.0.100"+ "'", str20.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str25.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L+ "'", long28.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L+ "'", long30.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "IPBan [ip=10.0.0.100, expires=1466185872523]"+ "'", str33.equals("IPBan [ip=10.0.0.100, expires=1466185872523]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 10+ "'", i46.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "10.0.0.100"+ "'", str47.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str52.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L+ "'", long55.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "IPBan [ip=10.0.0.100, expires=1466185883554]"+ "'", str62.equals("IPBan [ip=10.0.0.100, expires=1466185883554]"));

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test378"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    tp2.IPBan iPBan53 = strictlySortedSinglyLinkedList0.get((int)(byte)100);
    int i54 = strictlySortedSinglyLinkedList0.size;
    boolean b55 = strictlySortedSinglyLinkedList0.isEmpty();
    boolean b56 = strictlySortedSinglyLinkedList0.isEmpty();
    boolean b57 = strictlySortedSinglyLinkedList0.isEmpty();
    int i58 = strictlySortedSinglyLinkedList0.getSize();
    int i59 = strictlySortedSinglyLinkedList0.size;
    boolean b60 = strictlySortedSinglyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test379"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = server0.connect(iP10);
    tp2.SinglyLinkedList singlyLinkedList15 = new tp2.SinglyLinkedList();
    tp2.IP iP17 = singlyLinkedList15.get((int)' ');
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = singlyLinkedList15.remove(iP23);
    tp2.IPBan iPBan29 = new tp2.IPBan(iP23, (java.lang.Long)1L);
    java.lang.String str30 = iPBan29.toString();
    iPBan29.setExpires((java.lang.Long)0L);
    java.lang.Long long33 = iPBan29.expires;
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP35 = null;
    boolean b36 = server34.connect(iP35);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b42 = server34.connect(iP41);
    java.lang.Integer i43 = iP41.getFirst();
    java.lang.Integer i44 = iP41.getFirst();
    iPBan29.setIp(iP41);
    boolean b46 = server0.removeException(iP41);
    server0.update();
    tp2.SinglyLinkedList singlyLinkedList48 = new tp2.SinglyLinkedList();
    int i49 = singlyLinkedList48.getSize();
    java.lang.String str50 = singlyLinkedList48.toString();
    int i51 = singlyLinkedList48.getSize();
    java.util.Set<tp2.IP> set_iP52 = null;
    boolean b53 = singlyLinkedList48.repOk(set_iP52);
    int i54 = singlyLinkedList48.getSize();
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    entry55.element = iP60;
    tp2.Entry entry63 = entry55.next;
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP65 = null;
    boolean b66 = server64.connect(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b72 = server64.connect(iP71);
    java.lang.Integer i73 = iP71.getFirst();
    entry55.element = iP71;
    iP71.setFourth((java.lang.Integer)100);
    java.lang.String str77 = iP71.toString();
    singlyLinkedList48.add(iP71);
    iP71.setFirst((java.lang.Integer)1);
    boolean b81 = server0.addBan(iP71);
    tp2.IP iP82 = null;
    boolean b83 = server0.removeBan(iP82);
    tp2.StubTime stubTime84 = new tp2.StubTime();
    long long85 = stubTime84.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str30.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L+ "'", long33.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 100+ "'", i43.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 100+ "'", i44.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "()"+ "'", str50.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 100+ "'", i73.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "100.10.-1.100"+ "'", str77.equals("100.10.-1.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long85 == 200000L);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test380"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    java.lang.String str12 = server9.toString();
    java.lang.String str13 = server9.toString();
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    entry14.element = iP19;
    boolean b23 = server9.connect(iP19);
    boolean b24 = server0.removeException(iP19);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP26 = null;
    boolean b27 = server25.connect(iP26);
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b33 = server25.connect(iP32);
    java.lang.Integer i34 = iP32.getFirst();
    boolean b35 = server0.connect(iP32);
    tp2.IPBan iPBan37 = new tp2.IPBan(iP32, (java.lang.Long)1466185872881L);
    tp2.IP iP38 = iPBan37.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 100+ "'", i34.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP38);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test381"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    int i7 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    java.lang.String str9 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node10 = new tp2.Node();
    tp2.IPBan iPBan11 = null;
    node10.element = iPBan11;
    tp2.SinglyLinkedList singlyLinkedList13 = new tp2.SinglyLinkedList();
    tp2.IP iP15 = singlyLinkedList13.get((int)' ');
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = singlyLinkedList13.remove(iP21);
    tp2.IPBan iPBan27 = new tp2.IPBan(iP21, (java.lang.Long)1L);
    java.lang.String str28 = iPBan27.toString();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    java.lang.String str36 = iP33.toString();
    iPBan27.setIp(iP33);
    java.lang.Long long38 = iPBan27.getExpires();
    node10.element = iPBan27;
    tp2.IPBan iPBan40 = node10.element;
    strictlySortedSinglyLinkedList0.header = node10;
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    tp2.Node node51 = new tp2.Node();
    tp2.IPBan iPBan52 = null;
    node51.element = iPBan52;
    tp2.SinglyLinkedList singlyLinkedList54 = new tp2.SinglyLinkedList();
    tp2.IP iP56 = singlyLinkedList54.get((int)' ');
    tp2.Entry entry57 = new tp2.Entry();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i63 = iP62.getFirst();
    java.lang.String str64 = iP62.toString();
    entry57.element = iP62;
    boolean b66 = singlyLinkedList54.remove(iP62);
    tp2.IPBan iPBan68 = new tp2.IPBan(iP62, (java.lang.Long)1L);
    java.lang.String str69 = iPBan68.toString();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i75 = iP74.getFirst();
    java.lang.String str76 = iP74.toString();
    java.lang.String str77 = iP74.toString();
    iPBan68.setIp(iP74);
    java.lang.Long long79 = iPBan68.getExpires();
    node51.element = iPBan68;
    boolean b81 = iP47.equals((java.lang.Object)iPBan68);
    tp2.SinglyLinkedList singlyLinkedList82 = new tp2.SinglyLinkedList();
    int i83 = singlyLinkedList82.getSize();
    java.lang.String str84 = singlyLinkedList82.toString();
    int i85 = singlyLinkedList82.getSize();
    java.util.Set<tp2.IP> set_iP86 = null;
    boolean b87 = singlyLinkedList82.repOk(set_iP86);
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b93 = singlyLinkedList82.remove(iP92);
    iPBan68.setIp(iP92);
    boolean b95 = strictlySortedSinglyLinkedList0.contains(iPBan68);
    java.util.Set<tp2.IPBan> set_iPBan96 = null;
    boolean b97 = strictlySortedSinglyLinkedList0.repOk(set_iPBan96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{}"+ "'", str8.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "{}"+ "'", str9.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str28.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L+ "'", long38.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 10+ "'", i63.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "10.0.0.100"+ "'", str64.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str69.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 10+ "'", i75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "10.0.0.100"+ "'", str76.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L+ "'", long79.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "()"+ "'", str84.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test382"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b6 = server0.addException(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.Integer i13 = iP11.getSecond();
    boolean b14 = server0.addBan(iP11);
    tp2.SinglyLinkedList singlyLinkedList15 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP16 = null;
    boolean b17 = singlyLinkedList15.repOk(set_iP16);
    int i18 = singlyLinkedList15.getSize();
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    server19.update();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP26.setFirst((java.lang.Integer)1);
    java.lang.Integer i29 = iP26.getSecond();
    boolean b30 = server19.addException(iP26);
    tp2.Entry entry31 = new tp2.Entry();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i37 = iP36.getFirst();
    java.lang.String str38 = iP36.toString();
    entry31.element = iP36;
    boolean b40 = server19.addException(iP36);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList41 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList41.size = 10;
    tp2.Server server44 = new tp2.Server();
    java.lang.String str45 = server44.toString();
    server44.update();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP51.setFirst((java.lang.Integer)1);
    java.lang.Integer i54 = iP51.getSecond();
    boolean b55 = server44.addException(iP51);
    tp2.Entry entry56 = new tp2.Entry();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i62 = iP61.getFirst();
    java.lang.String str63 = iP61.toString();
    entry56.element = iP61;
    boolean b65 = server44.addException(iP61);
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b71 = server44.removeBan(iP70);
    iP70.setThird((java.lang.Integer)0);
    boolean b74 = strictlySortedSinglyLinkedList41.removeFromIP(iP70);
    boolean b75 = server19.addException(iP70);
    java.lang.String str76 = iP70.toString();
    boolean b77 = singlyLinkedList15.contains(iP70);
    tp2.Server server78 = new tp2.Server();
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b84 = server78.addException(iP83);
    java.lang.Integer i85 = iP83.getFourth();
    boolean b86 = singlyLinkedList15.remove(iP83);
    boolean b87 = server0.connect(iP83);
    iP83.setFirst((java.lang.Integer)97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 100+ "'", i12.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 10+ "'", i13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 0+ "'", i29.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 0+ "'", i54.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i62 + "' != '" + 10+ "'", i62.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "10.0.0.100"+ "'", str63.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "10.100.0.1"+ "'", str76.equals("10.100.0.1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i85 + "' != '" + 10+ "'", i85.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test383"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    int i7 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan9 = strictlySortedSinglyLinkedList0.get(101);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test384"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    java.lang.String str34 = strictlySortedSinglyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    java.lang.String str50 = iPBan49.toString();
    boolean b51 = strictlySortedSinglyLinkedList0.contains(iPBan49);
    tp2.IPBan iPBan53 = strictlySortedSinglyLinkedList0.get((int)(short)0);
    int i54 = strictlySortedSinglyLinkedList0.getSize();
    java.util.Set<tp2.IPBan> set_iPBan55 = null;
    boolean b56 = strictlySortedSinglyLinkedList0.repOk(set_iPBan55);
    tp2.SinglyLinkedList singlyLinkedList57 = new tp2.SinglyLinkedList();
    tp2.IP iP59 = singlyLinkedList57.get((int)' ');
    tp2.Entry entry60 = new tp2.Entry();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i66 = iP65.getFirst();
    java.lang.String str67 = iP65.toString();
    entry60.element = iP65;
    boolean b69 = singlyLinkedList57.remove(iP65);
    tp2.IPBan iPBan71 = new tp2.IPBan(iP65, (java.lang.Long)1L);
    java.lang.String str72 = iPBan71.toString();
    java.lang.Long long73 = iPBan71.getExpires();
    iPBan71.expires = 0L;
    tp2.IP iP76 = iPBan71.ip;
    boolean b77 = strictlySortedSinglyLinkedList0.contains(iPBan71);
    boolean b78 = strictlySortedSinglyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "{}"+ "'", str34.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i66 + "' != '" + 10+ "'", i66.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "10.0.0.100"+ "'", str67.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str72.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L+ "'", long73.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test385"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    tp2.Node node5 = new tp2.Node();
    tp2.IPBan iPBan6 = null;
    node5.element = iPBan6;
    tp2.IPBan iPBan8 = null;
    node5.element = iPBan8;
    tp2.IPBan iPBan10 = node5.element;
    strictlySortedSinglyLinkedList0.header = node5;
    strictlySortedSinglyLinkedList0.size = 100;
    int i14 = strictlySortedSinglyLinkedList0.size;
    java.lang.String str15 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "{}"+ "'", str15.equals("{}"));

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test386"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.IPBan iPBan3 = node0.element;
    tp2.IPBan iPBan4 = node0.element;
    tp2.Node node5 = node0.next;
    tp2.IPBan iPBan6 = node0.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan6);

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test387"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    java.lang.String str14 = iP11.toString();
    iP11.setThird((java.lang.Integer)(-1));
    boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP11);
    tp2.SinglyLinkedList singlyLinkedList18 = new tp2.SinglyLinkedList();
    tp2.IP iP20 = singlyLinkedList18.get((int)' ');
    tp2.Entry entry21 = new tp2.Entry();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i27 = iP26.getFirst();
    java.lang.String str28 = iP26.toString();
    entry21.element = iP26;
    boolean b30 = singlyLinkedList18.remove(iP26);
    tp2.IPBan iPBan32 = new tp2.IPBan(iP26, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList33 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan34 = null;
    boolean b35 = strictlySortedSinglyLinkedList33.contains(iPBan34);
    int i36 = strictlySortedSinglyLinkedList33.getSize();
    tp2.IPBan iPBan38 = strictlySortedSinglyLinkedList33.get((int)'#');
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP43.setSecond((java.lang.Integer)(-1));
    boolean b46 = strictlySortedSinglyLinkedList33.removeFromIP(iP43);
    iPBan32.ip = iP43;
    boolean b48 = strictlySortedSinglyLinkedList0.removeFromIP(iP43);
    java.util.Set<tp2.IPBan> set_iPBan49 = null;
    boolean b50 = strictlySortedSinglyLinkedList0.repOk(set_iPBan49);
    int i51 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str52 = strictlySortedSinglyLinkedList0.toString();
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP54 = null;
    boolean b55 = server53.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b61 = server53.connect(iP60);
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP63 = null;
    boolean b64 = server62.connect(iP63);
    java.lang.String str65 = server62.toString();
    java.lang.String str66 = server62.toString();
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = server62.connect(iP72);
    boolean b77 = server53.removeException(iP72);
    boolean b79 = iP72.equals((java.lang.Object)(-1));
    java.lang.Integer i80 = iP72.getThird();
    iP72.setThird((java.lang.Integer)100);
    boolean b83 = strictlySortedSinglyLinkedList0.containsIP(iP72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "{}"+ "'", str52.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 0+ "'", i80.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test388"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.Entry entry7 = new tp2.Entry();
    java.lang.String str8 = entry7.toString();
    java.lang.String str9 = entry7.toString();
    tp2.Entry entry10 = entry7.next;
    entry6.next = entry7;
    entry1.next = entry6;
    tp2.Entry entry13 = entry6.next;
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    entry14.element = iP19;
    tp2.IP iP23 = entry14.element;
    tp2.Server server24 = new tp2.Server();
    tp2.IP iP25 = null;
    boolean b26 = server24.connect(iP25);
    java.lang.String str27 = server24.toString();
    tp2.Server server28 = new tp2.Server();
    java.lang.String str29 = server28.toString();
    server28.update();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP35.setFirst((java.lang.Integer)1);
    java.lang.Integer i38 = iP35.getSecond();
    boolean b39 = server28.addException(iP35);
    boolean b40 = server24.addException(iP35);
    entry14.element = iP35;
    tp2.IP iP42 = entry14.element;
    tp2.IP iP43 = entry14.element;
    entry13.next = entry14;
    tp2.IP iP45 = entry14.element;
    java.lang.String str46 = entry14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[null]"+ "'", str8.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str27.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i38 + "' != '" + 0+ "'", i38.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[1.0.0.100]"+ "'", str46.equals("[1.0.0.100]"));

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test389"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan6 = strictlySortedSinglyLinkedList0.get(100);
    strictlySortedSinglyLinkedList0.size = '#';
    tp2.Node node9 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    int i11 = strictlySortedSinglyLinkedList10.getSize();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList10.add(iPBan12);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList14 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node15 = strictlySortedSinglyLinkedList14.header;
    strictlySortedSinglyLinkedList10.header = node15;
    node9.next = node15;
    tp2.Node node18 = node9.next;
    tp2.Node node19 = node9.next;
    strictlySortedSinglyLinkedList0.header = node19;
    java.lang.String str21 = node19.toString();
    tp2.IPBan iPBan22 = node19.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[null]"+ "'", str21.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan22);

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test390"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b7 = strictlySortedSinglyLinkedList0.containsIP(iP6);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList8 = new tp2.StrictlySortedSinglyLinkedList();
    int i9 = strictlySortedSinglyLinkedList8.size;
    tp2.IPBan iPBan10 = null;
    boolean b11 = strictlySortedSinglyLinkedList8.add(iPBan10);
    boolean b12 = strictlySortedSinglyLinkedList8.isEmpty();
    java.lang.String str13 = strictlySortedSinglyLinkedList8.toString();
    tp2.Node node14 = new tp2.Node();
    tp2.IPBan iPBan15 = null;
    node14.element = iPBan15;
    tp2.IPBan iPBan17 = node14.element;
    strictlySortedSinglyLinkedList8.header = node14;
    tp2.IPBan iPBan20 = strictlySortedSinglyLinkedList8.get((-1));
    tp2.IPBan iPBan22 = strictlySortedSinglyLinkedList8.get((int)' ');
    tp2.Node node23 = strictlySortedSinglyLinkedList8.header;
    strictlySortedSinglyLinkedList0.header = node23;
    int i25 = strictlySortedSinglyLinkedList0.size;
    tp2.Node node26 = strictlySortedSinglyLinkedList0.header;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "{[null]}"+ "'", str13.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node26);

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test391"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    tp2.Server server5 = new tp2.Server();
    java.lang.String str6 = server5.toString();
    server5.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP12.setFirst((java.lang.Integer)1);
    java.lang.Integer i15 = iP12.getSecond();
    boolean b16 = server5.addException(iP12);
    tp2.Entry entry17 = new tp2.Entry();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i23 = iP22.getFirst();
    java.lang.String str24 = iP22.toString();
    entry17.element = iP22;
    boolean b26 = server5.addException(iP22);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList27 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList27.size = 10;
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    server30.update();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP37.setFirst((java.lang.Integer)1);
    java.lang.Integer i40 = iP37.getSecond();
    boolean b41 = server30.addException(iP37);
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server30.addException(iP47);
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b57 = server30.removeBan(iP56);
    iP56.setThird((java.lang.Integer)0);
    boolean b60 = strictlySortedSinglyLinkedList27.removeFromIP(iP56);
    boolean b61 = server5.addException(iP56);
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP63 = null;
    boolean b64 = server62.connect(iP63);
    java.lang.String str65 = server62.toString();
    tp2.Server server66 = new tp2.Server();
    java.lang.String str67 = server66.toString();
    server66.update();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP73.setFirst((java.lang.Integer)1);
    java.lang.Integer i76 = iP73.getSecond();
    boolean b77 = server66.addException(iP73);
    boolean b78 = server62.addException(iP73);
    boolean b79 = server5.addException(iP73);
    tp2.IP iP84 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i85 = iP84.getFirst();
    iP84.setFourth((java.lang.Integer)1);
    boolean b88 = server5.addException(iP84);
    boolean b89 = iP4.equals((java.lang.Object)iP84);
    tp2.IPBan iPBan91 = new tp2.IPBan(iP4, (java.lang.Long)1466185872933L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str6.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 0+ "'", i15.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 10+ "'", i23.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "10.0.0.100"+ "'", str24.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 0+ "'", i40.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str67.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 0+ "'", i76.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i85 + "' != '" + 100+ "'", i85.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test392"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    java.util.Set<tp2.IPBan> set_iPBan9 = null;
    boolean b10 = strictlySortedSinglyLinkedList0.repOk(set_iPBan9);
    int i11 = strictlySortedSinglyLinkedList0.size;
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    tp2.IP iP21 = entry12.element;
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP23 = null;
    boolean b24 = server22.connect(iP23);
    java.lang.String str25 = server22.toString();
    tp2.Server server26 = new tp2.Server();
    java.lang.String str27 = server26.toString();
    server26.update();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP33.setFirst((java.lang.Integer)1);
    java.lang.Integer i36 = iP33.getSecond();
    boolean b37 = server26.addException(iP33);
    boolean b38 = server22.addException(iP33);
    entry12.element = iP33;
    tp2.IP iP40 = entry12.element;
    // The following exception was thrown during execution in test generation
    try {
      boolean b41 = strictlySortedSinglyLinkedList0.containsIP(iP40);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str27.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 0+ "'", i36.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP40);

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test393"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.Node node2 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan4 = strictlySortedSinglyLinkedList0.get(100);
    tp2.IPBan iPBan6 = strictlySortedSinglyLinkedList0.get((int)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan6);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test394"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP58.setSecond((java.lang.Integer)1);
    boolean b61 = server0.removeBan(iP58);
    server0.update();
    server0.update();
    server0.update();
    server0.update();
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP67 = null;
    boolean b68 = server66.connect(iP67);
    java.lang.String str69 = server66.toString();
    java.lang.String str70 = server66.toString();
    tp2.Entry entry71 = new tp2.Entry();
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i77 = iP76.getFirst();
    java.lang.String str78 = iP76.toString();
    entry71.element = iP76;
    boolean b80 = server66.connect(iP76);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i86 = iP85.getFirst();
    java.lang.String str87 = iP85.toString();
    java.lang.String str88 = iP85.toString();
    boolean b89 = server66.removeBan(iP85);
    server66.update();
    tp2.StubTime stubTime91 = new tp2.StubTime();
    long long92 = stubTime91.getCurrentTime();
    server66.setTime((tp2.ITime)stubTime91);
    server0.setTime((tp2.ITime)stubTime91);
    long long95 = stubTime91.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str69.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str70.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i77 + "' != '" + 10+ "'", i77.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "10.0.0.100"+ "'", str78.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i86 + "' != '" + 10+ "'", i86.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "10.0.0.100"+ "'", str87.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "10.0.0.100"+ "'", str88.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long92 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long95 == 200000L);

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test395"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.contains(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    tp2.Node node14 = new tp2.Node();
    tp2.IPBan iPBan15 = null;
    node14.element = iPBan15;
    tp2.SinglyLinkedList singlyLinkedList17 = new tp2.SinglyLinkedList();
    tp2.IP iP19 = singlyLinkedList17.get((int)' ');
    tp2.Entry entry20 = new tp2.Entry();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    entry20.element = iP25;
    boolean b29 = singlyLinkedList17.remove(iP25);
    tp2.IPBan iPBan31 = new tp2.IPBan(iP25, (java.lang.Long)1L);
    java.lang.String str32 = iPBan31.toString();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i38 = iP37.getFirst();
    java.lang.String str39 = iP37.toString();
    java.lang.String str40 = iP37.toString();
    iPBan31.setIp(iP37);
    java.lang.Long long42 = iPBan31.getExpires();
    node14.element = iPBan31;
    boolean b44 = iP10.equals((java.lang.Object)iPBan31);
    boolean b45 = strictlySortedSinglyLinkedList0.contains(iPBan31);
    tp2.Node node46 = strictlySortedSinglyLinkedList0.header;
    java.lang.String str47 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str32.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i38 + "' != '" + 10+ "'", i38.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "10.0.0.100"+ "'", str39.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "10.0.0.100"+ "'", str40.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L+ "'", long42.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "{}"+ "'", str47.equals("{}"));

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test396"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList3 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList3.size = 10;
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    server6.update();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP13.setFirst((java.lang.Integer)1);
    java.lang.Integer i16 = iP13.getSecond();
    boolean b17 = server6.addException(iP13);
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = server6.addException(iP23);
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b33 = server6.removeBan(iP32);
    iP32.setThird((java.lang.Integer)0);
    boolean b36 = strictlySortedSinglyLinkedList3.removeFromIP(iP32);
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    server37.update();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP44.setFirst((java.lang.Integer)1);
    java.lang.Integer i47 = iP44.getSecond();
    boolean b48 = server37.addException(iP44);
    boolean b49 = strictlySortedSinglyLinkedList3.removeFromIP(iP44);
    singlyLinkedList0.add(iP44);
    tp2.IP iP52 = singlyLinkedList0.get(1);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    singlyLinkedList0.add(iP57);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList61 = new tp2.StrictlySortedSinglyLinkedList();
    int i62 = strictlySortedSinglyLinkedList61.getSize();
    tp2.IPBan iPBan63 = null;
    boolean b64 = strictlySortedSinglyLinkedList61.add(iPBan63);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList65 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node66 = strictlySortedSinglyLinkedList65.header;
    strictlySortedSinglyLinkedList61.header = node66;
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    java.lang.String str75 = iP72.toString();
    iP72.setThird((java.lang.Integer)(-1));
    boolean b78 = strictlySortedSinglyLinkedList61.containsIP(iP72);
    iP72.setFourth((java.lang.Integer)0);
    boolean b81 = singlyLinkedList0.remove(iP72);
    int i82 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 0+ "'", i16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 0+ "'", i47.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "10.0.0.100"+ "'", str75.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 2);

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test397"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i11 = iP10.getFirst();
    boolean b12 = server3.connect(iP10);
    boolean b13 = strictlySortedSinglyLinkedList0.removeFromIP(iP10);
    java.lang.String str14 = strictlySortedSinglyLinkedList0.toString();
    int i15 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Node node16 = strictlySortedSinglyLinkedList0.header;
    strictlySortedSinglyLinkedList0.size = '#';
    tp2.IPBan iPBan20 = strictlySortedSinglyLinkedList0.get(32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 100+ "'", i11.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "{}"+ "'", str14.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan20);

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test398"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan5 = node4.element;
    tp2.SinglyLinkedList singlyLinkedList6 = new tp2.SinglyLinkedList();
    tp2.IP iP8 = singlyLinkedList6.get((int)' ');
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    java.lang.String str16 = iP14.toString();
    entry9.element = iP14;
    boolean b18 = singlyLinkedList6.remove(iP14);
    tp2.IPBan iPBan20 = new tp2.IPBan(iP14, (java.lang.Long)1L);
    tp2.Server server21 = new tp2.Server();
    java.lang.String str22 = server21.toString();
    server21.update();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i29 = iP28.getFirst();
    boolean b30 = server21.connect(iP28);
    iPBan20.ip = iP28;
    node4.element = iPBan20;
    tp2.Server server33 = new tp2.Server();
    java.lang.String str34 = server33.toString();
    server33.update();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP40.setFirst((java.lang.Integer)1);
    java.lang.Integer i43 = iP40.getSecond();
    boolean b44 = server33.addException(iP40);
    tp2.Entry entry45 = new tp2.Entry();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i51 = iP50.getFirst();
    java.lang.String str52 = iP50.toString();
    entry45.element = iP50;
    boolean b54 = server33.addException(iP50);
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b60 = server33.removeBan(iP59);
    tp2.Server server61 = new tp2.Server();
    tp2.IP iP62 = null;
    boolean b63 = server61.connect(iP62);
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b69 = server61.connect(iP68);
    tp2.Server server70 = new tp2.Server();
    tp2.IP iP71 = null;
    boolean b72 = server70.connect(iP71);
    java.lang.String str73 = server70.toString();
    java.lang.String str74 = server70.toString();
    tp2.Entry entry75 = new tp2.Entry();
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i81 = iP80.getFirst();
    java.lang.String str82 = iP80.toString();
    entry75.element = iP80;
    boolean b84 = server70.connect(iP80);
    boolean b85 = server61.removeException(iP80);
    boolean b86 = server33.connect(iP80);
    tp2.IP iP91 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP91.setSecond((java.lang.Integer)1);
    boolean b94 = server33.removeBan(iP91);
    boolean b96 = iP91.equals((java.lang.Object)(byte)10);
    tp2.IPBan iPBan98 = new tp2.IPBan(iP91, (java.lang.Long)1466185873844L);
    node4.element = iPBan98;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 100+ "'", i29.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 0+ "'", i43.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 10+ "'", i51.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "10.0.0.100"+ "'", str52.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str73.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str74.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i81 + "' != '" + 10+ "'", i81.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "10.0.0.100"+ "'", str82.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test399"); }


    tp2.Node node0 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList1 = new tp2.StrictlySortedSinglyLinkedList();
    int i2 = strictlySortedSinglyLinkedList1.getSize();
    tp2.IPBan iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList1.add(iPBan3);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node6 = strictlySortedSinglyLinkedList5.header;
    strictlySortedSinglyLinkedList1.header = node6;
    node0.next = node6;
    tp2.Node node9 = node0.next;
    tp2.IPBan iPBan10 = node9.element;
    tp2.IPBan iPBan11 = node9.element;
    tp2.Node node12 = node9.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node12);

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test400"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    int i3 = singlyLinkedList0.getSize();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    java.lang.Integer i11 = iP8.getFourth();
    boolean b12 = singlyLinkedList0.contains(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1466185870901L);
    java.lang.Integer i15 = iP8.getFirst();
    tp2.SinglyLinkedList singlyLinkedList16 = new tp2.SinglyLinkedList();
    int i17 = singlyLinkedList16.getSize();
    java.lang.String str18 = singlyLinkedList16.toString();
    int i19 = singlyLinkedList16.getSize();
    java.util.Set<tp2.IP> set_iP20 = null;
    boolean b21 = singlyLinkedList16.repOk(set_iP20);
    int i22 = singlyLinkedList16.getSize();
    tp2.IP iP24 = singlyLinkedList16.get(0);
    java.util.Set<tp2.IP> set_iP25 = null;
    boolean b26 = singlyLinkedList16.repOk(set_iP25);
    int i27 = singlyLinkedList16.getSize();
    boolean b28 = iP8.equals((java.lang.Object)singlyLinkedList16);
    java.util.Set<tp2.IP> set_iP29 = null;
    boolean b30 = singlyLinkedList16.repOk(set_iP29);
    boolean b31 = singlyLinkedList16.isEmpty();
    tp2.Server server32 = new tp2.Server();
    java.lang.String str33 = server32.toString();
    server32.update();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP39.setFirst((java.lang.Integer)1);
    java.lang.Integer i42 = iP39.getSecond();
    boolean b43 = server32.addException(iP39);
    tp2.Entry entry44 = new tp2.Entry();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i50 = iP49.getFirst();
    java.lang.String str51 = iP49.toString();
    entry44.element = iP49;
    boolean b53 = server32.addException(iP49);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b59 = server32.removeBan(iP58);
    iP58.setThird((java.lang.Integer)0);
    iP58.setFourth((java.lang.Integer)10);
    java.lang.String str64 = iP58.toString();
    boolean b65 = singlyLinkedList16.remove(iP58);
    boolean b66 = singlyLinkedList16.isEmpty();
    tp2.Server server67 = new tp2.Server();
    tp2.IP iP68 = null;
    boolean b69 = server67.connect(iP68);
    java.lang.String str70 = server67.toString();
    java.lang.String str71 = server67.toString();
    tp2.Entry entry72 = new tp2.Entry();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i78 = iP77.getFirst();
    java.lang.String str79 = iP77.toString();
    entry72.element = iP77;
    boolean b81 = server67.connect(iP77);
    tp2.IP iP86 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i87 = iP86.getFirst();
    java.lang.String str88 = iP86.toString();
    java.lang.String str89 = iP86.toString();
    boolean b90 = server67.removeBan(iP86);
    java.lang.Integer i91 = iP86.getFirst();
    java.lang.Integer i92 = iP86.getFirst();
    java.lang.Integer i93 = iP86.getThird();
    singlyLinkedList16.add(iP86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 100+ "'", i11.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "()"+ "'", str18.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 0+ "'", i42.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 10+ "'", i50.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "10.0.0.100"+ "'", str51.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "10.100.0.10"+ "'", str64.equals("10.100.0.10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str70.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str71.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i78 + "' != '" + 10+ "'", i78.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "10.0.0.100"+ "'", str79.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i87 + "' != '" + 10+ "'", i87.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "10.0.0.100"+ "'", str88.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "10.0.0.100"+ "'", str89.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i91 + "' != '" + 10+ "'", i91.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i92 + "' != '" + 10+ "'", i92.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i93 + "' != '" + 0+ "'", i93.equals(0));

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test401"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.ip;
    java.lang.String str20 = iPBan14.toString();
    java.lang.Long long21 = iPBan14.getExpires();
    tp2.IP iP22 = iPBan14.getIp();
    java.lang.Long long23 = iPBan14.expires;
    iPBan14.setExpires((java.lang.Long)1466185890638L);
    tp2.IP iP26 = iPBan14.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L+ "'", long21.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L+ "'", long23.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP26);

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test402"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan5 = strictlySortedSinglyLinkedList0.get((int)'#');
    strictlySortedSinglyLinkedList0.size = (short)100;
    tp2.Node node8 = strictlySortedSinglyLinkedList0.header;
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    java.lang.String str12 = server9.toString();
    java.lang.String str13 = server9.toString();
    tp2.IP iP14 = null;
    boolean b15 = server9.removeException(iP14);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList16 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList16.size = 10;
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    server19.update();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP26.setFirst((java.lang.Integer)1);
    java.lang.Integer i29 = iP26.getSecond();
    boolean b30 = server19.addException(iP26);
    tp2.Entry entry31 = new tp2.Entry();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i37 = iP36.getFirst();
    java.lang.String str38 = iP36.toString();
    entry31.element = iP36;
    boolean b40 = server19.addException(iP36);
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b46 = server19.removeBan(iP45);
    iP45.setThird((java.lang.Integer)0);
    boolean b49 = strictlySortedSinglyLinkedList16.removeFromIP(iP45);
    tp2.Server server50 = new tp2.Server();
    java.lang.String str51 = server50.toString();
    server50.update();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    java.lang.Integer i60 = iP57.getSecond();
    boolean b61 = server50.addException(iP57);
    boolean b62 = strictlySortedSinglyLinkedList16.removeFromIP(iP57);
    boolean b63 = server9.connect(iP57);
    tp2.Entry entry64 = new tp2.Entry();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i70 = iP69.getFirst();
    entry64.element = iP69;
    tp2.Entry entry72 = entry64.next;
    tp2.Server server73 = new tp2.Server();
    tp2.IP iP74 = null;
    boolean b75 = server73.connect(iP74);
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b81 = server73.connect(iP80);
    java.lang.Integer i82 = iP80.getFirst();
    entry64.element = iP80;
    iP80.setFourth((java.lang.Integer)100);
    boolean b86 = server9.removeException(iP80);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList87 = new tp2.StrictlySortedSinglyLinkedList();
    boolean b88 = iP80.equals((java.lang.Object)strictlySortedSinglyLinkedList87);
    java.lang.String str89 = strictlySortedSinglyLinkedList87.toString();
    tp2.Node node90 = strictlySortedSinglyLinkedList87.header;
    tp2.IPBan iPBan91 = node90.element;
    node8.next = node90;
    java.lang.String str93 = node8.toString();
    tp2.IPBan iPBan94 = node8.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 0+ "'", i29.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 0+ "'", i60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 10+ "'", i70.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i82 + "' != '" + 100+ "'", i82.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "{}"+ "'", str89.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str93 + "' != '" + "[null]"+ "'", str93.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan94);

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test403"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    java.lang.String str34 = strictlySortedSinglyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    java.lang.String str50 = iPBan49.toString();
    boolean b51 = strictlySortedSinglyLinkedList0.contains(iPBan49);
    iPBan49.setExpires((java.lang.Long)1466185873141L);
    iPBan49.expires = 1466185886129L;
    java.lang.Long long56 = iPBan49.expires;
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP62.setSecond((java.lang.Integer)(-1));
    boolean b65 = server57.addException(iP62);
    java.lang.String str66 = server57.toString();
    tp2.Server server67 = new tp2.Server();
    java.lang.String str68 = server67.toString();
    server67.update();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i75 = iP74.getFirst();
    boolean b76 = server67.connect(iP74);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b82 = server67.connect(iP81);
    boolean b83 = server57.connect(iP81);
    iPBan49.setIp(iP81);
    tp2.IP iP85 = iPBan49.ip;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "{}"+ "'", str34.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1466185886129L+ "'", long56.equals(1466185886129L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=null, exceptions=([10.-1.0.100]), bans={}]"+ "'", str66.equals("Server [lastUpdate=null, exceptions=([10.-1.0.100]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str68.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 100+ "'", i75.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP85);

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test404"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    java.lang.Integer i54 = iP47.getFirst();
    iP47.setFirst((java.lang.Integer)100);
    tp2.SinglyLinkedList singlyLinkedList57 = new tp2.SinglyLinkedList();
    tp2.IP iP59 = singlyLinkedList57.get((int)' ');
    tp2.Entry entry60 = new tp2.Entry();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i66 = iP65.getFirst();
    java.lang.String str67 = iP65.toString();
    entry60.element = iP65;
    boolean b69 = singlyLinkedList57.remove(iP65);
    tp2.IPBan iPBan71 = new tp2.IPBan(iP65, (java.lang.Long)1L);
    iPBan71.expires = 1466185871428L;
    iPBan71.expires = 0L;
    boolean b76 = iP47.equals((java.lang.Object)iPBan71);
    iP47.setFirst((java.lang.Integer)10);
    java.lang.Integer i79 = iP47.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i66 + "' != '" + 10+ "'", i66.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "10.0.0.100"+ "'", str67.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i79 + "' != '" + 10+ "'", i79.equals(10));

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test405"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.Entry entry7 = new tp2.Entry();
    java.lang.String str8 = entry7.toString();
    java.lang.String str9 = entry7.toString();
    tp2.Entry entry10 = entry7.next;
    entry6.next = entry7;
    entry1.next = entry6;
    java.lang.String str13 = entry1.toString();
    tp2.IP iP14 = entry1.element;
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)10, (java.lang.Integer)11, (java.lang.Integer)2);
    entry1.element = iP19;
    tp2.Entry entry21 = entry1.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[null]"+ "'", str8.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[null]"+ "'", str13.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry21);

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test406"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    boolean b39 = iP5.equals((java.lang.Object)iPBan26);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    int i41 = singlyLinkedList40.getSize();
    java.lang.String str42 = singlyLinkedList40.toString();
    int i43 = singlyLinkedList40.getSize();
    java.util.Set<tp2.IP> set_iP44 = null;
    boolean b45 = singlyLinkedList40.repOk(set_iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b51 = singlyLinkedList40.remove(iP50);
    iPBan26.setIp(iP50);
    tp2.IP iP53 = iPBan26.getIp();
    tp2.IP iP54 = iPBan26.ip;
    iP54.setFirst((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "()"+ "'", str42.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP54);

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test407"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    java.util.Set<tp2.IP> set_iP3 = null;
    boolean b4 = singlyLinkedList0.repOk(set_iP3);
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get((int)' ');
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    boolean b17 = singlyLinkedList5.remove(iP13);
    tp2.IP iP19 = singlyLinkedList5.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList20 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList20.size = 10;
    tp2.Server server23 = new tp2.Server();
    java.lang.String str24 = server23.toString();
    server23.update();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP30.setFirst((java.lang.Integer)1);
    java.lang.Integer i33 = iP30.getSecond();
    boolean b34 = server23.addException(iP30);
    tp2.Entry entry35 = new tp2.Entry();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i41 = iP40.getFirst();
    java.lang.String str42 = iP40.toString();
    entry35.element = iP40;
    boolean b44 = server23.addException(iP40);
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b50 = server23.removeBan(iP49);
    iP49.setThird((java.lang.Integer)0);
    boolean b53 = strictlySortedSinglyLinkedList20.removeFromIP(iP49);
    boolean b54 = singlyLinkedList5.contains(iP49);
    boolean b55 = singlyLinkedList0.contains(iP49);
    int i56 = singlyLinkedList0.getSize();
    java.lang.String str57 = singlyLinkedList0.toString();
    int i58 = singlyLinkedList0.getSize();
    int i59 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 0+ "'", i33.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i41 + "' != '" + 10+ "'", i41.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "()"+ "'", str57.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test408"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    int i7 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList9.size = 10;
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    server12.update();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP19.setFirst((java.lang.Integer)1);
    java.lang.Integer i22 = iP19.getSecond();
    boolean b23 = server12.addException(iP19);
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = server12.addException(iP29);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b39 = server12.removeBan(iP38);
    iP38.setThird((java.lang.Integer)0);
    boolean b42 = strictlySortedSinglyLinkedList9.removeFromIP(iP38);
    java.lang.String str43 = strictlySortedSinglyLinkedList9.toString();
    tp2.SinglyLinkedList singlyLinkedList44 = new tp2.SinglyLinkedList();
    tp2.IP iP46 = singlyLinkedList44.get((int)' ');
    tp2.Entry entry47 = new tp2.Entry();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    entry47.element = iP52;
    boolean b56 = singlyLinkedList44.remove(iP52);
    tp2.IPBan iPBan58 = new tp2.IPBan(iP52, (java.lang.Long)1L);
    java.lang.String str59 = iPBan58.toString();
    boolean b60 = strictlySortedSinglyLinkedList9.contains(iPBan58);
    tp2.IP iP61 = iPBan58.getIp();
    boolean b62 = strictlySortedSinglyLinkedList0.containsIP(iP61);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)100, (java.lang.Integer)10);
    boolean b68 = strictlySortedSinglyLinkedList0.removeFromIP(iP67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{}"+ "'", str8.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 0+ "'", i22.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "{}"+ "'", str43.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str59.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test409"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    server4.update();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP11.setFirst((java.lang.Integer)1);
    java.lang.Integer i14 = iP11.getSecond();
    boolean b15 = server4.addException(iP11);
    boolean b16 = server0.addException(iP11);
    java.lang.Integer i17 = iP11.getSecond();
    java.lang.Integer i18 = iP11.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 0+ "'", i14.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 0+ "'", i17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 100+ "'", i18.equals(100));

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test410"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    java.util.Set<tp2.IP> set_iP15 = null;
    boolean b16 = singlyLinkedList0.repOk(set_iP15);
    int i17 = singlyLinkedList0.getSize();
    int i18 = singlyLinkedList0.getSize();
    boolean b19 = singlyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test411"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.Entry entry7 = new tp2.Entry();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i13 = iP12.getFirst();
    entry7.element = iP12;
    boolean b15 = server0.addException(iP12);
    java.lang.Integer i16 = iP12.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 10+ "'", i13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 0+ "'", i16.equals(0));

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test412"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b7 = strictlySortedSinglyLinkedList0.containsIP(iP6);
    int i8 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str9 = strictlySortedSinglyLinkedList0.toString();
    tp2.Entry entry10 = new tp2.Entry();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i16 = iP15.getFirst();
    entry10.element = iP15;
    tp2.IP iP18 = entry10.element;
    tp2.IP iP19 = entry10.element;
    java.lang.Integer i20 = iP19.getThird();
    boolean b21 = strictlySortedSinglyLinkedList0.containsIP(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "{}"+ "'", str9.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 10+ "'", i16.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test413"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    int i3 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    int i6 = singlyLinkedList0.getSize();
    int i7 = singlyLinkedList0.getSize();
    tp2.IP iP9 = singlyLinkedList0.get((int)(short)100);
    tp2.IP iP10 = null;
    boolean b11 = singlyLinkedList0.remove(iP10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test414"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node5 = node4.next;
    tp2.IPBan iPBan6 = node4.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan6);

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test415"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get((int)' ');
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    boolean b17 = singlyLinkedList5.remove(iP13);
    tp2.IPBan iPBan19 = new tp2.IPBan(iP13, (java.lang.Long)1L);
    java.lang.String str20 = iPBan19.toString();
    iPBan19.setExpires((java.lang.Long)0L);
    java.lang.Long long23 = iPBan19.expires;
    node4.element = iPBan19;
    tp2.IPBan iPBan25 = node4.element;
    tp2.SinglyLinkedList singlyLinkedList26 = new tp2.SinglyLinkedList();
    tp2.IP iP28 = singlyLinkedList26.get((int)' ');
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = singlyLinkedList26.remove(iP34);
    tp2.IPBan iPBan40 = new tp2.IPBan(iP34, (java.lang.Long)1L);
    java.lang.String str41 = iPBan40.toString();
    iPBan40.setExpires((java.lang.Long)0L);
    java.lang.Long long44 = iPBan40.expires;
    tp2.IP iP45 = iPBan40.ip;
    java.lang.String str46 = iPBan40.toString();
    tp2.IP iP47 = iPBan40.getIp();
    iPBan25.ip = iP47;
    tp2.IP iP49 = iPBan25.ip;
    java.lang.String str50 = iPBan25.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L+ "'", long23.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str41.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L+ "'", long44.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str46.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=0]"));

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test416"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test417"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.SinglyLinkedList singlyLinkedList16 = new tp2.SinglyLinkedList();
    tp2.IP iP18 = singlyLinkedList16.get((int)' ');
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = singlyLinkedList16.remove(iP24);
    tp2.IPBan iPBan30 = new tp2.IPBan(iP24, (java.lang.Long)1L);
    java.lang.String str31 = iPBan30.toString();
    java.lang.Long long32 = iPBan30.getExpires();
    iPBan30.expires = 0L;
    tp2.IP iP35 = iPBan30.ip;
    node14.element = iPBan30;
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b45 = server37.connect(iP44);
    iPBan30.setIp(iP44);
    java.lang.Long long47 = iPBan30.expires;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str31.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L+ "'", long32.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L+ "'", long47.equals(0L));

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test418"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    boolean b39 = iP5.equals((java.lang.Object)iPBan26);
    iP5.setThird((java.lang.Integer)11);
    java.lang.Integer i42 = iP5.getThird();
    java.lang.Integer i43 = iP5.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 11+ "'", i42.equals(11));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 10+ "'", i43.equals(10));

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test419"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.SinglyLinkedList singlyLinkedList3 = new tp2.SinglyLinkedList();
    tp2.IP iP5 = singlyLinkedList3.get((int)' ');
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    entry6.element = iP11;
    boolean b15 = singlyLinkedList3.remove(iP11);
    tp2.IPBan iPBan17 = new tp2.IPBan(iP11, (java.lang.Long)1L);
    java.lang.String str18 = iPBan17.toString();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    java.lang.String str26 = iP23.toString();
    iPBan17.setIp(iP23);
    java.lang.Long long28 = iPBan17.getExpires();
    node0.element = iPBan17;
    iPBan17.expires = 1466185870380L;
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i37 = iP36.getFirst();
    java.lang.String str38 = iP36.toString();
    java.lang.Integer i39 = iP36.getThird();
    iPBan17.setIp(iP36);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP42 = null;
    boolean b43 = server41.connect(iP42);
    java.lang.String str44 = server41.toString();
    java.lang.String str45 = server41.toString();
    tp2.Entry entry46 = new tp2.Entry();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i52 = iP51.getFirst();
    java.lang.String str53 = iP51.toString();
    entry46.element = iP51;
    boolean b55 = server41.connect(iP51);
    iP51.setFirst((java.lang.Integer)0);
    tp2.IPBan iPBan59 = new tp2.IPBan(iP51, (java.lang.Long)0L);
    tp2.IP iP60 = iPBan59.getIp();
    tp2.IP iP61 = iPBan59.ip;
    iPBan17.ip = iP61;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str18.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L+ "'", long28.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + 0+ "'", i39.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i52 + "' != '" + 10+ "'", i52.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "10.0.0.100"+ "'", str53.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP61);

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test420"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.IP iP55 = null;
    boolean b56 = server0.connect(iP55);
    tp2.Server server57 = new tp2.Server();
    java.lang.String str58 = server57.toString();
    server57.update();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP64.setFirst((java.lang.Integer)1);
    java.lang.Integer i67 = iP64.getSecond();
    boolean b68 = server57.addException(iP64);
    tp2.Entry entry69 = new tp2.Entry();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i75 = iP74.getFirst();
    java.lang.String str76 = iP74.toString();
    entry69.element = iP74;
    boolean b78 = server57.addException(iP74);
    java.lang.String str79 = iP74.toString();
    boolean b80 = server0.removeException(iP74);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)32);
    boolean b86 = server0.removeException(iP85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str58.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 0+ "'", i67.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 10+ "'", i75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "10.0.0.100"+ "'", str76.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "10.0.0.100"+ "'", str79.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test421"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get(1);
    tp2.IP iP4 = singlyLinkedList0.get(0);
    java.util.Set<tp2.IP> set_iP5 = null;
    boolean b6 = singlyLinkedList0.repOk(set_iP5);
    java.lang.String str7 = singlyLinkedList0.toString();
    int i8 = singlyLinkedList0.getSize();
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP16.setFirst((java.lang.Integer)1);
    boolean b19 = server9.removeException(iP16);
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP21 = null;
    boolean b22 = server20.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b28 = server20.connect(iP27);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList29 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList29.size = 10;
    tp2.Server server32 = new tp2.Server();
    java.lang.String str33 = server32.toString();
    server32.update();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP39.setFirst((java.lang.Integer)1);
    java.lang.Integer i42 = iP39.getSecond();
    boolean b43 = server32.addException(iP39);
    tp2.Entry entry44 = new tp2.Entry();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i50 = iP49.getFirst();
    java.lang.String str51 = iP49.toString();
    entry44.element = iP49;
    boolean b53 = server32.addException(iP49);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b59 = server32.removeBan(iP58);
    iP58.setThird((java.lang.Integer)0);
    boolean b62 = strictlySortedSinglyLinkedList29.removeFromIP(iP58);
    tp2.Server server63 = new tp2.Server();
    java.lang.String str64 = server63.toString();
    server63.update();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP70.setFirst((java.lang.Integer)1);
    java.lang.Integer i73 = iP70.getSecond();
    boolean b74 = server63.addException(iP70);
    boolean b75 = strictlySortedSinglyLinkedList29.removeFromIP(iP70);
    boolean b76 = server20.connect(iP70);
    boolean b77 = server9.removeBan(iP70);
    boolean b78 = singlyLinkedList0.contains(iP70);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList79 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node80 = strictlySortedSinglyLinkedList79.header;
    tp2.Node node81 = new tp2.Node();
    tp2.IPBan iPBan82 = null;
    node81.element = iPBan82;
    tp2.IPBan iPBan84 = null;
    node81.element = iPBan84;
    strictlySortedSinglyLinkedList79.header = node81;
    tp2.IP iP91 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b92 = strictlySortedSinglyLinkedList79.containsIP(iP91);
    java.lang.Integer i93 = iP91.getFirst();
    boolean b94 = singlyLinkedList0.remove(iP91);
    int i95 = singlyLinkedList0.getSize();
    int i96 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "()"+ "'", str7.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 0+ "'", i42.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 10+ "'", i50.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "10.0.0.100"+ "'", str51.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str64.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 0+ "'", i73.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i93 + "' != '" + 10+ "'", i93.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test422"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.ITime iTime3 = null;
    server0.setTime(iTime3);
    tp2.Server server5 = new tp2.Server();
    tp2.IP iP6 = null;
    boolean b7 = server5.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP12.setFirst((java.lang.Integer)1);
    boolean b15 = server5.removeException(iP12);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList16 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan17 = null;
    boolean b18 = strictlySortedSinglyLinkedList16.contains(iPBan17);
    int i19 = strictlySortedSinglyLinkedList16.getSize();
    tp2.IPBan iPBan21 = strictlySortedSinglyLinkedList16.get((int)'#');
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP26.setSecond((java.lang.Integer)(-1));
    boolean b29 = strictlySortedSinglyLinkedList16.removeFromIP(iP26);
    boolean b30 = server5.removeBan(iP26);
    tp2.Entry entry31 = new tp2.Entry();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i37 = iP36.getFirst();
    entry31.element = iP36;
    boolean b39 = server5.removeBan(iP36);
    iP36.setThird((java.lang.Integer)32);
    boolean b42 = server0.removeBan(iP36);
    iP36.setThird((java.lang.Integer)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test423"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i5 = iP4.getFirst();
    java.lang.String str6 = iP4.toString();
    java.lang.String str7 = iP4.toString();
    iP4.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan11 = new tp2.IPBan(iP4, (java.lang.Long)0L);
    java.lang.String str12 = iPBan11.toString();
    java.lang.String str13 = iPBan11.toString();
    tp2.IP iP14 = iPBan11.getIp();
    tp2.IPBan iPBan16 = new tp2.IPBan(iP14, (java.lang.Long)1466185880002L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i5 + "' != '" + 10+ "'", i5.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "10.0.0.100"+ "'", str6.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "IPBan [ip=10.0.-1.100, expires=0]"+ "'", str12.equals("IPBan [ip=10.0.-1.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "IPBan [ip=10.0.-1.100, expires=0]"+ "'", str13.equals("IPBan [ip=10.0.-1.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP14);

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test424"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    tp2.IP iP15 = iPBan14.ip;
    iPBan14.setExpires((java.lang.Long)1466185880799L);
    iPBan14.setExpires((java.lang.Long)1466185903591L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP15);

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test425"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.SinglyLinkedList singlyLinkedList3 = new tp2.SinglyLinkedList();
    tp2.IP iP5 = singlyLinkedList3.get((int)' ');
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    entry6.element = iP11;
    boolean b15 = singlyLinkedList3.remove(iP11);
    tp2.IPBan iPBan17 = new tp2.IPBan(iP11, (java.lang.Long)1L);
    java.lang.String str18 = iPBan17.toString();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    java.lang.String str26 = iP23.toString();
    iPBan17.setIp(iP23);
    java.lang.Long long28 = iPBan17.getExpires();
    node0.element = iPBan17;
    iPBan17.expires = 1466185870380L;
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP33 = null;
    boolean b34 = server32.connect(iP33);
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b40 = server32.connect(iP39);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList41 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList41.size = 10;
    tp2.Server server44 = new tp2.Server();
    java.lang.String str45 = server44.toString();
    server44.update();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP51.setFirst((java.lang.Integer)1);
    java.lang.Integer i54 = iP51.getSecond();
    boolean b55 = server44.addException(iP51);
    tp2.Entry entry56 = new tp2.Entry();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i62 = iP61.getFirst();
    java.lang.String str63 = iP61.toString();
    entry56.element = iP61;
    boolean b65 = server44.addException(iP61);
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b71 = server44.removeBan(iP70);
    iP70.setThird((java.lang.Integer)0);
    boolean b74 = strictlySortedSinglyLinkedList41.removeFromIP(iP70);
    tp2.Server server75 = new tp2.Server();
    java.lang.String str76 = server75.toString();
    server75.update();
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP82.setFirst((java.lang.Integer)1);
    java.lang.Integer i85 = iP82.getSecond();
    boolean b86 = server75.addException(iP82);
    boolean b87 = strictlySortedSinglyLinkedList41.removeFromIP(iP82);
    boolean b88 = server32.connect(iP82);
    iPBan17.setIp(iP82);
    iP82.setSecond((java.lang.Integer)11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str18.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L+ "'", long28.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 0+ "'", i54.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i62 + "' != '" + 10+ "'", i62.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "10.0.0.100"+ "'", str63.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str76.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i85 + "' != '" + 0+ "'", i85.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test426"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get(1);
    tp2.IP iP4 = singlyLinkedList0.get(0);
    java.util.Set<tp2.IP> set_iP5 = null;
    boolean b6 = singlyLinkedList0.repOk(set_iP5);
    java.lang.String str7 = singlyLinkedList0.toString();
    tp2.IP iP9 = singlyLinkedList0.get((int)(byte)100);
    java.lang.String str10 = singlyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "()"+ "'", str7.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "()"+ "'", str10.equals("()"));

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test427"); }


    tp2.Node node0 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList1 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList1.size = 10;
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    server4.update();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP11.setFirst((java.lang.Integer)1);
    java.lang.Integer i14 = iP11.getSecond();
    boolean b15 = server4.addException(iP11);
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = server4.addException(iP21);
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b31 = server4.removeBan(iP30);
    iP30.setThird((java.lang.Integer)0);
    boolean b34 = strictlySortedSinglyLinkedList1.removeFromIP(iP30);
    java.lang.String str35 = strictlySortedSinglyLinkedList1.toString();
    tp2.SinglyLinkedList singlyLinkedList36 = new tp2.SinglyLinkedList();
    tp2.IP iP38 = singlyLinkedList36.get((int)' ');
    tp2.Entry entry39 = new tp2.Entry();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i45 = iP44.getFirst();
    java.lang.String str46 = iP44.toString();
    entry39.element = iP44;
    boolean b48 = singlyLinkedList36.remove(iP44);
    tp2.IPBan iPBan50 = new tp2.IPBan(iP44, (java.lang.Long)1L);
    java.lang.String str51 = iPBan50.toString();
    boolean b52 = strictlySortedSinglyLinkedList1.contains(iPBan50);
    node0.element = iPBan50;
    iPBan50.setExpires((java.lang.Long)1466185871497L);
    tp2.IP iP56 = iPBan50.getIp();
    java.lang.String str57 = iPBan50.toString();
    java.lang.Long long58 = iPBan50.expires;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 0+ "'", i14.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "{}"+ "'", str35.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 10+ "'", i45.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "10.0.0.100"+ "'", str46.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str51.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "IPBan [ip=10.0.0.100, expires=1466185871497]"+ "'", str57.equals("IPBan [ip=10.0.0.100, expires=1466185871497]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1466185871497L+ "'", long58.equals(1466185871497L));

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test428"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    tp2.Node node3 = new tp2.Node();
    tp2.IPBan iPBan4 = null;
    node3.element = iPBan4;
    tp2.IPBan iPBan6 = null;
    node3.element = iPBan6;
    tp2.IPBan iPBan8 = node3.element;
    strictlySortedSinglyLinkedList0.header = node3;
    tp2.IPBan iPBan11 = strictlySortedSinglyLinkedList0.get((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan11);

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test429"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    entry55.element = iP60;
    tp2.Entry entry63 = entry55.next;
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP65 = null;
    boolean b66 = server64.connect(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b72 = server64.connect(iP71);
    java.lang.Integer i73 = iP71.getFirst();
    entry55.element = iP71;
    iP71.setFourth((java.lang.Integer)100);
    boolean b77 = server0.removeException(iP71);
    iP71.setFirst((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 100+ "'", i73.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test430"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP4.setSecond((java.lang.Integer)1);
    java.lang.Integer i7 = iP4.getSecond();
    iP4.setFourth((java.lang.Integer)100);
    java.lang.Integer i10 = iP4.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i7 + "' != '" + 1+ "'", i7.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 100+ "'", i10.equals(100));

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test431"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    strictlySortedSinglyLinkedList0.size = (byte)100;
    int i7 = strictlySortedSinglyLinkedList0.getSize();
    boolean b8 = strictlySortedSinglyLinkedList0.isEmpty();
    int i9 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 100);

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test432"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)35, (java.lang.Integer)97, (java.lang.Integer)10, (java.lang.Integer)101);

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test433"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.IP iP3 = entry0.element;
    tp2.Entry entry4 = new tp2.Entry();
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    entry4.element = iP9;
    tp2.IP iP12 = entry4.element;
    entry0.next = entry4;
    tp2.Entry entry14 = entry0.next;
    tp2.Entry entry15 = entry14.next;
    // The following exception was thrown during execution in test generation
    try {
      tp2.Entry entry16 = entry15.next;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry15);

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test434"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    java.lang.String str14 = iP11.toString();
    iP11.setThird((java.lang.Integer)(-1));
    boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP11);
    boolean b18 = strictlySortedSinglyLinkedList0.isEmpty();
    int i19 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Entry entry20 = new tp2.Entry();
    java.lang.String str21 = entry20.toString();
    java.lang.String str22 = entry20.toString();
    tp2.Entry entry23 = entry20.next;
    tp2.IP iP24 = entry20.element;
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    java.lang.String str32 = iP29.toString();
    iP29.setThird((java.lang.Integer)(-1));
    entry20.element = iP29;
    tp2.IP iP36 = entry20.element;
    tp2.IP iP37 = entry20.element;
    tp2.IP iP38 = entry20.element;
    tp2.IPBan iPBan40 = new tp2.IPBan(iP38, (java.lang.Long)1466185875369L);
    boolean b41 = strictlySortedSinglyLinkedList0.add(iPBan40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[null]"+ "'", str21.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[null]"+ "'", str22.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test435"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList3 = new tp2.SinglyLinkedList();
    tp2.IP iP5 = singlyLinkedList3.get((int)' ');
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    entry6.element = iP11;
    boolean b15 = singlyLinkedList3.remove(iP11);
    tp2.IPBan iPBan17 = new tp2.IPBan(iP11, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList18 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan19 = null;
    boolean b20 = strictlySortedSinglyLinkedList18.contains(iPBan19);
    int i21 = strictlySortedSinglyLinkedList18.getSize();
    tp2.IPBan iPBan23 = strictlySortedSinglyLinkedList18.get((int)'#');
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP28.setSecond((java.lang.Integer)(-1));
    boolean b31 = strictlySortedSinglyLinkedList18.removeFromIP(iP28);
    iPBan17.ip = iP28;
    tp2.IP iP33 = iPBan17.ip;
    boolean b34 = singlyLinkedList0.contains(iP33);
    java.util.Set<tp2.IP> set_iP35 = null;
    boolean b36 = singlyLinkedList0.repOk(set_iP35);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList37 = new tp2.StrictlySortedSinglyLinkedList();
    int i38 = strictlySortedSinglyLinkedList37.getSize();
    tp2.IPBan iPBan39 = null;
    boolean b40 = strictlySortedSinglyLinkedList37.add(iPBan39);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList41 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node42 = strictlySortedSinglyLinkedList41.header;
    strictlySortedSinglyLinkedList37.header = node42;
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i49 = iP48.getFirst();
    java.lang.String str50 = iP48.toString();
    java.lang.String str51 = iP48.toString();
    iP48.setThird((java.lang.Integer)(-1));
    boolean b54 = strictlySortedSinglyLinkedList37.containsIP(iP48);
    tp2.SinglyLinkedList singlyLinkedList55 = new tp2.SinglyLinkedList();
    tp2.IP iP57 = singlyLinkedList55.get((int)' ');
    tp2.Entry entry58 = new tp2.Entry();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i64 = iP63.getFirst();
    java.lang.String str65 = iP63.toString();
    entry58.element = iP63;
    boolean b67 = singlyLinkedList55.remove(iP63);
    tp2.IPBan iPBan69 = new tp2.IPBan(iP63, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList70 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan71 = null;
    boolean b72 = strictlySortedSinglyLinkedList70.contains(iPBan71);
    int i73 = strictlySortedSinglyLinkedList70.getSize();
    tp2.IPBan iPBan75 = strictlySortedSinglyLinkedList70.get((int)'#');
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP80.setSecond((java.lang.Integer)(-1));
    boolean b83 = strictlySortedSinglyLinkedList70.removeFromIP(iP80);
    iPBan69.ip = iP80;
    boolean b85 = strictlySortedSinglyLinkedList37.removeFromIP(iP80);
    boolean b86 = singlyLinkedList0.remove(iP80);
    tp2.IP iP88 = singlyLinkedList0.get(97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i49 + "' != '" + 10+ "'", i49.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "10.0.0.100"+ "'", str50.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "10.0.0.100"+ "'", str51.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 10+ "'", i64.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "10.0.0.100"+ "'", str65.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP88);

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test436"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    strictlySortedSinglyLinkedList0.size = (byte)1;
    tp2.IPBan iPBan8 = strictlySortedSinglyLinkedList0.get(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan8);

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test437"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)33, (java.lang.Integer)97, (java.lang.Integer)97, (java.lang.Integer)10);

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test438"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan5 = strictlySortedSinglyLinkedList0.get((int)'#');
    strictlySortedSinglyLinkedList0.size = (short)100;
    tp2.Node node8 = strictlySortedSinglyLinkedList0.header;
    tp2.SinglyLinkedList singlyLinkedList9 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP10 = null;
    boolean b11 = singlyLinkedList9.repOk(set_iP10);
    int i12 = singlyLinkedList9.getSize();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    java.lang.Integer i20 = iP17.getFourth();
    boolean b21 = singlyLinkedList9.contains(iP17);
    tp2.IPBan iPBan23 = new tp2.IPBan(iP17, (java.lang.Long)1466185870901L);
    java.lang.Integer i24 = iP17.getFirst();
    tp2.SinglyLinkedList singlyLinkedList25 = new tp2.SinglyLinkedList();
    int i26 = singlyLinkedList25.getSize();
    java.lang.String str27 = singlyLinkedList25.toString();
    int i28 = singlyLinkedList25.getSize();
    java.util.Set<tp2.IP> set_iP29 = null;
    boolean b30 = singlyLinkedList25.repOk(set_iP29);
    int i31 = singlyLinkedList25.getSize();
    tp2.IP iP33 = singlyLinkedList25.get(0);
    java.util.Set<tp2.IP> set_iP34 = null;
    boolean b35 = singlyLinkedList25.repOk(set_iP34);
    int i36 = singlyLinkedList25.getSize();
    boolean b37 = iP17.equals((java.lang.Object)singlyLinkedList25);
    boolean b38 = strictlySortedSinglyLinkedList0.containsIP(iP17);
    strictlySortedSinglyLinkedList0.size = (byte)0;
    java.util.Set<tp2.IPBan> set_iPBan41 = null;
    boolean b42 = strictlySortedSinglyLinkedList0.repOk(set_iPBan41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 100+ "'", i20.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "()"+ "'", str27.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test439"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = server0.connect(iP10);
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    server15.update();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP22.setFirst((java.lang.Integer)1);
    java.lang.Integer i25 = iP22.getSecond();
    boolean b26 = server15.addException(iP22);
    tp2.Entry entry27 = new tp2.Entry();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    entry27.element = iP32;
    boolean b36 = server15.addException(iP32);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b42 = server15.removeBan(iP41);
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP44 = null;
    boolean b45 = server43.connect(iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b51 = server43.connect(iP50);
    tp2.Server server52 = new tp2.Server();
    tp2.IP iP53 = null;
    boolean b54 = server52.connect(iP53);
    java.lang.String str55 = server52.toString();
    java.lang.String str56 = server52.toString();
    tp2.Entry entry57 = new tp2.Entry();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i63 = iP62.getFirst();
    java.lang.String str64 = iP62.toString();
    entry57.element = iP62;
    boolean b66 = server52.connect(iP62);
    boolean b67 = server43.removeException(iP62);
    boolean b68 = server15.connect(iP62);
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP73.setSecond((java.lang.Integer)1);
    boolean b76 = server15.removeBan(iP73);
    tp2.RealTime realTime77 = new tp2.RealTime();
    long long78 = realTime77.getCurrentTime();
    long long79 = realTime77.getCurrentTime();
    server15.setTime((tp2.ITime)realTime77);
    server0.setTime((tp2.ITime)realTime77);
    tp2.SinglyLinkedList singlyLinkedList82 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP83 = null;
    boolean b84 = singlyLinkedList82.repOk(set_iP83);
    int i85 = singlyLinkedList82.getSize();
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i91 = iP90.getFirst();
    java.lang.String str92 = iP90.toString();
    java.lang.Integer i93 = iP90.getFourth();
    boolean b94 = singlyLinkedList82.contains(iP90);
    java.lang.Integer i95 = iP90.getFirst();
    boolean b96 = server0.removeException(iP90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 0+ "'", i25.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str55.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 10+ "'", i63.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "10.0.0.100"+ "'", str64.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long78 == 1466185925286L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long79 == 1466185925286L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i91 + "' != '" + 10+ "'", i91.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "10.0.0.100"+ "'", str92.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i93 + "' != '" + 100+ "'", i93.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i95 + "' != '" + 10+ "'", i95.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test440"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    java.lang.String str3 = singlyLinkedList0.toString();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    int i6 = singlyLinkedList0.getSize();
    boolean b7 = singlyLinkedList0.isEmpty();
    java.util.Set<tp2.IP> set_iP8 = null;
    boolean b9 = singlyLinkedList0.repOk(set_iP8);
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    java.lang.String str16 = iP14.toString();
    java.lang.String str17 = iP14.toString();
    iP14.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan21 = new tp2.IPBan(iP14, (java.lang.Long)0L);
    tp2.IP iP22 = iPBan21.ip;
    singlyLinkedList0.add(iP22);
    java.util.Set<tp2.IP> set_iP24 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b25 = singlyLinkedList0.repOk(set_iP24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "10.0.0.100"+ "'", str17.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP22);

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test441"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node1 = strictlySortedSinglyLinkedList0.header;
    tp2.SinglyLinkedList singlyLinkedList2 = new tp2.SinglyLinkedList();
    tp2.IP iP4 = singlyLinkedList2.get((int)' ');
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = singlyLinkedList2.remove(iP10);
    tp2.IPBan iPBan16 = new tp2.IPBan(iP10, (java.lang.Long)1L);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    server17.update();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i25 = iP24.getFirst();
    boolean b26 = server17.connect(iP24);
    iPBan16.ip = iP24;
    node1.element = iPBan16;
    tp2.Node node29 = node1.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 100+ "'", i25.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node29);

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test442"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    iPBan14.expires = 1466185877442L;
    tp2.IP iP20 = iPBan14.ip;
    java.lang.Integer i21 = iP20.getSecond();
    iP20.setFirst((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 0+ "'", i21.equals(0));

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test443"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i11 = iP10.getFirst();
    boolean b12 = server3.connect(iP10);
    boolean b13 = strictlySortedSinglyLinkedList0.removeFromIP(iP10);
    java.util.Set<tp2.IPBan> set_iPBan14 = null;
    boolean b15 = strictlySortedSinglyLinkedList0.repOk(set_iPBan14);
    tp2.IPBan iPBan17 = strictlySortedSinglyLinkedList0.get((-1));
    tp2.Node node18 = new tp2.Node();
    tp2.IPBan iPBan19 = null;
    node18.element = iPBan19;
    tp2.SinglyLinkedList singlyLinkedList21 = new tp2.SinglyLinkedList();
    tp2.IP iP23 = singlyLinkedList21.get((int)' ');
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = singlyLinkedList21.remove(iP29);
    tp2.IPBan iPBan35 = new tp2.IPBan(iP29, (java.lang.Long)1L);
    java.lang.String str36 = iPBan35.toString();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i42 = iP41.getFirst();
    java.lang.String str43 = iP41.toString();
    java.lang.String str44 = iP41.toString();
    iPBan35.setIp(iP41);
    java.lang.Long long46 = iPBan35.getExpires();
    node18.element = iPBan35;
    strictlySortedSinglyLinkedList0.header = node18;
    tp2.Node node49 = new tp2.Node();
    tp2.IPBan iPBan50 = null;
    node49.element = iPBan50;
    tp2.IPBan iPBan52 = null;
    node49.element = iPBan52;
    tp2.Node node54 = node49.next;
    strictlySortedSinglyLinkedList0.header = node49;
    tp2.IPBan iPBan57 = strictlySortedSinglyLinkedList0.get(32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 100+ "'", i11.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str36.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 10+ "'", i42.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "10.0.0.100"+ "'", str44.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L+ "'", long46.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan57);

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test444"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.SinglyLinkedList singlyLinkedList13 = new tp2.SinglyLinkedList();
    tp2.IP iP15 = singlyLinkedList13.get((int)' ');
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = singlyLinkedList13.remove(iP21);
    tp2.IPBan iPBan27 = new tp2.IPBan(iP21, (java.lang.Long)1L);
    java.lang.String str28 = iPBan27.toString();
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP30 = null;
    boolean b31 = server29.connect(iP30);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b37 = server29.connect(iP36);
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP39 = null;
    boolean b40 = server38.connect(iP39);
    java.lang.String str41 = server38.toString();
    java.lang.String str42 = server38.toString();
    tp2.Entry entry43 = new tp2.Entry();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i49 = iP48.getFirst();
    java.lang.String str50 = iP48.toString();
    entry43.element = iP48;
    boolean b52 = server38.connect(iP48);
    boolean b53 = server29.removeException(iP48);
    tp2.Server server54 = new tp2.Server();
    tp2.IP iP55 = null;
    boolean b56 = server54.connect(iP55);
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b62 = server54.connect(iP61);
    java.lang.Integer i63 = iP61.getFirst();
    boolean b64 = server29.connect(iP61);
    iPBan27.ip = iP61;
    boolean b66 = singlyLinkedList0.contains(iP61);
    java.lang.Integer i67 = iP61.getSecond();
    iP61.setFourth((java.lang.Integer)0);
    iP61.setThird((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str28.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i49 + "' != '" + 10+ "'", i49.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "10.0.0.100"+ "'", str50.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 100+ "'", i63.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 10+ "'", i67.equals(10));

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test445"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    boolean b3 = singlyLinkedList0.isEmpty();
    tp2.Server server4 = new tp2.Server();
    tp2.IP iP5 = null;
    boolean b6 = server4.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b12 = server4.connect(iP11);
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP14 = null;
    boolean b15 = server13.connect(iP14);
    java.lang.String str16 = server13.toString();
    java.lang.String str17 = server13.toString();
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = server13.connect(iP23);
    boolean b28 = server4.removeException(iP23);
    java.lang.Integer i29 = iP23.getThird();
    boolean b30 = singlyLinkedList0.contains(iP23);
    int i31 = singlyLinkedList0.getSize();
    tp2.IP iP32 = null;
    boolean b33 = singlyLinkedList0.contains(iP32);
    java.lang.String str34 = singlyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 0+ "'", i29.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "()"+ "'", str34.equals("()"));

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test446"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b6 = server0.addException(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.Integer i13 = iP11.getSecond();
    boolean b14 = server0.addBan(iP11);
    tp2.SinglyLinkedList singlyLinkedList15 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP16 = null;
    boolean b17 = singlyLinkedList15.repOk(set_iP16);
    int i18 = singlyLinkedList15.getSize();
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    server19.update();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP26.setFirst((java.lang.Integer)1);
    java.lang.Integer i29 = iP26.getSecond();
    boolean b30 = server19.addException(iP26);
    tp2.Entry entry31 = new tp2.Entry();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i37 = iP36.getFirst();
    java.lang.String str38 = iP36.toString();
    entry31.element = iP36;
    boolean b40 = server19.addException(iP36);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList41 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList41.size = 10;
    tp2.Server server44 = new tp2.Server();
    java.lang.String str45 = server44.toString();
    server44.update();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP51.setFirst((java.lang.Integer)1);
    java.lang.Integer i54 = iP51.getSecond();
    boolean b55 = server44.addException(iP51);
    tp2.Entry entry56 = new tp2.Entry();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i62 = iP61.getFirst();
    java.lang.String str63 = iP61.toString();
    entry56.element = iP61;
    boolean b65 = server44.addException(iP61);
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b71 = server44.removeBan(iP70);
    iP70.setThird((java.lang.Integer)0);
    boolean b74 = strictlySortedSinglyLinkedList41.removeFromIP(iP70);
    boolean b75 = server19.addException(iP70);
    java.lang.String str76 = iP70.toString();
    boolean b77 = singlyLinkedList15.contains(iP70);
    tp2.Server server78 = new tp2.Server();
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b84 = server78.addException(iP83);
    java.lang.Integer i85 = iP83.getFourth();
    boolean b86 = singlyLinkedList15.remove(iP83);
    boolean b87 = server0.connect(iP83);
    tp2.IPBan iPBan89 = new tp2.IPBan(iP83, (java.lang.Long)1466185893724L);
    tp2.IPBan iPBan91 = new tp2.IPBan(iP83, (java.lang.Long)1466185888005L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 100+ "'", i12.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 10+ "'", i13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 0+ "'", i29.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 0+ "'", i54.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i62 + "' != '" + 10+ "'", i62.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "10.0.0.100"+ "'", str63.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "10.100.0.1"+ "'", str76.equals("10.100.0.1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i85 + "' != '" + 10+ "'", i85.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test447"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.contains(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    java.lang.String str20 = iP17.toString();
    iP17.setThird((java.lang.Integer)(-1));
    boolean b23 = strictlySortedSinglyLinkedList6.containsIP(iP17);
    tp2.IPBan iPBan25 = strictlySortedSinglyLinkedList6.get((int)(short)(-1));
    java.util.Set<tp2.IPBan> set_iPBan26 = null;
    boolean b27 = strictlySortedSinglyLinkedList6.repOk(set_iPBan26);
    tp2.Node node28 = strictlySortedSinglyLinkedList6.header;
    tp2.IPBan iPBan29 = node28.element;
    java.lang.String str30 = node28.toString();
    strictlySortedSinglyLinkedList0.header = node28;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "10.0.0.100"+ "'", str20.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[null]"+ "'", str30.equals("[null]"));

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test448"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b7 = strictlySortedSinglyLinkedList0.containsIP(iP6);
    tp2.Node node8 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan10 = strictlySortedSinglyLinkedList0.get((int)(byte)1);
    java.util.Set<tp2.IPBan> set_iPBan11 = null;
    boolean b12 = strictlySortedSinglyLinkedList0.repOk(set_iPBan11);
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    java.lang.String str20 = iP17.toString();
    iP17.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan24 = new tp2.IPBan(iP17, (java.lang.Long)0L);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP26 = null;
    boolean b27 = server25.connect(iP26);
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b33 = server25.connect(iP32);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList34 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList34.size = 10;
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    server37.update();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP44.setFirst((java.lang.Integer)1);
    java.lang.Integer i47 = iP44.getSecond();
    boolean b48 = server37.addException(iP44);
    tp2.Entry entry49 = new tp2.Entry();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i55 = iP54.getFirst();
    java.lang.String str56 = iP54.toString();
    entry49.element = iP54;
    boolean b58 = server37.addException(iP54);
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b64 = server37.removeBan(iP63);
    iP63.setThird((java.lang.Integer)0);
    boolean b67 = strictlySortedSinglyLinkedList34.removeFromIP(iP63);
    tp2.Server server68 = new tp2.Server();
    java.lang.String str69 = server68.toString();
    server68.update();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP75.setFirst((java.lang.Integer)1);
    java.lang.Integer i78 = iP75.getSecond();
    boolean b79 = server68.addException(iP75);
    boolean b80 = strictlySortedSinglyLinkedList34.removeFromIP(iP75);
    boolean b81 = server25.connect(iP75);
    tp2.Server server82 = new tp2.Server();
    tp2.IP iP83 = null;
    boolean b84 = server82.connect(iP83);
    tp2.IP iP89 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b90 = server82.connect(iP89);
    java.lang.Integer i91 = iP89.getFirst();
    boolean b92 = server25.connect(iP89);
    java.lang.Integer i93 = iP89.getFirst();
    iPBan24.ip = iP89;
    java.lang.Long long95 = iPBan24.getExpires();
    boolean b96 = strictlySortedSinglyLinkedList0.contains(iPBan24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "10.0.0.100"+ "'", str20.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 0+ "'", i47.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 10+ "'", i55.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "10.0.0.100"+ "'", str56.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str69.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i78 + "' != '" + 0+ "'", i78.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i91 + "' != '" + 100+ "'", i91.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i93 + "' != '" + 100+ "'", i93.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L+ "'", long95.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test449"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)101, (java.lang.Integer)2, (java.lang.Integer)11);

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test450"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    int i3 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    int i6 = singlyLinkedList0.getSize();
    int i7 = singlyLinkedList0.getSize();
    int i8 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP9 = null;
    boolean b10 = singlyLinkedList0.repOk(set_iP9);
    tp2.IP iP12 = singlyLinkedList0.get((int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP12);

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test451"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b24 = server16.connect(iP23);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP26 = null;
    boolean b27 = server25.connect(iP26);
    java.lang.String str28 = server25.toString();
    java.lang.String str29 = server25.toString();
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server25.connect(iP35);
    boolean b40 = server16.removeException(iP35);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP42 = null;
    boolean b43 = server41.connect(iP42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b49 = server41.connect(iP48);
    java.lang.Integer i50 = iP48.getFirst();
    boolean b51 = server16.connect(iP48);
    iPBan14.ip = iP48;
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    java.lang.Integer i60 = iP57.getSecond();
    iPBan14.ip = iP57;
    java.lang.String str62 = iPBan14.toString();
    tp2.IP iP63 = iPBan14.ip;
    tp2.IPBan iPBan65 = new tp2.IPBan(iP63, (java.lang.Long)1466185900385L);
    tp2.IPBan iPBan67 = new tp2.IPBan(iP63, (java.lang.Long)1466185911692L);
    tp2.IP iP68 = iPBan67.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 100+ "'", i50.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 0+ "'", i60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "IPBan [ip=1.0.0.100, expires=1]"+ "'", str62.equals("IPBan [ip=1.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP68);

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test452"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList3 = new tp2.StrictlySortedSinglyLinkedList();
    int i4 = strictlySortedSinglyLinkedList3.getSize();
    tp2.IPBan iPBan5 = null;
    boolean b6 = strictlySortedSinglyLinkedList3.add(iPBan5);
    tp2.Node node7 = strictlySortedSinglyLinkedList3.header;
    tp2.IPBan iPBan9 = strictlySortedSinglyLinkedList3.get(100);
    tp2.Node node10 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    int i12 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan13 = null;
    boolean b14 = strictlySortedSinglyLinkedList11.add(iPBan13);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node16 = strictlySortedSinglyLinkedList15.header;
    strictlySortedSinglyLinkedList11.header = node16;
    node10.next = node16;
    strictlySortedSinglyLinkedList3.header = node10;
    node0.next = node10;
    tp2.Node node21 = node0.next;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList22 = new tp2.StrictlySortedSinglyLinkedList();
    int i23 = strictlySortedSinglyLinkedList22.getSize();
    tp2.IPBan iPBan24 = null;
    boolean b25 = strictlySortedSinglyLinkedList22.add(iPBan24);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList26 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node27 = strictlySortedSinglyLinkedList26.header;
    strictlySortedSinglyLinkedList22.header = node27;
    strictlySortedSinglyLinkedList22.size = 0;
    tp2.Node node31 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList32 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList32.size = 10;
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    server35.update();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP42.setFirst((java.lang.Integer)1);
    java.lang.Integer i45 = iP42.getSecond();
    boolean b46 = server35.addException(iP42);
    tp2.Entry entry47 = new tp2.Entry();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    entry47.element = iP52;
    boolean b56 = server35.addException(iP52);
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b62 = server35.removeBan(iP61);
    iP61.setThird((java.lang.Integer)0);
    boolean b65 = strictlySortedSinglyLinkedList32.removeFromIP(iP61);
    java.lang.String str66 = strictlySortedSinglyLinkedList32.toString();
    tp2.SinglyLinkedList singlyLinkedList67 = new tp2.SinglyLinkedList();
    tp2.IP iP69 = singlyLinkedList67.get((int)' ');
    tp2.Entry entry70 = new tp2.Entry();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i76 = iP75.getFirst();
    java.lang.String str77 = iP75.toString();
    entry70.element = iP75;
    boolean b79 = singlyLinkedList67.remove(iP75);
    tp2.IPBan iPBan81 = new tp2.IPBan(iP75, (java.lang.Long)1L);
    java.lang.String str82 = iPBan81.toString();
    boolean b83 = strictlySortedSinglyLinkedList32.contains(iPBan81);
    node31.element = iPBan81;
    tp2.IPBan iPBan85 = node31.element;
    boolean b86 = strictlySortedSinglyLinkedList22.add(iPBan85);
    java.lang.Long long87 = iPBan85.expires;
    java.lang.Long long88 = iPBan85.expires;
    node21.element = iPBan85;
    tp2.IPBan iPBan90 = node21.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 0+ "'", i45.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "{}"+ "'", str66.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 10+ "'", i76.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str82.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1L+ "'", long87.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1L+ "'", long88.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan90);

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test453"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    server15.update();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i23 = iP22.getFirst();
    boolean b24 = server15.connect(iP22);
    iPBan14.ip = iP22;
    tp2.IP iP26 = iPBan14.getIp();
    java.lang.Long long27 = iPBan14.expires;
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    entry28.element = iP33;
    tp2.Entry entry36 = entry28.next;
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b45 = server37.connect(iP44);
    java.lang.Integer i46 = iP44.getFirst();
    entry28.element = iP44;
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP52.setThird((java.lang.Integer)1);
    entry28.element = iP52;
    tp2.Entry entry56 = new tp2.Entry();
    java.lang.String str57 = entry56.toString();
    tp2.Entry entry58 = new tp2.Entry();
    java.lang.String str59 = entry58.toString();
    entry56.next = entry58;
    entry28.next = entry56;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList62 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan63 = null;
    boolean b64 = strictlySortedSinglyLinkedList62.contains(iPBan63);
    tp2.Server server65 = new tp2.Server();
    java.lang.String str66 = server65.toString();
    server65.update();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i73 = iP72.getFirst();
    boolean b74 = server65.connect(iP72);
    boolean b75 = strictlySortedSinglyLinkedList62.removeFromIP(iP72);
    java.lang.Integer i76 = iP72.getThird();
    iP72.setFourth((java.lang.Integer)100);
    entry28.element = iP72;
    iPBan14.ip = iP72;
    tp2.Server server81 = new tp2.Server();
    tp2.IP iP82 = null;
    boolean b83 = server81.connect(iP82);
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b89 = server81.connect(iP88);
    java.lang.Integer i90 = iP88.getFirst();
    java.lang.Integer i91 = iP88.getThird();
    iP88.setFirst((java.lang.Integer)1);
    iPBan14.setIp(iP88);
    tp2.IP iP95 = iPBan14.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 100+ "'", i23.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L+ "'", long27.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 100+ "'", i46.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "[null]"+ "'", str57.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "[null]"+ "'", str59.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 100+ "'", i73.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + (-1)+ "'", i76.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i90 + "' != '" + 100+ "'", i90.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i91 + "' != '" + (-1)+ "'", i91.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP95);

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test454"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    java.lang.String str7 = node5.toString();
    tp2.Node node8 = node5.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[null]"+ "'", str7.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node8);

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test455"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan5 = strictlySortedSinglyLinkedList0.get((int)'#');
    strictlySortedSinglyLinkedList0.size = (short)100;
    tp2.Node node8 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    tp2.IPBan iPBan39 = node9.element;
    java.lang.String str40 = node9.toString();
    tp2.IPBan iPBan41 = node9.element;
    strictlySortedSinglyLinkedList0.header = node9;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList43 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node44 = strictlySortedSinglyLinkedList43.header;
    tp2.SinglyLinkedList singlyLinkedList45 = new tp2.SinglyLinkedList();
    tp2.IP iP47 = singlyLinkedList45.get((int)' ');
    tp2.Entry entry48 = new tp2.Entry();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i54 = iP53.getFirst();
    java.lang.String str55 = iP53.toString();
    entry48.element = iP53;
    boolean b57 = singlyLinkedList45.remove(iP53);
    tp2.IPBan iPBan59 = new tp2.IPBan(iP53, (java.lang.Long)1L);
    tp2.Server server60 = new tp2.Server();
    java.lang.String str61 = server60.toString();
    server60.update();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i68 = iP67.getFirst();
    boolean b69 = server60.connect(iP67);
    iPBan59.ip = iP67;
    node44.element = iPBan59;
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i77 = iP76.getFirst();
    java.lang.String str78 = iP76.toString();
    java.lang.String str79 = iP76.toString();
    iP76.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan83 = new tp2.IPBan(iP76, (java.lang.Long)0L);
    java.lang.String str84 = iPBan83.toString();
    node44.element = iPBan83;
    strictlySortedSinglyLinkedList0.header = node44;
    int i87 = strictlySortedSinglyLinkedList0.getSize();
    java.util.Set<tp2.IPBan> set_iPBan88 = null;
    boolean b89 = strictlySortedSinglyLinkedList0.repOk(set_iPBan88);
    java.util.Set<tp2.IPBan> set_iPBan90 = null;
    boolean b91 = strictlySortedSinglyLinkedList0.repOk(set_iPBan90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[IPBan [ip=10.0.0.100, expires=1]]"+ "'", str40.equals("[IPBan [ip=10.0.0.100, expires=1]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "10.0.0.100"+ "'", str55.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str61.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 100+ "'", i68.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i77 + "' != '" + 10+ "'", i77.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "10.0.0.100"+ "'", str78.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "10.0.0.100"+ "'", str79.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "IPBan [ip=10.0.-1.100, expires=0]"+ "'", str84.equals("IPBan [ip=10.0.-1.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test456"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Entry entry9 = new tp2.Entry();
    tp2.Entry entry10 = new tp2.Entry();
    java.lang.String str11 = entry10.toString();
    java.lang.String str12 = entry10.toString();
    tp2.Entry entry13 = entry10.next;
    entry9.next = entry10;
    tp2.IP iP15 = entry9.element;
    entry0.next = entry9;
    tp2.Entry entry17 = entry9.next;
    tp2.IP iP18 = entry9.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[null]"+ "'", str11.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[null]"+ "'", str12.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP18);

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test457"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = entry0.next;
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b17 = server9.connect(iP16);
    java.lang.Integer i18 = iP16.getFirst();
    entry0.element = iP16;
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP24.setThird((java.lang.Integer)1);
    entry0.element = iP24;
    tp2.Entry entry28 = new tp2.Entry();
    java.lang.String str29 = entry28.toString();
    tp2.Entry entry30 = new tp2.Entry();
    java.lang.String str31 = entry30.toString();
    entry28.next = entry30;
    entry0.next = entry28;
    tp2.IP iP34 = entry0.element;
    tp2.Entry entry35 = new tp2.Entry();
    tp2.Entry entry36 = new tp2.Entry();
    java.lang.String str37 = entry36.toString();
    java.lang.String str38 = entry36.toString();
    tp2.Entry entry39 = entry36.next;
    entry35.next = entry36;
    tp2.Entry entry41 = new tp2.Entry();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i47 = iP46.getFirst();
    entry41.element = iP46;
    tp2.Entry entry49 = entry41.next;
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP51 = null;
    boolean b52 = server50.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b58 = server50.connect(iP57);
    java.lang.Integer i59 = iP57.getFirst();
    entry41.element = iP57;
    entry36.next = entry41;
    tp2.IP iP62 = entry36.element;
    entry0.next = entry36;
    tp2.Entry entry64 = entry0.next;
    java.lang.String str65 = entry0.toString();
    java.lang.String str66 = entry0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 100+ "'", i18.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[null]"+ "'", str29.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[null]"+ "'", str31.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[null]"+ "'", str37.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[null]"+ "'", str38.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 10+ "'", i47.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 100+ "'", i59.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "[10.0.1.100]"+ "'", str65.equals("[10.0.1.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "[10.0.1.100]"+ "'", str66.equals("[10.0.1.100]"));

  }

  @Test
  public void test458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test458"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b7 = strictlySortedSinglyLinkedList0.containsIP(iP6);
    int i8 = strictlySortedSinglyLinkedList0.getSize();
    strictlySortedSinglyLinkedList0.size = (short)(-1);
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    server11.update();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP18.setFirst((java.lang.Integer)1);
    java.lang.Integer i21 = iP18.getSecond();
    boolean b22 = server11.addException(iP18);
    tp2.Entry entry23 = new tp2.Entry();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i29 = iP28.getFirst();
    java.lang.String str30 = iP28.toString();
    entry23.element = iP28;
    boolean b32 = server11.addException(iP28);
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b38 = server11.removeBan(iP37);
    tp2.Server server39 = new tp2.Server();
    tp2.IP iP40 = null;
    boolean b41 = server39.connect(iP40);
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b47 = server39.connect(iP46);
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP49 = null;
    boolean b50 = server48.connect(iP49);
    java.lang.String str51 = server48.toString();
    java.lang.String str52 = server48.toString();
    tp2.Entry entry53 = new tp2.Entry();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i59 = iP58.getFirst();
    java.lang.String str60 = iP58.toString();
    entry53.element = iP58;
    boolean b62 = server48.connect(iP58);
    boolean b63 = server39.removeException(iP58);
    boolean b64 = server11.connect(iP58);
    java.lang.Integer i65 = iP58.getFirst();
    iP58.setSecond((java.lang.Integer)0);
    java.lang.Integer i68 = iP58.getThird();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList69 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node70 = strictlySortedSinglyLinkedList69.header;
    boolean b71 = iP58.equals((java.lang.Object)strictlySortedSinglyLinkedList69);
    tp2.IPBan iPBan73 = new tp2.IPBan(iP58, (java.lang.Long)1L);
    boolean b74 = strictlySortedSinglyLinkedList0.containsIP(iP58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 0+ "'", i21.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 10+ "'", i29.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "10.0.0.100"+ "'", str30.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str52.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 10+ "'", i59.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "10.0.0.100"+ "'", str60.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 10+ "'", i65.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 0+ "'", i68.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);

  }

  @Test
  public void test459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test459"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.contains(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    java.lang.String str11 = iP9.toString();
    java.lang.String str12 = iP9.toString();
    iP9.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan16 = new tp2.IPBan(iP9, (java.lang.Long)0L);
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP18 = null;
    boolean b19 = server17.connect(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b25 = server17.connect(iP24);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList26 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList26.size = 10;
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    server29.update();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP36.setFirst((java.lang.Integer)1);
    java.lang.Integer i39 = iP36.getSecond();
    boolean b40 = server29.addException(iP36);
    tp2.Entry entry41 = new tp2.Entry();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i47 = iP46.getFirst();
    java.lang.String str48 = iP46.toString();
    entry41.element = iP46;
    boolean b50 = server29.addException(iP46);
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b56 = server29.removeBan(iP55);
    iP55.setThird((java.lang.Integer)0);
    boolean b59 = strictlySortedSinglyLinkedList26.removeFromIP(iP55);
    tp2.Server server60 = new tp2.Server();
    java.lang.String str61 = server60.toString();
    server60.update();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP67.setFirst((java.lang.Integer)1);
    java.lang.Integer i70 = iP67.getSecond();
    boolean b71 = server60.addException(iP67);
    boolean b72 = strictlySortedSinglyLinkedList26.removeFromIP(iP67);
    boolean b73 = server17.connect(iP67);
    tp2.Server server74 = new tp2.Server();
    tp2.IP iP75 = null;
    boolean b76 = server74.connect(iP75);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b82 = server74.connect(iP81);
    java.lang.Integer i83 = iP81.getFirst();
    boolean b84 = server17.connect(iP81);
    java.lang.Integer i85 = iP81.getFirst();
    iPBan16.ip = iP81;
    tp2.IP iP87 = iPBan16.ip;
    tp2.IP iP88 = iPBan16.ip;
    boolean b89 = strictlySortedSinglyLinkedList0.contains(iPBan16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "10.0.0.100"+ "'", str11.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + 0+ "'", i39.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 10+ "'", i47.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "10.0.0.100"+ "'", str48.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str61.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 0+ "'", i70.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i83 + "' != '" + 100+ "'", i83.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i85 + "' != '" + 100+ "'", i85.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);

  }

  @Test
  public void test460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test460"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP58.setSecond((java.lang.Integer)1);
    boolean b61 = server0.removeBan(iP58);
    server0.update();
    server0.update();
    server0.update();
    java.lang.String str65 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=1466185925669, exceptions=([10.0.0.100][1.0.0.100]), bans={}]"+ "'", str65.equals("Server [lastUpdate=1466185925669, exceptions=([10.0.0.100][1.0.0.100]), bans={}]"));

  }

  @Test
  public void test461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test461"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList9.size = 10;
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    server12.update();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP19.setFirst((java.lang.Integer)1);
    java.lang.Integer i22 = iP19.getSecond();
    boolean b23 = server12.addException(iP19);
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = server12.addException(iP29);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b39 = server12.removeBan(iP38);
    iP38.setThird((java.lang.Integer)0);
    boolean b42 = strictlySortedSinglyLinkedList9.removeFromIP(iP38);
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    server43.update();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP50.setFirst((java.lang.Integer)1);
    java.lang.Integer i53 = iP50.getSecond();
    boolean b54 = server43.addException(iP50);
    boolean b55 = strictlySortedSinglyLinkedList9.removeFromIP(iP50);
    boolean b56 = server0.connect(iP50);
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP58 = null;
    boolean b59 = server57.connect(iP58);
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b65 = server57.connect(iP64);
    java.lang.Integer i66 = iP64.getFirst();
    boolean b67 = server0.connect(iP64);
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP72.setFirst((java.lang.Integer)1);
    boolean b75 = server0.removeException(iP72);
    tp2.Entry entry76 = new tp2.Entry();
    java.lang.String str77 = entry76.toString();
    tp2.Entry entry78 = new tp2.Entry();
    java.lang.String str79 = entry78.toString();
    entry76.next = entry78;
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i86 = iP85.getFirst();
    java.lang.String str87 = iP85.toString();
    java.lang.Integer i88 = iP85.getThird();
    java.lang.String str89 = iP85.toString();
    entry76.element = iP85;
    boolean b91 = server0.connect(iP85);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 0+ "'", i22.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 0+ "'", i53.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i66 + "' != '" + 100+ "'", i66.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "[null]"+ "'", str77.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "[null]"+ "'", str79.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i86 + "' != '" + 10+ "'", i86.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "10.0.0.100"+ "'", str87.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 0+ "'", i88.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "10.0.0.100"+ "'", str89.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);

  }

  @Test
  public void test462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test462"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    int i3 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    java.util.Set<tp2.IP> set_iP6 = null;
    boolean b7 = singlyLinkedList0.repOk(set_iP6);
    int i8 = singlyLinkedList0.getSize();
    int i9 = singlyLinkedList0.getSize();
    int i10 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test463"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    java.lang.String str11 = iP9.toString();
    java.lang.String str12 = iP9.toString();
    iP9.setThird((java.lang.Integer)(-1));
    entry0.element = iP9;
    tp2.Node node16 = new tp2.Node();
    tp2.IPBan iPBan17 = null;
    node16.element = iPBan17;
    tp2.SinglyLinkedList singlyLinkedList19 = new tp2.SinglyLinkedList();
    tp2.IP iP21 = singlyLinkedList19.get((int)' ');
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = singlyLinkedList19.remove(iP27);
    tp2.IPBan iPBan33 = new tp2.IPBan(iP27, (java.lang.Long)1L);
    java.lang.String str34 = iPBan33.toString();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    java.lang.String str42 = iP39.toString();
    iPBan33.setIp(iP39);
    java.lang.Long long44 = iPBan33.getExpires();
    node16.element = iPBan33;
    iPBan33.expires = 1466185870380L;
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    java.lang.Integer i55 = iP52.getFourth();
    iPBan33.ip = iP52;
    entry0.element = iP52;
    tp2.Entry entry58 = new tp2.Entry();
    java.lang.String str59 = entry58.toString();
    java.lang.String str60 = entry58.toString();
    tp2.Entry entry61 = entry58.next;
    tp2.IP iP62 = entry58.element;
    tp2.IP iP63 = entry58.element;
    tp2.Entry entry64 = new tp2.Entry();
    tp2.Entry entry65 = new tp2.Entry();
    java.lang.String str66 = entry65.toString();
    java.lang.String str67 = entry65.toString();
    tp2.Entry entry68 = entry65.next;
    entry64.next = entry65;
    entry58.next = entry64;
    entry0.next = entry64;
    java.lang.String str72 = entry0.toString();
    tp2.Entry entry73 = new tp2.Entry();
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i79 = iP78.getFirst();
    java.lang.String str80 = iP78.toString();
    entry73.element = iP78;
    tp2.Entry entry82 = new tp2.Entry();
    tp2.Entry entry83 = new tp2.Entry();
    java.lang.String str84 = entry83.toString();
    java.lang.String str85 = entry83.toString();
    tp2.Entry entry86 = entry83.next;
    entry82.next = entry83;
    tp2.IP iP88 = entry82.element;
    entry73.next = entry82;
    java.lang.String str90 = entry82.toString();
    entry0.next = entry82;
    tp2.IP iP96 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)11, (java.lang.Integer)1, (java.lang.Integer)0);
    iP96.setSecond((java.lang.Integer)1);
    entry82.element = iP96;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "10.0.0.100"+ "'", str11.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str34.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L+ "'", long44.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 100+ "'", i55.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "[null]"+ "'", str59.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "[null]"+ "'", str60.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "[null]"+ "'", str66.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[null]"+ "'", str67.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "[10.0.0.100]"+ "'", str72.equals("[10.0.0.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i79 + "' != '" + 10+ "'", i79.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "10.0.0.100"+ "'", str80.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "[null]"+ "'", str84.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "[null]"+ "'", str85.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "[null]"+ "'", str90.equals("[null]"));

  }

  @Test
  public void test464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test464"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.size;
    int i5 = strictlySortedSinglyLinkedList0.getSize();
    int i6 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str7 = strictlySortedSinglyLinkedList0.toString();
    boolean b8 = strictlySortedSinglyLinkedList0.isEmpty();
    strictlySortedSinglyLinkedList0.size = 33;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "{[null]}"+ "'", str7.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test465"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = entry0.next;
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b17 = server9.connect(iP16);
    java.lang.Integer i18 = iP16.getFirst();
    entry0.element = iP16;
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP24.setThird((java.lang.Integer)1);
    entry0.element = iP24;
    tp2.Entry entry28 = new tp2.Entry();
    java.lang.String str29 = entry28.toString();
    tp2.Entry entry30 = new tp2.Entry();
    java.lang.String str31 = entry30.toString();
    entry28.next = entry30;
    entry0.next = entry28;
    java.lang.String str34 = entry28.toString();
    tp2.IP iP35 = entry28.element;
    java.lang.String str36 = entry28.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 100+ "'", i18.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[null]"+ "'", str29.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[null]"+ "'", str31.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[null]"+ "'", str34.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[null]"+ "'", str36.equals("[null]"));

  }

  @Test
  public void test466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test466"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP58.setSecond((java.lang.Integer)1);
    boolean b61 = server0.removeBan(iP58);
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP63 = null;
    boolean b64 = server62.connect(iP63);
    java.lang.String str65 = server62.toString();
    java.lang.String str66 = server62.toString();
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = server62.connect(iP72);
    boolean b77 = server0.addBan(iP72);
    server0.update();
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);

  }

  @Test
  public void test467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test467"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList50 = new tp2.StrictlySortedSinglyLinkedList();
    int i51 = strictlySortedSinglyLinkedList50.getSize();
    tp2.IPBan iPBan52 = null;
    boolean b53 = strictlySortedSinglyLinkedList50.add(iPBan52);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList54 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node55 = strictlySortedSinglyLinkedList54.header;
    strictlySortedSinglyLinkedList50.header = node55;
    tp2.IPBan iPBan57 = node55.element;
    strictlySortedSinglyLinkedList0.header = node55;
    java.util.Set<tp2.IPBan> set_iPBan59 = null;
    boolean b60 = strictlySortedSinglyLinkedList0.repOk(set_iPBan59);
    tp2.IPBan iPBan62 = strictlySortedSinglyLinkedList0.get((int)'4');
    tp2.Entry entry63 = new tp2.Entry();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i69 = iP68.getFirst();
    entry63.element = iP68;
    tp2.Entry entry71 = entry63.next;
    tp2.Server server72 = new tp2.Server();
    tp2.IP iP73 = null;
    boolean b74 = server72.connect(iP73);
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b80 = server72.connect(iP79);
    java.lang.Integer i81 = iP79.getFirst();
    entry63.element = iP79;
    iP79.setFourth((java.lang.Integer)100);
    iP79.setFourth((java.lang.Integer)10);
    iP79.setFourth((java.lang.Integer)0);
    boolean b89 = strictlySortedSinglyLinkedList0.removeFromIP(iP79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i69 + "' != '" + 10+ "'", i69.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i81 + "' != '" + 100+ "'", i81.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);

  }

  @Test
  public void test468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test468"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP5.setSecond((java.lang.Integer)(-1));
    boolean b8 = server0.addException(iP5);
    tp2.SinglyLinkedList singlyLinkedList9 = new tp2.SinglyLinkedList();
    int i10 = singlyLinkedList9.getSize();
    java.lang.String str11 = singlyLinkedList9.toString();
    int i12 = singlyLinkedList9.getSize();
    java.util.Set<tp2.IP> set_iP13 = null;
    boolean b14 = singlyLinkedList9.repOk(set_iP13);
    int i15 = singlyLinkedList9.getSize();
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    entry16.element = iP21;
    tp2.Entry entry24 = entry16.next;
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP26 = null;
    boolean b27 = server25.connect(iP26);
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b33 = server25.connect(iP32);
    java.lang.Integer i34 = iP32.getFirst();
    entry16.element = iP32;
    iP32.setFourth((java.lang.Integer)100);
    java.lang.String str38 = iP32.toString();
    singlyLinkedList9.add(iP32);
    iP32.setFirst((java.lang.Integer)1);
    boolean b42 = server0.removeException(iP32);
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)11, (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)35);
    boolean b48 = server0.connect(iP47);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "()"+ "'", str11.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 100+ "'", i34.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "100.10.-1.100"+ "'", str38.equals("100.10.-1.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);

  }

  @Test
  public void test469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test469"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)2, (java.lang.Integer)0, (java.lang.Integer)32, (java.lang.Integer)32);
    java.lang.Integer i5 = iP4.getThird();
    java.lang.Integer i6 = iP4.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i5 + "' != '" + 32+ "'", i5.equals(32));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 32+ "'", i6.equals(32));

  }

  @Test
  public void test470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test470"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b7 = strictlySortedSinglyLinkedList0.containsIP(iP6);
    int i8 = strictlySortedSinglyLinkedList0.size;
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    java.lang.String str16 = iP14.toString();
    entry9.element = iP14;
    tp2.Node node18 = new tp2.Node();
    tp2.IPBan iPBan19 = null;
    node18.element = iPBan19;
    tp2.SinglyLinkedList singlyLinkedList21 = new tp2.SinglyLinkedList();
    tp2.IP iP23 = singlyLinkedList21.get((int)' ');
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = singlyLinkedList21.remove(iP29);
    tp2.IPBan iPBan35 = new tp2.IPBan(iP29, (java.lang.Long)1L);
    java.lang.String str36 = iPBan35.toString();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i42 = iP41.getFirst();
    java.lang.String str43 = iP41.toString();
    java.lang.String str44 = iP41.toString();
    iPBan35.setIp(iP41);
    java.lang.Long long46 = iPBan35.getExpires();
    node18.element = iPBan35;
    boolean b48 = iP14.equals((java.lang.Object)iPBan35);
    tp2.SinglyLinkedList singlyLinkedList49 = new tp2.SinglyLinkedList();
    int i50 = singlyLinkedList49.getSize();
    java.lang.String str51 = singlyLinkedList49.toString();
    int i52 = singlyLinkedList49.getSize();
    java.util.Set<tp2.IP> set_iP53 = null;
    boolean b54 = singlyLinkedList49.repOk(set_iP53);
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b60 = singlyLinkedList49.remove(iP59);
    iPBan35.setIp(iP59);
    java.lang.String str62 = iPBan35.toString();
    boolean b63 = strictlySortedSinglyLinkedList0.contains(iPBan35);
    int i64 = strictlySortedSinglyLinkedList0.size;
    tp2.Node node65 = strictlySortedSinglyLinkedList0.header;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str36.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 10+ "'", i42.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "10.0.0.100"+ "'", str44.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L+ "'", long46.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "()"+ "'", str51.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "IPBan [ip=100.10.-1.10, expires=1]"+ "'", str62.equals("IPBan [ip=100.10.-1.10, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node65);

  }

  @Test
  public void test471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test471"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b24 = server16.connect(iP23);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP26 = null;
    boolean b27 = server25.connect(iP26);
    java.lang.String str28 = server25.toString();
    java.lang.String str29 = server25.toString();
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server25.connect(iP35);
    boolean b40 = server16.removeException(iP35);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP42 = null;
    boolean b43 = server41.connect(iP42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b49 = server41.connect(iP48);
    java.lang.Integer i50 = iP48.getFirst();
    boolean b51 = server16.connect(iP48);
    iPBan14.ip = iP48;
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    java.lang.Integer i60 = iP57.getSecond();
    iPBan14.ip = iP57;
    java.lang.String str62 = iPBan14.toString();
    iPBan14.expires = 1466185871428L;
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)11, (java.lang.Integer)97, (java.lang.Integer)97);
    iPBan14.setIp(iP69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 100+ "'", i50.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 0+ "'", i60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "IPBan [ip=1.0.0.100, expires=1]"+ "'", str62.equals("IPBan [ip=1.0.0.100, expires=1]"));

  }

  @Test
  public void test472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test472"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = new tp2.Entry();
    java.lang.String str4 = entry3.toString();
    entry0.next = entry3;
    tp2.Entry entry6 = new tp2.Entry();
    java.lang.String str7 = entry6.toString();
    entry0.next = entry6;
    java.lang.String str9 = entry0.toString();
    tp2.Entry entry10 = entry0.next;
    tp2.Entry entry11 = new tp2.Entry();
    java.lang.String str12 = entry11.toString();
    java.lang.String str13 = entry11.toString();
    tp2.IP iP14 = entry11.element;
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    entry15.element = iP20;
    tp2.IP iP23 = entry15.element;
    entry11.next = entry15;
    tp2.Entry entry25 = entry11.next;
    entry10.next = entry25;
    tp2.IP iP27 = entry10.element;
    tp2.Entry entry28 = entry10.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[null]"+ "'", str4.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[null]"+ "'", str7.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[null]"+ "'", str12.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[null]"+ "'", str13.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry28);

  }

  @Test
  public void test473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test473"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    tp2.Node node3 = new tp2.Node();
    tp2.IPBan iPBan4 = null;
    node3.element = iPBan4;
    tp2.IPBan iPBan6 = null;
    node3.element = iPBan6;
    tp2.IPBan iPBan8 = node3.element;
    strictlySortedSinglyLinkedList0.header = node3;
    tp2.Node node10 = node3.next;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    int i12 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan13 = null;
    boolean b14 = strictlySortedSinglyLinkedList11.add(iPBan13);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node16 = strictlySortedSinglyLinkedList15.header;
    strictlySortedSinglyLinkedList11.header = node16;
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i23 = iP22.getFirst();
    java.lang.String str24 = iP22.toString();
    java.lang.String str25 = iP22.toString();
    iP22.setThird((java.lang.Integer)(-1));
    boolean b28 = strictlySortedSinglyLinkedList11.containsIP(iP22);
    tp2.IPBan iPBan30 = strictlySortedSinglyLinkedList11.get((int)(short)(-1));
    java.util.Set<tp2.IPBan> set_iPBan31 = null;
    boolean b32 = strictlySortedSinglyLinkedList11.repOk(set_iPBan31);
    tp2.Node node33 = strictlySortedSinglyLinkedList11.header;
    tp2.IPBan iPBan34 = node33.element;
    node3.next = node33;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 10+ "'", i23.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "10.0.0.100"+ "'", str24.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan34);

  }

  @Test
  public void test474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test474"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.size;
    int i5 = strictlySortedSinglyLinkedList0.getSize();
    strictlySortedSinglyLinkedList0.size = 0;
    tp2.Node node8 = strictlySortedSinglyLinkedList0.header;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node8);

  }

  @Test
  public void test475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test475"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    boolean b39 = iP5.equals((java.lang.Object)iPBan26);
    iP5.setThird((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);

  }

  @Test
  public void test476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test476"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get(1);
    java.lang.String str3 = singlyLinkedList0.toString();
    boolean b4 = singlyLinkedList0.isEmpty();
    tp2.Server server5 = new tp2.Server();
    tp2.IP iP6 = null;
    boolean b7 = server5.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b13 = server5.connect(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP15 = null;
    boolean b16 = server14.connect(iP15);
    java.lang.String str17 = server14.toString();
    java.lang.String str18 = server14.toString();
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = server14.connect(iP24);
    boolean b29 = server5.removeException(iP24);
    java.lang.Integer i30 = iP24.getFirst();
    boolean b31 = singlyLinkedList0.contains(iP24);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP33 = null;
    boolean b34 = server32.connect(iP33);
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b40 = server32.connect(iP39);
    java.lang.Integer i41 = iP39.getFirst();
    java.lang.Integer i42 = iP39.getFirst();
    iP39.setFourth((java.lang.Integer)100);
    singlyLinkedList0.add(iP39);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)100);
    java.lang.Integer i51 = iP50.getFourth();
    singlyLinkedList0.add(iP50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i41 + "' != '" + 100+ "'", i41.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 100+ "'", i42.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 100+ "'", i51.equals(100));

  }

  @Test
  public void test477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test477"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.size;
    int i5 = strictlySortedSinglyLinkedList0.getSize();
    int i6 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan8 = strictlySortedSinglyLinkedList0.get((int)'4');
    boolean b9 = strictlySortedSinglyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test478"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)'4');
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    java.lang.String str22 = iP19.toString();
    iP19.setThird((java.lang.Integer)(-1));
    boolean b25 = singlyLinkedList0.contains(iP19);
    tp2.Entry entry26 = new tp2.Entry();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i32 = iP31.getFirst();
    java.lang.String str33 = iP31.toString();
    entry26.element = iP31;
    tp2.Node node35 = new tp2.Node();
    tp2.IPBan iPBan36 = null;
    node35.element = iPBan36;
    tp2.SinglyLinkedList singlyLinkedList38 = new tp2.SinglyLinkedList();
    tp2.IP iP40 = singlyLinkedList38.get((int)' ');
    tp2.Entry entry41 = new tp2.Entry();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i47 = iP46.getFirst();
    java.lang.String str48 = iP46.toString();
    entry41.element = iP46;
    boolean b50 = singlyLinkedList38.remove(iP46);
    tp2.IPBan iPBan52 = new tp2.IPBan(iP46, (java.lang.Long)1L);
    java.lang.String str53 = iPBan52.toString();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i59 = iP58.getFirst();
    java.lang.String str60 = iP58.toString();
    java.lang.String str61 = iP58.toString();
    iPBan52.setIp(iP58);
    java.lang.Long long63 = iPBan52.getExpires();
    node35.element = iPBan52;
    boolean b65 = iP31.equals((java.lang.Object)iPBan52);
    tp2.SinglyLinkedList singlyLinkedList66 = new tp2.SinglyLinkedList();
    int i67 = singlyLinkedList66.getSize();
    java.lang.String str68 = singlyLinkedList66.toString();
    int i69 = singlyLinkedList66.getSize();
    java.util.Set<tp2.IP> set_iP70 = null;
    boolean b71 = singlyLinkedList66.repOk(set_iP70);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b77 = singlyLinkedList66.remove(iP76);
    iPBan52.setIp(iP76);
    iPBan52.setExpires((java.lang.Long)1466185870380L);
    iPBan52.setExpires((java.lang.Long)1466185871428L);
    iPBan52.expires = 1466185873844L;
    tp2.IP iP85 = iPBan52.ip;
    singlyLinkedList0.add(iP85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 10+ "'", i32.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "10.0.0.100"+ "'", str33.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 10+ "'", i47.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "10.0.0.100"+ "'", str48.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str53.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 10+ "'", i59.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "10.0.0.100"+ "'", str60.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "10.0.0.100"+ "'", str61.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L+ "'", long63.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "()"+ "'", str68.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP85);

  }

  @Test
  public void test479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test479"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    strictlySortedSinglyLinkedList0.size = (short)(-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test480"); }


    tp2.Node node0 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList1 = new tp2.StrictlySortedSinglyLinkedList();
    int i2 = strictlySortedSinglyLinkedList1.getSize();
    tp2.IPBan iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList1.add(iPBan3);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node6 = strictlySortedSinglyLinkedList5.header;
    strictlySortedSinglyLinkedList1.header = node6;
    node0.next = node6;
    tp2.Node node9 = node0.next;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan11 = null;
    boolean b12 = strictlySortedSinglyLinkedList10.contains(iPBan11);
    int i13 = strictlySortedSinglyLinkedList10.getSize();
    tp2.Node node14 = strictlySortedSinglyLinkedList10.header;
    tp2.Node node15 = node14.next;
    node9.next = node14;
    tp2.Node node17 = node14.next;
    // The following exception was thrown during execution in test generation
    try {
      tp2.IPBan iPBan18 = node17.element;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node17);

  }

  @Test
  public void test481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test481"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    boolean b10 = server0.removeException(iP7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList11.contains(iPBan12);
    int i14 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan16 = strictlySortedSinglyLinkedList11.get((int)'#');
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP21.setSecond((java.lang.Integer)(-1));
    boolean b24 = strictlySortedSinglyLinkedList11.removeFromIP(iP21);
    boolean b25 = server0.removeBan(iP21);
    java.lang.Integer i26 = iP21.getFourth();
    iP21.setFourth((java.lang.Integer)0);
    tp2.IPBan iPBan30 = new tp2.IPBan(iP21, (java.lang.Long)1466185881188L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 100+ "'", i26.equals(100));

  }

  @Test
  public void test482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test482"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan6 = strictlySortedSinglyLinkedList0.get(100);
    int i7 = strictlySortedSinglyLinkedList0.getSize();
    int i8 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    entry9.element = iP14;
    tp2.Entry entry17 = entry9.next;
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP19 = null;
    boolean b20 = server18.connect(iP19);
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b26 = server18.connect(iP25);
    java.lang.Integer i27 = iP25.getFirst();
    entry9.element = iP25;
    iP25.setFourth((java.lang.Integer)100);
    iP25.setFourth((java.lang.Integer)10);
    // The following exception was thrown during execution in test generation
    try {
      boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 100+ "'", i27.equals(100));

  }

  @Test
  public void test483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test483"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    boolean b23 = iP17.equals((java.lang.Object)(byte)100);
    tp2.IPBan iPBan25 = new tp2.IPBan(iP17, (java.lang.Long)1466185875724L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test484"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    tp2.Server server4 = new tp2.Server();
    tp2.IP iP5 = null;
    boolean b6 = server4.connect(iP5);
    java.lang.String str7 = server4.toString();
    java.lang.String str8 = server4.toString();
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    java.lang.String str16 = iP14.toString();
    entry9.element = iP14;
    boolean b18 = server4.connect(iP14);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    java.lang.String str26 = iP23.toString();
    boolean b27 = server4.removeBan(iP23);
    iP23.setFirst((java.lang.Integer)10);
    boolean b30 = server0.removeException(iP23);
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP32 = null;
    boolean b33 = server31.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b39 = server31.connect(iP38);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList40 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList40.size = 10;
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    server43.update();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP50.setFirst((java.lang.Integer)1);
    java.lang.Integer i53 = iP50.getSecond();
    boolean b54 = server43.addException(iP50);
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    entry55.element = iP60;
    boolean b64 = server43.addException(iP60);
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b70 = server43.removeBan(iP69);
    iP69.setThird((java.lang.Integer)0);
    boolean b73 = strictlySortedSinglyLinkedList40.removeFromIP(iP69);
    tp2.Server server74 = new tp2.Server();
    java.lang.String str75 = server74.toString();
    server74.update();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP81.setFirst((java.lang.Integer)1);
    java.lang.Integer i84 = iP81.getSecond();
    boolean b85 = server74.addException(iP81);
    boolean b86 = strictlySortedSinglyLinkedList40.removeFromIP(iP81);
    boolean b87 = server31.connect(iP81);
    boolean b88 = server0.connect(iP81);
    java.lang.String str89 = iP81.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 0+ "'", i53.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str75.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i84 + "' != '" + 0+ "'", i84.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "1.0.0.100"+ "'", str89.equals("1.0.0.100"));

  }

  @Test
  public void test485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test485"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    java.lang.String str11 = iP9.toString();
    java.lang.String str12 = iP9.toString();
    iP9.setThird((java.lang.Integer)(-1));
    entry0.element = iP9;
    tp2.Node node16 = new tp2.Node();
    tp2.IPBan iPBan17 = null;
    node16.element = iPBan17;
    tp2.SinglyLinkedList singlyLinkedList19 = new tp2.SinglyLinkedList();
    tp2.IP iP21 = singlyLinkedList19.get((int)' ');
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = singlyLinkedList19.remove(iP27);
    tp2.IPBan iPBan33 = new tp2.IPBan(iP27, (java.lang.Long)1L);
    java.lang.String str34 = iPBan33.toString();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    java.lang.String str42 = iP39.toString();
    iPBan33.setIp(iP39);
    java.lang.Long long44 = iPBan33.getExpires();
    node16.element = iPBan33;
    iPBan33.expires = 1466185870380L;
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    java.lang.Integer i55 = iP52.getFourth();
    iPBan33.ip = iP52;
    entry0.element = iP52;
    tp2.Entry entry58 = new tp2.Entry();
    java.lang.String str59 = entry58.toString();
    tp2.Server server60 = new tp2.Server();
    java.lang.String str61 = server60.toString();
    server60.update();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i68 = iP67.getFirst();
    boolean b69 = server60.connect(iP67);
    entry58.element = iP67;
    entry0.element = iP67;
    tp2.IP iP72 = null;
    entry0.element = iP72;
    tp2.Entry entry74 = new tp2.Entry();
    java.lang.String str75 = entry74.toString();
    java.lang.String str76 = entry74.toString();
    java.lang.String str77 = entry74.toString();
    entry0.next = entry74;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "10.0.0.100"+ "'", str11.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str34.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L+ "'", long44.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 100+ "'", i55.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "[null]"+ "'", str59.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str61.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 100+ "'", i68.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "[null]"+ "'", str75.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "[null]"+ "'", str76.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "[null]"+ "'", str77.equals("[null]"));

  }

  @Test
  public void test486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test486"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    tp2.IPBan iPBan6 = new tp2.IPBan(iP4, (java.lang.Long)(-1L));
    tp2.IP iP7 = iPBan6.getIp();
    java.lang.String str8 = iPBan6.toString();
    java.lang.Long long9 = iPBan6.getExpires();
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b16 = server10.addException(iP15);
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.Integer i23 = iP21.getSecond();
    boolean b24 = server10.addBan(iP21);
    iPBan6.setIp(iP21);
    java.lang.Long long26 = iPBan6.getExpires();
    tp2.IP iP27 = iPBan6.ip;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "IPBan [ip=10.100.-1.1, expires=-1]"+ "'", str8.equals("IPBan [ip=10.100.-1.1, expires=-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L)+ "'", long9.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 100+ "'", i22.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 10+ "'", i23.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L)+ "'", long26.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP27);

  }

  @Test
  public void test487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test487"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)101, (java.lang.Integer)11);

  }

  @Test
  public void test488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test488"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.SinglyLinkedList singlyLinkedList16 = new tp2.SinglyLinkedList();
    tp2.IP iP18 = singlyLinkedList16.get((int)' ');
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = singlyLinkedList16.remove(iP24);
    tp2.IPBan iPBan30 = new tp2.IPBan(iP24, (java.lang.Long)1L);
    java.lang.String str31 = iPBan30.toString();
    iPBan30.setExpires((java.lang.Long)0L);
    java.lang.Long long34 = iPBan30.expires;
    tp2.IP iP35 = iPBan30.ip;
    java.lang.String str36 = iPBan30.toString();
    boolean b37 = strictlySortedSinglyLinkedList0.add(iPBan30);
    tp2.IP iP38 = iPBan30.ip;
    java.lang.String str39 = iPBan30.toString();
    java.lang.String str40 = iPBan30.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str31.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L+ "'", long34.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str36.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str39.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str40.equals("IPBan [ip=10.0.0.100, expires=0]"));

  }

  @Test
  public void test489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test489"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    entry6.element = iP11;
    tp2.Entry entry14 = entry6.next;
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP16 = null;
    boolean b17 = server15.connect(iP16);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b23 = server15.connect(iP22);
    java.lang.Integer i24 = iP22.getFirst();
    entry6.element = iP22;
    entry1.next = entry6;
    tp2.Entry entry27 = new tp2.Entry();
    java.lang.String str28 = entry27.toString();
    java.lang.String str29 = entry27.toString();
    tp2.Entry entry30 = new tp2.Entry();
    java.lang.String str31 = entry30.toString();
    entry27.next = entry30;
    java.lang.String str33 = entry30.toString();
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    entry30.element = iP41;
    entry1.next = entry30;
    java.lang.String str48 = entry30.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 100+ "'", i24.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[null]"+ "'", str28.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[null]"+ "'", str29.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[null]"+ "'", str31.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "[null]"+ "'", str33.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "[1.0.0.100]"+ "'", str48.equals("[1.0.0.100]"));

  }

  @Test
  public void test490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test490"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b7 = strictlySortedSinglyLinkedList0.containsIP(iP6);
    tp2.Node node8 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node9 = node8.next;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan11 = null;
    boolean b12 = strictlySortedSinglyLinkedList10.add(iPBan11);
    java.util.Set<tp2.IPBan> set_iPBan13 = null;
    boolean b14 = strictlySortedSinglyLinkedList10.repOk(set_iPBan13);
    tp2.Node node15 = new tp2.Node();
    tp2.IPBan iPBan16 = null;
    node15.element = iPBan16;
    tp2.IPBan iPBan18 = null;
    node15.element = iPBan18;
    tp2.IPBan iPBan20 = node15.element;
    strictlySortedSinglyLinkedList10.header = node15;
    node8.next = node15;
    tp2.IPBan iPBan23 = node15.element;
    tp2.Node node24 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList25 = new tp2.StrictlySortedSinglyLinkedList();
    int i26 = strictlySortedSinglyLinkedList25.getSize();
    tp2.IPBan iPBan27 = null;
    boolean b28 = strictlySortedSinglyLinkedList25.add(iPBan27);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList29 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node30 = strictlySortedSinglyLinkedList29.header;
    strictlySortedSinglyLinkedList25.header = node30;
    node24.next = node30;
    tp2.Node node33 = node24.next;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList34 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan35 = null;
    boolean b36 = strictlySortedSinglyLinkedList34.contains(iPBan35);
    int i37 = strictlySortedSinglyLinkedList34.getSize();
    tp2.Node node38 = strictlySortedSinglyLinkedList34.header;
    tp2.Node node39 = node38.next;
    node33.next = node38;
    java.lang.String str41 = node33.toString();
    node15.next = node33;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[null]"+ "'", str41.equals("[null]"));

  }

  @Test
  public void test491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test491"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    iPBan14.expires = 1466185871428L;
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP18 = null;
    boolean b19 = server17.connect(iP18);
    java.lang.String str20 = server17.toString();
    java.lang.String str21 = server17.toString();
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server17.connect(iP27);
    iPBan14.ip = iP27;
    tp2.SinglyLinkedList singlyLinkedList33 = new tp2.SinglyLinkedList();
    tp2.IP iP35 = singlyLinkedList33.get((int)' ');
    tp2.Entry entry36 = new tp2.Entry();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i42 = iP41.getFirst();
    java.lang.String str43 = iP41.toString();
    entry36.element = iP41;
    boolean b45 = singlyLinkedList33.remove(iP41);
    tp2.IPBan iPBan47 = new tp2.IPBan(iP41, (java.lang.Long)1L);
    iPBan47.expires = 1466185871428L;
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP51 = null;
    boolean b52 = server50.connect(iP51);
    java.lang.String str53 = server50.toString();
    java.lang.String str54 = server50.toString();
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    entry55.element = iP60;
    boolean b64 = server50.connect(iP60);
    iPBan47.ip = iP60;
    iPBan14.ip = iP60;
    iPBan14.setExpires((java.lang.Long)1466185891607L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 10+ "'", i42.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str53.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str54.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);

  }

  @Test
  public void test492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test492"); }


    tp2.Node node0 = new tp2.Node();
    tp2.Node node1 = node0.next;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList2 = new tp2.StrictlySortedSinglyLinkedList();
    int i3 = strictlySortedSinglyLinkedList2.getSize();
    tp2.IPBan iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList2.add(iPBan4);
    tp2.Node node6 = strictlySortedSinglyLinkedList2.header;
    tp2.IPBan iPBan7 = node6.element;
    node0.next = node6;
    tp2.Node node9 = node6.next;
    tp2.IPBan iPBan10 = node6.element;
    tp2.Entry entry11 = new tp2.Entry();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    entry11.element = iP16;
    tp2.Entry entry19 = entry11.next;
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP21 = null;
    boolean b22 = server20.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b28 = server20.connect(iP27);
    java.lang.Integer i29 = iP27.getFirst();
    entry11.element = iP27;
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP35.setThird((java.lang.Integer)1);
    entry11.element = iP35;
    tp2.Entry entry39 = new tp2.Entry();
    java.lang.String str40 = entry39.toString();
    tp2.Entry entry41 = new tp2.Entry();
    java.lang.String str42 = entry41.toString();
    entry39.next = entry41;
    entry11.next = entry39;
    tp2.IP iP45 = entry11.element;
    tp2.IPBan iPBan47 = new tp2.IPBan(iP45, (java.lang.Long)1466185875390L);
    node6.element = iPBan47;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 100+ "'", i29.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[null]"+ "'", str40.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "[null]"+ "'", str42.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP45);

  }

  @Test
  public void test493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test493"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    java.lang.String str34 = strictlySortedSinglyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IP iP49 = singlyLinkedList35.get((int)'4');
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i55 = iP54.getFirst();
    java.lang.String str56 = iP54.toString();
    boolean b57 = singlyLinkedList35.contains(iP54);
    tp2.IPBan iPBan59 = new tp2.IPBan(iP54, (java.lang.Long)200000L);
    boolean b60 = strictlySortedSinglyLinkedList0.add(iPBan59);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList61 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan62 = null;
    boolean b63 = strictlySortedSinglyLinkedList61.contains(iPBan62);
    tp2.Server server64 = new tp2.Server();
    java.lang.String str65 = server64.toString();
    server64.update();
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i72 = iP71.getFirst();
    boolean b73 = server64.connect(iP71);
    boolean b74 = strictlySortedSinglyLinkedList61.removeFromIP(iP71);
    java.util.Set<tp2.IPBan> set_iPBan75 = null;
    boolean b76 = strictlySortedSinglyLinkedList61.repOk(set_iPBan75);
    java.lang.String str77 = strictlySortedSinglyLinkedList61.toString();
    tp2.Server server78 = new tp2.Server();
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP83.setSecond((java.lang.Integer)(-1));
    boolean b86 = server78.addException(iP83);
    iP83.setFourth((java.lang.Integer)0);
    java.lang.String str89 = iP83.toString();
    boolean b90 = strictlySortedSinglyLinkedList61.containsIP(iP83);
    tp2.IPBan iPBan92 = new tp2.IPBan(iP83, (java.lang.Long)1466185880799L);
    boolean b93 = strictlySortedSinglyLinkedList0.add(iPBan92);
    java.lang.Long long94 = iPBan92.expires;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "{}"+ "'", str34.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 10+ "'", i55.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "10.0.0.100"+ "'", str56.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i72 + "' != '" + 100+ "'", i72.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "{}"+ "'", str77.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "10.-1.0.0"+ "'", str89.equals("10.-1.0.0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1466185880799L+ "'", long94.equals(1466185880799L));

  }

  @Test
  public void test494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test494"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP5 = entry0.element;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.Entry entry7 = new tp2.Entry();
    java.lang.String str8 = entry7.toString();
    java.lang.String str9 = entry7.toString();
    tp2.Entry entry10 = entry7.next;
    entry6.next = entry7;
    entry0.next = entry6;
    tp2.Entry entry13 = entry0.next;
    java.lang.String str14 = entry0.toString();
    tp2.Entry entry15 = entry0.next;
    java.lang.String str16 = entry0.toString();
    tp2.IP iP17 = entry0.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[null]"+ "'", str8.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[null]"+ "'", str14.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[null]"+ "'", str16.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP17);

  }

  @Test
  public void test495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test495"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.SinglyLinkedList singlyLinkedList3 = new tp2.SinglyLinkedList();
    tp2.IP iP5 = singlyLinkedList3.get((int)' ');
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    entry6.element = iP11;
    boolean b15 = singlyLinkedList3.remove(iP11);
    tp2.IPBan iPBan17 = new tp2.IPBan(iP11, (java.lang.Long)1L);
    java.lang.String str18 = iPBan17.toString();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    java.lang.String str26 = iP23.toString();
    iPBan17.setIp(iP23);
    java.lang.Long long28 = iPBan17.getExpires();
    node0.element = iPBan17;
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.SinglyLinkedList singlyLinkedList32 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP33 = null;
    boolean b34 = singlyLinkedList32.repOk(set_iP33);
    java.util.Set<tp2.IP> set_iP35 = null;
    boolean b36 = singlyLinkedList32.repOk(set_iP35);
    tp2.SinglyLinkedList singlyLinkedList37 = new tp2.SinglyLinkedList();
    tp2.IP iP39 = singlyLinkedList37.get((int)' ');
    tp2.Entry entry40 = new tp2.Entry();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i46 = iP45.getFirst();
    java.lang.String str47 = iP45.toString();
    entry40.element = iP45;
    boolean b49 = singlyLinkedList37.remove(iP45);
    tp2.IP iP51 = singlyLinkedList37.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList52 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList52.size = 10;
    tp2.Server server55 = new tp2.Server();
    java.lang.String str56 = server55.toString();
    server55.update();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP62.setFirst((java.lang.Integer)1);
    java.lang.Integer i65 = iP62.getSecond();
    boolean b66 = server55.addException(iP62);
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = server55.addException(iP72);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b82 = server55.removeBan(iP81);
    iP81.setThird((java.lang.Integer)0);
    boolean b85 = strictlySortedSinglyLinkedList52.removeFromIP(iP81);
    boolean b86 = singlyLinkedList37.contains(iP81);
    boolean b87 = singlyLinkedList32.contains(iP81);
    boolean b88 = server30.removeBan(iP81);
    iPBan17.ip = iP81;
    java.lang.Long long90 = iPBan17.getExpires();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str18.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L+ "'", long28.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 10+ "'", i46.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "10.0.0.100"+ "'", str47.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 0+ "'", i65.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1L+ "'", long90.equals(1L));

  }

  @Test
  public void test496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test496"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i11 = iP10.getFirst();
    boolean b12 = server3.connect(iP10);
    boolean b13 = strictlySortedSinglyLinkedList0.removeFromIP(iP10);
    java.util.Set<tp2.IPBan> set_iPBan14 = null;
    boolean b15 = strictlySortedSinglyLinkedList0.repOk(set_iPBan14);
    tp2.IPBan iPBan17 = strictlySortedSinglyLinkedList0.get((-1));
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList18 = new tp2.StrictlySortedSinglyLinkedList();
    int i19 = strictlySortedSinglyLinkedList18.size;
    tp2.SinglyLinkedList singlyLinkedList20 = new tp2.SinglyLinkedList();
    tp2.IP iP22 = singlyLinkedList20.get((int)' ');
    tp2.Entry entry23 = new tp2.Entry();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i29 = iP28.getFirst();
    java.lang.String str30 = iP28.toString();
    entry23.element = iP28;
    boolean b32 = singlyLinkedList20.remove(iP28);
    tp2.IPBan iPBan34 = new tp2.IPBan(iP28, (java.lang.Long)1L);
    iPBan34.expires = 1466185871428L;
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    iPBan34.ip = iP47;
    boolean b53 = strictlySortedSinglyLinkedList18.contains(iPBan34);
    boolean b54 = strictlySortedSinglyLinkedList0.contains(iPBan34);
    java.lang.Long long55 = iPBan34.expires;
    iPBan34.setExpires((java.lang.Long)1466185904637L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 100+ "'", i11.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 10+ "'", i29.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "10.0.0.100"+ "'", str30.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1466185871428L+ "'", long55.equals(1466185871428L));

  }

  @Test
  public void test497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test497"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    java.lang.String str5 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node6 = new tp2.Node();
    tp2.IPBan iPBan7 = null;
    node6.element = iPBan7;
    tp2.IPBan iPBan9 = node6.element;
    strictlySortedSinglyLinkedList0.header = node6;
    tp2.IPBan iPBan12 = strictlySortedSinglyLinkedList0.get((-1));
    tp2.SinglyLinkedList singlyLinkedList13 = new tp2.SinglyLinkedList();
    tp2.IP iP15 = singlyLinkedList13.get((int)' ');
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = singlyLinkedList13.remove(iP21);
    tp2.IPBan iPBan27 = new tp2.IPBan(iP21, (java.lang.Long)1L);
    java.lang.String str28 = iPBan27.toString();
    java.lang.Long long29 = iPBan27.getExpires();
    iPBan27.expires = 0L;
    boolean b32 = strictlySortedSinglyLinkedList0.contains(iPBan27);
    tp2.IP iP33 = iPBan27.ip;
    tp2.IP iP34 = iPBan27.ip;
    java.lang.Integer i35 = iP34.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "{[null]}"+ "'", str5.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str28.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L+ "'", long29.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));

  }

  @Test
  public void test498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test498"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP4.setSecond((java.lang.Integer)(-1));
    java.lang.Integer i7 = iP4.getFourth();
    java.lang.Integer i8 = iP4.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i7 + "' != '" + 100+ "'", i7.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i8 + "' != '" + 100+ "'", i8.equals(100));

  }

  @Test
  public void test499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test499"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i5 = iP4.getFirst();
    java.lang.String str6 = iP4.toString();
    java.lang.String str7 = iP4.toString();
    iP4.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan11 = new tp2.IPBan(iP4, (java.lang.Long)0L);
    tp2.Server server12 = new tp2.Server();
    tp2.IP iP13 = null;
    boolean b14 = server12.connect(iP13);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b20 = server12.connect(iP19);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList21 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList21.size = 10;
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    server24.update();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP31.setFirst((java.lang.Integer)1);
    java.lang.Integer i34 = iP31.getSecond();
    boolean b35 = server24.addException(iP31);
    tp2.Entry entry36 = new tp2.Entry();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i42 = iP41.getFirst();
    java.lang.String str43 = iP41.toString();
    entry36.element = iP41;
    boolean b45 = server24.addException(iP41);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b51 = server24.removeBan(iP50);
    iP50.setThird((java.lang.Integer)0);
    boolean b54 = strictlySortedSinglyLinkedList21.removeFromIP(iP50);
    tp2.Server server55 = new tp2.Server();
    java.lang.String str56 = server55.toString();
    server55.update();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP62.setFirst((java.lang.Integer)1);
    java.lang.Integer i65 = iP62.getSecond();
    boolean b66 = server55.addException(iP62);
    boolean b67 = strictlySortedSinglyLinkedList21.removeFromIP(iP62);
    boolean b68 = server12.connect(iP62);
    tp2.Server server69 = new tp2.Server();
    tp2.IP iP70 = null;
    boolean b71 = server69.connect(iP70);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b77 = server69.connect(iP76);
    java.lang.Integer i78 = iP76.getFirst();
    boolean b79 = server12.connect(iP76);
    java.lang.Integer i80 = iP76.getFirst();
    iPBan11.ip = iP76;
    java.lang.Long long82 = iPBan11.expires;
    java.lang.Long long83 = iPBan11.getExpires();
    iPBan11.setExpires((java.lang.Long)1466185908257L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i5 + "' != '" + 10+ "'", i5.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "10.0.0.100"+ "'", str6.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 0+ "'", i34.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 10+ "'", i42.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 0+ "'", i65.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i78 + "' != '" + 100+ "'", i78.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 100+ "'", i80.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L+ "'", long82.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L+ "'", long83.equals(0L));

  }

  @Test
  public void test500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test500"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    java.lang.String str11 = iP9.toString();
    java.lang.String str12 = iP9.toString();
    iP9.setThird((java.lang.Integer)(-1));
    entry0.element = iP9;
    tp2.Node node16 = new tp2.Node();
    tp2.IPBan iPBan17 = null;
    node16.element = iPBan17;
    tp2.SinglyLinkedList singlyLinkedList19 = new tp2.SinglyLinkedList();
    tp2.IP iP21 = singlyLinkedList19.get((int)' ');
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = singlyLinkedList19.remove(iP27);
    tp2.IPBan iPBan33 = new tp2.IPBan(iP27, (java.lang.Long)1L);
    java.lang.String str34 = iPBan33.toString();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    java.lang.String str42 = iP39.toString();
    iPBan33.setIp(iP39);
    java.lang.Long long44 = iPBan33.getExpires();
    node16.element = iPBan33;
    iPBan33.expires = 1466185870380L;
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    java.lang.Integer i55 = iP52.getFourth();
    iPBan33.ip = iP52;
    entry0.element = iP52;
    tp2.Entry entry58 = new tp2.Entry();
    java.lang.String str59 = entry58.toString();
    java.lang.String str60 = entry58.toString();
    tp2.Entry entry61 = entry58.next;
    tp2.IP iP62 = entry58.element;
    tp2.IP iP63 = entry58.element;
    tp2.Entry entry64 = new tp2.Entry();
    tp2.Entry entry65 = new tp2.Entry();
    java.lang.String str66 = entry65.toString();
    java.lang.String str67 = entry65.toString();
    tp2.Entry entry68 = entry65.next;
    entry64.next = entry65;
    entry58.next = entry64;
    entry0.next = entry64;
    tp2.Entry entry72 = new tp2.Entry();
    java.lang.String str73 = entry72.toString();
    java.lang.String str74 = entry72.toString();
    tp2.Entry entry75 = new tp2.Entry();
    java.lang.String str76 = entry75.toString();
    entry72.next = entry75;
    tp2.Entry entry78 = entry72.next;
    tp2.IP iP79 = entry78.element;
    entry0.next = entry78;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "10.0.0.100"+ "'", str11.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str34.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L+ "'", long44.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 100+ "'", i55.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "[null]"+ "'", str59.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "[null]"+ "'", str60.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "[null]"+ "'", str66.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[null]"+ "'", str67.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "[null]"+ "'", str73.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "[null]"+ "'", str74.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "[null]"+ "'", str76.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP79);

  }

}
