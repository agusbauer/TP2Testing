package tp2;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }


    long long0 = tp2.Node.serialVersionUID;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long0 == 1L);

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }


    long long0 = tp2.IPBan.serialVersionUID;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long0 == 1L);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }


    long long0 = tp2.SinglyLinkedList.serialVersionUID;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long0 == 1L);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }


    long long0 = tp2.StubTime.serialVersionUID;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long0 == 1L);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }


    long long0 = tp2.Entry.serialVersionUID;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long0 == 1L);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }


    long long0 = tp2.RealTime.serialVersionUID;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long0 == 1L);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }


    korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer((int)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iFinitization1);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = entry0.next;
    // The following exception was thrown during execution in test generation
    try {
      tp2.Entry entry9 = entry8.next;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    tp2.IPBan iPBan5 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b6 = strictlySortedSinglyLinkedList0.contains(iPBan5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.SinglyLinkedList singlyLinkedList4 = new tp2.SinglyLinkedList();
    tp2.IP iP6 = singlyLinkedList4.get((int)' ');
    tp2.Entry entry7 = new tp2.Entry();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i13 = iP12.getFirst();
    java.lang.String str14 = iP12.toString();
    entry7.element = iP12;
    boolean b16 = singlyLinkedList4.remove(iP12);
    // The following exception was thrown during execution in test generation
    try {
      boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 10+ "'", i13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }


    long long0 = tp2.StrictlySortedSinglyLinkedList.serialVersionUID;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long0 == 1L);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)100);
    // The following exception was thrown during execution in test generation
    try {
      boolean b10 = strictlySortedSinglyLinkedList0.containsIP(iP9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    // The following exception was thrown during execution in test generation
    try {
      tp2.IP iP4 = entry3.element;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }


    long long0 = tp2.IP.serialVersionUID;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long0 == 1L);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    java.lang.Integer i13 = iP10.getFourth();
    // The following exception was thrown during execution in test generation
    try {
      boolean b14 = strictlySortedSinglyLinkedList0.removeFromIP(iP10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 100+ "'", i13.equals(100));

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.Entry entry4 = entry0.next;
    // The following exception was thrown during execution in test generation
    try {
      tp2.IP iP5 = entry4.element;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    // The following exception was thrown during execution in test generation
    try {
      boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    entry9.element = iP14;
    tp2.Entry entry17 = entry9.next;
    entry0.next = entry17;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str19 = entry17.toString();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry17);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    boolean b5 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Server server6 = new tp2.Server();
    tp2.IP iP7 = null;
    boolean b8 = server6.connect(iP7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b14 = server6.connect(iP13);
    java.lang.Integer i15 = iP13.getFirst();
    java.lang.Integer i16 = iP13.getFirst();
    // The following exception was thrown during execution in test generation
    try {
      boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 100+ "'", i15.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 100+ "'", i16.equals(100));

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node1 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node2 = new tp2.Node();
    tp2.IPBan iPBan3 = null;
    node2.element = iPBan3;
    tp2.IPBan iPBan5 = null;
    node2.element = iPBan5;
    strictlySortedSinglyLinkedList0.header = node2;
    int i8 = strictlySortedSinglyLinkedList0.size;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = entry0.next;
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    entry9.element = iP14;
    tp2.Entry entry17 = entry9.next;
    // The following exception was thrown during execution in test generation
    try {
      entry8.next = entry17;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry17);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get((int)' ');
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    boolean b17 = singlyLinkedList5.remove(iP13);
    tp2.IPBan iPBan19 = new tp2.IPBan(iP13, (java.lang.Long)1L);
    java.lang.String str20 = iPBan19.toString();
    iPBan19.setExpires((java.lang.Long)0L);
    java.lang.Long long23 = iPBan19.expires;
    tp2.Server server24 = new tp2.Server();
    tp2.IP iP25 = null;
    boolean b26 = server24.connect(iP25);
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b32 = server24.connect(iP31);
    java.lang.Integer i33 = iP31.getFirst();
    java.lang.Integer i34 = iP31.getFirst();
    iPBan19.setIp(iP31);
    // The following exception was thrown during execution in test generation
    try {
      boolean b36 = strictlySortedSinglyLinkedList0.add(iPBan19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L+ "'", long23.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 100+ "'", i33.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 100+ "'", i34.equals(100));

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP32 = null;
    boolean b33 = server31.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b39 = server31.connect(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP41 = null;
    boolean b42 = server40.connect(iP41);
    java.lang.String str43 = server40.toString();
    java.lang.String str44 = server40.toString();
    tp2.Entry entry45 = new tp2.Entry();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i51 = iP50.getFirst();
    java.lang.String str52 = iP50.toString();
    entry45.element = iP50;
    boolean b54 = server40.connect(iP50);
    boolean b55 = server31.removeException(iP50);
    boolean b56 = server3.connect(iP50);
    java.lang.Integer i57 = iP50.getFirst();
    iP50.setFirst((java.lang.Integer)100);
    // The following exception was thrown during execution in test generation
    try {
      boolean b60 = strictlySortedSinglyLinkedList0.removeFromIP(iP50);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str43.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 10+ "'", i51.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "10.0.0.100"+ "'", str52.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 10+ "'", i57.equals(10));

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList3 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList3.size = 10;
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    server6.update();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP13.setFirst((java.lang.Integer)1);
    java.lang.Integer i16 = iP13.getSecond();
    boolean b17 = server6.addException(iP13);
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = server6.addException(iP23);
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b33 = server6.removeBan(iP32);
    iP32.setThird((java.lang.Integer)0);
    boolean b36 = strictlySortedSinglyLinkedList3.removeFromIP(iP32);
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    server37.update();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP44.setFirst((java.lang.Integer)1);
    java.lang.Integer i47 = iP44.getSecond();
    boolean b48 = server37.addException(iP44);
    boolean b49 = strictlySortedSinglyLinkedList3.removeFromIP(iP44);
    singlyLinkedList0.add(iP44);
    tp2.IP iP52 = singlyLinkedList0.get(1);
    java.util.Set<tp2.IP> set_iP53 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b54 = singlyLinkedList0.repOk(set_iP53);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 0+ "'", i16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 0+ "'", i47.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP52);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    tp2.SinglyLinkedList singlyLinkedList3 = new tp2.SinglyLinkedList();
    tp2.IP iP5 = singlyLinkedList3.get(1);
    tp2.SinglyLinkedList singlyLinkedList6 = new tp2.SinglyLinkedList();
    tp2.IP iP8 = singlyLinkedList6.get((int)' ');
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    java.lang.String str16 = iP14.toString();
    entry9.element = iP14;
    boolean b18 = singlyLinkedList6.remove(iP14);
    boolean b19 = singlyLinkedList3.contains(iP14);
    // The following exception was thrown during execution in test generation
    try {
      boolean b20 = strictlySortedSinglyLinkedList0.removeFromIP(iP14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    tp2.IP iP3 = singlyLinkedList0.get(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP3);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.Server server5 = new tp2.Server();
    java.lang.String str6 = server5.toString();
    server5.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP12.setFirst((java.lang.Integer)1);
    java.lang.Integer i15 = iP12.getSecond();
    boolean b16 = server5.addException(iP12);
    tp2.Entry entry17 = new tp2.Entry();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i23 = iP22.getFirst();
    java.lang.String str24 = iP22.toString();
    entry17.element = iP22;
    boolean b26 = server5.addException(iP22);
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b32 = server5.removeBan(iP31);
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP34 = null;
    boolean b35 = server33.connect(iP34);
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b41 = server33.connect(iP40);
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP43 = null;
    boolean b44 = server42.connect(iP43);
    java.lang.String str45 = server42.toString();
    java.lang.String str46 = server42.toString();
    tp2.Entry entry47 = new tp2.Entry();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    entry47.element = iP52;
    boolean b56 = server42.connect(iP52);
    boolean b57 = server33.removeException(iP52);
    boolean b58 = server5.connect(iP52);
    server5.update();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i65 = iP64.getFirst();
    java.lang.String str66 = iP64.toString();
    boolean b67 = server5.removeException(iP64);
    // The following exception was thrown during execution in test generation
    try {
      boolean b68 = strictlySortedSinglyLinkedList0.containsIP(iP64);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str6.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 0+ "'", i15.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 10+ "'", i23.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "10.0.0.100"+ "'", str24.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 10+ "'", i65.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "10.0.0.100"+ "'", str66.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    tp2.SinglyLinkedList singlyLinkedList8 = new tp2.SinglyLinkedList();
    tp2.IP iP10 = singlyLinkedList8.get((int)' ');
    tp2.Entry entry11 = new tp2.Entry();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    entry11.element = iP16;
    boolean b20 = singlyLinkedList8.remove(iP16);
    tp2.IPBan iPBan22 = new tp2.IPBan(iP16, (java.lang.Long)1L);
    java.lang.String str23 = iPBan22.toString();
    tp2.Server server24 = new tp2.Server();
    tp2.IP iP25 = null;
    boolean b26 = server24.connect(iP25);
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b32 = server24.connect(iP31);
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP34 = null;
    boolean b35 = server33.connect(iP34);
    java.lang.String str36 = server33.toString();
    java.lang.String str37 = server33.toString();
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = server33.connect(iP43);
    boolean b48 = server24.removeException(iP43);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP50 = null;
    boolean b51 = server49.connect(iP50);
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b57 = server49.connect(iP56);
    java.lang.Integer i58 = iP56.getFirst();
    boolean b59 = server24.connect(iP56);
    iPBan22.ip = iP56;
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP65.setFirst((java.lang.Integer)1);
    java.lang.Integer i68 = iP65.getSecond();
    iPBan22.ip = iP65;
    // The following exception was thrown during execution in test generation
    try {
      boolean b70 = strictlySortedSinglyLinkedList0.add(iPBan22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str23.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 100+ "'", i58.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 0+ "'", i68.equals(0));

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }


    korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer((int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iFinitization1);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }


    // The following exception was thrown during execution in test generation
    try {
      korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    iP26.setThird((java.lang.Integer)0);
    iP26.setFourth((java.lang.Integer)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList32 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan33 = null;
    boolean b34 = strictlySortedSinglyLinkedList32.add(iPBan33);
    java.util.Set<tp2.IPBan> set_iPBan35 = null;
    boolean b36 = strictlySortedSinglyLinkedList32.repOk(set_iPBan35);
    boolean b37 = strictlySortedSinglyLinkedList32.isEmpty();
    boolean b38 = iP26.equals((java.lang.Object)b37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    tp2.Server server2 = new tp2.Server();
    java.lang.String str3 = server2.toString();
    server2.update();
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i10 = iP9.getFirst();
    boolean b11 = server2.connect(iP9);
    entry0.element = iP9;
    iP9.setSecond((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 100+ "'", i10.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    server0.update();
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i60 = iP59.getFirst();
    java.lang.String str61 = iP59.toString();
    boolean b62 = server0.removeException(iP59);
    iP59.setThird((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 10+ "'", i60.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "10.0.0.100"+ "'", str61.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    strictlySortedSinglyLinkedList0.size = (byte)100;
    tp2.SinglyLinkedList singlyLinkedList7 = new tp2.SinglyLinkedList();
    tp2.IP iP9 = singlyLinkedList7.get((int)' ');
    tp2.Entry entry10 = new tp2.Entry();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i16 = iP15.getFirst();
    java.lang.String str17 = iP15.toString();
    entry10.element = iP15;
    boolean b19 = singlyLinkedList7.remove(iP15);
    tp2.IPBan iPBan21 = new tp2.IPBan(iP15, (java.lang.Long)1L);
    java.lang.String str22 = iPBan21.toString();
    iPBan21.setExpires((java.lang.Long)0L);
    java.lang.Long long25 = iPBan21.expires;
    tp2.IP iP26 = iPBan21.getIp();
    // The following exception was thrown during execution in test generation
    try {
      boolean b27 = strictlySortedSinglyLinkedList0.contains(iPBan21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 10+ "'", i16.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "10.0.0.100"+ "'", str17.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str22.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L+ "'", long25.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP26);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b24 = server16.connect(iP23);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP26 = null;
    boolean b27 = server25.connect(iP26);
    java.lang.String str28 = server25.toString();
    java.lang.String str29 = server25.toString();
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server25.connect(iP35);
    boolean b40 = server16.removeException(iP35);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP42 = null;
    boolean b43 = server41.connect(iP42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b49 = server41.connect(iP48);
    java.lang.Integer i50 = iP48.getFirst();
    boolean b51 = server16.connect(iP48);
    iPBan14.ip = iP48;
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    java.lang.Integer i60 = iP57.getSecond();
    iPBan14.ip = iP57;
    java.lang.Long long62 = iPBan14.expires;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 100+ "'", i50.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 0+ "'", i60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L+ "'", long62.equals(1L));

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }


    // The following exception was thrown during execution in test generation
    try {
      korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    tp2.SinglyLinkedList singlyLinkedList3 = new tp2.SinglyLinkedList();
    tp2.IP iP5 = singlyLinkedList3.get((int)' ');
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    entry6.element = iP11;
    boolean b15 = singlyLinkedList3.remove(iP11);
    tp2.IPBan iPBan17 = new tp2.IPBan(iP11, (java.lang.Long)1L);
    // The following exception was thrown during execution in test generation
    try {
      boolean b18 = strictlySortedSinglyLinkedList0.containsIP(iP11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get((int)' ');
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    boolean b17 = singlyLinkedList5.remove(iP13);
    tp2.IPBan iPBan19 = new tp2.IPBan(iP13, (java.lang.Long)1L);
    java.lang.String str20 = iPBan19.toString();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    java.lang.String str28 = iP25.toString();
    iPBan19.setIp(iP25);
    java.lang.Long long30 = iPBan19.getExpires();
    // The following exception was thrown during execution in test generation
    try {
      boolean b31 = strictlySortedSinglyLinkedList0.contains(iPBan19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L+ "'", long30.equals(1L));

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = new tp2.Entry();
    java.lang.String str4 = entry3.toString();
    entry0.next = entry3;
    tp2.Entry entry6 = new tp2.Entry();
    java.lang.String str7 = entry6.toString();
    entry0.next = entry6;
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    server9.update();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP16.setFirst((java.lang.Integer)1);
    java.lang.Integer i19 = iP16.getSecond();
    boolean b20 = server9.addException(iP16);
    tp2.Entry entry21 = new tp2.Entry();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i27 = iP26.getFirst();
    java.lang.String str28 = iP26.toString();
    entry21.element = iP26;
    boolean b30 = server9.addException(iP26);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b36 = server9.removeBan(iP35);
    iP35.setThird((java.lang.Integer)0);
    entry0.element = iP35;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[null]"+ "'", str4.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[null]"+ "'", str7.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 0+ "'", i19.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    boolean b5 = strictlySortedSinglyLinkedList0.isEmpty();
    int i6 = strictlySortedSinglyLinkedList0.size;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    java.lang.String str41 = strictlySortedSinglyLinkedList7.toString();
    tp2.SinglyLinkedList singlyLinkedList42 = new tp2.SinglyLinkedList();
    tp2.IP iP44 = singlyLinkedList42.get((int)' ');
    tp2.Entry entry45 = new tp2.Entry();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i51 = iP50.getFirst();
    java.lang.String str52 = iP50.toString();
    entry45.element = iP50;
    boolean b54 = singlyLinkedList42.remove(iP50);
    tp2.IPBan iPBan56 = new tp2.IPBan(iP50, (java.lang.Long)1L);
    java.lang.String str57 = iPBan56.toString();
    boolean b58 = strictlySortedSinglyLinkedList7.contains(iPBan56);
    tp2.IP iP59 = iPBan56.getIp();
    // The following exception was thrown during execution in test generation
    try {
      boolean b60 = strictlySortedSinglyLinkedList0.add(iPBan56);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "{}"+ "'", str41.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 10+ "'", i51.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "10.0.0.100"+ "'", str52.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str57.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP59);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = new tp2.Node();
    tp2.IPBan iPBan5 = null;
    node4.element = iPBan5;
    tp2.IPBan iPBan7 = null;
    node4.element = iPBan7;
    tp2.IPBan iPBan9 = node4.element;
    strictlySortedSinglyLinkedList0.header = node4;
    strictlySortedSinglyLinkedList0.size = 0;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }


    // The following exception was thrown during execution in test generation
    try {
      korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    int i6 = strictlySortedSinglyLinkedList5.getSize();
    tp2.IPBan iPBan7 = null;
    boolean b8 = strictlySortedSinglyLinkedList5.add(iPBan7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node10 = strictlySortedSinglyLinkedList9.header;
    strictlySortedSinglyLinkedList5.header = node10;
    tp2.IPBan iPBan12 = node10.element;
    tp2.SinglyLinkedList singlyLinkedList13 = new tp2.SinglyLinkedList();
    tp2.IP iP15 = singlyLinkedList13.get((int)' ');
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = singlyLinkedList13.remove(iP21);
    tp2.IPBan iPBan27 = new tp2.IPBan(iP21, (java.lang.Long)1L);
    java.lang.String str28 = iPBan27.toString();
    iPBan27.setExpires((java.lang.Long)0L);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP35.setSecond((java.lang.Integer)(-1));
    iPBan27.ip = iP35;
    node10.element = iPBan27;
    // The following exception was thrown during execution in test generation
    try {
      boolean b40 = strictlySortedSinglyLinkedList0.contains(iPBan27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str28.equals("IPBan [ip=10.0.0.100, expires=1]"));

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    entry6.element = iP11;
    tp2.Entry entry14 = entry6.next;
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP16 = null;
    boolean b17 = server15.connect(iP16);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b23 = server15.connect(iP22);
    java.lang.Integer i24 = iP22.getFirst();
    entry6.element = iP22;
    entry1.next = entry6;
    tp2.Entry entry27 = new tp2.Entry();
    java.lang.String str28 = entry27.toString();
    java.lang.String str29 = entry27.toString();
    tp2.Entry entry30 = entry27.next;
    entry6.next = entry30;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList32 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList32.size = 10;
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    server35.update();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP42.setFirst((java.lang.Integer)1);
    java.lang.Integer i45 = iP42.getSecond();
    boolean b46 = server35.addException(iP42);
    tp2.Entry entry47 = new tp2.Entry();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    entry47.element = iP52;
    boolean b56 = server35.addException(iP52);
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b62 = server35.removeBan(iP61);
    iP61.setThird((java.lang.Integer)0);
    boolean b65 = strictlySortedSinglyLinkedList32.removeFromIP(iP61);
    tp2.Server server66 = new tp2.Server();
    java.lang.String str67 = server66.toString();
    server66.update();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP73.setFirst((java.lang.Integer)1);
    java.lang.Integer i76 = iP73.getSecond();
    boolean b77 = server66.addException(iP73);
    boolean b78 = strictlySortedSinglyLinkedList32.removeFromIP(iP73);
    int i79 = strictlySortedSinglyLinkedList32.size;
    strictlySortedSinglyLinkedList32.size = (byte)1;
    tp2.Server server82 = new tp2.Server();
    tp2.IP iP83 = null;
    boolean b84 = server82.connect(iP83);
    tp2.IP iP89 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b90 = server82.connect(iP89);
    java.lang.Integer i91 = iP89.getFirst();
    boolean b92 = strictlySortedSinglyLinkedList32.containsIP(iP89);
    // The following exception was thrown during execution in test generation
    try {
      entry30.element = iP89;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 100+ "'", i24.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[null]"+ "'", str28.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[null]"+ "'", str29.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 0+ "'", i45.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str67.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 0+ "'", i76.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i91 + "' != '" + 100+ "'", i91.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)'4');
    java.lang.String str15 = singlyLinkedList0.toString();
    java.lang.String str16 = singlyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "()"+ "'", str15.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "()"+ "'", str16.equals("()"));

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.Node node16 = node14.next;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str17 = node16.toString();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node16);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.Server server5 = new tp2.Server();
    tp2.IP iP6 = null;
    boolean b7 = server5.connect(iP6);
    java.lang.String str8 = server5.toString();
    java.lang.String str9 = server5.toString();
    tp2.IP iP10 = null;
    boolean b11 = server5.removeException(iP10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList12 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList12.size = 10;
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    server15.update();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP22.setFirst((java.lang.Integer)1);
    java.lang.Integer i25 = iP22.getSecond();
    boolean b26 = server15.addException(iP22);
    tp2.Entry entry27 = new tp2.Entry();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    entry27.element = iP32;
    boolean b36 = server15.addException(iP32);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b42 = server15.removeBan(iP41);
    iP41.setThird((java.lang.Integer)0);
    boolean b45 = strictlySortedSinglyLinkedList12.removeFromIP(iP41);
    tp2.Server server46 = new tp2.Server();
    java.lang.String str47 = server46.toString();
    server46.update();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP53.setFirst((java.lang.Integer)1);
    java.lang.Integer i56 = iP53.getSecond();
    boolean b57 = server46.addException(iP53);
    boolean b58 = strictlySortedSinglyLinkedList12.removeFromIP(iP53);
    boolean b59 = server5.connect(iP53);
    tp2.Entry entry60 = new tp2.Entry();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i66 = iP65.getFirst();
    entry60.element = iP65;
    tp2.Entry entry68 = entry60.next;
    tp2.Server server69 = new tp2.Server();
    tp2.IP iP70 = null;
    boolean b71 = server69.connect(iP70);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b77 = server69.connect(iP76);
    java.lang.Integer i78 = iP76.getFirst();
    entry60.element = iP76;
    iP76.setFourth((java.lang.Integer)100);
    boolean b82 = server5.removeException(iP76);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList83 = new tp2.StrictlySortedSinglyLinkedList();
    boolean b84 = iP76.equals((java.lang.Object)strictlySortedSinglyLinkedList83);
    java.lang.String str85 = strictlySortedSinglyLinkedList83.toString();
    tp2.Node node86 = strictlySortedSinglyLinkedList83.header;
    strictlySortedSinglyLinkedList0.header = node86;
    tp2.Node node88 = node86.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 0+ "'", i25.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 0+ "'", i56.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i66 + "' != '" + 10+ "'", i66.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i78 + "' != '" + 100+ "'", i78.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "{}"+ "'", str85.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node88);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.Entry entry4 = entry0.next;
    // The following exception was thrown during execution in test generation
    try {
      tp2.Entry entry5 = entry4.next;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.getIp();
    tp2.IP iP20 = iPBan14.ip;
    tp2.IP iP21 = iPBan14.getIp();
    java.lang.Integer i22 = iP21.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 100+ "'", i22.equals(100));

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.Server server55 = new tp2.Server();
    java.lang.String str56 = server55.toString();
    server55.update();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP62.setFirst((java.lang.Integer)1);
    java.lang.Integer i65 = iP62.getSecond();
    boolean b66 = server55.addException(iP62);
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = server55.addException(iP72);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b82 = server55.removeBan(iP81);
    iP81.setThird((java.lang.Integer)0);
    iP81.setFourth((java.lang.Integer)10);
    boolean b87 = server0.addException(iP81);
    iP81.setFourth((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 0+ "'", i65.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    entry6.element = iP11;
    tp2.Entry entry14 = entry6.next;
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP16 = null;
    boolean b17 = server15.connect(iP16);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b23 = server15.connect(iP22);
    java.lang.Integer i24 = iP22.getFirst();
    entry6.element = iP22;
    entry1.next = entry6;
    tp2.Entry entry27 = new tp2.Entry();
    java.lang.String str28 = entry27.toString();
    java.lang.String str29 = entry27.toString();
    tp2.Entry entry30 = entry27.next;
    entry6.next = entry30;
    // The following exception was thrown during execution in test generation
    try {
      tp2.IP iP32 = entry30.element;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 100+ "'", i24.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[null]"+ "'", str28.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[null]"+ "'", str29.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry30);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.IP iP4 = singlyLinkedList0.get((int)(byte)100);
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    java.lang.String str11 = iP9.toString();
    java.lang.String str12 = iP9.toString();
    iP9.setThird((java.lang.Integer)100);
    singlyLinkedList0.add(iP9);
    java.lang.Integer i16 = iP9.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "10.0.0.100"+ "'", str11.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 10+ "'", i16.equals(10));

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    java.lang.String str12 = server9.toString();
    java.lang.String str13 = server9.toString();
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    entry14.element = iP19;
    boolean b23 = server9.connect(iP19);
    boolean b24 = server0.removeException(iP19);
    boolean b26 = iP19.equals((java.lang.Object)(-1));
    iP19.setSecond((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    entry6.element = iP11;
    tp2.Entry entry14 = entry6.next;
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP16 = null;
    boolean b17 = server15.connect(iP16);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b23 = server15.connect(iP22);
    java.lang.Integer i24 = iP22.getFirst();
    entry6.element = iP22;
    entry1.next = entry6;
    tp2.Entry entry27 = new tp2.Entry();
    java.lang.String str28 = entry27.toString();
    java.lang.String str29 = entry27.toString();
    tp2.Entry entry30 = entry27.next;
    entry6.next = entry30;
    tp2.Entry entry32 = new tp2.Entry();
    tp2.Entry entry33 = new tp2.Entry();
    java.lang.String str34 = entry33.toString();
    java.lang.String str35 = entry33.toString();
    tp2.Entry entry36 = entry33.next;
    entry32.next = entry33;
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    entry38.element = iP43;
    tp2.Entry entry46 = entry38.next;
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP48 = null;
    boolean b49 = server47.connect(iP48);
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b55 = server47.connect(iP54);
    java.lang.Integer i56 = iP54.getFirst();
    entry38.element = iP54;
    entry33.next = entry38;
    // The following exception was thrown during execution in test generation
    try {
      entry30.next = entry33;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 100+ "'", i24.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[null]"+ "'", str28.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[null]"+ "'", str29.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[null]"+ "'", str34.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[null]"+ "'", str35.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 100+ "'", i56.equals(100));

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    entry9.element = iP14;
    tp2.Entry entry17 = entry9.next;
    entry0.next = entry17;
    // The following exception was thrown during execution in test generation
    try {
      tp2.IP iP19 = entry17.element;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry17);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)1);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get(1);
    java.lang.String str3 = singlyLinkedList0.toString();
    boolean b4 = singlyLinkedList0.isEmpty();
    tp2.Server server5 = new tp2.Server();
    tp2.IP iP6 = null;
    boolean b7 = server5.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b13 = server5.connect(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP15 = null;
    boolean b16 = server14.connect(iP15);
    java.lang.String str17 = server14.toString();
    java.lang.String str18 = server14.toString();
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = server14.connect(iP24);
    boolean b29 = server5.removeException(iP24);
    java.lang.Integer i30 = iP24.getFirst();
    boolean b31 = singlyLinkedList0.contains(iP24);
    java.util.Set<tp2.IP> set_iP32 = null;
    boolean b33 = singlyLinkedList0.repOk(set_iP32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    boolean b39 = iP5.equals((java.lang.Object)iPBan26);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    int i41 = singlyLinkedList40.getSize();
    java.lang.String str42 = singlyLinkedList40.toString();
    int i43 = singlyLinkedList40.getSize();
    java.util.Set<tp2.IP> set_iP44 = null;
    boolean b45 = singlyLinkedList40.repOk(set_iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b51 = singlyLinkedList40.remove(iP50);
    iPBan26.setIp(iP50);
    tp2.IP iP53 = iPBan26.getIp();
    java.lang.String str54 = iP53.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "()"+ "'", str42.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "100.10.-1.10"+ "'", str54.equals("100.10.-1.10"));

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    tp2.IPBan iPBan7 = strictlySortedSinglyLinkedList0.get((int)'4');
    java.util.Set<tp2.IPBan> set_iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList0.repOk(set_iPBan8);
    tp2.SinglyLinkedList singlyLinkedList10 = new tp2.SinglyLinkedList();
    tp2.IP iP12 = singlyLinkedList10.get((int)' ');
    tp2.Entry entry13 = new tp2.Entry();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i19 = iP18.getFirst();
    java.lang.String str20 = iP18.toString();
    entry13.element = iP18;
    boolean b22 = singlyLinkedList10.remove(iP18);
    tp2.IPBan iPBan24 = new tp2.IPBan(iP18, (java.lang.Long)1L);
    java.lang.String str25 = iPBan24.toString();
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP27 = null;
    boolean b28 = server26.connect(iP27);
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b34 = server26.connect(iP33);
    tp2.Server server35 = new tp2.Server();
    tp2.IP iP36 = null;
    boolean b37 = server35.connect(iP36);
    java.lang.String str38 = server35.toString();
    java.lang.String str39 = server35.toString();
    tp2.Entry entry40 = new tp2.Entry();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i46 = iP45.getFirst();
    java.lang.String str47 = iP45.toString();
    entry40.element = iP45;
    boolean b49 = server35.connect(iP45);
    boolean b50 = server26.removeException(iP45);
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP52 = null;
    boolean b53 = server51.connect(iP52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b59 = server51.connect(iP58);
    java.lang.Integer i60 = iP58.getFirst();
    boolean b61 = server26.connect(iP58);
    iPBan24.ip = iP58;
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP67.setFirst((java.lang.Integer)1);
    java.lang.Integer i70 = iP67.getSecond();
    iPBan24.ip = iP67;
    // The following exception was thrown during execution in test generation
    try {
      boolean b72 = strictlySortedSinglyLinkedList0.add(iPBan24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 10+ "'", i19.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "10.0.0.100"+ "'", str20.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str25.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 10+ "'", i46.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "10.0.0.100"+ "'", str47.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 100+ "'", i60.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 0+ "'", i70.equals(0));

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList3 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList3.size = 10;
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    server6.update();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP13.setFirst((java.lang.Integer)1);
    java.lang.Integer i16 = iP13.getSecond();
    boolean b17 = server6.addException(iP13);
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = server6.addException(iP23);
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b33 = server6.removeBan(iP32);
    iP32.setThird((java.lang.Integer)0);
    boolean b36 = strictlySortedSinglyLinkedList3.removeFromIP(iP32);
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    server37.update();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP44.setFirst((java.lang.Integer)1);
    java.lang.Integer i47 = iP44.getSecond();
    boolean b48 = server37.addException(iP44);
    boolean b49 = strictlySortedSinglyLinkedList3.removeFromIP(iP44);
    singlyLinkedList0.add(iP44);
    tp2.IP iP52 = singlyLinkedList0.get(1);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    singlyLinkedList0.add(iP57);
    tp2.SinglyLinkedList singlyLinkedList61 = new tp2.SinglyLinkedList();
    tp2.IP iP63 = singlyLinkedList61.get((int)' ');
    tp2.Entry entry64 = new tp2.Entry();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i70 = iP69.getFirst();
    java.lang.String str71 = iP69.toString();
    entry64.element = iP69;
    boolean b73 = singlyLinkedList61.remove(iP69);
    tp2.IPBan iPBan75 = new tp2.IPBan(iP69, (java.lang.Long)1L);
    iPBan75.expires = 1466185871428L;
    tp2.Server server78 = new tp2.Server();
    tp2.IP iP79 = null;
    boolean b80 = server78.connect(iP79);
    java.lang.String str81 = server78.toString();
    java.lang.String str82 = server78.toString();
    tp2.Entry entry83 = new tp2.Entry();
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i89 = iP88.getFirst();
    java.lang.String str90 = iP88.toString();
    entry83.element = iP88;
    boolean b92 = server78.connect(iP88);
    iPBan75.ip = iP88;
    tp2.IP iP94 = iPBan75.ip;
    boolean b95 = singlyLinkedList0.remove(iP94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 0+ "'", i16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 0+ "'", i47.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 10+ "'", i70.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "10.0.0.100"+ "'", str71.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str81.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str82.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i89 + "' != '" + 10+ "'", i89.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "10.0.0.100"+ "'", str90.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    boolean b10 = server0.removeException(iP7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList11.contains(iPBan12);
    int i14 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan16 = strictlySortedSinglyLinkedList11.get((int)'#');
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP21.setSecond((java.lang.Integer)(-1));
    boolean b24 = strictlySortedSinglyLinkedList11.removeFromIP(iP21);
    boolean b25 = server0.removeBan(iP21);
    tp2.SinglyLinkedList singlyLinkedList26 = new tp2.SinglyLinkedList();
    tp2.IP iP28 = singlyLinkedList26.get((int)' ');
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = singlyLinkedList26.remove(iP34);
    boolean b39 = iP21.equals((java.lang.Object)iP34);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    tp2.IP iP42 = singlyLinkedList40.get((int)' ');
    tp2.Entry entry43 = new tp2.Entry();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i49 = iP48.getFirst();
    java.lang.String str50 = iP48.toString();
    entry43.element = iP48;
    boolean b52 = singlyLinkedList40.remove(iP48);
    tp2.IPBan iPBan54 = new tp2.IPBan(iP48, (java.lang.Long)1L);
    java.lang.String str55 = iPBan54.toString();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    java.lang.String str63 = iP60.toString();
    iPBan54.setIp(iP60);
    java.lang.Long long65 = iPBan54.getExpires();
    boolean b66 = iP21.equals((java.lang.Object)long65);
    iP21.setFourth((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i49 + "' != '" + 10+ "'", i49.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "10.0.0.100"+ "'", str50.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str55.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "10.0.0.100"+ "'", str63.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L+ "'", long65.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    tp2.Node node5 = strictlySortedSinglyLinkedList0.header;
    tp2.Entry entry6 = new tp2.Entry();
    java.lang.String str7 = entry6.toString();
    java.lang.String str8 = entry6.toString();
    tp2.Entry entry9 = entry6.next;
    tp2.IP iP10 = entry6.element;
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i16 = iP15.getFirst();
    java.lang.String str17 = iP15.toString();
    java.lang.String str18 = iP15.toString();
    iP15.setThird((java.lang.Integer)(-1));
    entry6.element = iP15;
    tp2.Node node22 = new tp2.Node();
    tp2.IPBan iPBan23 = null;
    node22.element = iPBan23;
    tp2.SinglyLinkedList singlyLinkedList25 = new tp2.SinglyLinkedList();
    tp2.IP iP27 = singlyLinkedList25.get((int)' ');
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = singlyLinkedList25.remove(iP33);
    tp2.IPBan iPBan39 = new tp2.IPBan(iP33, (java.lang.Long)1L);
    java.lang.String str40 = iPBan39.toString();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i46 = iP45.getFirst();
    java.lang.String str47 = iP45.toString();
    java.lang.String str48 = iP45.toString();
    iPBan39.setIp(iP45);
    java.lang.Long long50 = iPBan39.getExpires();
    node22.element = iPBan39;
    iPBan39.expires = 1466185870380L;
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i59 = iP58.getFirst();
    java.lang.String str60 = iP58.toString();
    java.lang.Integer i61 = iP58.getFourth();
    iPBan39.ip = iP58;
    entry6.element = iP58;
    // The following exception was thrown during execution in test generation
    try {
      boolean b64 = strictlySortedSinglyLinkedList0.containsIP(iP58);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[null]"+ "'", str7.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[null]"+ "'", str8.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 10+ "'", i16.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "10.0.0.100"+ "'", str17.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str40.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 10+ "'", i46.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "10.0.0.100"+ "'", str47.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "10.0.0.100"+ "'", str48.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L+ "'", long50.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 10+ "'", i59.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "10.0.0.100"+ "'", str60.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 100+ "'", i61.equals(100));

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b6 = server0.addException(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    java.lang.String str9 = server8.toString();
    server8.update();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP15.setFirst((java.lang.Integer)1);
    java.lang.Integer i18 = iP15.getSecond();
    boolean b19 = server8.addException(iP15);
    tp2.Entry entry20 = new tp2.Entry();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    entry20.element = iP25;
    boolean b29 = server8.addException(iP25);
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b35 = server8.removeBan(iP34);
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP37 = null;
    boolean b38 = server36.connect(iP37);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b44 = server36.connect(iP43);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP46 = null;
    boolean b47 = server45.connect(iP46);
    java.lang.String str48 = server45.toString();
    java.lang.String str49 = server45.toString();
    tp2.Entry entry50 = new tp2.Entry();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i56 = iP55.getFirst();
    java.lang.String str57 = iP55.toString();
    entry50.element = iP55;
    boolean b59 = server45.connect(iP55);
    boolean b60 = server36.removeException(iP55);
    boolean b61 = server8.connect(iP55);
    java.lang.Integer i62 = iP55.getFirst();
    iP55.setSecond((java.lang.Integer)0);
    boolean b65 = server0.connect(iP55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 0+ "'", i18.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str49.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 10+ "'", i56.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "10.0.0.100"+ "'", str57.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i62 + "' != '" + 10+ "'", i62.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    tp2.Server server4 = new tp2.Server();
    tp2.IP iP5 = null;
    boolean b6 = server4.connect(iP5);
    java.lang.String str7 = server4.toString();
    java.lang.String str8 = server4.toString();
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    java.lang.String str16 = iP14.toString();
    entry9.element = iP14;
    boolean b18 = server4.connect(iP14);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    java.lang.String str26 = iP23.toString();
    boolean b27 = server4.removeBan(iP23);
    iP23.setFirst((java.lang.Integer)10);
    boolean b30 = server0.removeException(iP23);
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP32 = null;
    boolean b33 = server31.connect(iP32);
    java.lang.String str34 = server31.toString();
    java.lang.String str35 = server31.toString();
    tp2.IP iP36 = null;
    boolean b37 = server31.removeException(iP36);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList38 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList38.size = 10;
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    tp2.Entry entry53 = new tp2.Entry();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i59 = iP58.getFirst();
    java.lang.String str60 = iP58.toString();
    entry53.element = iP58;
    boolean b62 = server41.addException(iP58);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b68 = server41.removeBan(iP67);
    iP67.setThird((java.lang.Integer)0);
    boolean b71 = strictlySortedSinglyLinkedList38.removeFromIP(iP67);
    tp2.Server server72 = new tp2.Server();
    java.lang.String str73 = server72.toString();
    server72.update();
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP79.setFirst((java.lang.Integer)1);
    java.lang.Integer i82 = iP79.getSecond();
    boolean b83 = server72.addException(iP79);
    boolean b84 = strictlySortedSinglyLinkedList38.removeFromIP(iP79);
    boolean b85 = server31.connect(iP79);
    tp2.RealTime realTime86 = new tp2.RealTime();
    long long87 = realTime86.getCurrentTime();
    server31.setTime((tp2.ITime)realTime86);
    server0.setTime((tp2.ITime)realTime86);
    tp2.IP iP94 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b95 = server0.removeException(iP94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 10+ "'", i59.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "10.0.0.100"+ "'", str60.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str73.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i82 + "' != '" + 0+ "'", i82.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long87 == 1466185874497L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.size;
    int i5 = strictlySortedSinglyLinkedList0.getSize();
    int i6 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str7 = strictlySortedSinglyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList8 = new tp2.SinglyLinkedList();
    tp2.IP iP10 = singlyLinkedList8.get((int)' ');
    tp2.Entry entry11 = new tp2.Entry();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    entry11.element = iP16;
    boolean b20 = singlyLinkedList8.remove(iP16);
    tp2.IPBan iPBan22 = new tp2.IPBan(iP16, (java.lang.Long)1L);
    java.lang.String str23 = iPBan22.toString();
    iPBan22.setExpires((java.lang.Long)0L);
    java.lang.Long long26 = iPBan22.expires;
    tp2.IP iP27 = iPBan22.getIp();
    tp2.IP iP28 = iPBan22.ip;
    // The following exception was thrown during execution in test generation
    try {
      boolean b29 = strictlySortedSinglyLinkedList0.add(iPBan22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "{[null]}"+ "'", str7.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str23.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L+ "'", long26.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP28);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    boolean b23 = iP17.equals((java.lang.Object)(byte)100);
    java.lang.Integer i24 = iP17.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    boolean b5 = strictlySortedSinglyLinkedList0.isEmpty();
    int i6 = strictlySortedSinglyLinkedList0.size;
    int i7 = strictlySortedSinglyLinkedList0.size;
    int i8 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan9 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b10 = strictlySortedSinglyLinkedList0.contains(iPBan9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList3 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList3.size = 10;
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    server6.update();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP13.setFirst((java.lang.Integer)1);
    java.lang.Integer i16 = iP13.getSecond();
    boolean b17 = server6.addException(iP13);
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = server6.addException(iP23);
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b33 = server6.removeBan(iP32);
    iP32.setThird((java.lang.Integer)0);
    boolean b36 = strictlySortedSinglyLinkedList3.removeFromIP(iP32);
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    server37.update();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP44.setFirst((java.lang.Integer)1);
    java.lang.Integer i47 = iP44.getSecond();
    boolean b48 = server37.addException(iP44);
    boolean b49 = strictlySortedSinglyLinkedList3.removeFromIP(iP44);
    singlyLinkedList0.add(iP44);
    tp2.IP iP52 = singlyLinkedList0.get(1);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    singlyLinkedList0.add(iP57);
    tp2.IP iP61 = null;
    // The following exception was thrown during execution in test generation
    try {
      singlyLinkedList0.add(iP61);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 0+ "'", i16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 0+ "'", i47.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP52);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    entry6.element = iP11;
    tp2.Entry entry14 = entry6.next;
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP16 = null;
    boolean b17 = server15.connect(iP16);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b23 = server15.connect(iP22);
    java.lang.Integer i24 = iP22.getFirst();
    entry6.element = iP22;
    entry1.next = entry6;
    tp2.Entry entry27 = new tp2.Entry();
    java.lang.String str28 = entry27.toString();
    java.lang.String str29 = entry27.toString();
    tp2.Entry entry30 = entry27.next;
    entry6.next = entry30;
    tp2.Entry entry32 = new tp2.Entry();
    java.lang.String str33 = entry32.toString();
    java.lang.String str34 = entry32.toString();
    tp2.Entry entry35 = entry32.next;
    tp2.IP iP36 = entry32.element;
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i42 = iP41.getFirst();
    java.lang.String str43 = iP41.toString();
    java.lang.String str44 = iP41.toString();
    iP41.setThird((java.lang.Integer)(-1));
    entry32.element = iP41;
    tp2.IP iP48 = entry32.element;
    // The following exception was thrown during execution in test generation
    try {
      entry30.next = entry32;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 100+ "'", i24.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[null]"+ "'", str28.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[null]"+ "'", str29.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "[null]"+ "'", str33.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[null]"+ "'", str34.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 10+ "'", i42.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "10.0.0.100"+ "'", str44.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP48);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    boolean b10 = server0.removeException(iP7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList11.contains(iPBan12);
    int i14 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan16 = strictlySortedSinglyLinkedList11.get((int)'#');
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP21.setSecond((java.lang.Integer)(-1));
    boolean b24 = strictlySortedSinglyLinkedList11.removeFromIP(iP21);
    boolean b25 = server0.removeBan(iP21);
    tp2.SinglyLinkedList singlyLinkedList26 = new tp2.SinglyLinkedList();
    tp2.IP iP28 = singlyLinkedList26.get((int)' ');
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = singlyLinkedList26.remove(iP34);
    boolean b39 = iP21.equals((java.lang.Object)iP34);
    iP34.setFirst((java.lang.Integer)1);
    java.lang.Integer i42 = iP34.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 0+ "'", i42.equals(0));

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.Node node16 = new tp2.Node();
    tp2.IPBan iPBan17 = null;
    node16.element = iPBan17;
    tp2.IPBan iPBan19 = node16.element;
    tp2.IPBan iPBan20 = node16.element;
    node14.next = node16;
    tp2.IPBan iPBan22 = node16.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan22);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.Server server55 = new tp2.Server();
    java.lang.String str56 = server55.toString();
    server55.update();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP62.setFirst((java.lang.Integer)1);
    java.lang.Integer i65 = iP62.getSecond();
    boolean b66 = server55.addException(iP62);
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = server55.addException(iP72);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b82 = server55.removeBan(iP81);
    iP81.setThird((java.lang.Integer)0);
    iP81.setFourth((java.lang.Integer)10);
    boolean b87 = server0.addException(iP81);
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP92.setThird((java.lang.Integer)1);
    java.lang.Object obj95 = null;
    boolean b96 = iP92.equals(obj95);
    boolean b97 = server0.removeException(iP92);
    iP92.setSecond((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 0+ "'", i65.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    tp2.IPBan iPBan7 = strictlySortedSinglyLinkedList0.get((int)'4');
    int i8 = strictlySortedSinglyLinkedList0.size;
    java.lang.String str9 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "{[null]}"+ "'", str9.equals("{[null]}"));

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.IP iP9 = entry0.element;
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP11 = null;
    boolean b12 = server10.connect(iP11);
    java.lang.String str13 = server10.toString();
    java.lang.String str14 = server10.toString();
    tp2.SinglyLinkedList singlyLinkedList15 = new tp2.SinglyLinkedList();
    tp2.IP iP17 = singlyLinkedList15.get((int)' ');
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = singlyLinkedList15.remove(iP23);
    tp2.IPBan iPBan29 = new tp2.IPBan(iP23, (java.lang.Long)1L);
    java.lang.String str30 = iPBan29.toString();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    java.lang.String str38 = iP35.toString();
    iPBan29.setIp(iP35);
    java.lang.Integer i40 = iP35.getFirst();
    boolean b41 = server10.removeException(iP35);
    iP35.setThird((java.lang.Integer)(-1));
    entry0.element = iP35;
    tp2.Entry entry45 = entry0.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str30.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry45);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    server16.update();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP23.setFirst((java.lang.Integer)1);
    java.lang.Integer i26 = iP23.getSecond();
    boolean b27 = server16.addException(iP23);
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = server16.addException(iP33);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b43 = server16.removeBan(iP42);
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP45 = null;
    boolean b46 = server44.connect(iP45);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b52 = server44.connect(iP51);
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP54 = null;
    boolean b55 = server53.connect(iP54);
    java.lang.String str56 = server53.toString();
    java.lang.String str57 = server53.toString();
    tp2.Entry entry58 = new tp2.Entry();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i64 = iP63.getFirst();
    java.lang.String str65 = iP63.toString();
    entry58.element = iP63;
    boolean b67 = server53.connect(iP63);
    boolean b68 = server44.removeException(iP63);
    boolean b69 = server16.connect(iP63);
    java.lang.Integer i70 = iP63.getFirst();
    boolean b71 = strictlySortedSinglyLinkedList0.removeFromIP(iP63);
    strictlySortedSinglyLinkedList0.size = (byte)100;
    int i74 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str57.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 10+ "'", i64.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "10.0.0.100"+ "'", str65.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 10+ "'", i70.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 100);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b24 = server16.connect(iP23);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP26 = null;
    boolean b27 = server25.connect(iP26);
    java.lang.String str28 = server25.toString();
    java.lang.String str29 = server25.toString();
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server25.connect(iP35);
    boolean b40 = server16.removeException(iP35);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP42 = null;
    boolean b43 = server41.connect(iP42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b49 = server41.connect(iP48);
    java.lang.Integer i50 = iP48.getFirst();
    boolean b51 = server16.connect(iP48);
    iPBan14.ip = iP48;
    java.lang.Integer i53 = iP48.getFirst();
    iP48.setFirst((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 100+ "'", i50.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 100+ "'", i53.equals(100));

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node1 = strictlySortedSinglyLinkedList0.header;
    java.lang.String str2 = node1.toString();
    tp2.IPBan iPBan3 = node1.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan3);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    tp2.IPBan iPBan4 = strictlySortedSinglyLinkedList0.get((int)(byte)100);
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get((int)' ');
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    boolean b17 = singlyLinkedList5.remove(iP13);
    tp2.IPBan iPBan19 = new tp2.IPBan(iP13, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList20 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan21 = null;
    boolean b22 = strictlySortedSinglyLinkedList20.contains(iPBan21);
    int i23 = strictlySortedSinglyLinkedList20.getSize();
    tp2.IPBan iPBan25 = strictlySortedSinglyLinkedList20.get((int)'#');
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP30.setSecond((java.lang.Integer)(-1));
    boolean b33 = strictlySortedSinglyLinkedList20.removeFromIP(iP30);
    iPBan19.ip = iP30;
    // The following exception was thrown during execution in test generation
    try {
      boolean b35 = strictlySortedSinglyLinkedList0.removeFromIP(iP30);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP5 = entry0.element;
    tp2.Entry entry6 = null;
    entry0.next = entry6;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    int i3 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    int i6 = singlyLinkedList0.getSize();
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP8 = null;
    boolean b9 = server7.connect(iP8);
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b15 = server7.connect(iP14);
    java.lang.Integer i16 = iP14.getFirst();
    boolean b17 = singlyLinkedList0.contains(iP14);
    iP14.setFourth((java.lang.Integer)32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 100+ "'", i16.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan6 = strictlySortedSinglyLinkedList0.get(100);
    int i7 = strictlySortedSinglyLinkedList0.size;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }


    tp2.Node node0 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList1 = new tp2.StrictlySortedSinglyLinkedList();
    int i2 = strictlySortedSinglyLinkedList1.getSize();
    tp2.IPBan iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList1.add(iPBan3);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node6 = strictlySortedSinglyLinkedList5.header;
    strictlySortedSinglyLinkedList1.header = node6;
    node0.next = node6;
    tp2.IPBan iPBan9 = null;
    node0.element = iPBan9;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    int i12 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan13 = null;
    boolean b14 = strictlySortedSinglyLinkedList11.add(iPBan13);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node16 = strictlySortedSinglyLinkedList15.header;
    strictlySortedSinglyLinkedList11.header = node16;
    tp2.IPBan iPBan18 = node16.element;
    node0.next = node16;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList20 = new tp2.StrictlySortedSinglyLinkedList();
    int i21 = strictlySortedSinglyLinkedList20.getSize();
    tp2.IPBan iPBan22 = null;
    boolean b23 = strictlySortedSinglyLinkedList20.add(iPBan22);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList24 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node25 = strictlySortedSinglyLinkedList24.header;
    strictlySortedSinglyLinkedList20.header = node25;
    strictlySortedSinglyLinkedList20.size = 0;
    tp2.Node node29 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList30 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList30.size = 10;
    tp2.Server server33 = new tp2.Server();
    java.lang.String str34 = server33.toString();
    server33.update();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP40.setFirst((java.lang.Integer)1);
    java.lang.Integer i43 = iP40.getSecond();
    boolean b44 = server33.addException(iP40);
    tp2.Entry entry45 = new tp2.Entry();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i51 = iP50.getFirst();
    java.lang.String str52 = iP50.toString();
    entry45.element = iP50;
    boolean b54 = server33.addException(iP50);
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b60 = server33.removeBan(iP59);
    iP59.setThird((java.lang.Integer)0);
    boolean b63 = strictlySortedSinglyLinkedList30.removeFromIP(iP59);
    java.lang.String str64 = strictlySortedSinglyLinkedList30.toString();
    tp2.SinglyLinkedList singlyLinkedList65 = new tp2.SinglyLinkedList();
    tp2.IP iP67 = singlyLinkedList65.get((int)' ');
    tp2.Entry entry68 = new tp2.Entry();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i74 = iP73.getFirst();
    java.lang.String str75 = iP73.toString();
    entry68.element = iP73;
    boolean b77 = singlyLinkedList65.remove(iP73);
    tp2.IPBan iPBan79 = new tp2.IPBan(iP73, (java.lang.Long)1L);
    java.lang.String str80 = iPBan79.toString();
    boolean b81 = strictlySortedSinglyLinkedList30.contains(iPBan79);
    node29.element = iPBan79;
    tp2.IPBan iPBan83 = node29.element;
    boolean b84 = strictlySortedSinglyLinkedList20.add(iPBan83);
    node0.element = iPBan83;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 0+ "'", i43.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 10+ "'", i51.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "10.0.0.100"+ "'", str52.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "{}"+ "'", str64.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i74 + "' != '" + 10+ "'", i74.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "10.0.0.100"+ "'", str75.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str80.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    java.lang.String str34 = strictlySortedSinglyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    java.lang.String str50 = iPBan49.toString();
    boolean b51 = strictlySortedSinglyLinkedList0.contains(iPBan49);
    tp2.SinglyLinkedList singlyLinkedList52 = new tp2.SinglyLinkedList();
    tp2.IP iP54 = singlyLinkedList52.get((int)' ');
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    entry55.element = iP60;
    boolean b64 = singlyLinkedList52.remove(iP60);
    tp2.IPBan iPBan66 = new tp2.IPBan(iP60, (java.lang.Long)1L);
    tp2.Server server67 = new tp2.Server();
    java.lang.String str68 = server67.toString();
    server67.update();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i75 = iP74.getFirst();
    boolean b76 = server67.connect(iP74);
    iPBan66.ip = iP74;
    tp2.IP iP78 = iPBan66.ip;
    boolean b79 = strictlySortedSinglyLinkedList0.add(iPBan66);
    java.util.Set<tp2.IPBan> set_iPBan80 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b81 = strictlySortedSinglyLinkedList0.repOk(set_iPBan80);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "{}"+ "'", str34.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str68.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 100+ "'", i75.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    boolean b10 = server0.removeException(iP7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList11.contains(iPBan12);
    int i14 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan16 = strictlySortedSinglyLinkedList11.get((int)'#');
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP21.setSecond((java.lang.Integer)(-1));
    boolean b24 = strictlySortedSinglyLinkedList11.removeFromIP(iP21);
    boolean b25 = server0.removeBan(iP21);
    tp2.SinglyLinkedList singlyLinkedList26 = new tp2.SinglyLinkedList();
    tp2.IP iP28 = singlyLinkedList26.get((int)' ');
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = singlyLinkedList26.remove(iP34);
    boolean b39 = iP21.equals((java.lang.Object)iP34);
    java.lang.Integer i40 = iP21.getSecond();
    java.lang.Integer i41 = iP21.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + (-1)+ "'", i40.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i41 + "' != '" + 10+ "'", i41.equals(10));

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)0);
    java.lang.Integer i5 = iP4.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i5 + "' != '" + 0+ "'", i5.equals(0));

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.Integer i15 = iP8.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 0+ "'", i15.equals(0));

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    boolean b5 = strictlySortedSinglyLinkedList0.isEmpty();
    boolean b6 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.SinglyLinkedList singlyLinkedList7 = new tp2.SinglyLinkedList();
    tp2.IP iP9 = singlyLinkedList7.get((int)' ');
    tp2.Entry entry10 = new tp2.Entry();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i16 = iP15.getFirst();
    java.lang.String str17 = iP15.toString();
    entry10.element = iP15;
    boolean b19 = singlyLinkedList7.remove(iP15);
    tp2.IPBan iPBan21 = new tp2.IPBan(iP15, (java.lang.Long)1L);
    // The following exception was thrown during execution in test generation
    try {
      boolean b22 = strictlySortedSinglyLinkedList0.containsIP(iP15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 10+ "'", i16.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "10.0.0.100"+ "'", str17.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList9.size = 10;
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    server12.update();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP19.setFirst((java.lang.Integer)1);
    java.lang.Integer i22 = iP19.getSecond();
    boolean b23 = server12.addException(iP19);
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = server12.addException(iP29);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b39 = server12.removeBan(iP38);
    iP38.setThird((java.lang.Integer)0);
    boolean b42 = strictlySortedSinglyLinkedList9.removeFromIP(iP38);
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    server43.update();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP50.setFirst((java.lang.Integer)1);
    java.lang.Integer i53 = iP50.getSecond();
    boolean b54 = server43.addException(iP50);
    boolean b55 = strictlySortedSinglyLinkedList9.removeFromIP(iP50);
    boolean b56 = server0.connect(iP50);
    java.lang.String str57 = server0.toString();
    tp2.SinglyLinkedList singlyLinkedList58 = new tp2.SinglyLinkedList();
    tp2.IP iP60 = singlyLinkedList58.get((int)' ');
    tp2.Entry entry61 = new tp2.Entry();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i67 = iP66.getFirst();
    java.lang.String str68 = iP66.toString();
    entry61.element = iP66;
    boolean b70 = singlyLinkedList58.remove(iP66);
    tp2.IPBan iPBan72 = new tp2.IPBan(iP66, (java.lang.Long)1L);
    tp2.Server server73 = new tp2.Server();
    java.lang.String str74 = server73.toString();
    server73.update();
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i81 = iP80.getFirst();
    boolean b82 = server73.connect(iP80);
    iPBan72.ip = iP80;
    tp2.IP iP84 = iPBan72.ip;
    boolean b85 = server0.removeBan(iP84);
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP90.setFirst((java.lang.Integer)1);
    java.lang.Integer i93 = iP90.getSecond();
    iP90.setThird((java.lang.Integer)(-1));
    boolean b96 = server0.removeException(iP90);
    tp2.IPBan iPBan98 = new tp2.IPBan(iP90, (java.lang.Long)1L);
    tp2.IP iP99 = iPBan98.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 0+ "'", i22.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 0+ "'", i53.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str57.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 10+ "'", i67.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "10.0.0.100"+ "'", str68.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str74.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i81 + "' != '" + 100+ "'", i81.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i93 + "' != '" + 0+ "'", i93.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP99);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    java.lang.String str28 = server0.toString();
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    server29.update();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP36.setFirst((java.lang.Integer)1);
    java.lang.Integer i39 = iP36.getSecond();
    boolean b40 = server29.addException(iP36);
    tp2.Entry entry41 = new tp2.Entry();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i47 = iP46.getFirst();
    java.lang.String str48 = iP46.toString();
    entry41.element = iP46;
    boolean b50 = server29.addException(iP46);
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b56 = server29.removeBan(iP55);
    boolean b57 = server0.removeException(iP55);
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b64 = server58.addException(iP63);
    java.lang.String str65 = server58.toString();
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP67 = null;
    boolean b68 = server66.connect(iP67);
    java.lang.String str69 = server66.toString();
    java.lang.String str70 = server66.toString();
    tp2.IP iP71 = null;
    boolean b72 = server66.removeException(iP71);
    tp2.RealTime realTime73 = new tp2.RealTime();
    long long74 = realTime73.getCurrentTime();
    long long75 = realTime73.getCurrentTime();
    server66.setTime((tp2.ITime)realTime73);
    server58.setTime((tp2.ITime)realTime73);
    tp2.Entry entry78 = new tp2.Entry();
    java.lang.String str79 = entry78.toString();
    java.lang.String str80 = entry78.toString();
    tp2.Entry entry81 = entry78.next;
    tp2.IP iP82 = entry78.element;
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i88 = iP87.getFirst();
    java.lang.String str89 = iP87.toString();
    java.lang.String str90 = iP87.toString();
    iP87.setThird((java.lang.Integer)(-1));
    entry78.element = iP87;
    boolean b94 = server58.removeBan(iP87);
    boolean b95 = server0.connect(iP87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=1466185876274, exceptions=([10.0.0.100][1.0.0.100]), bans={}]"+ "'", str28.equals("Server [lastUpdate=1466185876274, exceptions=([10.0.0.100][1.0.0.100]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + 0+ "'", i39.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 10+ "'", i47.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "10.0.0.100"+ "'", str48.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"+ "'", str65.equals("Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str69.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str70.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long74 == 1466185876278L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long75 == 1466185876278L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "[null]"+ "'", str79.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "[null]"+ "'", str80.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 10+ "'", i88.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "10.0.0.100"+ "'", str89.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "10.0.0.100"+ "'", str90.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }


    korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iFinitization1);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }


    korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iFinitization1);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    java.lang.String str14 = iP11.toString();
    iP11.setThird((java.lang.Integer)(-1));
    boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP11);
    iP11.setFourth((java.lang.Integer)0);
    iP11.setThird((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    java.lang.String str34 = strictlySortedSinglyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IP iP49 = singlyLinkedList35.get((int)'4');
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i55 = iP54.getFirst();
    java.lang.String str56 = iP54.toString();
    boolean b57 = singlyLinkedList35.contains(iP54);
    tp2.IPBan iPBan59 = new tp2.IPBan(iP54, (java.lang.Long)200000L);
    boolean b60 = strictlySortedSinglyLinkedList0.add(iPBan59);
    int i61 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "{}"+ "'", str34.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 10+ "'", i55.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "10.0.0.100"+ "'", str56.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 11);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = new tp2.Entry();
    java.lang.String str4 = entry3.toString();
    entry0.next = entry3;
    tp2.Entry entry6 = entry3.next;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP11.setThird((java.lang.Integer)1);
    java.lang.Object obj14 = null;
    boolean b15 = iP11.equals(obj14);
    iP11.setThird((java.lang.Integer)0);
    // The following exception was thrown during execution in test generation
    try {
      entry6.element = iP11;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[null]"+ "'", str4.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList25 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList25.size = 10;
    tp2.Server server28 = new tp2.Server();
    java.lang.String str29 = server28.toString();
    server28.update();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP35.setFirst((java.lang.Integer)1);
    java.lang.Integer i38 = iP35.getSecond();
    boolean b39 = server28.addException(iP35);
    tp2.Entry entry40 = new tp2.Entry();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i46 = iP45.getFirst();
    java.lang.String str47 = iP45.toString();
    entry40.element = iP45;
    boolean b49 = server28.addException(iP45);
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b55 = server28.removeBan(iP54);
    iP54.setThird((java.lang.Integer)0);
    boolean b58 = strictlySortedSinglyLinkedList25.removeFromIP(iP54);
    boolean b59 = server3.addException(iP54);
    java.lang.String str60 = iP54.toString();
    boolean b61 = server0.removeBan(iP54);
    java.lang.String str62 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i38 + "' != '" + 0+ "'", i38.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 10+ "'", i46.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "10.0.0.100"+ "'", str47.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "10.100.0.1"+ "'", str60.equals("10.100.0.1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    boolean b5 = strictlySortedSinglyLinkedList0.isEmpty();
    boolean b6 = strictlySortedSinglyLinkedList0.isEmpty();
    boolean b7 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList8 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList8.size = 10;
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    server11.update();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP18.setFirst((java.lang.Integer)1);
    java.lang.Integer i21 = iP18.getSecond();
    boolean b22 = server11.addException(iP18);
    tp2.Entry entry23 = new tp2.Entry();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i29 = iP28.getFirst();
    java.lang.String str30 = iP28.toString();
    entry23.element = iP28;
    boolean b32 = server11.addException(iP28);
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b38 = server11.removeBan(iP37);
    iP37.setThird((java.lang.Integer)0);
    boolean b41 = strictlySortedSinglyLinkedList8.removeFromIP(iP37);
    java.lang.String str42 = strictlySortedSinglyLinkedList8.toString();
    tp2.SinglyLinkedList singlyLinkedList43 = new tp2.SinglyLinkedList();
    tp2.IP iP45 = singlyLinkedList43.get((int)' ');
    tp2.Entry entry46 = new tp2.Entry();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i52 = iP51.getFirst();
    java.lang.String str53 = iP51.toString();
    entry46.element = iP51;
    boolean b55 = singlyLinkedList43.remove(iP51);
    tp2.IPBan iPBan57 = new tp2.IPBan(iP51, (java.lang.Long)1L);
    java.lang.String str58 = iPBan57.toString();
    boolean b59 = strictlySortedSinglyLinkedList8.contains(iPBan57);
    iPBan57.setExpires((java.lang.Long)1466185873141L);
    // The following exception was thrown during execution in test generation
    try {
      boolean b62 = strictlySortedSinglyLinkedList0.contains(iPBan57);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 0+ "'", i21.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 10+ "'", i29.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "10.0.0.100"+ "'", str30.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "{}"+ "'", str42.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i52 + "' != '" + 10+ "'", i52.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "10.0.0.100"+ "'", str53.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str58.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get(1);
    java.lang.String str3 = singlyLinkedList0.toString();
    boolean b4 = singlyLinkedList0.isEmpty();
    boolean b5 = singlyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan16 = null;
    boolean b17 = strictlySortedSinglyLinkedList15.contains(iPBan16);
    int i18 = strictlySortedSinglyLinkedList15.getSize();
    tp2.IPBan iPBan20 = strictlySortedSinglyLinkedList15.get((int)'#');
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setSecond((java.lang.Integer)(-1));
    boolean b28 = strictlySortedSinglyLinkedList15.removeFromIP(iP25);
    iPBan14.ip = iP25;
    tp2.IP iP30 = iPBan14.getIp();
    java.lang.Long long31 = iPBan14.expires;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L+ "'", long31.equals(1L));

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    entry6.element = iP11;
    tp2.Entry entry14 = entry6.next;
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP16 = null;
    boolean b17 = server15.connect(iP16);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b23 = server15.connect(iP22);
    java.lang.Integer i24 = iP22.getFirst();
    entry6.element = iP22;
    entry1.next = entry6;
    tp2.Entry entry27 = new tp2.Entry();
    java.lang.String str28 = entry27.toString();
    java.lang.String str29 = entry27.toString();
    tp2.Entry entry30 = entry27.next;
    entry6.next = entry30;
    // The following exception was thrown during execution in test generation
    try {
      tp2.Entry entry32 = entry30.next;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 100+ "'", i24.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[null]"+ "'", str28.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[null]"+ "'", str29.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry30);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    java.util.Set<tp2.IPBan> set_iPBan9 = null;
    boolean b10 = strictlySortedSinglyLinkedList0.repOk(set_iPBan9);
    tp2.SinglyLinkedList singlyLinkedList11 = new tp2.SinglyLinkedList();
    tp2.IP iP13 = singlyLinkedList11.get((int)' ');
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    entry14.element = iP19;
    boolean b23 = singlyLinkedList11.remove(iP19);
    tp2.IPBan iPBan25 = new tp2.IPBan(iP19, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList26 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan27 = null;
    boolean b28 = strictlySortedSinglyLinkedList26.contains(iPBan27);
    int i29 = strictlySortedSinglyLinkedList26.getSize();
    tp2.IPBan iPBan31 = strictlySortedSinglyLinkedList26.get((int)'#');
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP36.setSecond((java.lang.Integer)(-1));
    boolean b39 = strictlySortedSinglyLinkedList26.removeFromIP(iP36);
    iPBan25.ip = iP36;
    iPBan25.expires = 1466185871497L;
    // The following exception was thrown during execution in test generation
    try {
      boolean b43 = strictlySortedSinglyLinkedList0.add(iPBan25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP58.setSecond((java.lang.Integer)1);
    boolean b61 = server0.removeBan(iP58);
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP63 = null;
    boolean b64 = server62.connect(iP63);
    java.lang.String str65 = server62.toString();
    java.lang.String str66 = server62.toString();
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = server62.connect(iP72);
    boolean b77 = server0.addBan(iP72);
    tp2.Server server78 = new tp2.Server();
    tp2.IP iP79 = null;
    boolean b80 = server78.connect(iP79);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b86 = server78.connect(iP85);
    java.lang.Integer i87 = iP85.getFirst();
    java.lang.Integer i88 = iP85.getThird();
    iP85.setThird((java.lang.Integer)100);
    boolean b91 = server0.removeBan(iP85);
    tp2.IP iP96 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    tp2.IPBan iPBan98 = new tp2.IPBan(iP96, (java.lang.Long)(-1L));
    boolean b99 = server0.removeException(iP96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i87 + "' != '" + 100+ "'", i87.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + (-1)+ "'", i88.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP3 = null;
    boolean b4 = server2.connect(iP3);
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b10 = server2.connect(iP9);
    tp2.Server server11 = new tp2.Server();
    tp2.IP iP12 = null;
    boolean b13 = server11.connect(iP12);
    java.lang.String str14 = server11.toString();
    java.lang.String str15 = server11.toString();
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = server11.connect(iP21);
    boolean b26 = server2.removeException(iP21);
    boolean b27 = singlyLinkedList0.remove(iP21);
    java.lang.Integer i28 = iP21.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 0+ "'", i28.equals(0));

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP4.setFirst((java.lang.Integer)1);
    java.lang.Integer i7 = iP4.getSecond();
    iP4.setThird((java.lang.Integer)(-1));
    iP4.setThird((java.lang.Integer)1);
    iP4.setFirst((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i7 + "' != '" + 0+ "'", i7.equals(0));

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    server16.update();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP23.setFirst((java.lang.Integer)1);
    java.lang.Integer i26 = iP23.getSecond();
    boolean b27 = server16.addException(iP23);
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = server16.addException(iP33);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b43 = server16.removeBan(iP42);
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP45 = null;
    boolean b46 = server44.connect(iP45);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b52 = server44.connect(iP51);
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP54 = null;
    boolean b55 = server53.connect(iP54);
    java.lang.String str56 = server53.toString();
    java.lang.String str57 = server53.toString();
    tp2.Entry entry58 = new tp2.Entry();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i64 = iP63.getFirst();
    java.lang.String str65 = iP63.toString();
    entry58.element = iP63;
    boolean b67 = server53.connect(iP63);
    boolean b68 = server44.removeException(iP63);
    boolean b69 = server16.connect(iP63);
    java.lang.Integer i70 = iP63.getFirst();
    boolean b71 = strictlySortedSinglyLinkedList0.removeFromIP(iP63);
    java.lang.Integer i72 = iP63.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str57.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 10+ "'", i64.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "10.0.0.100"+ "'", str65.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 10+ "'", i70.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i72 + "' != '" + 0+ "'", i72.equals(0));

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.Node node16 = node14.next;
    tp2.SinglyLinkedList singlyLinkedList17 = new tp2.SinglyLinkedList();
    tp2.IP iP19 = singlyLinkedList17.get((int)' ');
    tp2.Entry entry20 = new tp2.Entry();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    entry20.element = iP25;
    boolean b29 = singlyLinkedList17.remove(iP25);
    tp2.IPBan iPBan31 = new tp2.IPBan(iP25, (java.lang.Long)1L);
    java.lang.String str32 = iPBan31.toString();
    iPBan31.setExpires((java.lang.Long)0L);
    java.lang.Long long35 = iPBan31.expires;
    tp2.IP iP36 = iPBan31.ip;
    java.lang.Long long37 = iPBan31.getExpires();
    // The following exception was thrown during execution in test generation
    try {
      node16.element = iPBan31;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str32.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L+ "'", long35.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L+ "'", long37.equals(0L));

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    server15.update();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i23 = iP22.getFirst();
    boolean b24 = server15.connect(iP22);
    iPBan14.ip = iP22;
    tp2.IP iP26 = iPBan14.getIp();
    java.lang.String str27 = iPBan14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 100+ "'", i23.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=100.10.-1.10, expires=1]"+ "'", str27.equals("IPBan [ip=100.10.-1.10, expires=1]"));

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b24 = server16.connect(iP23);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP26 = null;
    boolean b27 = server25.connect(iP26);
    java.lang.String str28 = server25.toString();
    java.lang.String str29 = server25.toString();
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server25.connect(iP35);
    boolean b40 = server16.removeException(iP35);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP42 = null;
    boolean b43 = server41.connect(iP42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b49 = server41.connect(iP48);
    java.lang.Integer i50 = iP48.getFirst();
    boolean b51 = server16.connect(iP48);
    iPBan14.ip = iP48;
    java.lang.Integer i53 = iP48.getThird();
    java.lang.Integer i54 = iP48.getThird();
    java.lang.Integer i55 = iP48.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 100+ "'", i50.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + (-1)+ "'", i53.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + (-1)+ "'", i54.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 10+ "'", i55.equals(10));

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.getIp();
    tp2.IP iP20 = iPBan14.ip;
    tp2.IP iP21 = iPBan14.getIp();
    java.lang.Long long22 = iPBan14.expires;
    java.lang.Long long23 = iPBan14.getExpires();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L+ "'", long22.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L+ "'", long23.equals(0L));

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    java.lang.String str12 = server9.toString();
    java.lang.String str13 = server9.toString();
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    entry14.element = iP19;
    boolean b23 = server9.connect(iP19);
    boolean b24 = server0.removeException(iP19);
    java.lang.Integer i25 = iP19.getFirst();
    java.lang.Integer i26 = iP19.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList50 = new tp2.StrictlySortedSinglyLinkedList();
    int i51 = strictlySortedSinglyLinkedList50.getSize();
    tp2.IPBan iPBan52 = null;
    boolean b53 = strictlySortedSinglyLinkedList50.add(iPBan52);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList54 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node55 = strictlySortedSinglyLinkedList54.header;
    strictlySortedSinglyLinkedList50.header = node55;
    tp2.IPBan iPBan57 = node55.element;
    strictlySortedSinglyLinkedList0.header = node55;
    int i59 = strictlySortedSinglyLinkedList0.size;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }


    tp2.Node node0 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList1 = new tp2.StrictlySortedSinglyLinkedList();
    int i2 = strictlySortedSinglyLinkedList1.getSize();
    tp2.IPBan iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList1.add(iPBan3);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node6 = strictlySortedSinglyLinkedList5.header;
    strictlySortedSinglyLinkedList1.header = node6;
    node0.next = node6;
    tp2.Node node9 = node0.next;
    tp2.IPBan iPBan10 = node9.element;
    tp2.IPBan iPBan11 = node9.element;
    tp2.IPBan iPBan12 = node9.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan12);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }


    korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iFinitization1);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.SinglyLinkedList singlyLinkedList2 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP3 = null;
    boolean b4 = singlyLinkedList2.repOk(set_iP3);
    java.util.Set<tp2.IP> set_iP5 = null;
    boolean b6 = singlyLinkedList2.repOk(set_iP5);
    tp2.SinglyLinkedList singlyLinkedList7 = new tp2.SinglyLinkedList();
    tp2.IP iP9 = singlyLinkedList7.get((int)' ');
    tp2.Entry entry10 = new tp2.Entry();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i16 = iP15.getFirst();
    java.lang.String str17 = iP15.toString();
    entry10.element = iP15;
    boolean b19 = singlyLinkedList7.remove(iP15);
    tp2.IP iP21 = singlyLinkedList7.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList22 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList22.size = 10;
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    server25.update();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP32.setFirst((java.lang.Integer)1);
    java.lang.Integer i35 = iP32.getSecond();
    boolean b36 = server25.addException(iP32);
    tp2.Entry entry37 = new tp2.Entry();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i43 = iP42.getFirst();
    java.lang.String str44 = iP42.toString();
    entry37.element = iP42;
    boolean b46 = server25.addException(iP42);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b52 = server25.removeBan(iP51);
    iP51.setThird((java.lang.Integer)0);
    boolean b55 = strictlySortedSinglyLinkedList22.removeFromIP(iP51);
    boolean b56 = singlyLinkedList7.contains(iP51);
    boolean b57 = singlyLinkedList2.contains(iP51);
    boolean b58 = server0.removeBan(iP51);
    java.lang.String str59 = iP51.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 10+ "'", i16.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "10.0.0.100"+ "'", str17.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 0+ "'", i35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 10+ "'", i43.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "10.0.0.100"+ "'", str44.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "10.100.0.1"+ "'", str59.equals("10.100.0.1"));

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.Server server5 = new tp2.Server();
    tp2.IP iP6 = null;
    boolean b7 = server5.connect(iP6);
    java.lang.String str8 = server5.toString();
    java.lang.String str9 = server5.toString();
    tp2.IP iP10 = null;
    boolean b11 = server5.removeException(iP10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList12 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList12.size = 10;
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    server15.update();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP22.setFirst((java.lang.Integer)1);
    java.lang.Integer i25 = iP22.getSecond();
    boolean b26 = server15.addException(iP22);
    tp2.Entry entry27 = new tp2.Entry();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    entry27.element = iP32;
    boolean b36 = server15.addException(iP32);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b42 = server15.removeBan(iP41);
    iP41.setThird((java.lang.Integer)0);
    boolean b45 = strictlySortedSinglyLinkedList12.removeFromIP(iP41);
    tp2.Server server46 = new tp2.Server();
    java.lang.String str47 = server46.toString();
    server46.update();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP53.setFirst((java.lang.Integer)1);
    java.lang.Integer i56 = iP53.getSecond();
    boolean b57 = server46.addException(iP53);
    boolean b58 = strictlySortedSinglyLinkedList12.removeFromIP(iP53);
    boolean b59 = server5.connect(iP53);
    tp2.Entry entry60 = new tp2.Entry();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i66 = iP65.getFirst();
    entry60.element = iP65;
    tp2.Entry entry68 = entry60.next;
    tp2.Server server69 = new tp2.Server();
    tp2.IP iP70 = null;
    boolean b71 = server69.connect(iP70);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b77 = server69.connect(iP76);
    java.lang.Integer i78 = iP76.getFirst();
    entry60.element = iP76;
    iP76.setFourth((java.lang.Integer)100);
    boolean b82 = server5.removeException(iP76);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList83 = new tp2.StrictlySortedSinglyLinkedList();
    boolean b84 = iP76.equals((java.lang.Object)strictlySortedSinglyLinkedList83);
    java.lang.String str85 = strictlySortedSinglyLinkedList83.toString();
    tp2.Node node86 = strictlySortedSinglyLinkedList83.header;
    strictlySortedSinglyLinkedList0.header = node86;
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP92.setSecond((java.lang.Integer)1);
    java.lang.Integer i95 = iP92.getSecond();
    boolean b96 = strictlySortedSinglyLinkedList0.removeFromIP(iP92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 0+ "'", i25.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 0+ "'", i56.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i66 + "' != '" + 10+ "'", i66.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i78 + "' != '" + 100+ "'", i78.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "{}"+ "'", str85.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i95 + "' != '" + 1+ "'", i95.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    boolean b6 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP8 = null;
    boolean b9 = server7.connect(iP8);
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b15 = server7.connect(iP14);
    java.lang.Integer i16 = iP14.getFirst();
    java.lang.Integer i17 = iP14.getThird();
    iP14.setThird((java.lang.Integer)100);
    // The following exception was thrown during execution in test generation
    try {
      boolean b20 = strictlySortedSinglyLinkedList0.containsIP(iP14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 100+ "'", i16.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + (-1)+ "'", i17.equals((-1)));

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList22 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList22.size = 10;
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    server25.update();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP32.setFirst((java.lang.Integer)1);
    java.lang.Integer i35 = iP32.getSecond();
    boolean b36 = server25.addException(iP32);
    tp2.Entry entry37 = new tp2.Entry();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i43 = iP42.getFirst();
    java.lang.String str44 = iP42.toString();
    entry37.element = iP42;
    boolean b46 = server25.addException(iP42);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b52 = server25.removeBan(iP51);
    iP51.setThird((java.lang.Integer)0);
    boolean b55 = strictlySortedSinglyLinkedList22.removeFromIP(iP51);
    boolean b56 = server0.addException(iP51);
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP58 = null;
    boolean b59 = server57.connect(iP58);
    java.lang.String str60 = server57.toString();
    tp2.Server server61 = new tp2.Server();
    java.lang.String str62 = server61.toString();
    server61.update();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP68.setFirst((java.lang.Integer)1);
    java.lang.Integer i71 = iP68.getSecond();
    boolean b72 = server61.addException(iP68);
    boolean b73 = server57.addException(iP68);
    boolean b74 = server0.addException(iP68);
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i80 = iP79.getFirst();
    iP79.setFourth((java.lang.Integer)1);
    boolean b83 = server0.addException(iP79);
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP88.setSecond((java.lang.Integer)(-1));
    boolean b91 = server0.removeException(iP88);
    java.lang.Integer i92 = iP88.getFourth();
    iP88.setSecond((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 0+ "'", i35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 10+ "'", i43.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "10.0.0.100"+ "'", str44.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i71 + "' != '" + 0+ "'", i71.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 100+ "'", i80.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i92 + "' != '" + 100+ "'", i92.equals(100));

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.IPBan iPBan3 = null;
    node0.element = iPBan3;
    tp2.IPBan iPBan5 = node0.element;
    java.lang.String str6 = node0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[null]"+ "'", str6.equals("[null]"));

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    tp2.IPBan iPBan7 = strictlySortedSinglyLinkedList0.get((int)'4');
    int i8 = strictlySortedSinglyLinkedList0.size;
    tp2.SinglyLinkedList singlyLinkedList9 = new tp2.SinglyLinkedList();
    tp2.IP iP11 = singlyLinkedList9.get((int)' ');
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = singlyLinkedList9.remove(iP17);
    tp2.IPBan iPBan23 = new tp2.IPBan(iP17, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList24 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan25 = null;
    boolean b26 = strictlySortedSinglyLinkedList24.contains(iPBan25);
    int i27 = strictlySortedSinglyLinkedList24.getSize();
    tp2.IPBan iPBan29 = strictlySortedSinglyLinkedList24.get((int)'#');
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP34.setSecond((java.lang.Integer)(-1));
    boolean b37 = strictlySortedSinglyLinkedList24.removeFromIP(iP34);
    iPBan23.ip = iP34;
    tp2.IP iP39 = iPBan23.getIp();
    // The following exception was thrown during execution in test generation
    try {
      boolean b40 = strictlySortedSinglyLinkedList0.add(iPBan23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP39);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.size;
    int i5 = strictlySortedSinglyLinkedList0.getSize();
    strictlySortedSinglyLinkedList0.size = 0;
    tp2.SinglyLinkedList singlyLinkedList8 = new tp2.SinglyLinkedList();
    tp2.IP iP10 = singlyLinkedList8.get((int)' ');
    tp2.Entry entry11 = new tp2.Entry();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    entry11.element = iP16;
    boolean b20 = singlyLinkedList8.remove(iP16);
    tp2.IPBan iPBan22 = new tp2.IPBan(iP16, (java.lang.Long)1L);
    java.lang.String str23 = iPBan22.toString();
    java.lang.Long long24 = iPBan22.getExpires();
    iPBan22.expires = 0L;
    tp2.IP iP27 = iPBan22.getIp();
    // The following exception was thrown during execution in test generation
    try {
      boolean b28 = strictlySortedSinglyLinkedList0.contains(iPBan22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str23.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L+ "'", long24.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP27);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    tp2.IPBan iPBan7 = strictlySortedSinglyLinkedList0.get((int)'4');
    java.util.Set<tp2.IPBan> set_iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList0.repOk(set_iPBan8);
    strictlySortedSinglyLinkedList0.size = (short)0;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.size;
    int i5 = strictlySortedSinglyLinkedList0.getSize();
    int i6 = strictlySortedSinglyLinkedList0.getSize();
    boolean b7 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.SinglyLinkedList singlyLinkedList8 = new tp2.SinglyLinkedList();
    tp2.IP iP10 = singlyLinkedList8.get((int)' ');
    tp2.Entry entry11 = new tp2.Entry();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    entry11.element = iP16;
    boolean b20 = singlyLinkedList8.remove(iP16);
    tp2.IPBan iPBan22 = new tp2.IPBan(iP16, (java.lang.Long)1L);
    iPBan22.expires = 1466185871428L;
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP26 = null;
    boolean b27 = server25.connect(iP26);
    java.lang.String str28 = server25.toString();
    java.lang.String str29 = server25.toString();
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server25.connect(iP35);
    iPBan22.ip = iP35;
    tp2.SinglyLinkedList singlyLinkedList41 = new tp2.SinglyLinkedList();
    tp2.IP iP43 = singlyLinkedList41.get((int)' ');
    tp2.Entry entry44 = new tp2.Entry();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i50 = iP49.getFirst();
    java.lang.String str51 = iP49.toString();
    entry44.element = iP49;
    boolean b53 = singlyLinkedList41.remove(iP49);
    tp2.IPBan iPBan55 = new tp2.IPBan(iP49, (java.lang.Long)1L);
    iPBan55.expires = 1466185871428L;
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP59 = null;
    boolean b60 = server58.connect(iP59);
    java.lang.String str61 = server58.toString();
    java.lang.String str62 = server58.toString();
    tp2.Entry entry63 = new tp2.Entry();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i69 = iP68.getFirst();
    java.lang.String str70 = iP68.toString();
    entry63.element = iP68;
    boolean b72 = server58.connect(iP68);
    iPBan55.ip = iP68;
    iPBan22.ip = iP68;
    java.lang.Integer i75 = iP68.getFourth();
    // The following exception was thrown during execution in test generation
    try {
      boolean b76 = strictlySortedSinglyLinkedList0.removeFromIP(iP68);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 10+ "'", i50.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "10.0.0.100"+ "'", str51.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str61.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i69 + "' != '" + 10+ "'", i69.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "10.0.0.100"+ "'", str70.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 100+ "'", i75.equals(100));

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    entry55.element = iP60;
    tp2.Entry entry63 = entry55.next;
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP65 = null;
    boolean b66 = server64.connect(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b72 = server64.connect(iP71);
    java.lang.Integer i73 = iP71.getFirst();
    entry55.element = iP71;
    iP71.setFourth((java.lang.Integer)100);
    boolean b77 = server0.removeException(iP71);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList78 = new tp2.StrictlySortedSinglyLinkedList();
    boolean b79 = iP71.equals((java.lang.Object)strictlySortedSinglyLinkedList78);
    java.lang.String str80 = strictlySortedSinglyLinkedList78.toString();
    tp2.Node node81 = strictlySortedSinglyLinkedList78.header;
    java.lang.String str82 = node81.toString();
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i88 = iP87.getFirst();
    java.lang.String str89 = iP87.toString();
    java.lang.String str90 = iP87.toString();
    iP87.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan94 = new tp2.IPBan(iP87, (java.lang.Long)0L);
    java.lang.String str95 = iPBan94.toString();
    node81.element = iPBan94;
    java.lang.Long long97 = iPBan94.getExpires();
    iPBan94.expires = 1466185877216L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 100+ "'", i73.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "{}"+ "'", str80.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "[null]"+ "'", str82.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 10+ "'", i88.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "10.0.0.100"+ "'", str89.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "10.0.0.100"+ "'", str90.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "IPBan [ip=10.0.-1.100, expires=0]"+ "'", str95.equals("IPBan [ip=10.0.-1.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L+ "'", long97.equals(0L));

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP4.setThird((java.lang.Integer)1);
    java.lang.String str7 = iP4.toString();
    java.lang.Integer i8 = iP4.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.1.100"+ "'", str7.equals("10.0.1.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i8 + "' != '" + 100+ "'", i8.equals(100));

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.Server server55 = new tp2.Server();
    java.lang.String str56 = server55.toString();
    server55.update();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP62.setFirst((java.lang.Integer)1);
    java.lang.Integer i65 = iP62.getSecond();
    boolean b66 = server55.addException(iP62);
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = server55.addException(iP72);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b82 = server55.removeBan(iP81);
    iP81.setThird((java.lang.Integer)0);
    iP81.setFourth((java.lang.Integer)10);
    boolean b87 = server0.addException(iP81);
    java.lang.Integer i88 = iP81.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 0+ "'", i65.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 10+ "'", i88.equals(10));

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }


    korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iFinitization1);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    boolean b5 = strictlySortedSinglyLinkedList0.isEmpty();
    int i6 = strictlySortedSinglyLinkedList0.size;
    int i7 = strictlySortedSinglyLinkedList0.size;
    int i8 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str9 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "{[null]}"+ "'", str9.equals("{[null]}"));

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }


    korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iFinitization1);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node1 = strictlySortedSinglyLinkedList0.header;
    tp2.SinglyLinkedList singlyLinkedList2 = new tp2.SinglyLinkedList();
    tp2.IP iP4 = singlyLinkedList2.get((int)' ');
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = singlyLinkedList2.remove(iP10);
    tp2.IPBan iPBan16 = new tp2.IPBan(iP10, (java.lang.Long)1L);
    tp2.IP iP17 = iPBan16.ip;
    node1.element = iPBan16;
    java.lang.Long long19 = iPBan16.expires;
    java.lang.Long long20 = iPBan16.getExpires();
    java.lang.Long long21 = iPBan16.getExpires();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L+ "'", long19.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L+ "'", long20.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L+ "'", long21.equals(1L));

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan16 = null;
    boolean b17 = strictlySortedSinglyLinkedList15.contains(iPBan16);
    int i18 = strictlySortedSinglyLinkedList15.getSize();
    tp2.IPBan iPBan20 = strictlySortedSinglyLinkedList15.get((int)'#');
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setSecond((java.lang.Integer)(-1));
    boolean b28 = strictlySortedSinglyLinkedList15.removeFromIP(iP25);
    iPBan14.ip = iP25;
    tp2.IP iP30 = iPBan14.getIp();
    java.lang.String str31 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)1466185875369L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "IPBan [ip=10.-1.0.100, expires=1]"+ "'", str31.equals("IPBan [ip=10.-1.0.100, expires=1]"));

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b7 = strictlySortedSinglyLinkedList0.containsIP(iP6);
    iP6.setFourth((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    boolean b10 = server0.removeException(iP7);
    tp2.SinglyLinkedList singlyLinkedList11 = new tp2.SinglyLinkedList();
    tp2.IP iP13 = singlyLinkedList11.get((int)' ');
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    entry14.element = iP19;
    boolean b23 = singlyLinkedList11.remove(iP19);
    tp2.IPBan iPBan25 = new tp2.IPBan(iP19, (java.lang.Long)1L);
    java.lang.String str26 = iPBan25.toString();
    iPBan25.setExpires((java.lang.Long)0L);
    java.lang.Long long29 = iPBan25.expires;
    tp2.IP iP30 = iPBan25.ip;
    java.lang.String str31 = iPBan25.toString();
    tp2.IP iP32 = iPBan25.getIp();
    iP32.setFirst((java.lang.Integer)100);
    boolean b35 = server0.addException(iP32);
    tp2.Server server36 = new tp2.Server();
    java.lang.String str37 = server36.toString();
    server36.update();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP43.setFirst((java.lang.Integer)1);
    java.lang.Integer i46 = iP43.getSecond();
    boolean b47 = server36.addException(iP43);
    tp2.Entry entry48 = new tp2.Entry();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i54 = iP53.getFirst();
    java.lang.String str55 = iP53.toString();
    entry48.element = iP53;
    boolean b57 = server36.addException(iP53);
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b63 = server36.removeBan(iP62);
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP65 = null;
    boolean b66 = server64.connect(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b72 = server64.connect(iP71);
    tp2.Server server73 = new tp2.Server();
    tp2.IP iP74 = null;
    boolean b75 = server73.connect(iP74);
    java.lang.String str76 = server73.toString();
    java.lang.String str77 = server73.toString();
    tp2.Entry entry78 = new tp2.Entry();
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i84 = iP83.getFirst();
    java.lang.String str85 = iP83.toString();
    entry78.element = iP83;
    boolean b87 = server73.connect(iP83);
    boolean b88 = server64.removeException(iP83);
    boolean b89 = server36.connect(iP83);
    java.lang.Integer i90 = iP83.getFirst();
    iP83.setSecond((java.lang.Integer)0);
    java.lang.Integer i93 = iP83.getThird();
    tp2.IPBan iPBan95 = new tp2.IPBan(iP83, (java.lang.Long)1466185872784L);
    boolean b96 = server0.addException(iP83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str26.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L+ "'", long29.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str31.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 0+ "'", i46.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "10.0.0.100"+ "'", str55.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str76.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str77.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i84 + "' != '" + 10+ "'", i84.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "10.0.0.100"+ "'", str85.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i90 + "' != '" + 10+ "'", i90.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i93 + "' != '" + 0+ "'", i93.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    entry6.element = iP11;
    tp2.Entry entry14 = entry6.next;
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP16 = null;
    boolean b17 = server15.connect(iP16);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b23 = server15.connect(iP22);
    java.lang.Integer i24 = iP22.getFirst();
    entry6.element = iP22;
    entry1.next = entry6;
    tp2.Entry entry27 = new tp2.Entry();
    java.lang.String str28 = entry27.toString();
    java.lang.String str29 = entry27.toString();
    tp2.Entry entry30 = entry27.next;
    entry6.next = entry30;
    tp2.SinglyLinkedList singlyLinkedList32 = new tp2.SinglyLinkedList();
    java.lang.String str33 = singlyLinkedList32.toString();
    java.lang.String str34 = singlyLinkedList32.toString();
    java.lang.String str35 = singlyLinkedList32.toString();
    java.lang.String str36 = singlyLinkedList32.toString();
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.IP iP42 = null;
    boolean b43 = server37.removeException(iP42);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList44 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList44.size = 10;
    tp2.Server server47 = new tp2.Server();
    java.lang.String str48 = server47.toString();
    server47.update();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP54.setFirst((java.lang.Integer)1);
    java.lang.Integer i57 = iP54.getSecond();
    boolean b58 = server47.addException(iP54);
    tp2.Entry entry59 = new tp2.Entry();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i65 = iP64.getFirst();
    java.lang.String str66 = iP64.toString();
    entry59.element = iP64;
    boolean b68 = server47.addException(iP64);
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b74 = server47.removeBan(iP73);
    iP73.setThird((java.lang.Integer)0);
    boolean b77 = strictlySortedSinglyLinkedList44.removeFromIP(iP73);
    tp2.Server server78 = new tp2.Server();
    java.lang.String str79 = server78.toString();
    server78.update();
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP85.setFirst((java.lang.Integer)1);
    java.lang.Integer i88 = iP85.getSecond();
    boolean b89 = server78.addException(iP85);
    boolean b90 = strictlySortedSinglyLinkedList44.removeFromIP(iP85);
    boolean b91 = server37.connect(iP85);
    boolean b92 = singlyLinkedList32.contains(iP85);
    // The following exception was thrown during execution in test generation
    try {
      entry30.element = iP85;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 100+ "'", i24.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[null]"+ "'", str28.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[null]"+ "'", str29.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "()"+ "'", str33.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "()"+ "'", str34.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "()"+ "'", str35.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "()"+ "'", str36.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 0+ "'", i57.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 10+ "'", i65.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "10.0.0.100"+ "'", str66.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str79.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 0+ "'", i88.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    java.lang.String str3 = singlyLinkedList0.toString();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    tp2.IP iP7 = singlyLinkedList0.get(32);
    boolean b8 = singlyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList3 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList3.size = 10;
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    server6.update();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP13.setFirst((java.lang.Integer)1);
    java.lang.Integer i16 = iP13.getSecond();
    boolean b17 = server6.addException(iP13);
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = server6.addException(iP23);
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b33 = server6.removeBan(iP32);
    iP32.setThird((java.lang.Integer)0);
    boolean b36 = strictlySortedSinglyLinkedList3.removeFromIP(iP32);
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    server37.update();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP44.setFirst((java.lang.Integer)1);
    java.lang.Integer i47 = iP44.getSecond();
    boolean b48 = server37.addException(iP44);
    boolean b49 = strictlySortedSinglyLinkedList3.removeFromIP(iP44);
    singlyLinkedList0.add(iP44);
    boolean b51 = singlyLinkedList0.isEmpty();
    java.util.Set<tp2.IP> set_iP52 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b53 = singlyLinkedList0.repOk(set_iP52);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 0+ "'", i16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 0+ "'", i47.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    entry6.element = iP11;
    tp2.Entry entry14 = entry6.next;
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP16 = null;
    boolean b17 = server15.connect(iP16);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b23 = server15.connect(iP22);
    java.lang.Integer i24 = iP22.getFirst();
    entry6.element = iP22;
    entry1.next = entry6;
    java.lang.String str27 = entry1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 100+ "'", i24.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[null]"+ "'", str27.equals("[null]"));

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    java.lang.String str47 = iP41.toString();
    iP41.setSecond((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "1.0.0.100"+ "'", str47.equals("1.0.0.100"));

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.RealTime realTime55 = new tp2.RealTime();
    long long56 = realTime55.getCurrentTime();
    server0.setTime((tp2.ITime)realTime55);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long56 == 1466185879376L);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    java.util.Set<tp2.IPBan> set_iPBan5 = null;
    boolean b6 = strictlySortedSinglyLinkedList0.repOk(set_iPBan5);
    tp2.IPBan iPBan8 = strictlySortedSinglyLinkedList0.get((int)(short)0);
    tp2.Node node9 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList10.size = 10;
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    server13.update();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP20.setFirst((java.lang.Integer)1);
    java.lang.Integer i23 = iP20.getSecond();
    boolean b24 = server13.addException(iP20);
    tp2.Entry entry25 = new tp2.Entry();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i31 = iP30.getFirst();
    java.lang.String str32 = iP30.toString();
    entry25.element = iP30;
    boolean b34 = server13.addException(iP30);
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b40 = server13.removeBan(iP39);
    iP39.setThird((java.lang.Integer)0);
    boolean b43 = strictlySortedSinglyLinkedList10.removeFromIP(iP39);
    java.lang.String str44 = strictlySortedSinglyLinkedList10.toString();
    tp2.SinglyLinkedList singlyLinkedList45 = new tp2.SinglyLinkedList();
    tp2.IP iP47 = singlyLinkedList45.get((int)' ');
    tp2.Entry entry48 = new tp2.Entry();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i54 = iP53.getFirst();
    java.lang.String str55 = iP53.toString();
    entry48.element = iP53;
    boolean b57 = singlyLinkedList45.remove(iP53);
    tp2.IPBan iPBan59 = new tp2.IPBan(iP53, (java.lang.Long)1L);
    java.lang.String str60 = iPBan59.toString();
    boolean b61 = strictlySortedSinglyLinkedList10.contains(iPBan59);
    node9.element = iPBan59;
    strictlySortedSinglyLinkedList0.header = node9;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList64 = new tp2.StrictlySortedSinglyLinkedList();
    int i65 = strictlySortedSinglyLinkedList64.getSize();
    tp2.IPBan iPBan66 = null;
    boolean b67 = strictlySortedSinglyLinkedList64.add(iPBan66);
    tp2.Node node68 = new tp2.Node();
    tp2.IPBan iPBan69 = null;
    node68.element = iPBan69;
    tp2.IPBan iPBan71 = null;
    node68.element = iPBan71;
    tp2.IPBan iPBan73 = node68.element;
    strictlySortedSinglyLinkedList64.header = node68;
    strictlySortedSinglyLinkedList0.header = node68;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 0+ "'", i23.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 10+ "'", i31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "{}"+ "'", str44.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "10.0.0.100"+ "'", str55.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str60.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan73);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)1);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList3 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList3.size = 10;
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    server6.update();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP13.setFirst((java.lang.Integer)1);
    java.lang.Integer i16 = iP13.getSecond();
    boolean b17 = server6.addException(iP13);
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = server6.addException(iP23);
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b33 = server6.removeBan(iP32);
    iP32.setThird((java.lang.Integer)0);
    boolean b36 = strictlySortedSinglyLinkedList3.removeFromIP(iP32);
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    server37.update();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP44.setFirst((java.lang.Integer)1);
    java.lang.Integer i47 = iP44.getSecond();
    boolean b48 = server37.addException(iP44);
    boolean b49 = strictlySortedSinglyLinkedList3.removeFromIP(iP44);
    singlyLinkedList0.add(iP44);
    tp2.IP iP52 = singlyLinkedList0.get(1);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    singlyLinkedList0.add(iP57);
    java.lang.Integer i61 = iP57.getSecond();
    iP57.setThird((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 0+ "'", i16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 0+ "'", i47.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 0+ "'", i61.equals(0));

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    tp2.Server server4 = new tp2.Server();
    tp2.IP iP5 = null;
    boolean b6 = server4.connect(iP5);
    java.lang.String str7 = server4.toString();
    java.lang.String str8 = server4.toString();
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    java.lang.String str16 = iP14.toString();
    entry9.element = iP14;
    boolean b18 = server4.connect(iP14);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    java.lang.String str26 = iP23.toString();
    boolean b27 = server4.removeBan(iP23);
    iP23.setFirst((java.lang.Integer)10);
    boolean b30 = server0.removeException(iP23);
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP32 = null;
    boolean b33 = server31.connect(iP32);
    java.lang.String str34 = server31.toString();
    java.lang.String str35 = server31.toString();
    tp2.IP iP36 = null;
    boolean b37 = server31.removeException(iP36);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList38 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList38.size = 10;
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    tp2.Entry entry53 = new tp2.Entry();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i59 = iP58.getFirst();
    java.lang.String str60 = iP58.toString();
    entry53.element = iP58;
    boolean b62 = server41.addException(iP58);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b68 = server41.removeBan(iP67);
    iP67.setThird((java.lang.Integer)0);
    boolean b71 = strictlySortedSinglyLinkedList38.removeFromIP(iP67);
    tp2.Server server72 = new tp2.Server();
    java.lang.String str73 = server72.toString();
    server72.update();
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP79.setFirst((java.lang.Integer)1);
    java.lang.Integer i82 = iP79.getSecond();
    boolean b83 = server72.addException(iP79);
    boolean b84 = strictlySortedSinglyLinkedList38.removeFromIP(iP79);
    boolean b85 = server31.connect(iP79);
    tp2.RealTime realTime86 = new tp2.RealTime();
    long long87 = realTime86.getCurrentTime();
    server31.setTime((tp2.ITime)realTime86);
    server0.setTime((tp2.ITime)realTime86);
    long long90 = realTime86.getCurrentTime();
    long long91 = realTime86.getCurrentTime();
    long long92 = realTime86.getCurrentTime();
    long long93 = realTime86.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 10+ "'", i59.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "10.0.0.100"+ "'", str60.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str73.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i82 + "' != '" + 0+ "'", i82.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long87 == 1466185879670L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long90 == 1466185879671L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long91 == 1466185879671L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long92 == 1466185879671L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long93 == 1466185879671L);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    java.lang.String str7 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    // The following exception was thrown during execution in test generation
    try {
      tp2.Entry entry4 = entry3.next;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    server0.update();
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i60 = iP59.getFirst();
    java.lang.String str61 = iP59.toString();
    boolean b62 = server0.removeException(iP59);
    java.lang.Integer i63 = iP59.getFourth();
    java.lang.Integer i64 = iP59.getSecond();
    java.lang.Integer i65 = iP59.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 10+ "'", i60.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "10.0.0.100"+ "'", str61.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 100+ "'", i63.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 0+ "'", i64.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 10+ "'", i65.equals(10));

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }


    korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer(11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iFinitization1);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)11, (java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)100);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.Node node16 = node14.next;
    // The following exception was thrown during execution in test generation
    try {
      tp2.IPBan iPBan17 = node16.element;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node16);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.RealTime realTime55 = new tp2.RealTime();
    long long56 = realTime55.getCurrentTime();
    server0.setTime((tp2.ITime)realTime55);
    long long58 = realTime55.getCurrentTime();
    long long59 = realTime55.getCurrentTime();
    long long60 = realTime55.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long56 == 1466185880001L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long58 == 1466185880001L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long59 == 1466185880002L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long60 == 1466185880002L);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }


    tp2.Node node0 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList1 = new tp2.StrictlySortedSinglyLinkedList();
    int i2 = strictlySortedSinglyLinkedList1.getSize();
    tp2.IPBan iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList1.add(iPBan3);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node6 = strictlySortedSinglyLinkedList5.header;
    strictlySortedSinglyLinkedList1.header = node6;
    node0.next = node6;
    tp2.IPBan iPBan9 = null;
    node0.element = iPBan9;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    int i12 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan13 = null;
    boolean b14 = strictlySortedSinglyLinkedList11.add(iPBan13);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node16 = strictlySortedSinglyLinkedList15.header;
    strictlySortedSinglyLinkedList11.header = node16;
    tp2.IPBan iPBan18 = node16.element;
    node0.next = node16;
    java.lang.String str20 = node0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[null]"+ "'", str20.equals("[null]"));

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.ip;
    java.lang.String str20 = iPBan14.toString();
    tp2.IP iP21 = iPBan14.getIp();
    iP21.setFirst((java.lang.Integer)100);
    java.lang.Integer i24 = iP21.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 0+ "'", i24.equals(0));

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Entry entry9 = entry0.next;
    tp2.Entry entry10 = new tp2.Entry();
    java.lang.String str11 = entry10.toString();
    java.lang.String str12 = entry10.toString();
    tp2.Entry entry13 = entry10.next;
    tp2.IP iP14 = entry10.element;
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    java.lang.String str22 = iP19.toString();
    iP19.setThird((java.lang.Integer)(-1));
    entry10.element = iP19;
    tp2.IP iP26 = entry10.element;
    tp2.IP iP27 = entry10.element;
    // The following exception was thrown during execution in test generation
    try {
      entry9.next = entry10;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[null]"+ "'", str11.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[null]"+ "'", str12.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP27);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }


    // The following exception was thrown during execution in test generation
    try {
      korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer(100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.IP iP3 = entry0.element;
    tp2.Entry entry4 = new tp2.Entry();
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    entry4.element = iP9;
    tp2.IP iP12 = entry4.element;
    entry0.next = entry4;
    java.lang.String str14 = entry0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[null]"+ "'", str14.equals("[null]"));

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList15.size = 10;
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    server18.update();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setFirst((java.lang.Integer)1);
    java.lang.Integer i28 = iP25.getSecond();
    boolean b29 = server18.addException(iP25);
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server18.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b45 = server18.removeBan(iP44);
    iP44.setThird((java.lang.Integer)0);
    boolean b48 = strictlySortedSinglyLinkedList15.removeFromIP(iP44);
    boolean b49 = singlyLinkedList0.contains(iP44);
    tp2.Server server50 = new tp2.Server();
    java.lang.String str51 = server50.toString();
    server50.update();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    java.lang.Integer i60 = iP57.getSecond();
    boolean b61 = server50.addException(iP57);
    tp2.Entry entry62 = new tp2.Entry();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i68 = iP67.getFirst();
    java.lang.String str69 = iP67.toString();
    entry62.element = iP67;
    boolean b71 = server50.addException(iP67);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b77 = server50.removeBan(iP76);
    iP76.setThird((java.lang.Integer)0);
    boolean b80 = singlyLinkedList0.remove(iP76);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP85.setFirst((java.lang.Integer)1);
    singlyLinkedList0.add(iP85);
    tp2.IP iP90 = singlyLinkedList0.get((int)(byte)10);
    boolean b91 = singlyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 0+ "'", i28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 0+ "'", i60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 10+ "'", i68.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "10.0.0.100"+ "'", str69.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    tp2.Server server3 = new tp2.Server();
    tp2.IP iP4 = null;
    boolean b5 = server3.connect(iP4);
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b11 = server3.connect(iP10);
    java.lang.Integer i12 = iP10.getFirst();
    java.lang.Integer i13 = iP10.getFirst();
    singlyLinkedList0.add(iP10);
    java.util.Set<tp2.IP> set_iP15 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b16 = singlyLinkedList0.repOk(set_iP15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 100+ "'", i12.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 100+ "'", i13.equals(100));

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList3 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList3.size = 10;
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    server6.update();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP13.setFirst((java.lang.Integer)1);
    java.lang.Integer i16 = iP13.getSecond();
    boolean b17 = server6.addException(iP13);
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = server6.addException(iP23);
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b33 = server6.removeBan(iP32);
    iP32.setThird((java.lang.Integer)0);
    boolean b36 = strictlySortedSinglyLinkedList3.removeFromIP(iP32);
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    server37.update();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP44.setFirst((java.lang.Integer)1);
    java.lang.Integer i47 = iP44.getSecond();
    boolean b48 = server37.addException(iP44);
    boolean b49 = strictlySortedSinglyLinkedList3.removeFromIP(iP44);
    singlyLinkedList0.add(iP44);
    tp2.IP iP52 = singlyLinkedList0.get(1);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    singlyLinkedList0.add(iP57);
    int i61 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 0+ "'", i16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 0+ "'", i47.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 2);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    int i34 = strictlySortedSinglyLinkedList0.getSize();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    java.lang.String str50 = iPBan49.toString();
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP52 = null;
    boolean b53 = server51.connect(iP52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b59 = server51.connect(iP58);
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP61 = null;
    boolean b62 = server60.connect(iP61);
    java.lang.String str63 = server60.toString();
    java.lang.String str64 = server60.toString();
    tp2.Entry entry65 = new tp2.Entry();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i71 = iP70.getFirst();
    java.lang.String str72 = iP70.toString();
    entry65.element = iP70;
    boolean b74 = server60.connect(iP70);
    boolean b75 = server51.removeException(iP70);
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP77 = null;
    boolean b78 = server76.connect(iP77);
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b84 = server76.connect(iP83);
    java.lang.Integer i85 = iP83.getFirst();
    boolean b86 = server51.connect(iP83);
    iPBan49.ip = iP83;
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP92.setFirst((java.lang.Integer)1);
    java.lang.Integer i95 = iP92.getSecond();
    iPBan49.ip = iP92;
    boolean b97 = strictlySortedSinglyLinkedList0.contains(iPBan49);
    tp2.IP iP98 = iPBan49.getIp();
    java.lang.Long long99 = iPBan49.getExpires();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str63.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str64.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i71 + "' != '" + 10+ "'", i71.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "10.0.0.100"+ "'", str72.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i85 + "' != '" + 100+ "'", i85.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i95 + "' != '" + 0+ "'", i95.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long99 + "' != '" + 1L+ "'", long99.equals(1L));

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get((int)' ');
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    boolean b17 = singlyLinkedList5.remove(iP13);
    tp2.IPBan iPBan19 = new tp2.IPBan(iP13, (java.lang.Long)1L);
    java.lang.String str20 = iPBan19.toString();
    iPBan19.setExpires((java.lang.Long)0L);
    java.lang.Long long23 = iPBan19.expires;
    node4.element = iPBan19;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList25 = new tp2.StrictlySortedSinglyLinkedList();
    int i26 = strictlySortedSinglyLinkedList25.getSize();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b32 = strictlySortedSinglyLinkedList25.containsIP(iP31);
    tp2.Node node33 = strictlySortedSinglyLinkedList25.header;
    java.lang.String str34 = node33.toString();
    node4.next = node33;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList36 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan37 = null;
    boolean b38 = strictlySortedSinglyLinkedList36.add(iPBan37);
    java.util.Set<tp2.IPBan> set_iPBan39 = null;
    boolean b40 = strictlySortedSinglyLinkedList36.repOk(set_iPBan39);
    strictlySortedSinglyLinkedList36.size = (byte)100;
    tp2.Node node43 = strictlySortedSinglyLinkedList36.header;
    node4.next = node43;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L+ "'", long23.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[null]"+ "'", str34.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node43);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }


    korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer((int)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iFinitization1);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b24 = server16.connect(iP23);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP26 = null;
    boolean b27 = server25.connect(iP26);
    java.lang.String str28 = server25.toString();
    java.lang.String str29 = server25.toString();
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server25.connect(iP35);
    boolean b40 = server16.removeException(iP35);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP42 = null;
    boolean b43 = server41.connect(iP42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b49 = server41.connect(iP48);
    java.lang.Integer i50 = iP48.getFirst();
    boolean b51 = server16.connect(iP48);
    iPBan14.ip = iP48;
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    java.lang.Integer i60 = iP57.getSecond();
    iPBan14.ip = iP57;
    java.lang.String str62 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)1466185870380L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 100+ "'", i50.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 0+ "'", i60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "IPBan [ip=1.0.0.100, expires=1]"+ "'", str62.equals("IPBan [ip=1.0.0.100, expires=1]"));

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    int i3 = singlyLinkedList0.getSize();
    int i4 = singlyLinkedList0.getSize();
    java.lang.String str5 = singlyLinkedList0.toString();
    tp2.IP iP7 = singlyLinkedList0.get(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "()"+ "'", str5.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP5 = entry0.element;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.Entry entry7 = new tp2.Entry();
    java.lang.String str8 = entry7.toString();
    java.lang.String str9 = entry7.toString();
    tp2.Entry entry10 = entry7.next;
    entry6.next = entry7;
    entry0.next = entry6;
    tp2.Entry entry13 = entry0.next;
    java.lang.String str14 = entry0.toString();
    tp2.IP iP15 = entry0.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[null]"+ "'", str8.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[null]"+ "'", str14.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    entry55.element = iP60;
    tp2.Entry entry63 = entry55.next;
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP65 = null;
    boolean b66 = server64.connect(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b72 = server64.connect(iP71);
    java.lang.Integer i73 = iP71.getFirst();
    entry55.element = iP71;
    iP71.setFourth((java.lang.Integer)100);
    boolean b77 = server0.removeException(iP71);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList78 = new tp2.StrictlySortedSinglyLinkedList();
    boolean b79 = iP71.equals((java.lang.Object)strictlySortedSinglyLinkedList78);
    java.lang.String str80 = strictlySortedSinglyLinkedList78.toString();
    tp2.Node node81 = strictlySortedSinglyLinkedList78.header;
    java.lang.String str82 = node81.toString();
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i88 = iP87.getFirst();
    java.lang.String str89 = iP87.toString();
    java.lang.String str90 = iP87.toString();
    iP87.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan94 = new tp2.IPBan(iP87, (java.lang.Long)0L);
    java.lang.String str95 = iPBan94.toString();
    node81.element = iPBan94;
    tp2.Node node97 = node81.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 100+ "'", i73.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "{}"+ "'", str80.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "[null]"+ "'", str82.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 10+ "'", i88.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "10.0.0.100"+ "'", str89.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "10.0.0.100"+ "'", str90.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "IPBan [ip=10.0.-1.100, expires=0]"+ "'", str95.equals("IPBan [ip=10.0.-1.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node97);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.Server server19 = new tp2.Server();
    tp2.IP iP20 = null;
    boolean b21 = server19.connect(iP20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b27 = server19.connect(iP26);
    java.lang.Integer i28 = iP26.getFirst();
    java.lang.Integer i29 = iP26.getFirst();
    iPBan14.setIp(iP26);
    iP26.setSecond((java.lang.Integer)10);
    java.lang.Integer i33 = iP26.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 100+ "'", i28.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 100+ "'", i29.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + (-1)+ "'", i33.equals((-1)));

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    java.lang.String str5 = strictlySortedSinglyLinkedList0.toString();
    tp2.IPBan iPBan7 = strictlySortedSinglyLinkedList0.get(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "{[null]}"+ "'", str5.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan7);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList34 = new tp2.StrictlySortedSinglyLinkedList();
    int i35 = strictlySortedSinglyLinkedList34.size;
    tp2.IPBan iPBan36 = null;
    boolean b37 = strictlySortedSinglyLinkedList34.add(iPBan36);
    boolean b38 = strictlySortedSinglyLinkedList34.isEmpty();
    java.lang.String str39 = strictlySortedSinglyLinkedList34.toString();
    tp2.Node node40 = new tp2.Node();
    tp2.IPBan iPBan41 = null;
    node40.element = iPBan41;
    tp2.IPBan iPBan43 = node40.element;
    strictlySortedSinglyLinkedList34.header = node40;
    tp2.IPBan iPBan46 = strictlySortedSinglyLinkedList34.get((-1));
    tp2.IPBan iPBan48 = strictlySortedSinglyLinkedList34.get((int)' ');
    tp2.Node node49 = strictlySortedSinglyLinkedList34.header;
    strictlySortedSinglyLinkedList0.header = node49;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "{[null]}"+ "'", str39.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node49);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList9.size = 10;
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    server12.update();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP19.setFirst((java.lang.Integer)1);
    java.lang.Integer i22 = iP19.getSecond();
    boolean b23 = server12.addException(iP19);
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = server12.addException(iP29);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b39 = server12.removeBan(iP38);
    iP38.setThird((java.lang.Integer)0);
    boolean b42 = strictlySortedSinglyLinkedList9.removeFromIP(iP38);
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    server43.update();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP50.setFirst((java.lang.Integer)1);
    java.lang.Integer i53 = iP50.getSecond();
    boolean b54 = server43.addException(iP50);
    boolean b55 = strictlySortedSinglyLinkedList9.removeFromIP(iP50);
    boolean b56 = server0.connect(iP50);
    java.lang.String str57 = server0.toString();
    tp2.SinglyLinkedList singlyLinkedList58 = new tp2.SinglyLinkedList();
    tp2.IP iP60 = singlyLinkedList58.get((int)' ');
    tp2.Entry entry61 = new tp2.Entry();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i67 = iP66.getFirst();
    java.lang.String str68 = iP66.toString();
    entry61.element = iP66;
    boolean b70 = singlyLinkedList58.remove(iP66);
    tp2.IPBan iPBan72 = new tp2.IPBan(iP66, (java.lang.Long)1L);
    tp2.Server server73 = new tp2.Server();
    java.lang.String str74 = server73.toString();
    server73.update();
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i81 = iP80.getFirst();
    boolean b82 = server73.connect(iP80);
    iPBan72.ip = iP80;
    tp2.IP iP84 = iPBan72.ip;
    boolean b85 = server0.removeBan(iP84);
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP90.setFirst((java.lang.Integer)1);
    java.lang.Integer i93 = iP90.getSecond();
    iP90.setThird((java.lang.Integer)(-1));
    boolean b96 = server0.removeException(iP90);
    java.lang.Integer i97 = iP90.getFirst();
    iP90.setFourth((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 0+ "'", i22.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 0+ "'", i53.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str57.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 10+ "'", i67.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "10.0.0.100"+ "'", str68.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str74.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i81 + "' != '" + 100+ "'", i81.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i93 + "' != '" + 0+ "'", i93.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i97 + "' != '" + 1+ "'", i97.equals(1));

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    java.lang.String str12 = server9.toString();
    java.lang.String str13 = server9.toString();
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    entry14.element = iP19;
    boolean b23 = server9.connect(iP19);
    boolean b24 = server0.removeException(iP19);
    java.lang.String str25 = server0.toString();
    java.lang.String str26 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    server16.update();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP23.setFirst((java.lang.Integer)1);
    java.lang.Integer i26 = iP23.getSecond();
    boolean b27 = server16.addException(iP23);
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = server16.addException(iP33);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b43 = server16.removeBan(iP42);
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP45 = null;
    boolean b46 = server44.connect(iP45);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b52 = server44.connect(iP51);
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP54 = null;
    boolean b55 = server53.connect(iP54);
    java.lang.String str56 = server53.toString();
    java.lang.String str57 = server53.toString();
    tp2.Entry entry58 = new tp2.Entry();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i64 = iP63.getFirst();
    java.lang.String str65 = iP63.toString();
    entry58.element = iP63;
    boolean b67 = server53.connect(iP63);
    boolean b68 = server44.removeException(iP63);
    boolean b69 = server16.connect(iP63);
    java.lang.Integer i70 = iP63.getFirst();
    boolean b71 = strictlySortedSinglyLinkedList0.removeFromIP(iP63);
    boolean b72 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node73 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan74 = node73.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str57.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 10+ "'", i64.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "10.0.0.100"+ "'", str65.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 10+ "'", i70.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan74);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)2, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan5 = strictlySortedSinglyLinkedList0.get((int)'#');
    strictlySortedSinglyLinkedList0.size = (short)100;
    tp2.Node node8 = strictlySortedSinglyLinkedList0.header;
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    java.lang.String str12 = server9.toString();
    java.lang.String str13 = server9.toString();
    tp2.IP iP14 = null;
    boolean b15 = server9.removeException(iP14);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList16 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList16.size = 10;
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    server19.update();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP26.setFirst((java.lang.Integer)1);
    java.lang.Integer i29 = iP26.getSecond();
    boolean b30 = server19.addException(iP26);
    tp2.Entry entry31 = new tp2.Entry();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i37 = iP36.getFirst();
    java.lang.String str38 = iP36.toString();
    entry31.element = iP36;
    boolean b40 = server19.addException(iP36);
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b46 = server19.removeBan(iP45);
    iP45.setThird((java.lang.Integer)0);
    boolean b49 = strictlySortedSinglyLinkedList16.removeFromIP(iP45);
    tp2.Server server50 = new tp2.Server();
    java.lang.String str51 = server50.toString();
    server50.update();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    java.lang.Integer i60 = iP57.getSecond();
    boolean b61 = server50.addException(iP57);
    boolean b62 = strictlySortedSinglyLinkedList16.removeFromIP(iP57);
    boolean b63 = server9.connect(iP57);
    tp2.Entry entry64 = new tp2.Entry();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i70 = iP69.getFirst();
    entry64.element = iP69;
    tp2.Entry entry72 = entry64.next;
    tp2.Server server73 = new tp2.Server();
    tp2.IP iP74 = null;
    boolean b75 = server73.connect(iP74);
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b81 = server73.connect(iP80);
    java.lang.Integer i82 = iP80.getFirst();
    entry64.element = iP80;
    iP80.setFourth((java.lang.Integer)100);
    boolean b86 = server9.removeException(iP80);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList87 = new tp2.StrictlySortedSinglyLinkedList();
    boolean b88 = iP80.equals((java.lang.Object)strictlySortedSinglyLinkedList87);
    java.lang.String str89 = strictlySortedSinglyLinkedList87.toString();
    tp2.Node node90 = strictlySortedSinglyLinkedList87.header;
    tp2.IPBan iPBan91 = node90.element;
    node8.next = node90;
    java.lang.String str93 = node90.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 0+ "'", i29.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 0+ "'", i60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 10+ "'", i70.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i82 + "' != '" + 100+ "'", i82.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "{}"+ "'", str89.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str93 + "' != '" + "[null]"+ "'", str93.equals("[null]"));

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = entry0.next;
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b17 = server9.connect(iP16);
    java.lang.Integer i18 = iP16.getFirst();
    entry0.element = iP16;
    tp2.Entry entry20 = entry0.next;
    tp2.Entry entry21 = new tp2.Entry();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i27 = iP26.getFirst();
    java.lang.String str28 = iP26.toString();
    entry21.element = iP26;
    tp2.Entry entry30 = new tp2.Entry();
    tp2.Entry entry31 = new tp2.Entry();
    java.lang.String str32 = entry31.toString();
    java.lang.String str33 = entry31.toString();
    tp2.Entry entry34 = entry31.next;
    entry30.next = entry31;
    tp2.IP iP36 = entry30.element;
    entry21.next = entry30;
    tp2.Entry entry38 = entry21.next;
    // The following exception was thrown during execution in test generation
    try {
      entry20.next = entry21;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 100+ "'", i18.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[null]"+ "'", str32.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "[null]"+ "'", str33.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry38);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    boolean b39 = iP5.equals((java.lang.Object)iPBan26);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    int i41 = singlyLinkedList40.getSize();
    java.lang.String str42 = singlyLinkedList40.toString();
    int i43 = singlyLinkedList40.getSize();
    java.util.Set<tp2.IP> set_iP44 = null;
    boolean b45 = singlyLinkedList40.repOk(set_iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b51 = singlyLinkedList40.remove(iP50);
    iPBan26.setIp(iP50);
    iPBan26.setExpires((java.lang.Long)1466185870380L);
    iPBan26.setExpires((java.lang.Long)1466185871428L);
    java.lang.String str57 = iPBan26.toString();
    java.lang.Long long58 = iPBan26.expires;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "()"+ "'", str42.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "IPBan [ip=100.10.-1.10, expires=1466185871428]"+ "'", str57.equals("IPBan [ip=100.10.-1.10, expires=1466185871428]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1466185871428L+ "'", long58.equals(1466185871428L));

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.Integer i15 = iP8.getFirst();
    java.lang.Integer i16 = iP8.getFourth();
    java.lang.Integer i17 = iP8.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 100+ "'", i16.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 0+ "'", i17.equals(0));

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.size;
    int i5 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    java.lang.String str13 = iP10.toString();
    iP10.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan17 = new tp2.IPBan(iP10, (java.lang.Long)0L);
    tp2.IP iP18 = iPBan17.ip;
    // The following exception was thrown during execution in test generation
    try {
      boolean b19 = strictlySortedSinglyLinkedList0.removeFromIP(iP18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP18);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    entry55.element = iP60;
    tp2.Entry entry63 = entry55.next;
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP65 = null;
    boolean b66 = server64.connect(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b72 = server64.connect(iP71);
    java.lang.Integer i73 = iP71.getFirst();
    entry55.element = iP71;
    iP71.setFourth((java.lang.Integer)100);
    boolean b77 = server0.removeException(iP71);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList78 = new tp2.StrictlySortedSinglyLinkedList();
    boolean b79 = iP71.equals((java.lang.Object)strictlySortedSinglyLinkedList78);
    java.lang.String str80 = strictlySortedSinglyLinkedList78.toString();
    tp2.Node node81 = strictlySortedSinglyLinkedList78.header;
    java.lang.String str82 = node81.toString();
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i88 = iP87.getFirst();
    java.lang.String str89 = iP87.toString();
    java.lang.String str90 = iP87.toString();
    iP87.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan94 = new tp2.IPBan(iP87, (java.lang.Long)0L);
    java.lang.String str95 = iPBan94.toString();
    node81.element = iPBan94;
    java.lang.String str97 = iPBan94.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 100+ "'", i73.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "{}"+ "'", str80.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "[null]"+ "'", str82.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 10+ "'", i88.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "10.0.0.100"+ "'", str89.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "10.0.0.100"+ "'", str90.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "IPBan [ip=10.0.-1.100, expires=0]"+ "'", str95.equals("IPBan [ip=10.0.-1.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str97 + "' != '" + "IPBan [ip=10.0.-1.100, expires=0]"+ "'", str97.equals("IPBan [ip=10.0.-1.100, expires=0]"));

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b24 = server16.connect(iP23);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP26 = null;
    boolean b27 = server25.connect(iP26);
    java.lang.String str28 = server25.toString();
    java.lang.String str29 = server25.toString();
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server25.connect(iP35);
    boolean b40 = server16.removeException(iP35);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP42 = null;
    boolean b43 = server41.connect(iP42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b49 = server41.connect(iP48);
    java.lang.Integer i50 = iP48.getFirst();
    boolean b51 = server16.connect(iP48);
    iPBan14.ip = iP48;
    iP48.setSecond((java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 100+ "'", i50.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    boolean b39 = iP5.equals((java.lang.Object)iPBan26);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    int i41 = singlyLinkedList40.getSize();
    java.lang.String str42 = singlyLinkedList40.toString();
    int i43 = singlyLinkedList40.getSize();
    java.util.Set<tp2.IP> set_iP44 = null;
    boolean b45 = singlyLinkedList40.repOk(set_iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b51 = singlyLinkedList40.remove(iP50);
    iPBan26.setIp(iP50);
    iPBan26.setExpires((java.lang.Long)1466185870380L);
    iPBan26.expires = 1466185877441L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "()"+ "'", str42.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = entry0.next;
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b17 = server9.connect(iP16);
    java.lang.Integer i18 = iP16.getFirst();
    entry0.element = iP16;
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP24.setThird((java.lang.Integer)1);
    entry0.element = iP24;
    tp2.Entry entry28 = new tp2.Entry();
    java.lang.String str29 = entry28.toString();
    tp2.Entry entry30 = new tp2.Entry();
    java.lang.String str31 = entry30.toString();
    entry28.next = entry30;
    entry0.next = entry28;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList34 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan35 = null;
    boolean b36 = strictlySortedSinglyLinkedList34.contains(iPBan35);
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    server37.update();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i45 = iP44.getFirst();
    boolean b46 = server37.connect(iP44);
    boolean b47 = strictlySortedSinglyLinkedList34.removeFromIP(iP44);
    java.lang.Integer i48 = iP44.getThird();
    iP44.setFourth((java.lang.Integer)100);
    entry0.element = iP44;
    tp2.Entry entry52 = new tp2.Entry();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i58 = iP57.getFirst();
    java.lang.String str59 = iP57.toString();
    entry52.element = iP57;
    tp2.IP iP61 = entry52.element;
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP63 = null;
    boolean b64 = server62.connect(iP63);
    java.lang.String str65 = server62.toString();
    java.lang.String str66 = server62.toString();
    tp2.SinglyLinkedList singlyLinkedList67 = new tp2.SinglyLinkedList();
    tp2.IP iP69 = singlyLinkedList67.get((int)' ');
    tp2.Entry entry70 = new tp2.Entry();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i76 = iP75.getFirst();
    java.lang.String str77 = iP75.toString();
    entry70.element = iP75;
    boolean b79 = singlyLinkedList67.remove(iP75);
    tp2.IPBan iPBan81 = new tp2.IPBan(iP75, (java.lang.Long)1L);
    java.lang.String str82 = iPBan81.toString();
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i88 = iP87.getFirst();
    java.lang.String str89 = iP87.toString();
    java.lang.String str90 = iP87.toString();
    iPBan81.setIp(iP87);
    java.lang.Integer i92 = iP87.getFirst();
    boolean b93 = server62.removeException(iP87);
    iP87.setThird((java.lang.Integer)(-1));
    entry52.element = iP87;
    java.lang.String str97 = entry52.toString();
    entry0.next = entry52;
    java.lang.String str99 = entry0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 100+ "'", i18.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[null]"+ "'", str29.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[null]"+ "'", str31.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 100+ "'", i45.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + (-1)+ "'", i48.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 10+ "'", i58.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "10.0.0.100"+ "'", str59.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 10+ "'", i76.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str82.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 10+ "'", i88.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "10.0.0.100"+ "'", str89.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "10.0.0.100"+ "'", str90.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i92 + "' != '" + 10+ "'", i92.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str97 + "' != '" + "[10.0.-1.100]"+ "'", str97.equals("[10.0.-1.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str99 + "' != '" + "[100.10.-1.100]"+ "'", str99.equals("[100.10.-1.100]"));

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    entry55.element = iP60;
    tp2.Entry entry63 = entry55.next;
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP65 = null;
    boolean b66 = server64.connect(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b72 = server64.connect(iP71);
    java.lang.Integer i73 = iP71.getFirst();
    entry55.element = iP71;
    iP71.setFourth((java.lang.Integer)100);
    boolean b77 = server0.removeException(iP71);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList78 = new tp2.StrictlySortedSinglyLinkedList();
    boolean b79 = iP71.equals((java.lang.Object)strictlySortedSinglyLinkedList78);
    tp2.IP iP84 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    boolean b85 = strictlySortedSinglyLinkedList78.removeFromIP(iP84);
    java.lang.Integer i86 = iP84.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 100+ "'", i73.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i86 + "' != '" + 10+ "'", i86.equals(10));

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    iP17.setFourth((java.lang.Integer)10);
    iP17.setThird((java.lang.Integer)11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    java.util.Set<tp2.IPBan> set_iPBan9 = null;
    boolean b10 = strictlySortedSinglyLinkedList0.repOk(set_iPBan9);
    tp2.SinglyLinkedList singlyLinkedList11 = new tp2.SinglyLinkedList();
    tp2.IP iP13 = singlyLinkedList11.get((int)' ');
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    entry14.element = iP19;
    boolean b23 = singlyLinkedList11.remove(iP19);
    tp2.IPBan iPBan25 = new tp2.IPBan(iP19, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList26 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan27 = null;
    boolean b28 = strictlySortedSinglyLinkedList26.contains(iPBan27);
    int i29 = strictlySortedSinglyLinkedList26.getSize();
    tp2.IPBan iPBan31 = strictlySortedSinglyLinkedList26.get((int)'#');
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP36.setSecond((java.lang.Integer)(-1));
    boolean b39 = strictlySortedSinglyLinkedList26.removeFromIP(iP36);
    iPBan25.ip = iP36;
    // The following exception was thrown during execution in test generation
    try {
      boolean b41 = strictlySortedSinglyLinkedList0.containsIP(iP36);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    int i13 = singlyLinkedList12.getSize();
    tp2.SinglyLinkedList singlyLinkedList14 = new tp2.SinglyLinkedList();
    tp2.IP iP16 = singlyLinkedList14.get((int)' ');
    tp2.Entry entry17 = new tp2.Entry();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i23 = iP22.getFirst();
    java.lang.String str24 = iP22.toString();
    entry17.element = iP22;
    boolean b26 = singlyLinkedList14.remove(iP22);
    tp2.IP iP28 = singlyLinkedList14.get((int)'4');
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    boolean b36 = singlyLinkedList14.contains(iP33);
    boolean b37 = singlyLinkedList12.remove(iP33);
    boolean b38 = server0.addException(iP33);
    tp2.Server server39 = new tp2.Server();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP44.setSecond((java.lang.Integer)(-1));
    boolean b47 = server39.addException(iP44);
    iP44.setFourth((java.lang.Integer)0);
    boolean b50 = server0.removeBan(iP44);
    java.lang.String str51 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 10+ "'", i23.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "10.0.0.100"+ "'", str24.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=1466185881920, exceptions=([10.0.0.100][1.0.0.100]), bans={}]"+ "'", str51.equals("Server [lastUpdate=1466185881920, exceptions=([10.0.0.100][1.0.0.100]), bans={}]"));

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP58.setSecond((java.lang.Integer)1);
    boolean b61 = server0.removeBan(iP58);
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP63 = null;
    boolean b64 = server62.connect(iP63);
    java.lang.String str65 = server62.toString();
    java.lang.String str66 = server62.toString();
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = server62.connect(iP72);
    boolean b77 = server0.addBan(iP72);
    tp2.Server server78 = new tp2.Server();
    tp2.IP iP79 = null;
    boolean b80 = server78.connect(iP79);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b86 = server78.connect(iP85);
    java.lang.Integer i87 = iP85.getFirst();
    java.lang.Integer i88 = iP85.getThird();
    iP85.setThird((java.lang.Integer)100);
    boolean b91 = server0.removeBan(iP85);
    java.lang.String str92 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i87 + "' != '" + 100+ "'", i87.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + (-1)+ "'", i88.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "Server [lastUpdate=1466185881932, exceptions=([10.0.0.100][1.0.0.100]), bans={}]"+ "'", str92.equals("Server [lastUpdate=1466185881932, exceptions=([10.0.0.100][1.0.0.100]), bans={}]"));

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    boolean b9 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    int i11 = strictlySortedSinglyLinkedList10.getSize();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList10.add(iPBan12);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList14 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node15 = strictlySortedSinglyLinkedList14.header;
    strictlySortedSinglyLinkedList10.header = node15;
    strictlySortedSinglyLinkedList10.size = 0;
    int i19 = strictlySortedSinglyLinkedList10.size;
    tp2.Node node20 = strictlySortedSinglyLinkedList10.header;
    tp2.Node node21 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList0.header = node21;
    boolean b23 = strictlySortedSinglyLinkedList0.isEmpty();
    strictlySortedSinglyLinkedList0.size = 2;
    boolean b26 = strictlySortedSinglyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP5 = entry0.element;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.Entry entry7 = new tp2.Entry();
    java.lang.String str8 = entry7.toString();
    java.lang.String str9 = entry7.toString();
    tp2.Entry entry10 = entry7.next;
    entry6.next = entry7;
    entry0.next = entry6;
    tp2.Entry entry13 = entry0.next;
    tp2.Entry entry14 = entry13.next;
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    tp2.Node node24 = new tp2.Node();
    tp2.IPBan iPBan25 = null;
    node24.element = iPBan25;
    tp2.SinglyLinkedList singlyLinkedList27 = new tp2.SinglyLinkedList();
    tp2.IP iP29 = singlyLinkedList27.get((int)' ');
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = singlyLinkedList27.remove(iP35);
    tp2.IPBan iPBan41 = new tp2.IPBan(iP35, (java.lang.Long)1L);
    java.lang.String str42 = iPBan41.toString();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    java.lang.String str50 = iP47.toString();
    iPBan41.setIp(iP47);
    java.lang.Long long52 = iPBan41.getExpires();
    node24.element = iPBan41;
    boolean b54 = iP20.equals((java.lang.Object)iPBan41);
    tp2.SinglyLinkedList singlyLinkedList55 = new tp2.SinglyLinkedList();
    int i56 = singlyLinkedList55.getSize();
    java.lang.String str57 = singlyLinkedList55.toString();
    int i58 = singlyLinkedList55.getSize();
    java.util.Set<tp2.IP> set_iP59 = null;
    boolean b60 = singlyLinkedList55.repOk(set_iP59);
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b66 = singlyLinkedList55.remove(iP65);
    iPBan41.setIp(iP65);
    iPBan41.setExpires((java.lang.Long)1466185870380L);
    java.lang.String str70 = iPBan41.toString();
    tp2.Server server71 = new tp2.Server();
    tp2.IP iP72 = null;
    boolean b73 = server71.connect(iP72);
    java.lang.String str74 = server71.toString();
    java.lang.String str75 = server71.toString();
    tp2.Entry entry76 = new tp2.Entry();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i82 = iP81.getFirst();
    java.lang.String str83 = iP81.toString();
    entry76.element = iP81;
    boolean b85 = server71.connect(iP81);
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i91 = iP90.getFirst();
    java.lang.String str92 = iP90.toString();
    java.lang.String str93 = iP90.toString();
    boolean b94 = server71.removeBan(iP90);
    java.lang.Integer i95 = iP90.getFirst();
    iPBan41.ip = iP90;
    entry13.element = iP90;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[null]"+ "'", str8.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str42.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "10.0.0.100"+ "'", str50.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L+ "'", long52.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "()"+ "'", str57.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "IPBan [ip=100.10.-1.10, expires=1466185870380]"+ "'", str70.equals("IPBan [ip=100.10.-1.10, expires=1466185870380]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str74.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str75.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i82 + "' != '" + 10+ "'", i82.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "10.0.0.100"+ "'", str83.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i91 + "' != '" + 10+ "'", i91.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "10.0.0.100"+ "'", str92.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str93 + "' != '" + "10.0.0.100"+ "'", str93.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i95 + "' != '" + 10+ "'", i95.equals(10));

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = new tp2.Entry();
    java.lang.String str4 = entry3.toString();
    entry0.next = entry3;
    tp2.Entry entry6 = new tp2.Entry();
    java.lang.String str7 = entry6.toString();
    entry0.next = entry6;
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    server9.update();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP16.setFirst((java.lang.Integer)1);
    java.lang.Integer i19 = iP16.getSecond();
    boolean b20 = server9.addException(iP16);
    tp2.Entry entry21 = new tp2.Entry();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i27 = iP26.getFirst();
    java.lang.String str28 = iP26.toString();
    entry21.element = iP26;
    boolean b30 = server9.addException(iP26);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b36 = server9.removeBan(iP35);
    java.lang.String str37 = server9.toString();
    server9.update();
    tp2.SinglyLinkedList singlyLinkedList39 = new tp2.SinglyLinkedList();
    int i40 = singlyLinkedList39.getSize();
    java.lang.String str41 = singlyLinkedList39.toString();
    int i42 = singlyLinkedList39.getSize();
    java.util.Set<tp2.IP> set_iP43 = null;
    boolean b44 = singlyLinkedList39.repOk(set_iP43);
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b50 = singlyLinkedList39.remove(iP49);
    boolean b51 = server9.removeBan(iP49);
    java.lang.String str52 = iP49.toString();
    entry6.element = iP49;
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i59 = iP58.getFirst();
    java.lang.String str60 = iP58.toString();
    java.lang.String str61 = iP58.toString();
    iP58.setThird((java.lang.Integer)(-1));
    java.lang.String str64 = iP58.toString();
    entry6.element = iP58;
    tp2.Entry entry66 = entry6.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[null]"+ "'", str4.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[null]"+ "'", str7.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 0+ "'", i19.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=1466185882139, exceptions=([10.0.0.100][1.0.0.100]), bans={}]"+ "'", str37.equals("Server [lastUpdate=1466185882139, exceptions=([10.0.0.100][1.0.0.100]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "()"+ "'", str41.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "100.10.-1.10"+ "'", str52.equals("100.10.-1.10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 10+ "'", i59.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "10.0.0.100"+ "'", str60.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "10.0.0.100"+ "'", str61.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "10.0.-1.100"+ "'", str64.equals("10.0.-1.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry66);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.contains(iPBan2);
    tp2.SinglyLinkedList singlyLinkedList4 = new tp2.SinglyLinkedList();
    tp2.IP iP6 = singlyLinkedList4.get((int)' ');
    tp2.Entry entry7 = new tp2.Entry();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i13 = iP12.getFirst();
    java.lang.String str14 = iP12.toString();
    entry7.element = iP12;
    boolean b16 = singlyLinkedList4.remove(iP12);
    tp2.IPBan iPBan18 = new tp2.IPBan(iP12, (java.lang.Long)1L);
    java.lang.String str19 = iPBan18.toString();
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP21 = null;
    boolean b22 = server20.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b28 = server20.connect(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP30 = null;
    boolean b31 = server29.connect(iP30);
    java.lang.String str32 = server29.toString();
    java.lang.String str33 = server29.toString();
    tp2.Entry entry34 = new tp2.Entry();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    entry34.element = iP39;
    boolean b43 = server29.connect(iP39);
    boolean b44 = server20.removeException(iP39);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP46 = null;
    boolean b47 = server45.connect(iP46);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b53 = server45.connect(iP52);
    java.lang.Integer i54 = iP52.getFirst();
    boolean b55 = server20.connect(iP52);
    iPBan18.ip = iP52;
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP58 = null;
    boolean b59 = server57.connect(iP58);
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b65 = server57.connect(iP64);
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP67 = null;
    boolean b68 = server66.connect(iP67);
    java.lang.String str69 = server66.toString();
    java.lang.String str70 = server66.toString();
    tp2.Entry entry71 = new tp2.Entry();
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i77 = iP76.getFirst();
    java.lang.String str78 = iP76.toString();
    entry71.element = iP76;
    boolean b80 = server66.connect(iP76);
    boolean b81 = server57.removeException(iP76);
    tp2.Server server82 = new tp2.Server();
    tp2.IP iP83 = null;
    boolean b84 = server82.connect(iP83);
    tp2.IP iP89 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b90 = server82.connect(iP89);
    java.lang.Integer i91 = iP89.getFirst();
    boolean b92 = server57.connect(iP89);
    iPBan18.setIp(iP89);
    boolean b94 = strictlySortedSinglyLinkedList0.add(iPBan18);
    tp2.IPBan iPBan96 = strictlySortedSinglyLinkedList0.get((-1));
    java.util.Set<tp2.IPBan> set_iPBan97 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b98 = strictlySortedSinglyLinkedList0.repOk(set_iPBan97);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 10+ "'", i13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str19.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 100+ "'", i54.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str69.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str70.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i77 + "' != '" + 10+ "'", i77.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "10.0.0.100"+ "'", str78.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i91 + "' != '" + 100+ "'", i91.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan96);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.IP iP6 = entry0.element;
    tp2.Entry entry7 = entry0.next;
    tp2.IP iP8 = entry0.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP8);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    tp2.Node node5 = strictlySortedSinglyLinkedList0.header;
    java.util.Set<tp2.IPBan> set_iPBan6 = null;
    boolean b7 = strictlySortedSinglyLinkedList0.repOk(set_iPBan6);
    tp2.IPBan iPBan9 = strictlySortedSinglyLinkedList0.get((int)(byte)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    int i34 = strictlySortedSinglyLinkedList0.getSize();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    java.lang.String str50 = iPBan49.toString();
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP52 = null;
    boolean b53 = server51.connect(iP52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b59 = server51.connect(iP58);
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP61 = null;
    boolean b62 = server60.connect(iP61);
    java.lang.String str63 = server60.toString();
    java.lang.String str64 = server60.toString();
    tp2.Entry entry65 = new tp2.Entry();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i71 = iP70.getFirst();
    java.lang.String str72 = iP70.toString();
    entry65.element = iP70;
    boolean b74 = server60.connect(iP70);
    boolean b75 = server51.removeException(iP70);
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP77 = null;
    boolean b78 = server76.connect(iP77);
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b84 = server76.connect(iP83);
    java.lang.Integer i85 = iP83.getFirst();
    boolean b86 = server51.connect(iP83);
    iPBan49.ip = iP83;
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP92.setFirst((java.lang.Integer)1);
    java.lang.Integer i95 = iP92.getSecond();
    iPBan49.ip = iP92;
    boolean b97 = strictlySortedSinglyLinkedList0.contains(iPBan49);
    int i98 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str99 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str63.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str64.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i71 + "' != '" + 10+ "'", i71.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "10.0.0.100"+ "'", str72.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i85 + "' != '" + 100+ "'", i85.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i95 + "' != '" + 0+ "'", i95.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i98 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str99 + "' != '" + "{}"+ "'", str99.equals("{}"));

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    iP26.setThird((java.lang.Integer)0);
    iP26.setFourth((java.lang.Integer)10);
    java.lang.String str32 = iP26.toString();
    java.lang.Integer i33 = iP26.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.100.0.10"+ "'", str32.equals("10.100.0.10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    java.lang.String str5 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node6 = new tp2.Node();
    tp2.IPBan iPBan7 = null;
    node6.element = iPBan7;
    tp2.IPBan iPBan9 = node6.element;
    strictlySortedSinglyLinkedList0.header = node6;
    tp2.Node node11 = node6.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "{[null]}"+ "'", str5.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node11);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.getIp();
    tp2.IP iP20 = iPBan14.ip;
    java.lang.String str21 = iPBan14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str21.equals("IPBan [ip=10.0.0.100, expires=0]"));

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }


    tp2.Node node0 = new tp2.Node();
    tp2.Node node1 = node0.next;
    // The following exception was thrown during execution in test generation
    try {
      tp2.IPBan iPBan2 = node1.element;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node1);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    iP26.setThird((java.lang.Integer)0);
    iP26.setFourth((java.lang.Integer)10);
    java.lang.String str32 = iP26.toString();
    java.lang.Integer i33 = iP26.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.100.0.10"+ "'", str32.equals("10.100.0.10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 0+ "'", i33.equals(0));

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    java.lang.String str11 = iP9.toString();
    java.lang.String str12 = iP9.toString();
    iP9.setThird((java.lang.Integer)(-1));
    entry0.element = iP9;
    tp2.Node node16 = new tp2.Node();
    tp2.IPBan iPBan17 = null;
    node16.element = iPBan17;
    tp2.SinglyLinkedList singlyLinkedList19 = new tp2.SinglyLinkedList();
    tp2.IP iP21 = singlyLinkedList19.get((int)' ');
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = singlyLinkedList19.remove(iP27);
    tp2.IPBan iPBan33 = new tp2.IPBan(iP27, (java.lang.Long)1L);
    java.lang.String str34 = iPBan33.toString();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    java.lang.String str42 = iP39.toString();
    iPBan33.setIp(iP39);
    java.lang.Long long44 = iPBan33.getExpires();
    node16.element = iPBan33;
    iPBan33.expires = 1466185870380L;
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    java.lang.Integer i55 = iP52.getFourth();
    iPBan33.ip = iP52;
    entry0.element = iP52;
    tp2.Entry entry58 = new tp2.Entry();
    java.lang.String str59 = entry58.toString();
    tp2.Server server60 = new tp2.Server();
    java.lang.String str61 = server60.toString();
    server60.update();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i68 = iP67.getFirst();
    boolean b69 = server60.connect(iP67);
    entry58.element = iP67;
    entry0.element = iP67;
    java.lang.Integer i72 = iP67.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "10.0.0.100"+ "'", str11.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str34.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L+ "'", long44.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 100+ "'", i55.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "[null]"+ "'", str59.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str61.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 100+ "'", i68.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i72 + "' != '" + 100+ "'", i72.equals(100));

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    boolean b39 = iP5.equals((java.lang.Object)iPBan26);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    int i41 = singlyLinkedList40.getSize();
    java.lang.String str42 = singlyLinkedList40.toString();
    int i43 = singlyLinkedList40.getSize();
    java.util.Set<tp2.IP> set_iP44 = null;
    boolean b45 = singlyLinkedList40.repOk(set_iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b51 = singlyLinkedList40.remove(iP50);
    iPBan26.setIp(iP50);
    tp2.SinglyLinkedList singlyLinkedList53 = new tp2.SinglyLinkedList();
    tp2.IP iP55 = singlyLinkedList53.get((int)' ');
    tp2.Entry entry56 = new tp2.Entry();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i62 = iP61.getFirst();
    java.lang.String str63 = iP61.toString();
    entry56.element = iP61;
    boolean b65 = singlyLinkedList53.remove(iP61);
    tp2.IPBan iPBan67 = new tp2.IPBan(iP61, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList68 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan69 = null;
    boolean b70 = strictlySortedSinglyLinkedList68.contains(iPBan69);
    int i71 = strictlySortedSinglyLinkedList68.getSize();
    tp2.IPBan iPBan73 = strictlySortedSinglyLinkedList68.get((int)'#');
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP78.setSecond((java.lang.Integer)(-1));
    boolean b81 = strictlySortedSinglyLinkedList68.removeFromIP(iP78);
    iPBan67.ip = iP78;
    java.lang.Integer i83 = iP78.getThird();
    iPBan26.setIp(iP78);
    iP78.setThird((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "()"+ "'", str42.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i62 + "' != '" + 10+ "'", i62.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "10.0.0.100"+ "'", str63.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i83 + "' != '" + 0+ "'", i83.equals(0));

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    tp2.IPBan iPBan7 = strictlySortedSinglyLinkedList0.get(0);
    int i8 = strictlySortedSinglyLinkedList0.size;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    tp2.Node node5 = strictlySortedSinglyLinkedList0.header;
    int i6 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    boolean b10 = server0.removeException(iP7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList11.contains(iPBan12);
    int i14 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan16 = strictlySortedSinglyLinkedList11.get((int)'#');
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP21.setSecond((java.lang.Integer)(-1));
    boolean b24 = strictlySortedSinglyLinkedList11.removeFromIP(iP21);
    boolean b25 = server0.removeBan(iP21);
    tp2.SinglyLinkedList singlyLinkedList26 = new tp2.SinglyLinkedList();
    tp2.IP iP28 = singlyLinkedList26.get((int)' ');
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = singlyLinkedList26.remove(iP34);
    boolean b39 = iP21.equals((java.lang.Object)iP34);
    java.lang.Integer i40 = iP21.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 100+ "'", i40.equals(100));

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    boolean b5 = strictlySortedSinglyLinkedList0.isEmpty();
    int i6 = strictlySortedSinglyLinkedList0.size;
    tp2.Node node7 = new tp2.Node();
    tp2.IPBan iPBan8 = null;
    node7.element = iPBan8;
    tp2.SinglyLinkedList singlyLinkedList10 = new tp2.SinglyLinkedList();
    tp2.IP iP12 = singlyLinkedList10.get((int)' ');
    tp2.Entry entry13 = new tp2.Entry();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i19 = iP18.getFirst();
    java.lang.String str20 = iP18.toString();
    entry13.element = iP18;
    boolean b22 = singlyLinkedList10.remove(iP18);
    tp2.IPBan iPBan24 = new tp2.IPBan(iP18, (java.lang.Long)1L);
    java.lang.String str25 = iPBan24.toString();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i31 = iP30.getFirst();
    java.lang.String str32 = iP30.toString();
    java.lang.String str33 = iP30.toString();
    iPBan24.setIp(iP30);
    java.lang.Long long35 = iPBan24.getExpires();
    node7.element = iPBan24;
    iPBan24.expires = 1466185870380L;
    tp2.Server server39 = new tp2.Server();
    tp2.IP iP40 = null;
    boolean b41 = server39.connect(iP40);
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b47 = server39.connect(iP46);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList48 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList48.size = 10;
    tp2.Server server51 = new tp2.Server();
    java.lang.String str52 = server51.toString();
    server51.update();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP58.setFirst((java.lang.Integer)1);
    java.lang.Integer i61 = iP58.getSecond();
    boolean b62 = server51.addException(iP58);
    tp2.Entry entry63 = new tp2.Entry();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i69 = iP68.getFirst();
    java.lang.String str70 = iP68.toString();
    entry63.element = iP68;
    boolean b72 = server51.addException(iP68);
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b78 = server51.removeBan(iP77);
    iP77.setThird((java.lang.Integer)0);
    boolean b81 = strictlySortedSinglyLinkedList48.removeFromIP(iP77);
    tp2.Server server82 = new tp2.Server();
    java.lang.String str83 = server82.toString();
    server82.update();
    tp2.IP iP89 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP89.setFirst((java.lang.Integer)1);
    java.lang.Integer i92 = iP89.getSecond();
    boolean b93 = server82.addException(iP89);
    boolean b94 = strictlySortedSinglyLinkedList48.removeFromIP(iP89);
    boolean b95 = server39.connect(iP89);
    iPBan24.setIp(iP89);
    // The following exception was thrown during execution in test generation
    try {
      boolean b97 = strictlySortedSinglyLinkedList0.contains(iPBan24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 10+ "'", i19.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "10.0.0.100"+ "'", str20.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str25.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 10+ "'", i31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "10.0.0.100"+ "'", str33.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L+ "'", long35.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str52.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 0+ "'", i61.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i69 + "' != '" + 10+ "'", i69.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "10.0.0.100"+ "'", str70.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str83.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i92 + "' != '" + 0+ "'", i92.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    boolean b3 = singlyLinkedList0.isEmpty();
    tp2.IP iP4 = null;
    boolean b5 = singlyLinkedList0.remove(iP4);
    boolean b6 = singlyLinkedList0.isEmpty();
    int i7 = singlyLinkedList0.getSize();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP9 = null;
    boolean b10 = server8.connect(iP9);
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    server11.update();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP18.setFirst((java.lang.Integer)1);
    java.lang.Integer i21 = iP18.getSecond();
    boolean b22 = server11.addException(iP18);
    tp2.Entry entry23 = new tp2.Entry();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i29 = iP28.getFirst();
    java.lang.String str30 = iP28.toString();
    entry23.element = iP28;
    boolean b32 = server11.addException(iP28);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList33 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList33.size = 10;
    tp2.Server server36 = new tp2.Server();
    java.lang.String str37 = server36.toString();
    server36.update();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP43.setFirst((java.lang.Integer)1);
    java.lang.Integer i46 = iP43.getSecond();
    boolean b47 = server36.addException(iP43);
    tp2.Entry entry48 = new tp2.Entry();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i54 = iP53.getFirst();
    java.lang.String str55 = iP53.toString();
    entry48.element = iP53;
    boolean b57 = server36.addException(iP53);
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b63 = server36.removeBan(iP62);
    iP62.setThird((java.lang.Integer)0);
    boolean b66 = strictlySortedSinglyLinkedList33.removeFromIP(iP62);
    boolean b67 = server11.addException(iP62);
    java.lang.String str68 = iP62.toString();
    boolean b69 = server8.removeBan(iP62);
    java.lang.Integer i70 = iP62.getThird();
    boolean b71 = singlyLinkedList0.contains(iP62);
    iP62.setFirst((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 0+ "'", i21.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 10+ "'", i29.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "10.0.0.100"+ "'", str30.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 0+ "'", i46.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "10.0.0.100"+ "'", str55.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "10.100.0.1"+ "'", str68.equals("10.100.0.1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 0+ "'", i70.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    int i9 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP10 = null;
    tp2.IPBan iPBan12 = new tp2.IPBan(iP10, (java.lang.Long)200000L);
    iPBan12.setExpires((java.lang.Long)1466185872933L);
    // The following exception was thrown during execution in test generation
    try {
      boolean b15 = strictlySortedSinglyLinkedList0.contains(iPBan12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 32);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    tp2.IPBan iPBan9 = strictlySortedSinglyLinkedList0.get(1);
    tp2.Node node10 = new tp2.Node();
    tp2.IPBan iPBan11 = null;
    node10.element = iPBan11;
    tp2.IPBan iPBan13 = null;
    node10.element = iPBan13;
    tp2.Node node15 = new tp2.Node();
    tp2.IPBan iPBan16 = null;
    node15.element = iPBan16;
    tp2.IPBan iPBan18 = null;
    node15.element = iPBan18;
    tp2.Node node20 = node15.next;
    node10.next = node15;
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i27 = iP26.getFirst();
    java.lang.String str28 = iP26.toString();
    java.lang.String str29 = iP26.toString();
    iP26.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan33 = new tp2.IPBan(iP26, (java.lang.Long)0L);
    node10.element = iPBan33;
    strictlySortedSinglyLinkedList0.header = node10;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = server0.connect(iP10);
    tp2.IP iP15 = null;
    boolean b16 = server0.connect(iP15);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.Server server54 = new tp2.Server();
    tp2.IP iP55 = null;
    boolean b56 = server54.connect(iP55);
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b62 = server54.connect(iP61);
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP64 = null;
    boolean b65 = server63.connect(iP64);
    java.lang.String str66 = server63.toString();
    java.lang.String str67 = server63.toString();
    tp2.Entry entry68 = new tp2.Entry();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i74 = iP73.getFirst();
    java.lang.String str75 = iP73.toString();
    entry68.element = iP73;
    boolean b77 = server63.connect(iP73);
    boolean b78 = server54.removeException(iP73);
    tp2.Server server79 = new tp2.Server();
    tp2.IP iP80 = null;
    boolean b81 = server79.connect(iP80);
    tp2.IP iP86 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b87 = server79.connect(iP86);
    java.lang.Integer i88 = iP86.getFirst();
    boolean b89 = server54.connect(iP86);
    iP86.setFourth((java.lang.Integer)100);
    java.lang.Integer i92 = iP86.getSecond();
    boolean b93 = server0.removeException(iP86);
    iP86.setFourth((java.lang.Integer)11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str67.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i74 + "' != '" + 10+ "'", i74.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "10.0.0.100"+ "'", str75.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 100+ "'", i88.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i92 + "' != '" + 10+ "'", i92.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = new tp2.Node();
    tp2.IPBan iPBan5 = null;
    node4.element = iPBan5;
    tp2.IPBan iPBan7 = null;
    node4.element = iPBan7;
    tp2.IPBan iPBan9 = node4.element;
    strictlySortedSinglyLinkedList0.header = node4;
    java.lang.String str11 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node12 = strictlySortedSinglyLinkedList0.header;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "{}"+ "'", str11.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node12);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    boolean b5 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.SinglyLinkedList singlyLinkedList6 = new tp2.SinglyLinkedList();
    tp2.IP iP8 = singlyLinkedList6.get((int)' ');
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    java.lang.String str16 = iP14.toString();
    entry9.element = iP14;
    boolean b18 = singlyLinkedList6.remove(iP14);
    tp2.IPBan iPBan20 = new tp2.IPBan(iP14, (java.lang.Long)1L);
    // The following exception was thrown during execution in test generation
    try {
      boolean b21 = strictlySortedSinglyLinkedList0.contains(iPBan20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)'4');
    java.lang.String str15 = singlyLinkedList0.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b24 = server16.connect(iP23);
    java.lang.Integer i25 = iP23.getFirst();
    java.lang.Integer i26 = iP23.getThird();
    boolean b27 = singlyLinkedList0.contains(iP23);
    tp2.IP iP29 = singlyLinkedList0.get((int)(byte)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "()"+ "'", str15.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 100+ "'", i25.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + (-1)+ "'", i26.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP29);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    tp2.IPBan iPBan7 = strictlySortedSinglyLinkedList0.get((int)'4');
    tp2.SinglyLinkedList singlyLinkedList8 = new tp2.SinglyLinkedList();
    tp2.IP iP10 = singlyLinkedList8.get((int)' ');
    tp2.Entry entry11 = new tp2.Entry();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    entry11.element = iP16;
    boolean b20 = singlyLinkedList8.remove(iP16);
    tp2.IPBan iPBan22 = new tp2.IPBan(iP16, (java.lang.Long)1L);
    java.lang.String str23 = iPBan22.toString();
    iPBan22.setExpires((java.lang.Long)0L);
    java.lang.Long long26 = iPBan22.expires;
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP28 = null;
    boolean b29 = server27.connect(iP28);
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b35 = server27.connect(iP34);
    java.lang.Integer i36 = iP34.getFirst();
    java.lang.Integer i37 = iP34.getFirst();
    iPBan22.setIp(iP34);
    tp2.Server server39 = new tp2.Server();
    tp2.IP iP40 = null;
    boolean b41 = server39.connect(iP40);
    java.lang.String str42 = server39.toString();
    java.lang.String str43 = server39.toString();
    tp2.Entry entry44 = new tp2.Entry();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i50 = iP49.getFirst();
    java.lang.String str51 = iP49.toString();
    entry44.element = iP49;
    boolean b53 = server39.connect(iP49);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i59 = iP58.getFirst();
    java.lang.String str60 = iP58.toString();
    java.lang.String str61 = iP58.toString();
    boolean b62 = server39.removeBan(iP58);
    iP58.setFirst((java.lang.Integer)10);
    boolean b65 = iP34.equals((java.lang.Object)10);
    java.lang.Integer i66 = iP34.getThird();
    java.lang.Integer i67 = iP34.getFourth();
    // The following exception was thrown during execution in test generation
    try {
      boolean b68 = strictlySortedSinglyLinkedList0.removeFromIP(iP34);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str23.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L+ "'", long26.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 100+ "'", i36.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 100+ "'", i37.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str43.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 10+ "'", i50.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "10.0.0.100"+ "'", str51.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 10+ "'", i59.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "10.0.0.100"+ "'", str60.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "10.0.0.100"+ "'", str61.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i66 + "' != '" + (-1)+ "'", i66.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 10+ "'", i67.equals(10));

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.IP iP55 = null;
    boolean b56 = server0.connect(iP55);
    tp2.Server server57 = new tp2.Server();
    java.lang.String str58 = server57.toString();
    server57.update();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP64.setFirst((java.lang.Integer)1);
    java.lang.Integer i67 = iP64.getSecond();
    boolean b68 = server57.addException(iP64);
    tp2.Entry entry69 = new tp2.Entry();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i75 = iP74.getFirst();
    java.lang.String str76 = iP74.toString();
    entry69.element = iP74;
    boolean b78 = server57.addException(iP74);
    java.lang.String str79 = iP74.toString();
    boolean b80 = server0.removeException(iP74);
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str58.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 0+ "'", i67.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 10+ "'", i75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "10.0.0.100"+ "'", str76.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "10.0.0.100"+ "'", str79.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    int i34 = strictlySortedSinglyLinkedList0.getSize();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    java.lang.String str50 = iPBan49.toString();
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP52 = null;
    boolean b53 = server51.connect(iP52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b59 = server51.connect(iP58);
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP61 = null;
    boolean b62 = server60.connect(iP61);
    java.lang.String str63 = server60.toString();
    java.lang.String str64 = server60.toString();
    tp2.Entry entry65 = new tp2.Entry();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i71 = iP70.getFirst();
    java.lang.String str72 = iP70.toString();
    entry65.element = iP70;
    boolean b74 = server60.connect(iP70);
    boolean b75 = server51.removeException(iP70);
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP77 = null;
    boolean b78 = server76.connect(iP77);
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b84 = server76.connect(iP83);
    java.lang.Integer i85 = iP83.getFirst();
    boolean b86 = server51.connect(iP83);
    iPBan49.ip = iP83;
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP92.setFirst((java.lang.Integer)1);
    java.lang.Integer i95 = iP92.getSecond();
    iPBan49.ip = iP92;
    boolean b97 = strictlySortedSinglyLinkedList0.contains(iPBan49);
    java.lang.Long long98 = iPBan49.expires;
    tp2.IP iP99 = iPBan49.ip;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str63.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str64.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i71 + "' != '" + 10+ "'", i71.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "10.0.0.100"+ "'", str72.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i85 + "' != '" + 100+ "'", i85.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i95 + "' != '" + 0+ "'", i95.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long98 + "' != '" + 1L+ "'", long98.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP99);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList3 = new tp2.StrictlySortedSinglyLinkedList();
    int i4 = strictlySortedSinglyLinkedList3.getSize();
    tp2.IPBan iPBan5 = null;
    boolean b6 = strictlySortedSinglyLinkedList3.add(iPBan5);
    tp2.Node node7 = strictlySortedSinglyLinkedList3.header;
    tp2.IPBan iPBan9 = strictlySortedSinglyLinkedList3.get(100);
    tp2.Node node10 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    int i12 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan13 = null;
    boolean b14 = strictlySortedSinglyLinkedList11.add(iPBan13);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node16 = strictlySortedSinglyLinkedList15.header;
    strictlySortedSinglyLinkedList11.header = node16;
    node10.next = node16;
    strictlySortedSinglyLinkedList3.header = node10;
    node0.next = node10;
    tp2.Node node21 = node0.next;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList22 = new tp2.StrictlySortedSinglyLinkedList();
    int i23 = strictlySortedSinglyLinkedList22.getSize();
    tp2.IPBan iPBan24 = null;
    boolean b25 = strictlySortedSinglyLinkedList22.add(iPBan24);
    java.util.Set<tp2.IPBan> set_iPBan26 = null;
    boolean b27 = strictlySortedSinglyLinkedList22.repOk(set_iPBan26);
    strictlySortedSinglyLinkedList22.size = ' ';
    java.lang.String str30 = strictlySortedSinglyLinkedList22.toString();
    boolean b31 = strictlySortedSinglyLinkedList22.isEmpty();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList32 = new tp2.StrictlySortedSinglyLinkedList();
    int i33 = strictlySortedSinglyLinkedList32.getSize();
    tp2.IPBan iPBan34 = null;
    boolean b35 = strictlySortedSinglyLinkedList32.add(iPBan34);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList36 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node37 = strictlySortedSinglyLinkedList36.header;
    strictlySortedSinglyLinkedList32.header = node37;
    strictlySortedSinglyLinkedList32.size = 0;
    int i41 = strictlySortedSinglyLinkedList32.size;
    tp2.Node node42 = strictlySortedSinglyLinkedList32.header;
    tp2.Node node43 = strictlySortedSinglyLinkedList32.header;
    strictlySortedSinglyLinkedList22.header = node43;
    tp2.IPBan iPBan46 = strictlySortedSinglyLinkedList22.get(1);
    tp2.Node node47 = strictlySortedSinglyLinkedList22.header;
    node0.next = node47;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "{[null]}"+ "'", str30.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node47);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b7 = strictlySortedSinglyLinkedList0.containsIP(iP6);
    tp2.Node node8 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node9 = node8.next;
    // The following exception was thrown during execution in test generation
    try {
      tp2.IPBan iPBan10 = node9.element;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node9);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    tp2.Server server4 = new tp2.Server();
    tp2.IP iP5 = null;
    boolean b6 = server4.connect(iP5);
    java.lang.String str7 = server4.toString();
    java.lang.String str8 = server4.toString();
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    java.lang.String str16 = iP14.toString();
    entry9.element = iP14;
    boolean b18 = server4.connect(iP14);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    java.lang.String str26 = iP23.toString();
    boolean b27 = server4.removeBan(iP23);
    iP23.setFirst((java.lang.Integer)10);
    boolean b30 = server0.removeException(iP23);
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP32 = null;
    boolean b33 = server31.connect(iP32);
    java.lang.String str34 = server31.toString();
    java.lang.String str35 = server31.toString();
    tp2.IP iP36 = null;
    boolean b37 = server31.removeException(iP36);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList38 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList38.size = 10;
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    tp2.Entry entry53 = new tp2.Entry();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i59 = iP58.getFirst();
    java.lang.String str60 = iP58.toString();
    entry53.element = iP58;
    boolean b62 = server41.addException(iP58);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b68 = server41.removeBan(iP67);
    iP67.setThird((java.lang.Integer)0);
    boolean b71 = strictlySortedSinglyLinkedList38.removeFromIP(iP67);
    tp2.Server server72 = new tp2.Server();
    java.lang.String str73 = server72.toString();
    server72.update();
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP79.setFirst((java.lang.Integer)1);
    java.lang.Integer i82 = iP79.getSecond();
    boolean b83 = server72.addException(iP79);
    boolean b84 = strictlySortedSinglyLinkedList38.removeFromIP(iP79);
    boolean b85 = server31.connect(iP79);
    tp2.RealTime realTime86 = new tp2.RealTime();
    long long87 = realTime86.getCurrentTime();
    server31.setTime((tp2.ITime)realTime86);
    server0.setTime((tp2.ITime)realTime86);
    tp2.IP iP94 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP94.setSecond((java.lang.Integer)(-1));
    boolean b97 = server0.connect(iP94);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 10+ "'", i59.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "10.0.0.100"+ "'", str60.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str73.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i82 + "' != '" + 0+ "'", i82.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long87 == 1466185883089L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node6 = strictlySortedSinglyLinkedList5.header;
    tp2.Node node7 = new tp2.Node();
    tp2.IPBan iPBan8 = null;
    node7.element = iPBan8;
    tp2.IPBan iPBan10 = null;
    node7.element = iPBan10;
    strictlySortedSinglyLinkedList5.header = node7;
    tp2.IPBan iPBan13 = node7.element;
    strictlySortedSinglyLinkedList0.header = node7;
    int i15 = strictlySortedSinglyLinkedList0.size;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList16 = new tp2.StrictlySortedSinglyLinkedList();
    int i17 = strictlySortedSinglyLinkedList16.getSize();
    tp2.IPBan iPBan18 = null;
    boolean b19 = strictlySortedSinglyLinkedList16.add(iPBan18);
    tp2.Node node20 = strictlySortedSinglyLinkedList16.header;
    tp2.IPBan iPBan22 = strictlySortedSinglyLinkedList16.get(100);
    strictlySortedSinglyLinkedList16.size = '#';
    tp2.Node node25 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList26 = new tp2.StrictlySortedSinglyLinkedList();
    int i27 = strictlySortedSinglyLinkedList26.getSize();
    tp2.IPBan iPBan28 = null;
    boolean b29 = strictlySortedSinglyLinkedList26.add(iPBan28);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList30 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node31 = strictlySortedSinglyLinkedList30.header;
    strictlySortedSinglyLinkedList26.header = node31;
    node25.next = node31;
    tp2.Node node34 = node25.next;
    tp2.Node node35 = node25.next;
    strictlySortedSinglyLinkedList16.header = node35;
    strictlySortedSinglyLinkedList0.header = node35;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node35);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList15.size = 10;
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    server18.update();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setFirst((java.lang.Integer)1);
    java.lang.Integer i28 = iP25.getSecond();
    boolean b29 = server18.addException(iP25);
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server18.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b45 = server18.removeBan(iP44);
    iP44.setThird((java.lang.Integer)0);
    boolean b48 = strictlySortedSinglyLinkedList15.removeFromIP(iP44);
    boolean b49 = singlyLinkedList0.contains(iP44);
    tp2.Server server50 = new tp2.Server();
    java.lang.String str51 = server50.toString();
    server50.update();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    java.lang.Integer i60 = iP57.getSecond();
    boolean b61 = server50.addException(iP57);
    tp2.Entry entry62 = new tp2.Entry();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i68 = iP67.getFirst();
    java.lang.String str69 = iP67.toString();
    entry62.element = iP67;
    boolean b71 = server50.addException(iP67);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b77 = server50.removeBan(iP76);
    iP76.setThird((java.lang.Integer)0);
    boolean b80 = singlyLinkedList0.remove(iP76);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP85.setFirst((java.lang.Integer)1);
    singlyLinkedList0.add(iP85);
    tp2.IP iP90 = singlyLinkedList0.get((int)(byte)10);
    java.util.Set<tp2.IP> set_iP91 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b92 = singlyLinkedList0.repOk(set_iP91);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 0+ "'", i28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 0+ "'", i60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 10+ "'", i68.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "10.0.0.100"+ "'", str69.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP90);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    iP29.setSecond((java.lang.Integer)11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList9.size = 10;
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    server12.update();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP19.setFirst((java.lang.Integer)1);
    java.lang.Integer i22 = iP19.getSecond();
    boolean b23 = server12.addException(iP19);
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = server12.addException(iP29);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b39 = server12.removeBan(iP38);
    iP38.setThird((java.lang.Integer)0);
    boolean b42 = strictlySortedSinglyLinkedList9.removeFromIP(iP38);
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    server43.update();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP50.setFirst((java.lang.Integer)1);
    java.lang.Integer i53 = iP50.getSecond();
    boolean b54 = server43.addException(iP50);
    boolean b55 = strictlySortedSinglyLinkedList9.removeFromIP(iP50);
    boolean b56 = server0.connect(iP50);
    java.lang.String str57 = server0.toString();
    tp2.SinglyLinkedList singlyLinkedList58 = new tp2.SinglyLinkedList();
    tp2.IP iP60 = singlyLinkedList58.get((int)' ');
    tp2.Entry entry61 = new tp2.Entry();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i67 = iP66.getFirst();
    java.lang.String str68 = iP66.toString();
    entry61.element = iP66;
    boolean b70 = singlyLinkedList58.remove(iP66);
    tp2.IPBan iPBan72 = new tp2.IPBan(iP66, (java.lang.Long)1L);
    tp2.Server server73 = new tp2.Server();
    java.lang.String str74 = server73.toString();
    server73.update();
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i81 = iP80.getFirst();
    boolean b82 = server73.connect(iP80);
    iPBan72.ip = iP80;
    tp2.IP iP84 = iPBan72.ip;
    boolean b85 = server0.removeBan(iP84);
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP90.setFirst((java.lang.Integer)1);
    java.lang.Integer i93 = iP90.getSecond();
    iP90.setThird((java.lang.Integer)(-1));
    boolean b96 = server0.removeException(iP90);
    java.lang.Integer i97 = iP90.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 0+ "'", i22.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 0+ "'", i53.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str57.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 10+ "'", i67.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "10.0.0.100"+ "'", str68.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str74.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i81 + "' != '" + 100+ "'", i81.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i93 + "' != '" + 0+ "'", i93.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i97 + "' != '" + 0+ "'", i97.equals(0));

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i5 = iP4.getFirst();
    java.lang.String str6 = iP4.toString();
    java.lang.String str7 = iP4.toString();
    iP4.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan11 = new tp2.IPBan(iP4, (java.lang.Long)0L);
    java.lang.String str12 = iPBan11.toString();
    java.lang.String str13 = iPBan11.toString();
    iPBan11.setExpires((java.lang.Long)1466185881717L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i5 + "' != '" + 10+ "'", i5.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "10.0.0.100"+ "'", str6.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "IPBan [ip=10.0.-1.100, expires=0]"+ "'", str12.equals("IPBan [ip=10.0.-1.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "IPBan [ip=10.0.-1.100, expires=0]"+ "'", str13.equals("IPBan [ip=10.0.-1.100, expires=0]"));

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    iPBan14.expires = 1466185877442L;
    tp2.IP iP20 = iPBan14.ip;
    java.lang.Long long21 = iPBan14.getExpires();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1466185877442L+ "'", long21.equals(1466185877442L));

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.IPBan iPBan3 = null;
    node0.element = iPBan3;
    tp2.Node node5 = node0.next;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str6 = node5.toString();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node5);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    java.util.Set<tp2.IPBan> set_iPBan7 = null;
    boolean b8 = strictlySortedSinglyLinkedList0.repOk(set_iPBan7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i5 = iP4.getFirst();
    java.lang.String str6 = iP4.toString();
    java.lang.String str7 = iP4.toString();
    iP4.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan11 = new tp2.IPBan(iP4, (java.lang.Long)0L);
    tp2.Server server12 = new tp2.Server();
    tp2.IP iP13 = null;
    boolean b14 = server12.connect(iP13);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b20 = server12.connect(iP19);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList21 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList21.size = 10;
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    server24.update();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP31.setFirst((java.lang.Integer)1);
    java.lang.Integer i34 = iP31.getSecond();
    boolean b35 = server24.addException(iP31);
    tp2.Entry entry36 = new tp2.Entry();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i42 = iP41.getFirst();
    java.lang.String str43 = iP41.toString();
    entry36.element = iP41;
    boolean b45 = server24.addException(iP41);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b51 = server24.removeBan(iP50);
    iP50.setThird((java.lang.Integer)0);
    boolean b54 = strictlySortedSinglyLinkedList21.removeFromIP(iP50);
    tp2.Server server55 = new tp2.Server();
    java.lang.String str56 = server55.toString();
    server55.update();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP62.setFirst((java.lang.Integer)1);
    java.lang.Integer i65 = iP62.getSecond();
    boolean b66 = server55.addException(iP62);
    boolean b67 = strictlySortedSinglyLinkedList21.removeFromIP(iP62);
    boolean b68 = server12.connect(iP62);
    tp2.Server server69 = new tp2.Server();
    tp2.IP iP70 = null;
    boolean b71 = server69.connect(iP70);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b77 = server69.connect(iP76);
    java.lang.Integer i78 = iP76.getFirst();
    boolean b79 = server12.connect(iP76);
    java.lang.Integer i80 = iP76.getFirst();
    iPBan11.ip = iP76;
    tp2.IP iP82 = iPBan11.ip;
    iPBan11.setExpires((java.lang.Long)1466185875743L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i5 + "' != '" + 10+ "'", i5.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "10.0.0.100"+ "'", str6.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 0+ "'", i34.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 10+ "'", i42.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 0+ "'", i65.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i78 + "' != '" + 100+ "'", i78.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 100+ "'", i80.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP82);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    int i15 = singlyLinkedList0.getSize();
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    tp2.IP iP25 = entry16.element;
    java.lang.String str26 = iP25.toString();
    boolean b27 = singlyLinkedList0.contains(iP25);
    int i28 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP5.setSecond((java.lang.Integer)(-1));
    boolean b8 = server0.addException(iP5);
    java.lang.String str9 = server0.toString();
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP11 = null;
    boolean b12 = server10.connect(iP11);
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    boolean b20 = server10.removeException(iP17);
    tp2.Server server21 = new tp2.Server();
    tp2.IP iP22 = null;
    boolean b23 = server21.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b29 = server21.connect(iP28);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList30 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList30.size = 10;
    tp2.Server server33 = new tp2.Server();
    java.lang.String str34 = server33.toString();
    server33.update();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP40.setFirst((java.lang.Integer)1);
    java.lang.Integer i43 = iP40.getSecond();
    boolean b44 = server33.addException(iP40);
    tp2.Entry entry45 = new tp2.Entry();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i51 = iP50.getFirst();
    java.lang.String str52 = iP50.toString();
    entry45.element = iP50;
    boolean b54 = server33.addException(iP50);
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b60 = server33.removeBan(iP59);
    iP59.setThird((java.lang.Integer)0);
    boolean b63 = strictlySortedSinglyLinkedList30.removeFromIP(iP59);
    tp2.Server server64 = new tp2.Server();
    java.lang.String str65 = server64.toString();
    server64.update();
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP71.setFirst((java.lang.Integer)1);
    java.lang.Integer i74 = iP71.getSecond();
    boolean b75 = server64.addException(iP71);
    boolean b76 = strictlySortedSinglyLinkedList30.removeFromIP(iP71);
    boolean b77 = server21.connect(iP71);
    boolean b78 = server10.removeBan(iP71);
    boolean b79 = server0.connect(iP71);
    java.lang.Integer i80 = iP71.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=null, exceptions=([10.-1.0.100]), bans={}]"+ "'", str9.equals("Server [lastUpdate=null, exceptions=([10.-1.0.100]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 0+ "'", i43.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 10+ "'", i51.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "10.0.0.100"+ "'", str52.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i74 + "' != '" + 0+ "'", i74.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 100+ "'", i80.equals(100));

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    java.lang.String str3 = singlyLinkedList0.toString();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    java.util.Set<tp2.IP> set_iP6 = null;
    boolean b7 = singlyLinkedList0.repOk(set_iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }


    tp2.Node node0 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList1 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList1.size = 10;
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    server4.update();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP11.setFirst((java.lang.Integer)1);
    java.lang.Integer i14 = iP11.getSecond();
    boolean b15 = server4.addException(iP11);
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = server4.addException(iP21);
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b31 = server4.removeBan(iP30);
    iP30.setThird((java.lang.Integer)0);
    boolean b34 = strictlySortedSinglyLinkedList1.removeFromIP(iP30);
    java.lang.String str35 = strictlySortedSinglyLinkedList1.toString();
    tp2.SinglyLinkedList singlyLinkedList36 = new tp2.SinglyLinkedList();
    tp2.IP iP38 = singlyLinkedList36.get((int)' ');
    tp2.Entry entry39 = new tp2.Entry();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i45 = iP44.getFirst();
    java.lang.String str46 = iP44.toString();
    entry39.element = iP44;
    boolean b48 = singlyLinkedList36.remove(iP44);
    tp2.IPBan iPBan50 = new tp2.IPBan(iP44, (java.lang.Long)1L);
    java.lang.String str51 = iPBan50.toString();
    boolean b52 = strictlySortedSinglyLinkedList1.contains(iPBan50);
    node0.element = iPBan50;
    java.lang.Long long54 = iPBan50.expires;
    java.lang.String str55 = iPBan50.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 0+ "'", i14.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "{}"+ "'", str35.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 10+ "'", i45.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "10.0.0.100"+ "'", str46.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str51.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L+ "'", long54.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str55.equals("IPBan [ip=10.0.0.100, expires=1]"));

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan6 = strictlySortedSinglyLinkedList0.get(100);
    java.util.Set<tp2.IPBan> set_iPBan7 = null;
    boolean b8 = strictlySortedSinglyLinkedList0.repOk(set_iPBan7);
    java.lang.String str9 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "{[null]}"+ "'", str9.equals("{[null]}"));

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList54 = new tp2.StrictlySortedSinglyLinkedList();
    int i55 = strictlySortedSinglyLinkedList54.getSize();
    tp2.IPBan iPBan56 = null;
    boolean b57 = strictlySortedSinglyLinkedList54.add(iPBan56);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList58 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node59 = strictlySortedSinglyLinkedList58.header;
    strictlySortedSinglyLinkedList54.header = node59;
    tp2.IPBan iPBan61 = node59.element;
    tp2.SinglyLinkedList singlyLinkedList62 = new tp2.SinglyLinkedList();
    tp2.IP iP64 = singlyLinkedList62.get((int)' ');
    tp2.Entry entry65 = new tp2.Entry();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i71 = iP70.getFirst();
    java.lang.String str72 = iP70.toString();
    entry65.element = iP70;
    boolean b74 = singlyLinkedList62.remove(iP70);
    tp2.IPBan iPBan76 = new tp2.IPBan(iP70, (java.lang.Long)1L);
    java.lang.String str77 = iPBan76.toString();
    iPBan76.setExpires((java.lang.Long)0L);
    tp2.IP iP84 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP84.setSecond((java.lang.Integer)(-1));
    iPBan76.ip = iP84;
    node59.element = iPBan76;
    tp2.IPBan iPBan89 = node59.element;
    boolean b90 = iP47.equals((java.lang.Object)iPBan89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i71 + "' != '" + 10+ "'", i71.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "10.0.0.100"+ "'", str72.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str77.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.size;
    int i5 = strictlySortedSinglyLinkedList0.getSize();
    strictlySortedSinglyLinkedList0.size = 0;
    tp2.SinglyLinkedList singlyLinkedList8 = new tp2.SinglyLinkedList();
    tp2.IP iP10 = singlyLinkedList8.get((int)' ');
    tp2.Entry entry11 = new tp2.Entry();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    entry11.element = iP16;
    boolean b20 = singlyLinkedList8.remove(iP16);
    tp2.IPBan iPBan22 = new tp2.IPBan(iP16, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList23 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan24 = null;
    boolean b25 = strictlySortedSinglyLinkedList23.contains(iPBan24);
    int i26 = strictlySortedSinglyLinkedList23.getSize();
    tp2.IPBan iPBan28 = strictlySortedSinglyLinkedList23.get((int)'#');
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP33.setSecond((java.lang.Integer)(-1));
    boolean b36 = strictlySortedSinglyLinkedList23.removeFromIP(iP33);
    iPBan22.ip = iP33;
    java.lang.Long long38 = iPBan22.expires;
    // The following exception was thrown during execution in test generation
    try {
      boolean b39 = strictlySortedSinglyLinkedList0.contains(iPBan22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L+ "'", long38.equals(1L));

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.IPBan iPBan3 = null;
    node0.element = iPBan3;
    tp2.Node node5 = node0.next;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan7 = null;
    boolean b8 = strictlySortedSinglyLinkedList6.contains(iPBan7);
    int i9 = strictlySortedSinglyLinkedList6.getSize();
    tp2.Node node10 = strictlySortedSinglyLinkedList6.header;
    tp2.Node node11 = node10.next;
    // The following exception was thrown during execution in test generation
    try {
      node5.next = node10;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node11);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.Server server55 = new tp2.Server();
    java.lang.String str56 = server55.toString();
    server55.update();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP62.setFirst((java.lang.Integer)1);
    java.lang.Integer i65 = iP62.getSecond();
    boolean b66 = server55.addException(iP62);
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = server55.addException(iP72);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b82 = server55.removeBan(iP81);
    iP81.setThird((java.lang.Integer)0);
    iP81.setFourth((java.lang.Integer)10);
    boolean b87 = server0.addException(iP81);
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP92.setThird((java.lang.Integer)1);
    java.lang.Object obj95 = null;
    boolean b96 = iP92.equals(obj95);
    boolean b97 = server0.removeException(iP92);
    server0.update();
    java.lang.String str99 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 0+ "'", i65.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str99 + "' != '" + "Server [lastUpdate=1466185883820, exceptions=([10.100.0.10]), bans={}]"+ "'", str99.equals("Server [lastUpdate=1466185883820, exceptions=([10.100.0.10]), bans={}]"));

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.Server server22 = new tp2.Server();
    java.lang.String str23 = server22.toString();
    server22.update();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP29.setFirst((java.lang.Integer)1);
    java.lang.Integer i32 = iP29.getSecond();
    boolean b33 = server22.addException(iP29);
    tp2.Entry entry34 = new tp2.Entry();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    entry34.element = iP39;
    boolean b43 = server22.addException(iP39);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b49 = server22.removeBan(iP48);
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP51 = null;
    boolean b52 = server50.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b58 = server50.connect(iP57);
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP60 = null;
    boolean b61 = server59.connect(iP60);
    java.lang.String str62 = server59.toString();
    java.lang.String str63 = server59.toString();
    tp2.Entry entry64 = new tp2.Entry();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i70 = iP69.getFirst();
    java.lang.String str71 = iP69.toString();
    entry64.element = iP69;
    boolean b73 = server59.connect(iP69);
    boolean b74 = server50.removeException(iP69);
    boolean b75 = server22.connect(iP69);
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP80.setSecond((java.lang.Integer)1);
    boolean b83 = server22.removeBan(iP80);
    tp2.RealTime realTime84 = new tp2.RealTime();
    long long85 = realTime84.getCurrentTime();
    long long86 = realTime84.getCurrentTime();
    server22.setTime((tp2.ITime)realTime84);
    server0.setTime((tp2.ITime)realTime84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 0+ "'", i32.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str63.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 10+ "'", i70.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "10.0.0.100"+ "'", str71.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long85 == 1466185883854L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long86 == 1466185883854L);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    tp2.Server server4 = new tp2.Server();
    tp2.IP iP5 = null;
    boolean b6 = server4.connect(iP5);
    java.lang.String str7 = server4.toString();
    java.lang.String str8 = server4.toString();
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    java.lang.String str16 = iP14.toString();
    entry9.element = iP14;
    boolean b18 = server4.connect(iP14);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    java.lang.String str26 = iP23.toString();
    boolean b27 = server4.removeBan(iP23);
    iP23.setFirst((java.lang.Integer)10);
    boolean b30 = server0.removeException(iP23);
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP32 = null;
    boolean b33 = server31.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b39 = server31.connect(iP38);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList40 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList40.size = 10;
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    server43.update();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP50.setFirst((java.lang.Integer)1);
    java.lang.Integer i53 = iP50.getSecond();
    boolean b54 = server43.addException(iP50);
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    entry55.element = iP60;
    boolean b64 = server43.addException(iP60);
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b70 = server43.removeBan(iP69);
    iP69.setThird((java.lang.Integer)0);
    boolean b73 = strictlySortedSinglyLinkedList40.removeFromIP(iP69);
    tp2.Server server74 = new tp2.Server();
    java.lang.String str75 = server74.toString();
    server74.update();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP81.setFirst((java.lang.Integer)1);
    java.lang.Integer i84 = iP81.getSecond();
    boolean b85 = server74.addException(iP81);
    boolean b86 = strictlySortedSinglyLinkedList40.removeFromIP(iP81);
    boolean b87 = server31.connect(iP81);
    boolean b88 = server0.connect(iP81);
    java.lang.Integer i89 = iP81.getFourth();
    iP81.setSecond((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 0+ "'", i53.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str75.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i84 + "' != '" + 0+ "'", i84.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i89 + "' != '" + 100+ "'", i89.equals(100));

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList22 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList22.size = 10;
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    server25.update();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP32.setFirst((java.lang.Integer)1);
    java.lang.Integer i35 = iP32.getSecond();
    boolean b36 = server25.addException(iP32);
    tp2.Entry entry37 = new tp2.Entry();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i43 = iP42.getFirst();
    java.lang.String str44 = iP42.toString();
    entry37.element = iP42;
    boolean b46 = server25.addException(iP42);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b52 = server25.removeBan(iP51);
    iP51.setThird((java.lang.Integer)0);
    boolean b55 = strictlySortedSinglyLinkedList22.removeFromIP(iP51);
    boolean b56 = server0.addException(iP51);
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP58 = null;
    boolean b59 = server57.connect(iP58);
    java.lang.String str60 = server57.toString();
    tp2.Server server61 = new tp2.Server();
    java.lang.String str62 = server61.toString();
    server61.update();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP68.setFirst((java.lang.Integer)1);
    java.lang.Integer i71 = iP68.getSecond();
    boolean b72 = server61.addException(iP68);
    boolean b73 = server57.addException(iP68);
    boolean b74 = server0.addException(iP68);
    tp2.SinglyLinkedList singlyLinkedList75 = new tp2.SinglyLinkedList();
    int i76 = singlyLinkedList75.getSize();
    int i77 = singlyLinkedList75.getSize();
    tp2.Server server78 = new tp2.Server();
    tp2.IP iP79 = null;
    boolean b80 = server78.connect(iP79);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b86 = server78.connect(iP85);
    java.lang.Integer i87 = iP85.getFirst();
    java.lang.Integer i88 = iP85.getFirst();
    singlyLinkedList75.add(iP85);
    boolean b90 = server0.removeBan(iP85);
    iP85.setFirst((java.lang.Integer)1);
    iP85.setThird((java.lang.Integer)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 0+ "'", i35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 10+ "'", i43.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "10.0.0.100"+ "'", str44.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i71 + "' != '" + 0+ "'", i71.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i87 + "' != '" + 100+ "'", i87.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 100+ "'", i88.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP58.setSecond((java.lang.Integer)1);
    boolean b61 = server0.removeBan(iP58);
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b68 = server62.addException(iP67);
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i74 = iP73.getFirst();
    java.lang.Integer i75 = iP73.getSecond();
    boolean b76 = server62.addBan(iP73);
    boolean b77 = iP58.equals((java.lang.Object)iP73);
    iP58.setSecond((java.lang.Integer)11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i74 + "' != '" + 100+ "'", i74.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 10+ "'", i75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.getIp();
    tp2.IP iP20 = iPBan14.ip;
    tp2.IP iP21 = iPBan14.getIp();
    iPBan14.expires = 1466185876788L;
    tp2.IP iP24 = iPBan14.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP24);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    java.lang.String str3 = entry0.toString();
    tp2.Entry entry4 = entry0.next;
    // The following exception was thrown during execution in test generation
    try {
      tp2.IP iP5 = entry4.element;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    java.lang.String str14 = iP11.toString();
    iP11.setThird((java.lang.Integer)(-1));
    boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP11);
    tp2.SinglyLinkedList singlyLinkedList18 = new tp2.SinglyLinkedList();
    tp2.IP iP20 = singlyLinkedList18.get((int)' ');
    tp2.Entry entry21 = new tp2.Entry();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i27 = iP26.getFirst();
    java.lang.String str28 = iP26.toString();
    entry21.element = iP26;
    boolean b30 = singlyLinkedList18.remove(iP26);
    tp2.IPBan iPBan32 = new tp2.IPBan(iP26, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList33 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan34 = null;
    boolean b35 = strictlySortedSinglyLinkedList33.contains(iPBan34);
    int i36 = strictlySortedSinglyLinkedList33.getSize();
    tp2.IPBan iPBan38 = strictlySortedSinglyLinkedList33.get((int)'#');
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP43.setSecond((java.lang.Integer)(-1));
    boolean b46 = strictlySortedSinglyLinkedList33.removeFromIP(iP43);
    iPBan32.ip = iP43;
    boolean b48 = strictlySortedSinglyLinkedList0.removeFromIP(iP43);
    tp2.IP iP49 = null;
    boolean b50 = strictlySortedSinglyLinkedList0.removeFromIP(iP49);
    int i51 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    java.lang.String str11 = iP9.toString();
    java.lang.String str12 = iP9.toString();
    iP9.setThird((java.lang.Integer)(-1));
    entry0.element = iP9;
    tp2.IP iP16 = entry0.element;
    tp2.IP iP17 = entry0.element;
    tp2.Entry entry18 = entry0.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "10.0.0.100"+ "'", str11.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry18);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    java.lang.String str3 = singlyLinkedList0.toString();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    tp2.IP iP7 = singlyLinkedList0.get(32);
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP9 = null;
    boolean b10 = server8.connect(iP9);
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP15.setFirst((java.lang.Integer)1);
    boolean b18 = server8.removeException(iP15);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList19 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan20 = null;
    boolean b21 = strictlySortedSinglyLinkedList19.contains(iPBan20);
    int i22 = strictlySortedSinglyLinkedList19.getSize();
    tp2.IPBan iPBan24 = strictlySortedSinglyLinkedList19.get((int)'#');
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP29.setSecond((java.lang.Integer)(-1));
    boolean b32 = strictlySortedSinglyLinkedList19.removeFromIP(iP29);
    boolean b33 = server8.removeBan(iP29);
    boolean b34 = singlyLinkedList0.remove(iP29);
    tp2.Server server35 = new tp2.Server();
    tp2.IP iP36 = null;
    boolean b37 = server35.connect(iP36);
    java.lang.String str38 = server35.toString();
    java.lang.String str39 = server35.toString();
    tp2.Entry entry40 = new tp2.Entry();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i46 = iP45.getFirst();
    java.lang.String str47 = iP45.toString();
    entry40.element = iP45;
    boolean b49 = server35.connect(iP45);
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i55 = iP54.getFirst();
    java.lang.String str56 = iP54.toString();
    java.lang.String str57 = iP54.toString();
    boolean b58 = server35.removeBan(iP54);
    java.lang.Integer i59 = iP54.getFirst();
    java.lang.Integer i60 = iP54.getFirst();
    java.lang.Integer i61 = iP54.getThird();
    singlyLinkedList0.add(iP54);
    tp2.SinglyLinkedList singlyLinkedList63 = new tp2.SinglyLinkedList();
    tp2.IP iP65 = singlyLinkedList63.get(1);
    tp2.SinglyLinkedList singlyLinkedList66 = new tp2.SinglyLinkedList();
    tp2.IP iP68 = singlyLinkedList66.get((int)' ');
    tp2.Entry entry69 = new tp2.Entry();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i75 = iP74.getFirst();
    java.lang.String str76 = iP74.toString();
    entry69.element = iP74;
    boolean b78 = singlyLinkedList66.remove(iP74);
    boolean b79 = singlyLinkedList63.contains(iP74);
    java.lang.Integer i80 = iP74.getThird();
    java.lang.String str81 = iP74.toString();
    boolean b82 = singlyLinkedList0.remove(iP74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 10+ "'", i46.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "10.0.0.100"+ "'", str47.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 10+ "'", i55.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "10.0.0.100"+ "'", str56.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "10.0.0.100"+ "'", str57.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 10+ "'", i59.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 10+ "'", i60.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 0+ "'", i61.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 10+ "'", i75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "10.0.0.100"+ "'", str76.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 0+ "'", i80.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "10.0.0.100"+ "'", str81.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    java.lang.String str16 = node14.toString();
    java.lang.String str17 = node14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[null]"+ "'", str16.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[null]"+ "'", str17.equals("[null]"));

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan5 = strictlySortedSinglyLinkedList0.get((int)'#');
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList6.size = 10;
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    server9.update();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP16.setFirst((java.lang.Integer)1);
    java.lang.Integer i19 = iP16.getSecond();
    boolean b20 = server9.addException(iP16);
    tp2.Entry entry21 = new tp2.Entry();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i27 = iP26.getFirst();
    java.lang.String str28 = iP26.toString();
    entry21.element = iP26;
    boolean b30 = server9.addException(iP26);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b36 = server9.removeBan(iP35);
    iP35.setThird((java.lang.Integer)0);
    boolean b39 = strictlySortedSinglyLinkedList6.removeFromIP(iP35);
    java.lang.String str40 = strictlySortedSinglyLinkedList6.toString();
    tp2.SinglyLinkedList singlyLinkedList41 = new tp2.SinglyLinkedList();
    tp2.IP iP43 = singlyLinkedList41.get((int)' ');
    tp2.Entry entry44 = new tp2.Entry();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i50 = iP49.getFirst();
    java.lang.String str51 = iP49.toString();
    entry44.element = iP49;
    boolean b53 = singlyLinkedList41.remove(iP49);
    tp2.IPBan iPBan55 = new tp2.IPBan(iP49, (java.lang.Long)1L);
    java.lang.String str56 = iPBan55.toString();
    boolean b57 = strictlySortedSinglyLinkedList6.contains(iPBan55);
    tp2.SinglyLinkedList singlyLinkedList58 = new tp2.SinglyLinkedList();
    tp2.IP iP60 = singlyLinkedList58.get((int)' ');
    tp2.Entry entry61 = new tp2.Entry();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i67 = iP66.getFirst();
    java.lang.String str68 = iP66.toString();
    entry61.element = iP66;
    boolean b70 = singlyLinkedList58.remove(iP66);
    tp2.IPBan iPBan72 = new tp2.IPBan(iP66, (java.lang.Long)1L);
    tp2.Server server73 = new tp2.Server();
    java.lang.String str74 = server73.toString();
    server73.update();
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i81 = iP80.getFirst();
    boolean b82 = server73.connect(iP80);
    iPBan72.ip = iP80;
    tp2.IP iP84 = iPBan72.ip;
    boolean b85 = strictlySortedSinglyLinkedList6.add(iPBan72);
    boolean b86 = strictlySortedSinglyLinkedList0.add(iPBan72);
    tp2.IP iP87 = null;
    tp2.IPBan iPBan89 = new tp2.IPBan(iP87, (java.lang.Long)200000L);
    boolean b90 = strictlySortedSinglyLinkedList0.add(iPBan89);
    tp2.IPBan iPBan92 = strictlySortedSinglyLinkedList0.get((int)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 0+ "'", i19.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "{}"+ "'", str40.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 10+ "'", i50.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "10.0.0.100"+ "'", str51.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str56.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 10+ "'", i67.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "10.0.0.100"+ "'", str68.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str74.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i81 + "' != '" + 100+ "'", i81.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan92);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.IPBan iPBan3 = null;
    node0.element = iPBan3;
    java.lang.String str5 = node0.toString();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList6.size = 10;
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    server9.update();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP16.setFirst((java.lang.Integer)1);
    java.lang.Integer i19 = iP16.getSecond();
    boolean b20 = server9.addException(iP16);
    tp2.Entry entry21 = new tp2.Entry();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i27 = iP26.getFirst();
    java.lang.String str28 = iP26.toString();
    entry21.element = iP26;
    boolean b30 = server9.addException(iP26);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b36 = server9.removeBan(iP35);
    iP35.setThird((java.lang.Integer)0);
    boolean b39 = strictlySortedSinglyLinkedList6.removeFromIP(iP35);
    tp2.Server server40 = new tp2.Server();
    java.lang.String str41 = server40.toString();
    server40.update();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP47.setFirst((java.lang.Integer)1);
    java.lang.Integer i50 = iP47.getSecond();
    boolean b51 = server40.addException(iP47);
    boolean b52 = strictlySortedSinglyLinkedList6.removeFromIP(iP47);
    int i53 = strictlySortedSinglyLinkedList6.size;
    strictlySortedSinglyLinkedList6.size = (byte)1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList56 = new tp2.StrictlySortedSinglyLinkedList();
    int i57 = strictlySortedSinglyLinkedList56.getSize();
    tp2.IPBan iPBan58 = null;
    boolean b59 = strictlySortedSinglyLinkedList56.add(iPBan58);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList60 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node61 = strictlySortedSinglyLinkedList60.header;
    strictlySortedSinglyLinkedList56.header = node61;
    tp2.IPBan iPBan63 = node61.element;
    strictlySortedSinglyLinkedList6.header = node61;
    node0.next = node61;
    tp2.Node node66 = null;
    node61.next = node66;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[null]"+ "'", str5.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 0+ "'", i19.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 0+ "'", i50.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan63);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    java.lang.String str22 = iP17.toString();
    tp2.Node node23 = new tp2.Node();
    tp2.IPBan iPBan24 = null;
    node23.element = iPBan24;
    tp2.SinglyLinkedList singlyLinkedList26 = new tp2.SinglyLinkedList();
    tp2.IP iP28 = singlyLinkedList26.get((int)' ');
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = singlyLinkedList26.remove(iP34);
    tp2.IPBan iPBan40 = new tp2.IPBan(iP34, (java.lang.Long)1L);
    java.lang.String str41 = iPBan40.toString();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i47 = iP46.getFirst();
    java.lang.String str48 = iP46.toString();
    java.lang.String str49 = iP46.toString();
    iPBan40.setIp(iP46);
    java.lang.Long long51 = iPBan40.getExpires();
    node23.element = iPBan40;
    iPBan40.expires = 1466185870380L;
    boolean b55 = iP17.equals((java.lang.Object)1466185870380L);
    java.lang.Integer i56 = iP17.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str41.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 10+ "'", i47.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "10.0.0.100"+ "'", str48.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L+ "'", long51.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 0+ "'", i56.equals(0));

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    java.lang.String str14 = iP11.toString();
    iP11.setThird((java.lang.Integer)(-1));
    boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP11);
    tp2.IPBan iPBan19 = strictlySortedSinglyLinkedList0.get((int)(short)(-1));
    java.util.Set<tp2.IPBan> set_iPBan20 = null;
    boolean b21 = strictlySortedSinglyLinkedList0.repOk(set_iPBan20);
    tp2.Node node22 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node23 = strictlySortedSinglyLinkedList0.header;
    int i24 = strictlySortedSinglyLinkedList0.getSize();
    boolean b25 = strictlySortedSinglyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get((int)' ');
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    boolean b17 = singlyLinkedList5.remove(iP13);
    tp2.IPBan iPBan19 = new tp2.IPBan(iP13, (java.lang.Long)1L);
    java.lang.String str20 = iPBan19.toString();
    iPBan19.setExpires((java.lang.Long)0L);
    java.lang.Long long23 = iPBan19.expires;
    node4.element = iPBan19;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList25 = new tp2.StrictlySortedSinglyLinkedList();
    int i26 = strictlySortedSinglyLinkedList25.getSize();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b32 = strictlySortedSinglyLinkedList25.containsIP(iP31);
    tp2.Node node33 = strictlySortedSinglyLinkedList25.header;
    java.lang.String str34 = node33.toString();
    node4.next = node33;
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP40.setThird((java.lang.Integer)1);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList43 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan44 = null;
    boolean b45 = strictlySortedSinglyLinkedList43.contains(iPBan44);
    tp2.Server server46 = new tp2.Server();
    java.lang.String str47 = server46.toString();
    server46.update();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i54 = iP53.getFirst();
    boolean b55 = server46.connect(iP53);
    boolean b56 = strictlySortedSinglyLinkedList43.removeFromIP(iP53);
    java.lang.Integer i57 = iP53.getThird();
    iP53.setFourth((java.lang.Integer)100);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList60 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan61 = null;
    boolean b62 = strictlySortedSinglyLinkedList60.add(iPBan61);
    java.util.Set<tp2.IPBan> set_iPBan63 = null;
    boolean b64 = strictlySortedSinglyLinkedList60.repOk(set_iPBan63);
    tp2.Node node65 = strictlySortedSinglyLinkedList60.header;
    boolean b66 = iP53.equals((java.lang.Object)node65);
    boolean b67 = iP40.equals((java.lang.Object)node65);
    node33.next = node65;
    tp2.IPBan iPBan69 = node65.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L+ "'", long23.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[null]"+ "'", str34.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 100+ "'", i54.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + (-1)+ "'", i57.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan69);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.contains(iPBan2);
    tp2.SinglyLinkedList singlyLinkedList4 = new tp2.SinglyLinkedList();
    tp2.IP iP6 = singlyLinkedList4.get((int)' ');
    tp2.Entry entry7 = new tp2.Entry();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i13 = iP12.getFirst();
    java.lang.String str14 = iP12.toString();
    entry7.element = iP12;
    boolean b16 = singlyLinkedList4.remove(iP12);
    tp2.IPBan iPBan18 = new tp2.IPBan(iP12, (java.lang.Long)1L);
    java.lang.String str19 = iPBan18.toString();
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP21 = null;
    boolean b22 = server20.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b28 = server20.connect(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP30 = null;
    boolean b31 = server29.connect(iP30);
    java.lang.String str32 = server29.toString();
    java.lang.String str33 = server29.toString();
    tp2.Entry entry34 = new tp2.Entry();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    entry34.element = iP39;
    boolean b43 = server29.connect(iP39);
    boolean b44 = server20.removeException(iP39);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP46 = null;
    boolean b47 = server45.connect(iP46);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b53 = server45.connect(iP52);
    java.lang.Integer i54 = iP52.getFirst();
    boolean b55 = server20.connect(iP52);
    iPBan18.ip = iP52;
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP58 = null;
    boolean b59 = server57.connect(iP58);
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b65 = server57.connect(iP64);
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP67 = null;
    boolean b68 = server66.connect(iP67);
    java.lang.String str69 = server66.toString();
    java.lang.String str70 = server66.toString();
    tp2.Entry entry71 = new tp2.Entry();
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i77 = iP76.getFirst();
    java.lang.String str78 = iP76.toString();
    entry71.element = iP76;
    boolean b80 = server66.connect(iP76);
    boolean b81 = server57.removeException(iP76);
    tp2.Server server82 = new tp2.Server();
    tp2.IP iP83 = null;
    boolean b84 = server82.connect(iP83);
    tp2.IP iP89 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b90 = server82.connect(iP89);
    java.lang.Integer i91 = iP89.getFirst();
    boolean b92 = server57.connect(iP89);
    iPBan18.setIp(iP89);
    boolean b94 = strictlySortedSinglyLinkedList0.add(iPBan18);
    strictlySortedSinglyLinkedList0.size = ' ';
    int i97 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str98 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 10+ "'", i13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str19.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 100+ "'", i54.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str69.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str70.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i77 + "' != '" + 10+ "'", i77.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "10.0.0.100"+ "'", str78.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i91 + "' != '" + 100+ "'", i91.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str98 + "' != '" + "{[IPBan [ip=100.10.-1.10, expires=1]]}"+ "'", str98.equals("{[IPBan [ip=100.10.-1.10, expires=1]]}"));

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.SinglyLinkedList singlyLinkedList3 = new tp2.SinglyLinkedList();
    tp2.IP iP5 = singlyLinkedList3.get((int)' ');
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    entry6.element = iP11;
    boolean b15 = singlyLinkedList3.remove(iP11);
    tp2.IPBan iPBan17 = new tp2.IPBan(iP11, (java.lang.Long)1L);
    java.lang.String str18 = iPBan17.toString();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    java.lang.String str26 = iP23.toString();
    iPBan17.setIp(iP23);
    java.lang.Long long28 = iPBan17.getExpires();
    node0.element = iPBan17;
    tp2.IPBan iPBan30 = node0.element;
    java.lang.Long long31 = iPBan30.getExpires();
    iPBan30.setExpires((java.lang.Long)1466185873037L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str18.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L+ "'", long28.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L+ "'", long31.equals(1L));

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    tp2.Server server3 = new tp2.Server();
    tp2.IP iP4 = null;
    boolean b5 = server3.connect(iP4);
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b11 = server3.connect(iP10);
    java.lang.Integer i12 = iP10.getFirst();
    java.lang.Integer i13 = iP10.getFirst();
    singlyLinkedList0.add(iP10);
    int i15 = singlyLinkedList0.getSize();
    boolean b16 = singlyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 100+ "'", i12.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 100+ "'", i13.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.IPBan iPBan3 = null;
    node0.element = iPBan3;
    tp2.Server server5 = new tp2.Server();
    java.lang.String str6 = server5.toString();
    server5.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP12.setFirst((java.lang.Integer)1);
    java.lang.Integer i15 = iP12.getSecond();
    boolean b16 = server5.addException(iP12);
    tp2.Entry entry17 = new tp2.Entry();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i23 = iP22.getFirst();
    java.lang.String str24 = iP22.toString();
    entry17.element = iP22;
    boolean b26 = server5.addException(iP22);
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b32 = server5.removeBan(iP31);
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP34 = null;
    boolean b35 = server33.connect(iP34);
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b41 = server33.connect(iP40);
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP43 = null;
    boolean b44 = server42.connect(iP43);
    java.lang.String str45 = server42.toString();
    java.lang.String str46 = server42.toString();
    tp2.Entry entry47 = new tp2.Entry();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    entry47.element = iP52;
    boolean b56 = server42.connect(iP52);
    boolean b57 = server33.removeException(iP52);
    boolean b58 = server5.connect(iP52);
    java.lang.Integer i59 = iP52.getFirst();
    iP52.setSecond((java.lang.Integer)0);
    java.lang.Integer i62 = iP52.getThird();
    tp2.IPBan iPBan64 = new tp2.IPBan(iP52, (java.lang.Long)1466185872784L);
    node0.element = iPBan64;
    tp2.IP iP66 = iPBan64.getIp();
    iPBan64.expires = 1466185872120L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str6.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 0+ "'", i15.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 10+ "'", i23.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "10.0.0.100"+ "'", str24.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 10+ "'", i59.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i62 + "' != '" + 0+ "'", i62.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP66);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = new tp2.Entry();
    java.lang.String str4 = entry3.toString();
    entry0.next = entry3;
    tp2.Entry entry6 = new tp2.Entry();
    java.lang.String str7 = entry6.toString();
    entry0.next = entry6;
    tp2.IP iP9 = entry0.element;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i27 = iP26.getFirst();
    java.lang.String str28 = iP26.toString();
    java.lang.String str29 = iP26.toString();
    iP26.setThird((java.lang.Integer)(-1));
    boolean b32 = server10.addBan(iP26);
    iP26.setThird((java.lang.Integer)100);
    entry0.element = iP26;
    iP26.setSecond((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[null]"+ "'", str4.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[null]"+ "'", str7.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    boolean b39 = iP5.equals((java.lang.Object)iPBan26);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    int i41 = singlyLinkedList40.getSize();
    java.lang.String str42 = singlyLinkedList40.toString();
    int i43 = singlyLinkedList40.getSize();
    java.util.Set<tp2.IP> set_iP44 = null;
    boolean b45 = singlyLinkedList40.repOk(set_iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b51 = singlyLinkedList40.remove(iP50);
    iPBan26.setIp(iP50);
    iPBan26.setExpires((java.lang.Long)1466185870380L);
    java.lang.String str55 = iPBan26.toString();
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP57 = null;
    boolean b58 = server56.connect(iP57);
    java.lang.String str59 = server56.toString();
    java.lang.String str60 = server56.toString();
    tp2.Entry entry61 = new tp2.Entry();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i67 = iP66.getFirst();
    java.lang.String str68 = iP66.toString();
    entry61.element = iP66;
    boolean b70 = server56.connect(iP66);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i76 = iP75.getFirst();
    java.lang.String str77 = iP75.toString();
    java.lang.String str78 = iP75.toString();
    boolean b79 = server56.removeBan(iP75);
    java.lang.Integer i80 = iP75.getFirst();
    iPBan26.ip = iP75;
    iP75.setSecond((java.lang.Integer)11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "()"+ "'", str42.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "IPBan [ip=100.10.-1.10, expires=1466185870380]"+ "'", str55.equals("IPBan [ip=100.10.-1.10, expires=1466185870380]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str59.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 10+ "'", i67.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "10.0.0.100"+ "'", str68.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 10+ "'", i76.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "10.0.0.100"+ "'", str78.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 10+ "'", i80.equals(10));

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }


    tp2.IP iP0 = null;
    tp2.IPBan iPBan2 = new tp2.IPBan(iP0, (java.lang.Long)200000L);
    iPBan2.setExpires((java.lang.Long)1466185872933L);
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get((int)' ');
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    boolean b17 = singlyLinkedList5.remove(iP13);
    tp2.IPBan iPBan19 = new tp2.IPBan(iP13, (java.lang.Long)1L);
    java.lang.String str20 = iPBan19.toString();
    iPBan19.setExpires((java.lang.Long)0L);
    java.lang.Long long23 = iPBan19.expires;
    tp2.IP iP24 = iPBan19.ip;
    iP24.setFirst((java.lang.Integer)0);
    iP24.setSecond((java.lang.Integer)(-1));
    iPBan2.setIp(iP24);
    java.lang.String str30 = iP24.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L+ "'", long23.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "0.-1.0.100"+ "'", str30.equals("0.-1.0.100"));

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.contains(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.getSize();
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get((int)' ');
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    boolean b17 = singlyLinkedList5.remove(iP13);
    tp2.IPBan iPBan19 = new tp2.IPBan(iP13, (java.lang.Long)1L);
    java.lang.String str20 = iPBan19.toString();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    java.lang.String str28 = iP25.toString();
    iPBan19.setIp(iP25);
    java.lang.Long long30 = iPBan19.getExpires();
    boolean b31 = strictlySortedSinglyLinkedList0.add(iPBan19);
    java.lang.Long long32 = iPBan19.getExpires();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L+ "'", long30.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L+ "'", long32.equals(1L));

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    boolean b10 = server0.removeException(iP7);
    tp2.Server server11 = new tp2.Server();
    tp2.IP iP12 = null;
    boolean b13 = server11.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b19 = server11.connect(iP18);
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP21 = null;
    boolean b22 = server20.connect(iP21);
    java.lang.String str23 = server20.toString();
    java.lang.String str24 = server20.toString();
    tp2.Entry entry25 = new tp2.Entry();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i31 = iP30.getFirst();
    java.lang.String str32 = iP30.toString();
    entry25.element = iP30;
    boolean b34 = server20.connect(iP30);
    boolean b35 = server11.removeException(iP30);
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP37 = null;
    boolean b38 = server36.connect(iP37);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b44 = server36.connect(iP43);
    java.lang.Integer i45 = iP43.getFirst();
    boolean b46 = server11.connect(iP43);
    boolean b47 = server0.addException(iP43);
    iP43.setFourth((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 10+ "'", i31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 100+ "'", i45.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.contains(iPBan2);
    tp2.SinglyLinkedList singlyLinkedList4 = new tp2.SinglyLinkedList();
    tp2.IP iP6 = singlyLinkedList4.get((int)' ');
    tp2.Entry entry7 = new tp2.Entry();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i13 = iP12.getFirst();
    java.lang.String str14 = iP12.toString();
    entry7.element = iP12;
    boolean b16 = singlyLinkedList4.remove(iP12);
    tp2.IPBan iPBan18 = new tp2.IPBan(iP12, (java.lang.Long)1L);
    java.lang.String str19 = iPBan18.toString();
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP21 = null;
    boolean b22 = server20.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b28 = server20.connect(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP30 = null;
    boolean b31 = server29.connect(iP30);
    java.lang.String str32 = server29.toString();
    java.lang.String str33 = server29.toString();
    tp2.Entry entry34 = new tp2.Entry();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    entry34.element = iP39;
    boolean b43 = server29.connect(iP39);
    boolean b44 = server20.removeException(iP39);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP46 = null;
    boolean b47 = server45.connect(iP46);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b53 = server45.connect(iP52);
    java.lang.Integer i54 = iP52.getFirst();
    boolean b55 = server20.connect(iP52);
    iPBan18.ip = iP52;
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP58 = null;
    boolean b59 = server57.connect(iP58);
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b65 = server57.connect(iP64);
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP67 = null;
    boolean b68 = server66.connect(iP67);
    java.lang.String str69 = server66.toString();
    java.lang.String str70 = server66.toString();
    tp2.Entry entry71 = new tp2.Entry();
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i77 = iP76.getFirst();
    java.lang.String str78 = iP76.toString();
    entry71.element = iP76;
    boolean b80 = server66.connect(iP76);
    boolean b81 = server57.removeException(iP76);
    tp2.Server server82 = new tp2.Server();
    tp2.IP iP83 = null;
    boolean b84 = server82.connect(iP83);
    tp2.IP iP89 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b90 = server82.connect(iP89);
    java.lang.Integer i91 = iP89.getFirst();
    boolean b92 = server57.connect(iP89);
    iPBan18.setIp(iP89);
    boolean b94 = strictlySortedSinglyLinkedList0.add(iPBan18);
    strictlySortedSinglyLinkedList0.size = ' ';
    tp2.IPBan iPBan98 = strictlySortedSinglyLinkedList0.get((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 10+ "'", i13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str19.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 100+ "'", i54.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str69.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str70.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i77 + "' != '" + 10+ "'", i77.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "10.0.0.100"+ "'", str78.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i91 + "' != '" + 100+ "'", i91.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan98);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    server16.update();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP23.setFirst((java.lang.Integer)1);
    java.lang.Integer i26 = iP23.getSecond();
    boolean b27 = server16.addException(iP23);
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = server16.addException(iP33);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b43 = server16.removeBan(iP42);
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP45 = null;
    boolean b46 = server44.connect(iP45);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b52 = server44.connect(iP51);
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP54 = null;
    boolean b55 = server53.connect(iP54);
    java.lang.String str56 = server53.toString();
    java.lang.String str57 = server53.toString();
    tp2.Entry entry58 = new tp2.Entry();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i64 = iP63.getFirst();
    java.lang.String str65 = iP63.toString();
    entry58.element = iP63;
    boolean b67 = server53.connect(iP63);
    boolean b68 = server44.removeException(iP63);
    boolean b69 = server16.connect(iP63);
    java.lang.Integer i70 = iP63.getFirst();
    boolean b71 = strictlySortedSinglyLinkedList0.removeFromIP(iP63);
    strictlySortedSinglyLinkedList0.size = (byte)100;
    java.lang.String str74 = strictlySortedSinglyLinkedList0.toString();
    int i75 = strictlySortedSinglyLinkedList0.size;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str57.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 10+ "'", i64.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "10.0.0.100"+ "'", str65.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 10+ "'", i70.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "{}"+ "'", str74.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 100);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.Server server19 = new tp2.Server();
    tp2.IP iP20 = null;
    boolean b21 = server19.connect(iP20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b27 = server19.connect(iP26);
    java.lang.Integer i28 = iP26.getFirst();
    java.lang.Integer i29 = iP26.getFirst();
    iPBan14.setIp(iP26);
    iPBan14.expires = 1466185881717L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 100+ "'", i28.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 100+ "'", i29.equals(100));

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    tp2.IPBan iPBan53 = strictlySortedSinglyLinkedList0.get((int)(byte)100);
    int i54 = strictlySortedSinglyLinkedList0.size;
    boolean b55 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP57 = null;
    boolean b58 = server56.connect(iP57);
    java.lang.String str59 = server56.toString();
    java.lang.String str60 = server56.toString();
    tp2.SinglyLinkedList singlyLinkedList61 = new tp2.SinglyLinkedList();
    tp2.IP iP63 = singlyLinkedList61.get((int)' ');
    tp2.Entry entry64 = new tp2.Entry();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i70 = iP69.getFirst();
    java.lang.String str71 = iP69.toString();
    entry64.element = iP69;
    boolean b73 = singlyLinkedList61.remove(iP69);
    tp2.IPBan iPBan75 = new tp2.IPBan(iP69, (java.lang.Long)1L);
    java.lang.String str76 = iPBan75.toString();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i82 = iP81.getFirst();
    java.lang.String str83 = iP81.toString();
    java.lang.String str84 = iP81.toString();
    iPBan75.setIp(iP81);
    java.lang.Integer i86 = iP81.getFirst();
    boolean b87 = server56.removeException(iP81);
    iP81.setThird((java.lang.Integer)(-1));
    iP81.setSecond((java.lang.Integer)11);
    boolean b92 = strictlySortedSinglyLinkedList0.containsIP(iP81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str59.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 10+ "'", i70.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "10.0.0.100"+ "'", str71.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str76.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i82 + "' != '" + 10+ "'", i82.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "10.0.0.100"+ "'", str83.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "10.0.0.100"+ "'", str84.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i86 + "' != '" + 10+ "'", i86.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test265"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    java.lang.String str11 = iP9.toString();
    java.lang.String str12 = iP9.toString();
    iP9.setThird((java.lang.Integer)(-1));
    entry0.element = iP9;
    tp2.Node node16 = new tp2.Node();
    tp2.IPBan iPBan17 = null;
    node16.element = iPBan17;
    tp2.SinglyLinkedList singlyLinkedList19 = new tp2.SinglyLinkedList();
    tp2.IP iP21 = singlyLinkedList19.get((int)' ');
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = singlyLinkedList19.remove(iP27);
    tp2.IPBan iPBan33 = new tp2.IPBan(iP27, (java.lang.Long)1L);
    java.lang.String str34 = iPBan33.toString();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    java.lang.String str42 = iP39.toString();
    iPBan33.setIp(iP39);
    java.lang.Long long44 = iPBan33.getExpires();
    node16.element = iPBan33;
    iPBan33.expires = 1466185870380L;
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    java.lang.Integer i55 = iP52.getFourth();
    iPBan33.ip = iP52;
    entry0.element = iP52;
    tp2.Entry entry58 = entry0.next;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str59 = entry58.toString();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "10.0.0.100"+ "'", str11.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str34.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L+ "'", long44.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 100+ "'", i55.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry58);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test266"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    java.lang.String str14 = iP11.toString();
    iP11.setThird((java.lang.Integer)(-1));
    boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP11);
    tp2.IPBan iPBan19 = strictlySortedSinglyLinkedList0.get((int)(short)(-1));
    java.util.Set<tp2.IPBan> set_iPBan20 = null;
    boolean b21 = strictlySortedSinglyLinkedList0.repOk(set_iPBan20);
    tp2.Node node22 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node23 = strictlySortedSinglyLinkedList0.header;
    boolean b24 = strictlySortedSinglyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test267"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)'4');
    java.lang.String str15 = singlyLinkedList0.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b24 = server16.connect(iP23);
    java.lang.Integer i25 = iP23.getFirst();
    java.lang.Integer i26 = iP23.getThird();
    boolean b27 = singlyLinkedList0.contains(iP23);
    java.lang.Integer i28 = iP23.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "()"+ "'", str15.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 100+ "'", i25.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + (-1)+ "'", i26.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + (-1)+ "'", i28.equals((-1)));

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test268"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    boolean b9 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    int i11 = strictlySortedSinglyLinkedList10.getSize();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList10.add(iPBan12);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList14 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node15 = strictlySortedSinglyLinkedList14.header;
    strictlySortedSinglyLinkedList10.header = node15;
    strictlySortedSinglyLinkedList10.size = 0;
    int i19 = strictlySortedSinglyLinkedList10.size;
    tp2.Node node20 = strictlySortedSinglyLinkedList10.header;
    tp2.Node node21 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList0.header = node21;
    tp2.IPBan iPBan24 = strictlySortedSinglyLinkedList0.get(1);
    tp2.SinglyLinkedList singlyLinkedList25 = new tp2.SinglyLinkedList();
    tp2.IP iP27 = singlyLinkedList25.get((int)' ');
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = singlyLinkedList25.remove(iP33);
    tp2.IPBan iPBan39 = new tp2.IPBan(iP33, (java.lang.Long)1L);
    iPBan39.expires = 1466185871428L;
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP43 = null;
    boolean b44 = server42.connect(iP43);
    java.lang.String str45 = server42.toString();
    java.lang.String str46 = server42.toString();
    tp2.Entry entry47 = new tp2.Entry();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    entry47.element = iP52;
    boolean b56 = server42.connect(iP52);
    iPBan39.ip = iP52;
    tp2.SinglyLinkedList singlyLinkedList58 = new tp2.SinglyLinkedList();
    tp2.IP iP60 = singlyLinkedList58.get((int)' ');
    tp2.Entry entry61 = new tp2.Entry();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i67 = iP66.getFirst();
    java.lang.String str68 = iP66.toString();
    entry61.element = iP66;
    boolean b70 = singlyLinkedList58.remove(iP66);
    tp2.IPBan iPBan72 = new tp2.IPBan(iP66, (java.lang.Long)1L);
    iPBan72.expires = 1466185871428L;
    tp2.Server server75 = new tp2.Server();
    tp2.IP iP76 = null;
    boolean b77 = server75.connect(iP76);
    java.lang.String str78 = server75.toString();
    java.lang.String str79 = server75.toString();
    tp2.Entry entry80 = new tp2.Entry();
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i86 = iP85.getFirst();
    java.lang.String str87 = iP85.toString();
    entry80.element = iP85;
    boolean b89 = server75.connect(iP85);
    iPBan72.ip = iP85;
    iPBan39.ip = iP85;
    iPBan39.expires = (-1L);
    java.lang.String str94 = iPBan39.toString();
    boolean b95 = strictlySortedSinglyLinkedList0.add(iPBan39);
    iPBan39.setExpires((java.lang.Long)1466185874497L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 10+ "'", i67.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "10.0.0.100"+ "'", str68.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str78.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str79.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i86 + "' != '" + 10+ "'", i86.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "10.0.0.100"+ "'", str87.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "IPBan [ip=10.0.0.100, expires=-1]"+ "'", str94.equals("IPBan [ip=10.0.0.100, expires=-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test269"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    tp2.Node node5 = strictlySortedSinglyLinkedList0.header;
    java.util.Set<tp2.IPBan> set_iPBan6 = null;
    boolean b7 = strictlySortedSinglyLinkedList0.repOk(set_iPBan6);
    tp2.IPBan iPBan9 = strictlySortedSinglyLinkedList0.get((int)(short)10);
    tp2.SinglyLinkedList singlyLinkedList10 = new tp2.SinglyLinkedList();
    tp2.IP iP12 = singlyLinkedList10.get((int)' ');
    tp2.Entry entry13 = new tp2.Entry();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i19 = iP18.getFirst();
    java.lang.String str20 = iP18.toString();
    entry13.element = iP18;
    boolean b22 = singlyLinkedList10.remove(iP18);
    tp2.IPBan iPBan24 = new tp2.IPBan(iP18, (java.lang.Long)1L);
    java.lang.String str25 = iPBan24.toString();
    iPBan24.setExpires((java.lang.Long)0L);
    java.lang.Long long28 = iPBan24.expires;
    tp2.IP iP29 = iPBan24.ip;
    java.lang.Long long30 = iPBan24.getExpires();
    java.lang.String str31 = iPBan24.toString();
    // The following exception was thrown during execution in test generation
    try {
      boolean b32 = strictlySortedSinglyLinkedList0.add(iPBan24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 10+ "'", i19.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "10.0.0.100"+ "'", str20.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str25.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L+ "'", long28.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L+ "'", long30.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str31.equals("IPBan [ip=10.0.0.100, expires=0]"));

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test270"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    java.lang.String str3 = singlyLinkedList0.toString();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    tp2.IP iP7 = singlyLinkedList0.get(32);
    java.lang.String str8 = singlyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "()"+ "'", str8.equals("()"));

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test271"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.SinglyLinkedList singlyLinkedList3 = new tp2.SinglyLinkedList();
    tp2.IP iP5 = singlyLinkedList3.get((int)' ');
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    entry6.element = iP11;
    boolean b15 = singlyLinkedList3.remove(iP11);
    tp2.IPBan iPBan17 = new tp2.IPBan(iP11, (java.lang.Long)1L);
    java.lang.String str18 = iPBan17.toString();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    java.lang.String str26 = iP23.toString();
    iPBan17.setIp(iP23);
    java.lang.Long long28 = iPBan17.getExpires();
    node0.element = iPBan17;
    iPBan17.expires = 1466185870380L;
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP33 = null;
    boolean b34 = server32.connect(iP33);
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b40 = server32.connect(iP39);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList41 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList41.size = 10;
    tp2.Server server44 = new tp2.Server();
    java.lang.String str45 = server44.toString();
    server44.update();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP51.setFirst((java.lang.Integer)1);
    java.lang.Integer i54 = iP51.getSecond();
    boolean b55 = server44.addException(iP51);
    tp2.Entry entry56 = new tp2.Entry();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i62 = iP61.getFirst();
    java.lang.String str63 = iP61.toString();
    entry56.element = iP61;
    boolean b65 = server44.addException(iP61);
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b71 = server44.removeBan(iP70);
    iP70.setThird((java.lang.Integer)0);
    boolean b74 = strictlySortedSinglyLinkedList41.removeFromIP(iP70);
    tp2.Server server75 = new tp2.Server();
    java.lang.String str76 = server75.toString();
    server75.update();
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP82.setFirst((java.lang.Integer)1);
    java.lang.Integer i85 = iP82.getSecond();
    boolean b86 = server75.addException(iP82);
    boolean b87 = strictlySortedSinglyLinkedList41.removeFromIP(iP82);
    boolean b88 = server32.connect(iP82);
    iPBan17.setIp(iP82);
    java.lang.String str90 = iP82.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str18.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L+ "'", long28.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 0+ "'", i54.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i62 + "' != '" + 10+ "'", i62.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "10.0.0.100"+ "'", str63.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str76.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i85 + "' != '" + 0+ "'", i85.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "1.0.0.100"+ "'", str90.equals("1.0.0.100"));

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test272"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    java.lang.Long long16 = iPBan14.getExpires();
    iPBan14.expires = 0L;
    tp2.IP iP19 = iPBan14.getIp();
    java.lang.Integer i20 = iP19.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L+ "'", long16.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test273"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.size;
    int i5 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str6 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node7 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList8 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList8.size = 10;
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    server11.update();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP18.setFirst((java.lang.Integer)1);
    java.lang.Integer i21 = iP18.getSecond();
    boolean b22 = server11.addException(iP18);
    tp2.Entry entry23 = new tp2.Entry();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i29 = iP28.getFirst();
    java.lang.String str30 = iP28.toString();
    entry23.element = iP28;
    boolean b32 = server11.addException(iP28);
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b38 = server11.removeBan(iP37);
    iP37.setThird((java.lang.Integer)0);
    boolean b41 = strictlySortedSinglyLinkedList8.removeFromIP(iP37);
    java.lang.String str42 = strictlySortedSinglyLinkedList8.toString();
    tp2.SinglyLinkedList singlyLinkedList43 = new tp2.SinglyLinkedList();
    tp2.IP iP45 = singlyLinkedList43.get((int)' ');
    tp2.Entry entry46 = new tp2.Entry();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i52 = iP51.getFirst();
    java.lang.String str53 = iP51.toString();
    entry46.element = iP51;
    boolean b55 = singlyLinkedList43.remove(iP51);
    tp2.IPBan iPBan57 = new tp2.IPBan(iP51, (java.lang.Long)1L);
    java.lang.String str58 = iPBan57.toString();
    boolean b59 = strictlySortedSinglyLinkedList8.contains(iPBan57);
    node7.element = iPBan57;
    // The following exception was thrown during execution in test generation
    try {
      boolean b61 = strictlySortedSinglyLinkedList0.add(iPBan57);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "{[null]}"+ "'", str6.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 0+ "'", i21.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 10+ "'", i29.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "10.0.0.100"+ "'", str30.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "{}"+ "'", str42.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i52 + "' != '" + 10+ "'", i52.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "10.0.0.100"+ "'", str53.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str58.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test274"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)'4');
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)11, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b20 = singlyLinkedList0.contains(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test275"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.contains(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.getSize();
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get((int)' ');
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    boolean b17 = singlyLinkedList5.remove(iP13);
    tp2.IPBan iPBan19 = new tp2.IPBan(iP13, (java.lang.Long)1L);
    java.lang.String str20 = iPBan19.toString();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    java.lang.String str28 = iP25.toString();
    iPBan19.setIp(iP25);
    java.lang.Long long30 = iPBan19.getExpires();
    boolean b31 = strictlySortedSinglyLinkedList0.add(iPBan19);
    tp2.SinglyLinkedList singlyLinkedList32 = new tp2.SinglyLinkedList();
    tp2.IP iP34 = singlyLinkedList32.get((int)' ');
    tp2.Entry entry35 = new tp2.Entry();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i41 = iP40.getFirst();
    java.lang.String str42 = iP40.toString();
    entry35.element = iP40;
    boolean b44 = singlyLinkedList32.remove(iP40);
    tp2.IPBan iPBan46 = new tp2.IPBan(iP40, (java.lang.Long)1L);
    java.lang.String str47 = iPBan46.toString();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP49 = null;
    boolean b50 = server48.connect(iP49);
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b56 = server48.connect(iP55);
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP58 = null;
    boolean b59 = server57.connect(iP58);
    java.lang.String str60 = server57.toString();
    java.lang.String str61 = server57.toString();
    tp2.Entry entry62 = new tp2.Entry();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i68 = iP67.getFirst();
    java.lang.String str69 = iP67.toString();
    entry62.element = iP67;
    boolean b71 = server57.connect(iP67);
    boolean b72 = server48.removeException(iP67);
    tp2.Server server73 = new tp2.Server();
    tp2.IP iP74 = null;
    boolean b75 = server73.connect(iP74);
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b81 = server73.connect(iP80);
    java.lang.Integer i82 = iP80.getFirst();
    boolean b83 = server48.connect(iP80);
    iPBan46.ip = iP80;
    tp2.IP iP89 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP89.setFirst((java.lang.Integer)1);
    java.lang.Integer i92 = iP89.getSecond();
    iPBan46.ip = iP89;
    boolean b94 = strictlySortedSinglyLinkedList0.contains(iPBan46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L+ "'", long30.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i41 + "' != '" + 10+ "'", i41.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str47.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str61.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 10+ "'", i68.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "10.0.0.100"+ "'", str69.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i82 + "' != '" + 100+ "'", i82.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i92 + "' != '" + 0+ "'", i92.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test276"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i5 = iP4.getFirst();
    java.lang.String str6 = iP4.toString();
    java.lang.String str7 = iP4.toString();
    iP4.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan11 = new tp2.IPBan(iP4, (java.lang.Long)0L);
    tp2.Server server12 = new tp2.Server();
    tp2.IP iP13 = null;
    boolean b14 = server12.connect(iP13);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b20 = server12.connect(iP19);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList21 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList21.size = 10;
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    server24.update();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP31.setFirst((java.lang.Integer)1);
    java.lang.Integer i34 = iP31.getSecond();
    boolean b35 = server24.addException(iP31);
    tp2.Entry entry36 = new tp2.Entry();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i42 = iP41.getFirst();
    java.lang.String str43 = iP41.toString();
    entry36.element = iP41;
    boolean b45 = server24.addException(iP41);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b51 = server24.removeBan(iP50);
    iP50.setThird((java.lang.Integer)0);
    boolean b54 = strictlySortedSinglyLinkedList21.removeFromIP(iP50);
    tp2.Server server55 = new tp2.Server();
    java.lang.String str56 = server55.toString();
    server55.update();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP62.setFirst((java.lang.Integer)1);
    java.lang.Integer i65 = iP62.getSecond();
    boolean b66 = server55.addException(iP62);
    boolean b67 = strictlySortedSinglyLinkedList21.removeFromIP(iP62);
    boolean b68 = server12.connect(iP62);
    tp2.Server server69 = new tp2.Server();
    tp2.IP iP70 = null;
    boolean b71 = server69.connect(iP70);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b77 = server69.connect(iP76);
    java.lang.Integer i78 = iP76.getFirst();
    boolean b79 = server12.connect(iP76);
    java.lang.Integer i80 = iP76.getFirst();
    iPBan11.ip = iP76;
    java.lang.Integer i82 = iP76.getSecond();
    java.lang.Integer i83 = iP76.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i5 + "' != '" + 10+ "'", i5.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "10.0.0.100"+ "'", str6.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 0+ "'", i34.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 10+ "'", i42.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 0+ "'", i65.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i78 + "' != '" + 100+ "'", i78.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 100+ "'", i80.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i82 + "' != '" + 10+ "'", i82.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i83 + "' != '" + 10+ "'", i83.equals(10));

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test277"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = server0.connect(iP10);
    server0.update();
    server0.update();
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    server17.update();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP24.setFirst((java.lang.Integer)1);
    java.lang.Integer i27 = iP24.getSecond();
    boolean b28 = server17.addException(iP24);
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = server17.addException(iP34);
    java.lang.Integer i39 = iP34.getFirst();
    java.lang.String str40 = iP34.toString();
    boolean b41 = server0.removeBan(iP34);
    tp2.IP iP42 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b43 = server0.addException(iP42);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 0+ "'", i27.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + 10+ "'", i39.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "10.0.0.100"+ "'", str40.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test278"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)11);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test279"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)2, (java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)(-1));

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test280"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    tp2.Server server4 = new tp2.Server();
    tp2.IP iP5 = null;
    boolean b6 = server4.connect(iP5);
    java.lang.String str7 = server4.toString();
    java.lang.String str8 = server4.toString();
    tp2.IP iP9 = null;
    boolean b10 = server4.removeException(iP9);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList11.size = 10;
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    server14.update();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP21.setFirst((java.lang.Integer)1);
    java.lang.Integer i24 = iP21.getSecond();
    boolean b25 = server14.addException(iP21);
    tp2.Entry entry26 = new tp2.Entry();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i32 = iP31.getFirst();
    java.lang.String str33 = iP31.toString();
    entry26.element = iP31;
    boolean b35 = server14.addException(iP31);
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b41 = server14.removeBan(iP40);
    iP40.setThird((java.lang.Integer)0);
    boolean b44 = strictlySortedSinglyLinkedList11.removeFromIP(iP40);
    tp2.Server server45 = new tp2.Server();
    java.lang.String str46 = server45.toString();
    server45.update();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP52.setFirst((java.lang.Integer)1);
    java.lang.Integer i55 = iP52.getSecond();
    boolean b56 = server45.addException(iP52);
    boolean b57 = strictlySortedSinglyLinkedList11.removeFromIP(iP52);
    boolean b58 = server4.connect(iP52);
    tp2.RealTime realTime59 = new tp2.RealTime();
    long long60 = realTime59.getCurrentTime();
    server4.setTime((tp2.ITime)realTime59);
    server0.setTime((tp2.ITime)realTime59);
    long long63 = realTime59.getCurrentTime();
    long long64 = realTime59.getCurrentTime();
    long long65 = realTime59.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 0+ "'", i24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 10+ "'", i32.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "10.0.0.100"+ "'", str33.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 0+ "'", i55.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long60 == 1466185886103L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long63 == 1466185886104L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long64 == 1466185886104L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long65 == 1466185886104L);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test281"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    tp2.Server server4 = new tp2.Server();
    tp2.IP iP5 = null;
    boolean b6 = server4.connect(iP5);
    java.lang.String str7 = server4.toString();
    java.lang.String str8 = server4.toString();
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    java.lang.String str16 = iP14.toString();
    entry9.element = iP14;
    boolean b18 = server4.connect(iP14);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    java.lang.String str26 = iP23.toString();
    boolean b27 = server4.removeBan(iP23);
    iP23.setFirst((java.lang.Integer)10);
    boolean b30 = server0.removeException(iP23);
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP32 = null;
    boolean b33 = server31.connect(iP32);
    java.lang.String str34 = server31.toString();
    java.lang.String str35 = server31.toString();
    tp2.IP iP36 = null;
    boolean b37 = server31.removeException(iP36);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList38 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList38.size = 10;
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    tp2.Entry entry53 = new tp2.Entry();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i59 = iP58.getFirst();
    java.lang.String str60 = iP58.toString();
    entry53.element = iP58;
    boolean b62 = server41.addException(iP58);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b68 = server41.removeBan(iP67);
    iP67.setThird((java.lang.Integer)0);
    boolean b71 = strictlySortedSinglyLinkedList38.removeFromIP(iP67);
    tp2.Server server72 = new tp2.Server();
    java.lang.String str73 = server72.toString();
    server72.update();
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP79.setFirst((java.lang.Integer)1);
    java.lang.Integer i82 = iP79.getSecond();
    boolean b83 = server72.addException(iP79);
    boolean b84 = strictlySortedSinglyLinkedList38.removeFromIP(iP79);
    boolean b85 = server31.connect(iP79);
    tp2.RealTime realTime86 = new tp2.RealTime();
    long long87 = realTime86.getCurrentTime();
    server31.setTime((tp2.ITime)realTime86);
    server0.setTime((tp2.ITime)realTime86);
    tp2.IP iP94 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP94.setSecond((java.lang.Integer)(-1));
    boolean b97 = server0.connect(iP94);
    java.lang.String str98 = server0.toString();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 10+ "'", i59.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "10.0.0.100"+ "'", str60.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str73.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i82 + "' != '" + 0+ "'", i82.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long87 == 1466185886129L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str98 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str98.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test282"); }


    tp2.Node node0 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList1 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList1.size = 10;
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    server4.update();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP11.setFirst((java.lang.Integer)1);
    java.lang.Integer i14 = iP11.getSecond();
    boolean b15 = server4.addException(iP11);
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = server4.addException(iP21);
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b31 = server4.removeBan(iP30);
    iP30.setThird((java.lang.Integer)0);
    boolean b34 = strictlySortedSinglyLinkedList1.removeFromIP(iP30);
    java.lang.String str35 = strictlySortedSinglyLinkedList1.toString();
    tp2.SinglyLinkedList singlyLinkedList36 = new tp2.SinglyLinkedList();
    tp2.IP iP38 = singlyLinkedList36.get((int)' ');
    tp2.Entry entry39 = new tp2.Entry();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i45 = iP44.getFirst();
    java.lang.String str46 = iP44.toString();
    entry39.element = iP44;
    boolean b48 = singlyLinkedList36.remove(iP44);
    tp2.IPBan iPBan50 = new tp2.IPBan(iP44, (java.lang.Long)1L);
    java.lang.String str51 = iPBan50.toString();
    boolean b52 = strictlySortedSinglyLinkedList1.contains(iPBan50);
    node0.element = iPBan50;
    iPBan50.setExpires((java.lang.Long)1466185871497L);
    tp2.IP iP56 = iPBan50.getIp();
    tp2.IPBan iPBan58 = new tp2.IPBan(iP56, (java.lang.Long)1466185875518L);
    iPBan58.setExpires((java.lang.Long)1466185871428L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 0+ "'", i14.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "{}"+ "'", str35.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 10+ "'", i45.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "10.0.0.100"+ "'", str46.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str51.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP56);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test283"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.IP iP6 = entry0.element;
    tp2.Entry entry7 = entry0.next;
    tp2.Entry entry8 = entry7.next;
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP16.setFirst((java.lang.Integer)1);
    boolean b19 = server9.removeException(iP16);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList20 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan21 = null;
    boolean b22 = strictlySortedSinglyLinkedList20.contains(iPBan21);
    int i23 = strictlySortedSinglyLinkedList20.getSize();
    tp2.IPBan iPBan25 = strictlySortedSinglyLinkedList20.get((int)'#');
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP30.setSecond((java.lang.Integer)(-1));
    boolean b33 = strictlySortedSinglyLinkedList20.removeFromIP(iP30);
    boolean b34 = server9.removeBan(iP30);
    // The following exception was thrown during execution in test generation
    try {
      entry8.element = iP30;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test284"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.ip;
    java.lang.Long long20 = iPBan14.getExpires();
    tp2.Node node21 = new tp2.Node();
    tp2.IPBan iPBan22 = null;
    node21.element = iPBan22;
    tp2.SinglyLinkedList singlyLinkedList24 = new tp2.SinglyLinkedList();
    tp2.IP iP26 = singlyLinkedList24.get((int)' ');
    tp2.Entry entry27 = new tp2.Entry();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    entry27.element = iP32;
    boolean b36 = singlyLinkedList24.remove(iP32);
    tp2.IPBan iPBan38 = new tp2.IPBan(iP32, (java.lang.Long)1L);
    java.lang.String str39 = iPBan38.toString();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i45 = iP44.getFirst();
    java.lang.String str46 = iP44.toString();
    java.lang.String str47 = iP44.toString();
    iPBan38.setIp(iP44);
    java.lang.Long long49 = iPBan38.getExpires();
    node21.element = iPBan38;
    iPBan38.expires = 1466185870380L;
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i58 = iP57.getFirst();
    java.lang.String str59 = iP57.toString();
    java.lang.Integer i60 = iP57.getFourth();
    iPBan38.ip = iP57;
    iPBan14.ip = iP57;
    java.lang.Long long63 = iPBan14.expires;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L+ "'", long20.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str39.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 10+ "'", i45.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "10.0.0.100"+ "'", str46.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "10.0.0.100"+ "'", str47.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L+ "'", long49.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 10+ "'", i58.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "10.0.0.100"+ "'", str59.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 100+ "'", i60.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L+ "'", long63.equals(0L));

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test285"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    int i13 = singlyLinkedList12.getSize();
    tp2.SinglyLinkedList singlyLinkedList14 = new tp2.SinglyLinkedList();
    tp2.IP iP16 = singlyLinkedList14.get((int)' ');
    tp2.Entry entry17 = new tp2.Entry();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i23 = iP22.getFirst();
    java.lang.String str24 = iP22.toString();
    entry17.element = iP22;
    boolean b26 = singlyLinkedList14.remove(iP22);
    tp2.IP iP28 = singlyLinkedList14.get((int)'4');
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    boolean b36 = singlyLinkedList14.contains(iP33);
    boolean b37 = singlyLinkedList12.remove(iP33);
    boolean b38 = server0.addException(iP33);
    java.lang.String str39 = iP33.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 10+ "'", i23.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "10.0.0.100"+ "'", str24.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "10.0.0.100"+ "'", str39.equals("10.0.0.100"));

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test286"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList22 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList22.size = 10;
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    server25.update();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP32.setFirst((java.lang.Integer)1);
    java.lang.Integer i35 = iP32.getSecond();
    boolean b36 = server25.addException(iP32);
    tp2.Entry entry37 = new tp2.Entry();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i43 = iP42.getFirst();
    java.lang.String str44 = iP42.toString();
    entry37.element = iP42;
    boolean b46 = server25.addException(iP42);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b52 = server25.removeBan(iP51);
    iP51.setThird((java.lang.Integer)0);
    boolean b55 = strictlySortedSinglyLinkedList22.removeFromIP(iP51);
    boolean b56 = server0.addException(iP51);
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP58 = null;
    boolean b59 = server57.connect(iP58);
    java.lang.String str60 = server57.toString();
    tp2.Server server61 = new tp2.Server();
    java.lang.String str62 = server61.toString();
    server61.update();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP68.setFirst((java.lang.Integer)1);
    java.lang.Integer i71 = iP68.getSecond();
    boolean b72 = server61.addException(iP68);
    boolean b73 = server57.addException(iP68);
    boolean b74 = server0.addException(iP68);
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i80 = iP79.getFirst();
    iP79.setFourth((java.lang.Integer)1);
    boolean b83 = server0.addException(iP79);
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP88.setSecond((java.lang.Integer)(-1));
    boolean b91 = server0.removeException(iP88);
    java.lang.Integer i92 = iP88.getFourth();
    iP88.setSecond((java.lang.Integer)11);
    java.lang.Integer i95 = iP88.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 0+ "'", i35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 10+ "'", i43.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "10.0.0.100"+ "'", str44.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i71 + "' != '" + 0+ "'", i71.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 100+ "'", i80.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i92 + "' != '" + 100+ "'", i92.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i95 + "' != '" + 10+ "'", i95.equals(10));

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test287"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    boolean b16 = server0.addException(iP13);
    tp2.SinglyLinkedList singlyLinkedList17 = new tp2.SinglyLinkedList();
    int i18 = singlyLinkedList17.getSize();
    int i19 = singlyLinkedList17.getSize();
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP21 = null;
    boolean b22 = server20.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b28 = server20.connect(iP27);
    java.lang.Integer i29 = iP27.getFirst();
    java.lang.Integer i30 = iP27.getFirst();
    singlyLinkedList17.add(iP27);
    int i32 = singlyLinkedList17.getSize();
    boolean b33 = iP13.equals((java.lang.Object)singlyLinkedList17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 100+ "'", i14.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "100.10.-1.10"+ "'", str15.equals("100.10.-1.10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 100+ "'", i29.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 100+ "'", i30.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test288"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.IP iP9 = entry0.element;
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP11 = null;
    boolean b12 = server10.connect(iP11);
    java.lang.String str13 = server10.toString();
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    server14.update();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP21.setFirst((java.lang.Integer)1);
    java.lang.Integer i24 = iP21.getSecond();
    boolean b25 = server14.addException(iP21);
    boolean b26 = server10.addException(iP21);
    entry0.element = iP21;
    tp2.IP iP28 = entry0.element;
    tp2.IP iP29 = entry0.element;
    tp2.Entry entry30 = entry0.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 0+ "'", i24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry30);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test289"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = new tp2.Entry();
    java.lang.String str4 = entry3.toString();
    entry0.next = entry3;
    tp2.IP iP6 = entry3.element;
    java.lang.String str7 = entry3.toString();
    tp2.Entry entry8 = entry3.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[null]"+ "'", str4.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[null]"+ "'", str7.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test290"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    int i3 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b11 = singlyLinkedList0.remove(iP10);
    java.lang.Integer i12 = iP10.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + (-1)+ "'", i12.equals((-1)));

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test291"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.SinglyLinkedList singlyLinkedList9 = new tp2.SinglyLinkedList();
    tp2.IP iP11 = singlyLinkedList9.get(1);
    tp2.IP iP13 = singlyLinkedList9.get(0);
    java.util.Set<tp2.IP> set_iP14 = null;
    boolean b15 = singlyLinkedList9.repOk(set_iP14);
    java.lang.String str16 = singlyLinkedList9.toString();
    int i17 = singlyLinkedList9.getSize();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP19 = null;
    boolean b20 = server18.connect(iP19);
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setFirst((java.lang.Integer)1);
    boolean b28 = server18.removeException(iP25);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP30 = null;
    boolean b31 = server29.connect(iP30);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b37 = server29.connect(iP36);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList38 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList38.size = 10;
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    tp2.Entry entry53 = new tp2.Entry();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i59 = iP58.getFirst();
    java.lang.String str60 = iP58.toString();
    entry53.element = iP58;
    boolean b62 = server41.addException(iP58);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b68 = server41.removeBan(iP67);
    iP67.setThird((java.lang.Integer)0);
    boolean b71 = strictlySortedSinglyLinkedList38.removeFromIP(iP67);
    tp2.Server server72 = new tp2.Server();
    java.lang.String str73 = server72.toString();
    server72.update();
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP79.setFirst((java.lang.Integer)1);
    java.lang.Integer i82 = iP79.getSecond();
    boolean b83 = server72.addException(iP79);
    boolean b84 = strictlySortedSinglyLinkedList38.removeFromIP(iP79);
    boolean b85 = server29.connect(iP79);
    boolean b86 = server18.removeBan(iP79);
    boolean b87 = singlyLinkedList9.contains(iP79);
    boolean b88 = server0.removeBan(iP79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "()"+ "'", str16.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 10+ "'", i59.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "10.0.0.100"+ "'", str60.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str73.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i82 + "' != '" + 0+ "'", i82.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test292"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)100);
    iP4.setFourth((java.lang.Integer)(-1));
    java.lang.Integer i7 = iP4.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i7 + "' != '" + (-1)+ "'", i7.equals((-1)));

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test293"); }


    // The following exception was thrown during execution in test generation
    try {
      korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer((int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test294"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    boolean b10 = server0.removeException(iP7);
    tp2.Server server11 = new tp2.Server();
    tp2.IP iP12 = null;
    boolean b13 = server11.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b19 = server11.connect(iP18);
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP21 = null;
    boolean b22 = server20.connect(iP21);
    java.lang.String str23 = server20.toString();
    java.lang.String str24 = server20.toString();
    tp2.Entry entry25 = new tp2.Entry();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i31 = iP30.getFirst();
    java.lang.String str32 = iP30.toString();
    entry25.element = iP30;
    boolean b34 = server20.connect(iP30);
    boolean b35 = server11.removeException(iP30);
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP37 = null;
    boolean b38 = server36.connect(iP37);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b44 = server36.connect(iP43);
    java.lang.Integer i45 = iP43.getFirst();
    boolean b46 = server11.connect(iP43);
    boolean b47 = server0.addException(iP43);
    tp2.RealTime realTime48 = new tp2.RealTime();
    long long49 = realTime48.getCurrentTime();
    long long50 = realTime48.getCurrentTime();
    server0.setTime((tp2.ITime)realTime48);
    long long52 = realTime48.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 10+ "'", i31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 100+ "'", i45.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long49 == 1466185886960L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long50 == 1466185886960L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long52 == 1466185886960L);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test295"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)32, (java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)10);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test296"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.Entry entry7 = new tp2.Entry();
    java.lang.String str8 = entry7.toString();
    java.lang.String str9 = entry7.toString();
    tp2.Entry entry10 = entry7.next;
    entry6.next = entry7;
    entry1.next = entry6;
    java.lang.String str13 = entry1.toString();
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    entry14.element = iP19;
    tp2.Entry entry22 = entry14.next;
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP24 = null;
    boolean b25 = server23.connect(iP24);
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b31 = server23.connect(iP30);
    java.lang.Integer i32 = iP30.getFirst();
    entry14.element = iP30;
    tp2.Entry entry34 = entry14.next;
    entry1.next = entry34;
    // The following exception was thrown during execution in test generation
    try {
      tp2.Entry entry36 = entry34.next;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[null]"+ "'", str8.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[null]"+ "'", str13.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 100+ "'", i32.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry34);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test297"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = new tp2.Entry();
    java.lang.String str4 = entry3.toString();
    entry0.next = entry3;
    tp2.Entry entry6 = null;
    entry3.next = entry6;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[null]"+ "'", str4.equals("[null]"));

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test298"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    tp2.IPBan iPBan4 = strictlySortedSinglyLinkedList0.get((int)(byte)100);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    int i6 = strictlySortedSinglyLinkedList5.getSize();
    tp2.IPBan iPBan7 = null;
    boolean b8 = strictlySortedSinglyLinkedList5.add(iPBan7);
    tp2.Node node9 = strictlySortedSinglyLinkedList5.header;
    tp2.SinglyLinkedList singlyLinkedList10 = new tp2.SinglyLinkedList();
    tp2.IP iP12 = singlyLinkedList10.get((int)' ');
    tp2.Entry entry13 = new tp2.Entry();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i19 = iP18.getFirst();
    java.lang.String str20 = iP18.toString();
    entry13.element = iP18;
    boolean b22 = singlyLinkedList10.remove(iP18);
    tp2.IPBan iPBan24 = new tp2.IPBan(iP18, (java.lang.Long)1L);
    java.lang.String str25 = iPBan24.toString();
    iPBan24.setExpires((java.lang.Long)0L);
    java.lang.Long long28 = iPBan24.expires;
    node9.element = iPBan24;
    strictlySortedSinglyLinkedList0.header = node9;
    java.lang.String str31 = node9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 10+ "'", i19.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "10.0.0.100"+ "'", str20.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str25.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L+ "'", long28.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[IPBan [ip=10.0.0.100, expires=0]]"+ "'", str31.equals("[IPBan [ip=10.0.0.100, expires=0]]"));

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test299"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    boolean b10 = server0.removeException(iP7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList11.contains(iPBan12);
    int i14 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan16 = strictlySortedSinglyLinkedList11.get((int)'#');
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP21.setSecond((java.lang.Integer)(-1));
    boolean b24 = strictlySortedSinglyLinkedList11.removeFromIP(iP21);
    boolean b25 = server0.removeBan(iP21);
    tp2.SinglyLinkedList singlyLinkedList26 = new tp2.SinglyLinkedList();
    tp2.IP iP28 = singlyLinkedList26.get((int)' ');
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = singlyLinkedList26.remove(iP34);
    boolean b39 = iP21.equals((java.lang.Object)iP34);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    tp2.IP iP42 = singlyLinkedList40.get((int)' ');
    tp2.Entry entry43 = new tp2.Entry();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i49 = iP48.getFirst();
    java.lang.String str50 = iP48.toString();
    entry43.element = iP48;
    boolean b52 = singlyLinkedList40.remove(iP48);
    tp2.IPBan iPBan54 = new tp2.IPBan(iP48, (java.lang.Long)1L);
    java.lang.String str55 = iPBan54.toString();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    java.lang.String str63 = iP60.toString();
    iPBan54.setIp(iP60);
    java.lang.Long long65 = iPBan54.getExpires();
    boolean b66 = iP21.equals((java.lang.Object)long65);
    iP21.setSecond((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i49 + "' != '" + 10+ "'", i49.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "10.0.0.100"+ "'", str50.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str55.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "10.0.0.100"+ "'", str63.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L+ "'", long65.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test300"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    boolean b10 = server0.removeException(iP7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList11.contains(iPBan12);
    int i14 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan16 = strictlySortedSinglyLinkedList11.get((int)'#');
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP21.setSecond((java.lang.Integer)(-1));
    boolean b24 = strictlySortedSinglyLinkedList11.removeFromIP(iP21);
    boolean b25 = server0.removeBan(iP21);
    tp2.SinglyLinkedList singlyLinkedList26 = new tp2.SinglyLinkedList();
    tp2.IP iP28 = singlyLinkedList26.get((int)' ');
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = singlyLinkedList26.remove(iP34);
    boolean b39 = iP21.equals((java.lang.Object)iP34);
    korat.finitization.IFinitization iFinitization41 = tp2.Server.finServer((int)(byte)1);
    boolean b42 = iP34.equals((java.lang.Object)iFinitization41);
    java.lang.String str43 = iP34.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iFinitization41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test301"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    server0.update();
    tp2.Server server6 = new tp2.Server();
    tp2.IP iP7 = null;
    boolean b8 = server6.connect(iP7);
    java.lang.String str9 = server6.toString();
    java.lang.String str10 = server6.toString();
    tp2.IP iP11 = null;
    boolean b12 = server6.removeException(iP11);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList13 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList13.size = 10;
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    server16.update();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP23.setFirst((java.lang.Integer)1);
    java.lang.Integer i26 = iP23.getSecond();
    boolean b27 = server16.addException(iP23);
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = server16.addException(iP33);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b43 = server16.removeBan(iP42);
    iP42.setThird((java.lang.Integer)0);
    boolean b46 = strictlySortedSinglyLinkedList13.removeFromIP(iP42);
    tp2.Server server47 = new tp2.Server();
    java.lang.String str48 = server47.toString();
    server47.update();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP54.setFirst((java.lang.Integer)1);
    java.lang.Integer i57 = iP54.getSecond();
    boolean b58 = server47.addException(iP54);
    boolean b59 = strictlySortedSinglyLinkedList13.removeFromIP(iP54);
    boolean b60 = server6.connect(iP54);
    tp2.RealTime realTime61 = new tp2.RealTime();
    long long62 = realTime61.getCurrentTime();
    server6.setTime((tp2.ITime)realTime61);
    long long64 = realTime61.getCurrentTime();
    long long65 = realTime61.getCurrentTime();
    server0.setTime((tp2.ITime)realTime61);
    server0.update();
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP69 = null;
    boolean b70 = server68.connect(iP69);
    java.lang.String str71 = server68.toString();
    tp2.Server server72 = new tp2.Server();
    tp2.IP iP73 = null;
    boolean b74 = server72.connect(iP73);
    java.lang.String str75 = server72.toString();
    java.lang.String str76 = server72.toString();
    tp2.Entry entry77 = new tp2.Entry();
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i83 = iP82.getFirst();
    java.lang.String str84 = iP82.toString();
    entry77.element = iP82;
    boolean b86 = server72.connect(iP82);
    tp2.IP iP91 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i92 = iP91.getFirst();
    java.lang.String str93 = iP91.toString();
    java.lang.String str94 = iP91.toString();
    boolean b95 = server72.removeBan(iP91);
    iP91.setFirst((java.lang.Integer)10);
    boolean b98 = server68.removeException(iP91);
    boolean b99 = server0.removeBan(iP91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 0+ "'", i57.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long62 == 1466185887337L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long64 == 1466185887337L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long65 == 1466185887338L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str71.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str75.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str76.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i83 + "' != '" + 10+ "'", i83.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "10.0.0.100"+ "'", str84.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i92 + "' != '" + 10+ "'", i92.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str93 + "' != '" + "10.0.0.100"+ "'", str93.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "10.0.0.100"+ "'", str94.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test302"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    tp2.Entry entry15 = new tp2.Entry();
    java.lang.String str16 = entry15.toString();
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    server17.update();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i25 = iP24.getFirst();
    boolean b26 = server17.connect(iP24);
    entry15.element = iP24;
    java.lang.Integer i28 = iP24.getFourth();
    iPBan14.ip = iP24;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[null]"+ "'", str16.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 100+ "'", i25.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test303"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b24 = server16.connect(iP23);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP26 = null;
    boolean b27 = server25.connect(iP26);
    java.lang.String str28 = server25.toString();
    java.lang.String str29 = server25.toString();
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server25.connect(iP35);
    boolean b40 = server16.removeException(iP35);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP42 = null;
    boolean b43 = server41.connect(iP42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b49 = server41.connect(iP48);
    java.lang.Integer i50 = iP48.getFirst();
    boolean b51 = server16.connect(iP48);
    iPBan14.ip = iP48;
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP54 = null;
    boolean b55 = server53.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b61 = server53.connect(iP60);
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP63 = null;
    boolean b64 = server62.connect(iP63);
    java.lang.String str65 = server62.toString();
    java.lang.String str66 = server62.toString();
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = server62.connect(iP72);
    boolean b77 = server53.removeException(iP72);
    tp2.Server server78 = new tp2.Server();
    tp2.IP iP79 = null;
    boolean b80 = server78.connect(iP79);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b86 = server78.connect(iP85);
    java.lang.Integer i87 = iP85.getFirst();
    boolean b88 = server53.connect(iP85);
    iPBan14.setIp(iP85);
    java.lang.Integer i90 = iP85.getThird();
    iP85.setThird((java.lang.Integer)11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 100+ "'", i50.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i87 + "' != '" + 100+ "'", i87.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i90 + "' != '" + (-1)+ "'", i90.equals((-1)));

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test304"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b24 = server16.connect(iP23);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP26 = null;
    boolean b27 = server25.connect(iP26);
    java.lang.String str28 = server25.toString();
    java.lang.String str29 = server25.toString();
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server25.connect(iP35);
    boolean b40 = server16.removeException(iP35);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP42 = null;
    boolean b43 = server41.connect(iP42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b49 = server41.connect(iP48);
    java.lang.Integer i50 = iP48.getFirst();
    boolean b51 = server16.connect(iP48);
    iPBan14.ip = iP48;
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP54 = null;
    boolean b55 = server53.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b61 = server53.connect(iP60);
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP63 = null;
    boolean b64 = server62.connect(iP63);
    java.lang.String str65 = server62.toString();
    java.lang.String str66 = server62.toString();
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = server62.connect(iP72);
    boolean b77 = server53.removeException(iP72);
    tp2.Server server78 = new tp2.Server();
    tp2.IP iP79 = null;
    boolean b80 = server78.connect(iP79);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b86 = server78.connect(iP85);
    java.lang.Integer i87 = iP85.getFirst();
    boolean b88 = server53.connect(iP85);
    iPBan14.setIp(iP85);
    tp2.IP iP90 = iPBan14.ip;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 100+ "'", i50.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i87 + "' != '" + 100+ "'", i87.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP90);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test305"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    java.lang.String str5 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node6 = new tp2.Node();
    tp2.IPBan iPBan7 = null;
    node6.element = iPBan7;
    tp2.IPBan iPBan9 = node6.element;
    strictlySortedSinglyLinkedList0.header = node6;
    tp2.Node node11 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan13 = strictlySortedSinglyLinkedList0.get(0);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP15 = null;
    boolean b16 = server14.connect(iP15);
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b22 = server14.connect(iP21);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList23 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList23.size = 10;
    tp2.Server server26 = new tp2.Server();
    java.lang.String str27 = server26.toString();
    server26.update();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP33.setFirst((java.lang.Integer)1);
    java.lang.Integer i36 = iP33.getSecond();
    boolean b37 = server26.addException(iP33);
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = server26.addException(iP43);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b53 = server26.removeBan(iP52);
    iP52.setThird((java.lang.Integer)0);
    boolean b56 = strictlySortedSinglyLinkedList23.removeFromIP(iP52);
    tp2.Server server57 = new tp2.Server();
    java.lang.String str58 = server57.toString();
    server57.update();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP64.setFirst((java.lang.Integer)1);
    java.lang.Integer i67 = iP64.getSecond();
    boolean b68 = server57.addException(iP64);
    boolean b69 = strictlySortedSinglyLinkedList23.removeFromIP(iP64);
    boolean b70 = server14.connect(iP64);
    tp2.Server server71 = new tp2.Server();
    tp2.IP iP72 = null;
    boolean b73 = server71.connect(iP72);
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b79 = server71.connect(iP78);
    java.lang.Integer i80 = iP78.getFirst();
    boolean b81 = server14.connect(iP78);
    boolean b82 = strictlySortedSinglyLinkedList0.containsIP(iP78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "{[null]}"+ "'", str5.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str27.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 0+ "'", i36.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str58.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 0+ "'", i67.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 100+ "'", i80.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test306"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node1 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node2 = new tp2.Node();
    tp2.IPBan iPBan3 = null;
    node2.element = iPBan3;
    tp2.IPBan iPBan5 = null;
    node2.element = iPBan5;
    strictlySortedSinglyLinkedList0.header = node2;
    tp2.IPBan iPBan8 = node2.element;
    tp2.IPBan iPBan9 = node2.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test307"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList5.size = 10;
    tp2.Server server8 = new tp2.Server();
    java.lang.String str9 = server8.toString();
    server8.update();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP15.setFirst((java.lang.Integer)1);
    java.lang.Integer i18 = iP15.getSecond();
    boolean b19 = server8.addException(iP15);
    tp2.Entry entry20 = new tp2.Entry();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    entry20.element = iP25;
    boolean b29 = server8.addException(iP25);
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b35 = server8.removeBan(iP34);
    iP34.setThird((java.lang.Integer)0);
    boolean b38 = strictlySortedSinglyLinkedList5.removeFromIP(iP34);
    tp2.Server server39 = new tp2.Server();
    java.lang.String str40 = server39.toString();
    server39.update();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP46.setFirst((java.lang.Integer)1);
    java.lang.Integer i49 = iP46.getSecond();
    boolean b50 = server39.addException(iP46);
    boolean b51 = strictlySortedSinglyLinkedList5.removeFromIP(iP46);
    int i52 = strictlySortedSinglyLinkedList5.size;
    strictlySortedSinglyLinkedList5.size = (byte)1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList55 = new tp2.StrictlySortedSinglyLinkedList();
    int i56 = strictlySortedSinglyLinkedList55.getSize();
    tp2.IPBan iPBan57 = null;
    boolean b58 = strictlySortedSinglyLinkedList55.add(iPBan57);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList59 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node60 = strictlySortedSinglyLinkedList59.header;
    strictlySortedSinglyLinkedList55.header = node60;
    tp2.IPBan iPBan62 = node60.element;
    strictlySortedSinglyLinkedList5.header = node60;
    java.lang.String str64 = node60.toString();
    java.lang.String str65 = node60.toString();
    strictlySortedSinglyLinkedList0.header = node60;
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP71.setSecond((java.lang.Integer)1);
    java.lang.Integer i74 = iP71.getThird();
    java.lang.String str75 = iP71.toString();
    boolean b76 = strictlySortedSinglyLinkedList0.containsIP(iP71);
    int i77 = strictlySortedSinglyLinkedList0.size;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 0+ "'", i18.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i49 + "' != '" + 0+ "'", i49.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "[null]"+ "'", str64.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "[null]"+ "'", str65.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i74 + "' != '" + (-1)+ "'", i74.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "100.1.-1.10"+ "'", str75.equals("100.1.-1.10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 1);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test308"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    java.util.Set<tp2.IP> set_iP3 = null;
    boolean b4 = singlyLinkedList0.repOk(set_iP3);
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get((int)' ');
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    boolean b17 = singlyLinkedList5.remove(iP13);
    tp2.IP iP19 = singlyLinkedList5.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList20 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList20.size = 10;
    tp2.Server server23 = new tp2.Server();
    java.lang.String str24 = server23.toString();
    server23.update();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP30.setFirst((java.lang.Integer)1);
    java.lang.Integer i33 = iP30.getSecond();
    boolean b34 = server23.addException(iP30);
    tp2.Entry entry35 = new tp2.Entry();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i41 = iP40.getFirst();
    java.lang.String str42 = iP40.toString();
    entry35.element = iP40;
    boolean b44 = server23.addException(iP40);
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b50 = server23.removeBan(iP49);
    iP49.setThird((java.lang.Integer)0);
    boolean b53 = strictlySortedSinglyLinkedList20.removeFromIP(iP49);
    boolean b54 = singlyLinkedList5.contains(iP49);
    boolean b55 = singlyLinkedList0.contains(iP49);
    java.util.Set<tp2.IP> set_iP56 = null;
    boolean b57 = singlyLinkedList0.repOk(set_iP56);
    int i58 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 0+ "'", i33.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i41 + "' != '" + 10+ "'", i41.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test309"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList15.size = 10;
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    server18.update();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setFirst((java.lang.Integer)1);
    java.lang.Integer i28 = iP25.getSecond();
    boolean b29 = server18.addException(iP25);
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server18.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b45 = server18.removeBan(iP44);
    iP44.setThird((java.lang.Integer)0);
    boolean b48 = strictlySortedSinglyLinkedList15.removeFromIP(iP44);
    boolean b49 = singlyLinkedList0.contains(iP44);
    tp2.Server server50 = new tp2.Server();
    java.lang.String str51 = server50.toString();
    server50.update();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    java.lang.Integer i60 = iP57.getSecond();
    boolean b61 = server50.addException(iP57);
    tp2.Entry entry62 = new tp2.Entry();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i68 = iP67.getFirst();
    java.lang.String str69 = iP67.toString();
    entry62.element = iP67;
    boolean b71 = server50.addException(iP67);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b77 = server50.removeBan(iP76);
    iP76.setThird((java.lang.Integer)0);
    boolean b80 = singlyLinkedList0.remove(iP76);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP85.setFirst((java.lang.Integer)1);
    singlyLinkedList0.add(iP85);
    java.util.Set<tp2.IP> set_iP89 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b90 = singlyLinkedList0.repOk(set_iP89);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 0+ "'", i28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 0+ "'", i60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 10+ "'", i68.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "10.0.0.100"+ "'", str69.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test310"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    int i34 = strictlySortedSinglyLinkedList0.getSize();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    java.lang.String str50 = iPBan49.toString();
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP52 = null;
    boolean b53 = server51.connect(iP52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b59 = server51.connect(iP58);
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP61 = null;
    boolean b62 = server60.connect(iP61);
    java.lang.String str63 = server60.toString();
    java.lang.String str64 = server60.toString();
    tp2.Entry entry65 = new tp2.Entry();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i71 = iP70.getFirst();
    java.lang.String str72 = iP70.toString();
    entry65.element = iP70;
    boolean b74 = server60.connect(iP70);
    boolean b75 = server51.removeException(iP70);
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP77 = null;
    boolean b78 = server76.connect(iP77);
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b84 = server76.connect(iP83);
    java.lang.Integer i85 = iP83.getFirst();
    boolean b86 = server51.connect(iP83);
    iPBan49.ip = iP83;
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP92.setFirst((java.lang.Integer)1);
    java.lang.Integer i95 = iP92.getSecond();
    iPBan49.ip = iP92;
    boolean b97 = strictlySortedSinglyLinkedList0.contains(iPBan49);
    tp2.IP iP98 = iPBan49.getIp();
    java.lang.String str99 = iPBan49.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str63.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str64.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i71 + "' != '" + 10+ "'", i71.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "10.0.0.100"+ "'", str72.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i85 + "' != '" + 100+ "'", i85.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i95 + "' != '" + 0+ "'", i95.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str99 + "' != '" + "IPBan [ip=1.0.0.100, expires=1]"+ "'", str99.equals("IPBan [ip=1.0.0.100, expires=1]"));

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test311"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    iP4.setSecond((java.lang.Integer)11);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test312"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList22 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList22.size = 10;
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    server25.update();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP32.setFirst((java.lang.Integer)1);
    java.lang.Integer i35 = iP32.getSecond();
    boolean b36 = server25.addException(iP32);
    tp2.Entry entry37 = new tp2.Entry();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i43 = iP42.getFirst();
    java.lang.String str44 = iP42.toString();
    entry37.element = iP42;
    boolean b46 = server25.addException(iP42);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b52 = server25.removeBan(iP51);
    iP51.setThird((java.lang.Integer)0);
    boolean b55 = strictlySortedSinglyLinkedList22.removeFromIP(iP51);
    boolean b56 = server0.addException(iP51);
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP58 = null;
    boolean b59 = server57.connect(iP58);
    java.lang.String str60 = server57.toString();
    tp2.Server server61 = new tp2.Server();
    java.lang.String str62 = server61.toString();
    server61.update();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP68.setFirst((java.lang.Integer)1);
    java.lang.Integer i71 = iP68.getSecond();
    boolean b72 = server61.addException(iP68);
    boolean b73 = server57.addException(iP68);
    boolean b74 = server0.addException(iP68);
    tp2.SinglyLinkedList singlyLinkedList75 = new tp2.SinglyLinkedList();
    int i76 = singlyLinkedList75.getSize();
    int i77 = singlyLinkedList75.getSize();
    tp2.Server server78 = new tp2.Server();
    tp2.IP iP79 = null;
    boolean b80 = server78.connect(iP79);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b86 = server78.connect(iP85);
    java.lang.Integer i87 = iP85.getFirst();
    java.lang.Integer i88 = iP85.getFirst();
    singlyLinkedList75.add(iP85);
    boolean b90 = server0.removeBan(iP85);
    java.lang.String str91 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 0+ "'", i35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 10+ "'", i43.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "10.0.0.100"+ "'", str44.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i71 + "' != '" + 0+ "'", i71.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i87 + "' != '" + 100+ "'", i87.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 100+ "'", i88.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "Server [lastUpdate=1466185887892, exceptions=([10.100.0.1][10.0.0.100][1.0.0.100]), bans={}]"+ "'", str91.equals("Server [lastUpdate=1466185887892, exceptions=([10.100.0.1][10.0.0.100][1.0.0.100]), bans={}]"));

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test313"); }


    tp2.Node node0 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList1 = new tp2.StrictlySortedSinglyLinkedList();
    int i2 = strictlySortedSinglyLinkedList1.getSize();
    tp2.IPBan iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList1.add(iPBan3);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node6 = strictlySortedSinglyLinkedList5.header;
    strictlySortedSinglyLinkedList1.header = node6;
    node0.next = node6;
    tp2.Node node9 = node0.next;
    tp2.Node node10 = node0.next;
    tp2.Node node11 = node10.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node11);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test314"); }


    tp2.IP iP0 = null;
    tp2.IPBan iPBan2 = new tp2.IPBan(iP0, (java.lang.Long)1466185877441L);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test315"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.IP iP9 = entry0.element;
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP11 = null;
    boolean b12 = server10.connect(iP11);
    java.lang.String str13 = server10.toString();
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    server14.update();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP21.setFirst((java.lang.Integer)1);
    java.lang.Integer i24 = iP21.getSecond();
    boolean b25 = server14.addException(iP21);
    boolean b26 = server10.addException(iP21);
    entry0.element = iP21;
    tp2.SinglyLinkedList singlyLinkedList28 = new tp2.SinglyLinkedList();
    tp2.IP iP30 = singlyLinkedList28.get((int)' ');
    tp2.Entry entry31 = new tp2.Entry();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i37 = iP36.getFirst();
    java.lang.String str38 = iP36.toString();
    entry31.element = iP36;
    boolean b40 = singlyLinkedList28.remove(iP36);
    tp2.IPBan iPBan42 = new tp2.IPBan(iP36, (java.lang.Long)1L);
    java.lang.String str43 = iPBan42.toString();
    iPBan42.setExpires((java.lang.Long)0L);
    java.lang.Long long46 = iPBan42.expires;
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP48 = null;
    boolean b49 = server47.connect(iP48);
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b55 = server47.connect(iP54);
    java.lang.Integer i56 = iP54.getFirst();
    java.lang.Integer i57 = iP54.getFirst();
    iPBan42.setIp(iP54);
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP60 = null;
    boolean b61 = server59.connect(iP60);
    java.lang.String str62 = server59.toString();
    java.lang.String str63 = server59.toString();
    tp2.Entry entry64 = new tp2.Entry();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i70 = iP69.getFirst();
    java.lang.String str71 = iP69.toString();
    entry64.element = iP69;
    boolean b73 = server59.connect(iP69);
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i79 = iP78.getFirst();
    java.lang.String str80 = iP78.toString();
    java.lang.String str81 = iP78.toString();
    boolean b82 = server59.removeBan(iP78);
    iP78.setFirst((java.lang.Integer)10);
    boolean b85 = iP54.equals((java.lang.Object)10);
    entry0.element = iP54;
    java.lang.String str87 = entry0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 0+ "'", i24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str43.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L+ "'", long46.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 100+ "'", i56.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 100+ "'", i57.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str63.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 10+ "'", i70.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "10.0.0.100"+ "'", str71.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i79 + "' != '" + 10+ "'", i79.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "10.0.0.100"+ "'", str80.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "10.0.0.100"+ "'", str81.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "[100.10.-1.10]"+ "'", str87.equals("[100.10.-1.10]"));

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test316"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    int i3 = singlyLinkedList0.getSize();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    java.lang.Integer i11 = iP8.getFourth();
    boolean b12 = singlyLinkedList0.contains(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1466185870901L);
    iP8.setThird((java.lang.Integer)11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 100+ "'", i11.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test317"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList54 = new tp2.StrictlySortedSinglyLinkedList();
    int i55 = strictlySortedSinglyLinkedList54.size;
    tp2.IPBan iPBan56 = null;
    boolean b57 = strictlySortedSinglyLinkedList54.add(iPBan56);
    boolean b58 = strictlySortedSinglyLinkedList54.isEmpty();
    tp2.Node node59 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList60 = new tp2.StrictlySortedSinglyLinkedList();
    int i61 = strictlySortedSinglyLinkedList60.getSize();
    tp2.IPBan iPBan62 = null;
    boolean b63 = strictlySortedSinglyLinkedList60.add(iPBan62);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList64 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node65 = strictlySortedSinglyLinkedList64.header;
    strictlySortedSinglyLinkedList60.header = node65;
    node59.next = node65;
    tp2.Node node68 = node59.next;
    strictlySortedSinglyLinkedList54.header = node68;
    java.lang.String str70 = strictlySortedSinglyLinkedList54.toString();
    tp2.Node node71 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList72 = new tp2.StrictlySortedSinglyLinkedList();
    int i73 = strictlySortedSinglyLinkedList72.getSize();
    tp2.IPBan iPBan74 = null;
    boolean b75 = strictlySortedSinglyLinkedList72.add(iPBan74);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList76 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node77 = strictlySortedSinglyLinkedList76.header;
    strictlySortedSinglyLinkedList72.header = node77;
    node71.next = node77;
    tp2.Node node80 = node71.next;
    tp2.Node node81 = node71.next;
    strictlySortedSinglyLinkedList54.header = node81;
    boolean b83 = iP47.equals((java.lang.Object)strictlySortedSinglyLinkedList54);
    java.lang.Integer i84 = iP47.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "{}"+ "'", str70.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i84 + "' != '" + 0+ "'", i84.equals(0));

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test318"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    iPBan14.expires = 1466185871428L;
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP18 = null;
    boolean b19 = server17.connect(iP18);
    java.lang.String str20 = server17.toString();
    java.lang.String str21 = server17.toString();
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server17.connect(iP27);
    iPBan14.ip = iP27;
    tp2.SinglyLinkedList singlyLinkedList33 = new tp2.SinglyLinkedList();
    tp2.IP iP35 = singlyLinkedList33.get((int)' ');
    tp2.Entry entry36 = new tp2.Entry();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i42 = iP41.getFirst();
    java.lang.String str43 = iP41.toString();
    entry36.element = iP41;
    boolean b45 = singlyLinkedList33.remove(iP41);
    tp2.IPBan iPBan47 = new tp2.IPBan(iP41, (java.lang.Long)1L);
    iPBan47.expires = 1466185871428L;
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP51 = null;
    boolean b52 = server50.connect(iP51);
    java.lang.String str53 = server50.toString();
    java.lang.String str54 = server50.toString();
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    entry55.element = iP60;
    boolean b64 = server50.connect(iP60);
    iPBan47.ip = iP60;
    iPBan14.ip = iP60;
    tp2.IP iP67 = iPBan14.ip;
    iPBan14.expires = 1466185880002L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 10+ "'", i42.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str53.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str54.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP67);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test319"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    tp2.Node node3 = new tp2.Node();
    tp2.IPBan iPBan4 = null;
    node3.element = iPBan4;
    tp2.IPBan iPBan6 = null;
    node3.element = iPBan6;
    tp2.IPBan iPBan8 = node3.element;
    strictlySortedSinglyLinkedList0.header = node3;
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP11 = null;
    boolean b12 = server10.connect(iP11);
    java.lang.String str13 = server10.toString();
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP15 = null;
    boolean b16 = server14.connect(iP15);
    java.lang.String str17 = server14.toString();
    java.lang.String str18 = server14.toString();
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = server14.connect(iP24);
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    java.lang.String str36 = iP33.toString();
    boolean b37 = server14.removeBan(iP33);
    iP33.setFirst((java.lang.Integer)10);
    boolean b40 = server10.removeException(iP33);
    tp2.IPBan iPBan42 = new tp2.IPBan(iP33, (java.lang.Long)1L);
    java.lang.Long long43 = iPBan42.expires;
    tp2.IP iP44 = iPBan42.ip;
    boolean b45 = strictlySortedSinglyLinkedList0.removeFromIP(iP44);
    tp2.IPBan iPBan47 = strictlySortedSinglyLinkedList0.get((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L+ "'", long43.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan47);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test320"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.getIp();
    tp2.IP iP20 = iPBan14.ip;
    tp2.IP iP21 = iPBan14.getIp();
    iPBan14.expires = 1466185876788L;
    iPBan14.expires = 1466185884615L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP21);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test321"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.IP iP6 = entry0.element;
    tp2.Entry entry7 = entry0.next;
    tp2.Entry entry8 = new tp2.Entry();
    tp2.Entry entry9 = new tp2.Entry();
    java.lang.String str10 = entry9.toString();
    java.lang.String str11 = entry9.toString();
    tp2.Entry entry12 = entry9.next;
    entry8.next = entry9;
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    entry14.element = iP19;
    tp2.Entry entry22 = entry14.next;
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP24 = null;
    boolean b25 = server23.connect(iP24);
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b31 = server23.connect(iP30);
    java.lang.Integer i32 = iP30.getFirst();
    entry14.element = iP30;
    entry9.next = entry14;
    tp2.Entry entry35 = new tp2.Entry();
    java.lang.String str36 = entry35.toString();
    java.lang.String str37 = entry35.toString();
    tp2.Entry entry38 = entry35.next;
    entry14.next = entry38;
    entry7.next = entry14;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[null]"+ "'", str10.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[null]"+ "'", str11.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 100+ "'", i32.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[null]"+ "'", str36.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[null]"+ "'", str37.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry38);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test322"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    entry55.element = iP60;
    tp2.Entry entry63 = entry55.next;
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP65 = null;
    boolean b66 = server64.connect(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b72 = server64.connect(iP71);
    java.lang.Integer i73 = iP71.getFirst();
    entry55.element = iP71;
    iP71.setFourth((java.lang.Integer)100);
    boolean b77 = server0.removeException(iP71);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList78 = new tp2.StrictlySortedSinglyLinkedList();
    boolean b79 = iP71.equals((java.lang.Object)strictlySortedSinglyLinkedList78);
    int i80 = strictlySortedSinglyLinkedList78.size;
    java.util.Set<tp2.IPBan> set_iPBan81 = null;
    boolean b82 = strictlySortedSinglyLinkedList78.repOk(set_iPBan81);
    boolean b83 = strictlySortedSinglyLinkedList78.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 100+ "'", i73.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test323"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList15.size = 10;
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    server18.update();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setFirst((java.lang.Integer)1);
    java.lang.Integer i28 = iP25.getSecond();
    boolean b29 = server18.addException(iP25);
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server18.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b45 = server18.removeBan(iP44);
    iP44.setThird((java.lang.Integer)0);
    boolean b48 = strictlySortedSinglyLinkedList15.removeFromIP(iP44);
    boolean b49 = singlyLinkedList0.contains(iP44);
    int i50 = singlyLinkedList0.getSize();
    tp2.Node node51 = new tp2.Node();
    tp2.IPBan iPBan52 = null;
    node51.element = iPBan52;
    tp2.SinglyLinkedList singlyLinkedList54 = new tp2.SinglyLinkedList();
    tp2.IP iP56 = singlyLinkedList54.get((int)' ');
    tp2.Entry entry57 = new tp2.Entry();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i63 = iP62.getFirst();
    java.lang.String str64 = iP62.toString();
    entry57.element = iP62;
    boolean b66 = singlyLinkedList54.remove(iP62);
    tp2.IPBan iPBan68 = new tp2.IPBan(iP62, (java.lang.Long)1L);
    java.lang.String str69 = iPBan68.toString();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i75 = iP74.getFirst();
    java.lang.String str76 = iP74.toString();
    java.lang.String str77 = iP74.toString();
    iPBan68.setIp(iP74);
    java.lang.Long long79 = iPBan68.getExpires();
    node51.element = iPBan68;
    iPBan68.expires = 1466185870380L;
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i88 = iP87.getFirst();
    java.lang.String str89 = iP87.toString();
    java.lang.Integer i90 = iP87.getFourth();
    iPBan68.ip = iP87;
    boolean b92 = singlyLinkedList0.remove(iP87);
    boolean b93 = singlyLinkedList0.isEmpty();
    boolean b94 = singlyLinkedList0.isEmpty();
    java.lang.String str95 = singlyLinkedList0.toString();
    tp2.IP iP97 = singlyLinkedList0.get(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 0+ "'", i28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 10+ "'", i63.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "10.0.0.100"+ "'", str64.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str69.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 10+ "'", i75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "10.0.0.100"+ "'", str76.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L+ "'", long79.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 10+ "'", i88.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "10.0.0.100"+ "'", str89.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i90 + "' != '" + 100+ "'", i90.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "()"+ "'", str95.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP97);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test324"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    entry55.element = iP60;
    tp2.Entry entry63 = entry55.next;
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP65 = null;
    boolean b66 = server64.connect(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b72 = server64.connect(iP71);
    java.lang.Integer i73 = iP71.getFirst();
    entry55.element = iP71;
    iP71.setFourth((java.lang.Integer)100);
    boolean b77 = server0.removeException(iP71);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList78 = new tp2.StrictlySortedSinglyLinkedList();
    boolean b79 = iP71.equals((java.lang.Object)strictlySortedSinglyLinkedList78);
    int i80 = strictlySortedSinglyLinkedList78.size;
    java.util.Set<tp2.IPBan> set_iPBan81 = null;
    boolean b82 = strictlySortedSinglyLinkedList78.repOk(set_iPBan81);
    int i83 = strictlySortedSinglyLinkedList78.size;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 100+ "'", i73.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test325"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    tp2.IPBan iPBan4 = strictlySortedSinglyLinkedList0.get((int)(byte)100);
    strictlySortedSinglyLinkedList0.size = '4';
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan4);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test326"); }


    korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer((int)(byte)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iFinitization1);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test327"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList3 = new tp2.StrictlySortedSinglyLinkedList();
    int i4 = strictlySortedSinglyLinkedList3.getSize();
    tp2.IPBan iPBan5 = null;
    boolean b6 = strictlySortedSinglyLinkedList3.add(iPBan5);
    tp2.Node node7 = strictlySortedSinglyLinkedList3.header;
    tp2.IPBan iPBan9 = strictlySortedSinglyLinkedList3.get(100);
    tp2.Node node10 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    int i12 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan13 = null;
    boolean b14 = strictlySortedSinglyLinkedList11.add(iPBan13);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node16 = strictlySortedSinglyLinkedList15.header;
    strictlySortedSinglyLinkedList11.header = node16;
    node10.next = node16;
    strictlySortedSinglyLinkedList3.header = node10;
    node0.next = node10;
    java.lang.String str21 = node0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[null]"+ "'", str21.equals("[null]"));

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test328"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.getIp();
    tp2.IP iP20 = iPBan14.ip;
    tp2.IP iP21 = iPBan14.getIp();
    java.lang.Long long22 = iPBan14.expires;
    iPBan14.setExpires((java.lang.Long)1466185877215L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L+ "'", long22.equals(0L));

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test329"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.IPBan iPBan3 = null;
    node0.element = iPBan3;
    tp2.Node node5 = node0.next;
    // The following exception was thrown during execution in test generation
    try {
      tp2.IPBan iPBan6 = node5.element;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node5);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test330"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan5 = strictlySortedSinglyLinkedList0.get((int)'#');
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList6.size = 10;
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    server9.update();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP16.setFirst((java.lang.Integer)1);
    java.lang.Integer i19 = iP16.getSecond();
    boolean b20 = server9.addException(iP16);
    tp2.Entry entry21 = new tp2.Entry();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i27 = iP26.getFirst();
    java.lang.String str28 = iP26.toString();
    entry21.element = iP26;
    boolean b30 = server9.addException(iP26);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b36 = server9.removeBan(iP35);
    iP35.setThird((java.lang.Integer)0);
    boolean b39 = strictlySortedSinglyLinkedList6.removeFromIP(iP35);
    java.lang.String str40 = strictlySortedSinglyLinkedList6.toString();
    tp2.SinglyLinkedList singlyLinkedList41 = new tp2.SinglyLinkedList();
    tp2.IP iP43 = singlyLinkedList41.get((int)' ');
    tp2.Entry entry44 = new tp2.Entry();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i50 = iP49.getFirst();
    java.lang.String str51 = iP49.toString();
    entry44.element = iP49;
    boolean b53 = singlyLinkedList41.remove(iP49);
    tp2.IPBan iPBan55 = new tp2.IPBan(iP49, (java.lang.Long)1L);
    java.lang.String str56 = iPBan55.toString();
    boolean b57 = strictlySortedSinglyLinkedList6.contains(iPBan55);
    tp2.SinglyLinkedList singlyLinkedList58 = new tp2.SinglyLinkedList();
    tp2.IP iP60 = singlyLinkedList58.get((int)' ');
    tp2.Entry entry61 = new tp2.Entry();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i67 = iP66.getFirst();
    java.lang.String str68 = iP66.toString();
    entry61.element = iP66;
    boolean b70 = singlyLinkedList58.remove(iP66);
    tp2.IPBan iPBan72 = new tp2.IPBan(iP66, (java.lang.Long)1L);
    tp2.Server server73 = new tp2.Server();
    java.lang.String str74 = server73.toString();
    server73.update();
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i81 = iP80.getFirst();
    boolean b82 = server73.connect(iP80);
    iPBan72.ip = iP80;
    tp2.IP iP84 = iPBan72.ip;
    boolean b85 = strictlySortedSinglyLinkedList6.add(iPBan72);
    boolean b86 = strictlySortedSinglyLinkedList0.add(iPBan72);
    tp2.IP iP87 = null;
    tp2.IPBan iPBan89 = new tp2.IPBan(iP87, (java.lang.Long)200000L);
    boolean b90 = strictlySortedSinglyLinkedList0.add(iPBan89);
    java.lang.Long long91 = iPBan89.getExpires();
    java.lang.String str92 = iPBan89.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 0+ "'", i19.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "{}"+ "'", str40.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 10+ "'", i50.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "10.0.0.100"+ "'", str51.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str56.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 10+ "'", i67.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "10.0.0.100"+ "'", str68.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str74.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i81 + "' != '" + 100+ "'", i81.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long91 + "' != '" + 200000L+ "'", long91.equals(200000L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "IPBan [ip=null, expires=200000]"+ "'", str92.equals("IPBan [ip=null, expires=200000]"));

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test331"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    java.util.Set<tp2.IPBan> set_iPBan9 = null;
    boolean b10 = strictlySortedSinglyLinkedList0.repOk(set_iPBan9);
    tp2.SinglyLinkedList singlyLinkedList11 = new tp2.SinglyLinkedList();
    tp2.IP iP13 = singlyLinkedList11.get((int)' ');
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    entry14.element = iP19;
    boolean b23 = singlyLinkedList11.remove(iP19);
    tp2.IPBan iPBan25 = new tp2.IPBan(iP19, (java.lang.Long)1L);
    java.lang.String str26 = iPBan25.toString();
    java.lang.Long long27 = iPBan25.getExpires();
    iPBan25.expires = 0L;
    tp2.IP iP30 = iPBan25.getIp();
    tp2.IP iP31 = iPBan25.ip;
    // The following exception was thrown during execution in test generation
    try {
      boolean b32 = strictlySortedSinglyLinkedList0.containsIP(iP31);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str26.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L+ "'", long27.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP31);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test332"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList15.size = 10;
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    server18.update();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setFirst((java.lang.Integer)1);
    java.lang.Integer i28 = iP25.getSecond();
    boolean b29 = server18.addException(iP25);
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server18.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b45 = server18.removeBan(iP44);
    iP44.setThird((java.lang.Integer)0);
    boolean b48 = strictlySortedSinglyLinkedList15.removeFromIP(iP44);
    boolean b49 = singlyLinkedList0.contains(iP44);
    int i50 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP51 = null;
    boolean b52 = singlyLinkedList0.repOk(set_iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)0);
    singlyLinkedList0.add(iP57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 0+ "'", i28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test333"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.Server server54 = new tp2.Server();
    tp2.IP iP55 = null;
    boolean b56 = server54.connect(iP55);
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b62 = server54.connect(iP61);
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP64 = null;
    boolean b65 = server63.connect(iP64);
    java.lang.String str66 = server63.toString();
    java.lang.String str67 = server63.toString();
    tp2.Entry entry68 = new tp2.Entry();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i74 = iP73.getFirst();
    java.lang.String str75 = iP73.toString();
    entry68.element = iP73;
    boolean b77 = server63.connect(iP73);
    boolean b78 = server54.removeException(iP73);
    tp2.Server server79 = new tp2.Server();
    tp2.IP iP80 = null;
    boolean b81 = server79.connect(iP80);
    tp2.IP iP86 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b87 = server79.connect(iP86);
    java.lang.Integer i88 = iP86.getFirst();
    boolean b89 = server54.connect(iP86);
    iP86.setFourth((java.lang.Integer)100);
    java.lang.Integer i92 = iP86.getSecond();
    boolean b93 = server0.removeException(iP86);
    tp2.IPBan iPBan95 = new tp2.IPBan(iP86, (java.lang.Long)1466185881188L);
    iP86.setThird((java.lang.Integer)0);
    java.lang.String str98 = iP86.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str67.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i74 + "' != '" + 10+ "'", i74.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "10.0.0.100"+ "'", str75.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 100+ "'", i88.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i92 + "' != '" + 10+ "'", i92.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str98 + "' != '" + "100.10.0.100"+ "'", str98.equals("100.10.0.100"));

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test334"); }


    tp2.Node node0 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList1 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList1.size = 10;
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    server4.update();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP11.setFirst((java.lang.Integer)1);
    java.lang.Integer i14 = iP11.getSecond();
    boolean b15 = server4.addException(iP11);
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = server4.addException(iP21);
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b31 = server4.removeBan(iP30);
    iP30.setThird((java.lang.Integer)0);
    boolean b34 = strictlySortedSinglyLinkedList1.removeFromIP(iP30);
    java.lang.String str35 = strictlySortedSinglyLinkedList1.toString();
    tp2.SinglyLinkedList singlyLinkedList36 = new tp2.SinglyLinkedList();
    tp2.IP iP38 = singlyLinkedList36.get((int)' ');
    tp2.Entry entry39 = new tp2.Entry();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i45 = iP44.getFirst();
    java.lang.String str46 = iP44.toString();
    entry39.element = iP44;
    boolean b48 = singlyLinkedList36.remove(iP44);
    tp2.IPBan iPBan50 = new tp2.IPBan(iP44, (java.lang.Long)1L);
    java.lang.String str51 = iPBan50.toString();
    boolean b52 = strictlySortedSinglyLinkedList1.contains(iPBan50);
    node0.element = iPBan50;
    iPBan50.setExpires((java.lang.Long)1466185871497L);
    tp2.IP iP56 = iPBan50.getIp();
    tp2.IPBan iPBan58 = new tp2.IPBan(iP56, (java.lang.Long)1466185875518L);
    java.lang.Integer i59 = iP56.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 0+ "'", i14.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "{}"+ "'", str35.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 10+ "'", i45.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "10.0.0.100"+ "'", str46.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str51.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 0+ "'", i59.equals(0));

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test335"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.getIp();
    tp2.IP iP20 = iPBan14.ip;
    tp2.IP iP21 = iPBan14.getIp();
    iPBan14.expires = 1466185876788L;
    iPBan14.expires = 0L;
    tp2.SinglyLinkedList singlyLinkedList26 = new tp2.SinglyLinkedList();
    tp2.IP iP28 = singlyLinkedList26.get((int)' ');
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = singlyLinkedList26.remove(iP34);
    tp2.IPBan iPBan40 = new tp2.IPBan(iP34, (java.lang.Long)1L);
    java.lang.String str41 = iPBan40.toString();
    iPBan40.setExpires((java.lang.Long)0L);
    java.lang.Long long44 = iPBan40.expires;
    tp2.IP iP45 = iPBan40.getIp();
    tp2.IP iP46 = iPBan40.ip;
    tp2.IP iP47 = iPBan40.getIp();
    iPBan40.expires = 1466185876788L;
    java.lang.Long long50 = iPBan40.getExpires();
    tp2.IP iP51 = iPBan40.getIp();
    iPBan14.setIp(iP51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str41.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L+ "'", long44.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1466185876788L+ "'", long50.equals(1466185876788L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP51);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test336"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    java.lang.String str23 = iP20.toString();
    iPBan14.setIp(iP20);
    java.lang.Integer i25 = iP20.getFirst();
    java.lang.Integer i26 = iP20.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 100+ "'", i26.equals(100));

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test337"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan6 = strictlySortedSinglyLinkedList0.get(100);
    strictlySortedSinglyLinkedList0.size = '#';
    strictlySortedSinglyLinkedList0.size = 100;
    tp2.IPBan iPBan12 = strictlySortedSinglyLinkedList0.get((int)(byte)1);
    tp2.Node node13 = new tp2.Node();
    tp2.IPBan iPBan14 = null;
    node13.element = iPBan14;
    tp2.SinglyLinkedList singlyLinkedList16 = new tp2.SinglyLinkedList();
    tp2.IP iP18 = singlyLinkedList16.get((int)' ');
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = singlyLinkedList16.remove(iP24);
    tp2.IPBan iPBan30 = new tp2.IPBan(iP24, (java.lang.Long)1L);
    java.lang.String str31 = iPBan30.toString();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i37 = iP36.getFirst();
    java.lang.String str38 = iP36.toString();
    java.lang.String str39 = iP36.toString();
    iPBan30.setIp(iP36);
    java.lang.Long long41 = iPBan30.getExpires();
    node13.element = iPBan30;
    java.lang.Long long43 = iPBan30.getExpires();
    // The following exception was thrown during execution in test generation
    try {
      boolean b44 = strictlySortedSinglyLinkedList0.contains(iPBan30);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str31.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "10.0.0.100"+ "'", str39.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L+ "'", long41.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L+ "'", long43.equals(1L));

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test338"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    java.lang.String str34 = strictlySortedSinglyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    java.lang.String str50 = iPBan49.toString();
    boolean b51 = strictlySortedSinglyLinkedList0.contains(iPBan49);
    tp2.IPBan iPBan53 = strictlySortedSinglyLinkedList0.get((int)(short)0);
    int i54 = strictlySortedSinglyLinkedList0.getSize();
    java.util.Set<tp2.IPBan> set_iPBan55 = null;
    boolean b56 = strictlySortedSinglyLinkedList0.repOk(set_iPBan55);
    boolean b57 = strictlySortedSinglyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "{}"+ "'", str34.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test339"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get(1);
    java.lang.String str3 = singlyLinkedList0.toString();
    boolean b4 = singlyLinkedList0.isEmpty();
    tp2.Server server5 = new tp2.Server();
    tp2.IP iP6 = null;
    boolean b7 = server5.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b13 = server5.connect(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP15 = null;
    boolean b16 = server14.connect(iP15);
    java.lang.String str17 = server14.toString();
    java.lang.String str18 = server14.toString();
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = server14.connect(iP24);
    boolean b29 = server5.removeException(iP24);
    java.lang.Integer i30 = iP24.getFirst();
    boolean b31 = singlyLinkedList0.contains(iP24);
    int i32 = singlyLinkedList0.getSize();
    tp2.IP iP34 = singlyLinkedList0.get(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP34);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test340"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Server server5 = new tp2.Server();
    tp2.IP iP6 = null;
    boolean b7 = server5.connect(iP6);
    java.lang.String str8 = server5.toString();
    java.lang.String str9 = server5.toString();
    tp2.IP iP10 = null;
    boolean b11 = server5.removeException(iP10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList12 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList12.size = 10;
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    server15.update();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP22.setFirst((java.lang.Integer)1);
    java.lang.Integer i25 = iP22.getSecond();
    boolean b26 = server15.addException(iP22);
    tp2.Entry entry27 = new tp2.Entry();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    entry27.element = iP32;
    boolean b36 = server15.addException(iP32);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b42 = server15.removeBan(iP41);
    iP41.setThird((java.lang.Integer)0);
    boolean b45 = strictlySortedSinglyLinkedList12.removeFromIP(iP41);
    tp2.Server server46 = new tp2.Server();
    java.lang.String str47 = server46.toString();
    server46.update();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP53.setFirst((java.lang.Integer)1);
    java.lang.Integer i56 = iP53.getSecond();
    boolean b57 = server46.addException(iP53);
    boolean b58 = strictlySortedSinglyLinkedList12.removeFromIP(iP53);
    boolean b59 = server5.connect(iP53);
    iP53.setThird((java.lang.Integer)11);
    // The following exception was thrown during execution in test generation
    try {
      boolean b62 = strictlySortedSinglyLinkedList0.containsIP(iP53);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 0+ "'", i25.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 0+ "'", i56.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test341"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    int i7 = strictlySortedSinglyLinkedList0.size;
    tp2.Node node8 = strictlySortedSinglyLinkedList0.header;
    int i9 = strictlySortedSinglyLinkedList0.size;
    int i10 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test342"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    java.lang.Integer i54 = iP47.getFirst();
    iP47.setFirst((java.lang.Integer)100);
    tp2.SinglyLinkedList singlyLinkedList57 = new tp2.SinglyLinkedList();
    tp2.IP iP59 = singlyLinkedList57.get((int)' ');
    tp2.Entry entry60 = new tp2.Entry();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i66 = iP65.getFirst();
    java.lang.String str67 = iP65.toString();
    entry60.element = iP65;
    boolean b69 = singlyLinkedList57.remove(iP65);
    tp2.IPBan iPBan71 = new tp2.IPBan(iP65, (java.lang.Long)1L);
    iPBan71.expires = 1466185871428L;
    iPBan71.expires = 0L;
    boolean b76 = iP47.equals((java.lang.Object)iPBan71);
    tp2.IP iP77 = iPBan71.ip;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i66 + "' != '" + 10+ "'", i66.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "10.0.0.100"+ "'", str67.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP77);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test343"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.size;
    tp2.Node node5 = strictlySortedSinglyLinkedList0.header;
    java.lang.String str6 = strictlySortedSinglyLinkedList0.toString();
    int i7 = strictlySortedSinglyLinkedList0.size;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "{[null]}"+ "'", str6.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test344"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node1 = strictlySortedSinglyLinkedList0.header;
    tp2.SinglyLinkedList singlyLinkedList2 = new tp2.SinglyLinkedList();
    tp2.IP iP4 = singlyLinkedList2.get((int)' ');
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = singlyLinkedList2.remove(iP10);
    tp2.IPBan iPBan16 = new tp2.IPBan(iP10, (java.lang.Long)1L);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    server17.update();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i25 = iP24.getFirst();
    boolean b26 = server17.connect(iP24);
    iPBan16.ip = iP24;
    node1.element = iPBan16;
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    java.lang.String str36 = iP33.toString();
    iP33.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan40 = new tp2.IPBan(iP33, (java.lang.Long)0L);
    java.lang.String str41 = iPBan40.toString();
    node1.element = iPBan40;
    tp2.IP iP43 = iPBan40.ip;
    java.lang.Integer i44 = iP43.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 100+ "'", i25.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "IPBan [ip=10.0.-1.100, expires=0]"+ "'", str41.equals("IPBan [ip=10.0.-1.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test345"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.Server server55 = new tp2.Server();
    java.lang.String str56 = server55.toString();
    server55.update();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP62.setFirst((java.lang.Integer)1);
    java.lang.Integer i65 = iP62.getSecond();
    boolean b66 = server55.addException(iP62);
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = server55.addException(iP72);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b82 = server55.removeBan(iP81);
    iP81.setThird((java.lang.Integer)0);
    iP81.setFourth((java.lang.Integer)10);
    boolean b87 = server0.addException(iP81);
    iP81.setFirst((java.lang.Integer)11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 0+ "'", i65.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test346"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)2, (java.lang.Integer)32, (java.lang.Integer)100);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test347"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList9.size = 10;
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    server12.update();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP19.setFirst((java.lang.Integer)1);
    java.lang.Integer i22 = iP19.getSecond();
    boolean b23 = server12.addException(iP19);
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = server12.addException(iP29);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b39 = server12.removeBan(iP38);
    iP38.setThird((java.lang.Integer)0);
    boolean b42 = strictlySortedSinglyLinkedList9.removeFromIP(iP38);
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    server43.update();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP50.setFirst((java.lang.Integer)1);
    java.lang.Integer i53 = iP50.getSecond();
    boolean b54 = server43.addException(iP50);
    boolean b55 = strictlySortedSinglyLinkedList9.removeFromIP(iP50);
    boolean b56 = server0.connect(iP50);
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP58 = null;
    boolean b59 = server57.connect(iP58);
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b65 = server57.connect(iP64);
    java.lang.Integer i66 = iP64.getFirst();
    boolean b67 = server0.connect(iP64);
    java.lang.Object obj68 = null;
    boolean b69 = iP64.equals(obj68);
    tp2.IPBan iPBan71 = new tp2.IPBan(iP64, (java.lang.Long)1466185871942L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 0+ "'", i22.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 0+ "'", i53.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i66 + "' != '" + 100+ "'", i66.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test348"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    tp2.Entry entry2 = new tp2.Entry();
    java.lang.String str3 = entry2.toString();
    entry0.next = entry2;
    tp2.Entry entry5 = entry2.next;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    entry6.element = iP11;
    tp2.IP iP14 = entry6.element;
    tp2.Entry entry15 = null;
    entry6.next = entry15;
    // The following exception was thrown during execution in test generation
    try {
      entry5.next = entry6;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP14);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test349"); }


    tp2.IP iP0 = null;
    tp2.IPBan iPBan2 = new tp2.IPBan(iP0, (java.lang.Long)200000L);
    iPBan2.setExpires((java.lang.Long)1466185872933L);
    tp2.IP iP5 = iPBan2.getIp();
    tp2.IP iP6 = iPBan2.ip;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test350"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    boolean b5 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.IPBan iPBan7 = strictlySortedSinglyLinkedList0.get(0);
    java.util.Set<tp2.IPBan> set_iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList0.repOk(set_iPBan8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test351"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.size;
    int i5 = strictlySortedSinglyLinkedList0.getSize();
    int i6 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP8 = null;
    boolean b9 = server7.connect(iP8);
    java.lang.String str10 = server7.toString();
    tp2.Server server11 = new tp2.Server();
    tp2.IP iP12 = null;
    boolean b13 = server11.connect(iP12);
    java.lang.String str14 = server11.toString();
    java.lang.String str15 = server11.toString();
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = server11.connect(iP21);
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i31 = iP30.getFirst();
    java.lang.String str32 = iP30.toString();
    java.lang.String str33 = iP30.toString();
    boolean b34 = server11.removeBan(iP30);
    iP30.setFirst((java.lang.Integer)10);
    boolean b37 = server7.removeException(iP30);
    java.lang.String str38 = iP30.toString();
    // The following exception was thrown during execution in test generation
    try {
      boolean b39 = strictlySortedSinglyLinkedList0.removeFromIP(iP30);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 10+ "'", i31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "10.0.0.100"+ "'", str33.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test352"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)32, (java.lang.Integer)2);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test353"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    server16.update();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP23.setFirst((java.lang.Integer)1);
    java.lang.Integer i26 = iP23.getSecond();
    boolean b27 = server16.addException(iP23);
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = server16.addException(iP33);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b43 = server16.removeBan(iP42);
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP45 = null;
    boolean b46 = server44.connect(iP45);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b52 = server44.connect(iP51);
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP54 = null;
    boolean b55 = server53.connect(iP54);
    java.lang.String str56 = server53.toString();
    java.lang.String str57 = server53.toString();
    tp2.Entry entry58 = new tp2.Entry();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i64 = iP63.getFirst();
    java.lang.String str65 = iP63.toString();
    entry58.element = iP63;
    boolean b67 = server53.connect(iP63);
    boolean b68 = server44.removeException(iP63);
    boolean b69 = server16.connect(iP63);
    java.lang.Integer i70 = iP63.getFirst();
    boolean b71 = strictlySortedSinglyLinkedList0.removeFromIP(iP63);
    strictlySortedSinglyLinkedList0.size = (byte)100;
    java.lang.String str74 = strictlySortedSinglyLinkedList0.toString();
    java.lang.String str75 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str57.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 10+ "'", i64.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "10.0.0.100"+ "'", str65.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 10+ "'", i70.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "{}"+ "'", str74.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "{}"+ "'", str75.equals("{}"));

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test354"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.IPBan iPBan3 = node0.element;
    tp2.Node node4 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    int i6 = strictlySortedSinglyLinkedList5.getSize();
    tp2.IPBan iPBan7 = null;
    boolean b8 = strictlySortedSinglyLinkedList5.add(iPBan7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node10 = strictlySortedSinglyLinkedList9.header;
    strictlySortedSinglyLinkedList5.header = node10;
    node4.next = node10;
    tp2.Node node13 = node4.next;
    tp2.Node node14 = node4.next;
    node0.next = node14;
    java.lang.String str16 = node0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[null]"+ "'", str16.equals("[null]"));

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test355"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.getIp();
    iPBan14.setExpires((java.lang.Long)1466185873142L);
    iPBan14.expires = 1466185883554L;
    java.lang.Long long24 = iPBan14.expires;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1466185883554L+ "'", long24.equals(1466185883554L));

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test356"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    tp2.IP iP15 = iPBan14.ip;
    java.lang.Integer i16 = iP15.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 100+ "'", i16.equals(100));

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test357"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    tp2.Server server4 = new tp2.Server();
    tp2.IP iP5 = null;
    boolean b6 = server4.connect(iP5);
    java.lang.String str7 = server4.toString();
    java.lang.String str8 = server4.toString();
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    java.lang.String str16 = iP14.toString();
    entry9.element = iP14;
    boolean b18 = server4.connect(iP14);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    java.lang.String str26 = iP23.toString();
    boolean b27 = server4.removeBan(iP23);
    iP23.setFirst((java.lang.Integer)10);
    boolean b30 = server0.removeException(iP23);
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP32 = null;
    boolean b33 = server31.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b39 = server31.connect(iP38);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList40 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList40.size = 10;
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    server43.update();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP50.setFirst((java.lang.Integer)1);
    java.lang.Integer i53 = iP50.getSecond();
    boolean b54 = server43.addException(iP50);
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    entry55.element = iP60;
    boolean b64 = server43.addException(iP60);
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b70 = server43.removeBan(iP69);
    iP69.setThird((java.lang.Integer)0);
    boolean b73 = strictlySortedSinglyLinkedList40.removeFromIP(iP69);
    tp2.Server server74 = new tp2.Server();
    java.lang.String str75 = server74.toString();
    server74.update();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP81.setFirst((java.lang.Integer)1);
    java.lang.Integer i84 = iP81.getSecond();
    boolean b85 = server74.addException(iP81);
    boolean b86 = strictlySortedSinglyLinkedList40.removeFromIP(iP81);
    boolean b87 = server31.connect(iP81);
    boolean b88 = server0.connect(iP81);
    java.lang.Integer i89 = iP81.getFourth();
    iP81.setThird((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 0+ "'", i53.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str75.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i84 + "' != '" + 0+ "'", i84.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i89 + "' != '" + 100+ "'", i89.equals(100));

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test358"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    java.lang.String str3 = singlyLinkedList0.toString();
    java.lang.String str4 = singlyLinkedList0.toString();
    tp2.Server server5 = new tp2.Server();
    tp2.IP iP6 = null;
    boolean b7 = server5.connect(iP6);
    java.lang.String str8 = server5.toString();
    java.lang.String str9 = server5.toString();
    tp2.IP iP10 = null;
    boolean b11 = server5.removeException(iP10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList12 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList12.size = 10;
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    server15.update();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP22.setFirst((java.lang.Integer)1);
    java.lang.Integer i25 = iP22.getSecond();
    boolean b26 = server15.addException(iP22);
    tp2.Entry entry27 = new tp2.Entry();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    entry27.element = iP32;
    boolean b36 = server15.addException(iP32);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b42 = server15.removeBan(iP41);
    iP41.setThird((java.lang.Integer)0);
    boolean b45 = strictlySortedSinglyLinkedList12.removeFromIP(iP41);
    tp2.Server server46 = new tp2.Server();
    java.lang.String str47 = server46.toString();
    server46.update();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP53.setFirst((java.lang.Integer)1);
    java.lang.Integer i56 = iP53.getSecond();
    boolean b57 = server46.addException(iP53);
    boolean b58 = strictlySortedSinglyLinkedList12.removeFromIP(iP53);
    boolean b59 = server5.connect(iP53);
    boolean b60 = singlyLinkedList0.contains(iP53);
    tp2.IP iP62 = singlyLinkedList0.get(0);
    tp2.IP iP64 = singlyLinkedList0.get((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "()"+ "'", str4.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 0+ "'", i25.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 0+ "'", i56.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP64);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test359"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)32, (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)1);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test360"); }


    korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer((int)(short)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iFinitization1);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test361"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    java.lang.String str13 = singlyLinkedList0.toString();
    int i14 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "()"+ "'", str13.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test362"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    tp2.IPBan iPBan7 = strictlySortedSinglyLinkedList0.get(0);
    java.util.Set<tp2.IPBan> set_iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList0.repOk(set_iPBan8);
    tp2.SinglyLinkedList singlyLinkedList10 = new tp2.SinglyLinkedList();
    tp2.IP iP12 = singlyLinkedList10.get((int)' ');
    tp2.Entry entry13 = new tp2.Entry();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i19 = iP18.getFirst();
    java.lang.String str20 = iP18.toString();
    entry13.element = iP18;
    boolean b22 = singlyLinkedList10.remove(iP18);
    tp2.IPBan iPBan24 = new tp2.IPBan(iP18, (java.lang.Long)1L);
    java.lang.String str25 = iPBan24.toString();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i31 = iP30.getFirst();
    java.lang.String str32 = iP30.toString();
    java.lang.String str33 = iP30.toString();
    iPBan24.setIp(iP30);
    java.lang.Long long35 = iPBan24.getExpires();
    // The following exception was thrown during execution in test generation
    try {
      boolean b36 = strictlySortedSinglyLinkedList0.add(iPBan24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 10+ "'", i19.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "10.0.0.100"+ "'", str20.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str25.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 10+ "'", i31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "10.0.0.100"+ "'", str33.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L+ "'", long35.equals(1L));

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test363"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.contains(iPBan2);
    tp2.SinglyLinkedList singlyLinkedList4 = new tp2.SinglyLinkedList();
    tp2.IP iP6 = singlyLinkedList4.get((int)' ');
    tp2.Entry entry7 = new tp2.Entry();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i13 = iP12.getFirst();
    java.lang.String str14 = iP12.toString();
    entry7.element = iP12;
    boolean b16 = singlyLinkedList4.remove(iP12);
    tp2.IPBan iPBan18 = new tp2.IPBan(iP12, (java.lang.Long)1L);
    java.lang.String str19 = iPBan18.toString();
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP21 = null;
    boolean b22 = server20.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b28 = server20.connect(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP30 = null;
    boolean b31 = server29.connect(iP30);
    java.lang.String str32 = server29.toString();
    java.lang.String str33 = server29.toString();
    tp2.Entry entry34 = new tp2.Entry();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    entry34.element = iP39;
    boolean b43 = server29.connect(iP39);
    boolean b44 = server20.removeException(iP39);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP46 = null;
    boolean b47 = server45.connect(iP46);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b53 = server45.connect(iP52);
    java.lang.Integer i54 = iP52.getFirst();
    boolean b55 = server20.connect(iP52);
    iPBan18.ip = iP52;
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP58 = null;
    boolean b59 = server57.connect(iP58);
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b65 = server57.connect(iP64);
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP67 = null;
    boolean b68 = server66.connect(iP67);
    java.lang.String str69 = server66.toString();
    java.lang.String str70 = server66.toString();
    tp2.Entry entry71 = new tp2.Entry();
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i77 = iP76.getFirst();
    java.lang.String str78 = iP76.toString();
    entry71.element = iP76;
    boolean b80 = server66.connect(iP76);
    boolean b81 = server57.removeException(iP76);
    tp2.Server server82 = new tp2.Server();
    tp2.IP iP83 = null;
    boolean b84 = server82.connect(iP83);
    tp2.IP iP89 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b90 = server82.connect(iP89);
    java.lang.Integer i91 = iP89.getFirst();
    boolean b92 = server57.connect(iP89);
    iPBan18.setIp(iP89);
    boolean b94 = strictlySortedSinglyLinkedList0.add(iPBan18);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str97 = strictlySortedSinglyLinkedList0.toString();
    tp2.IP iP98 = null;
    boolean b99 = strictlySortedSinglyLinkedList0.containsIP(iP98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 10+ "'", i13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str19.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 100+ "'", i54.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str69.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str70.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i77 + "' != '" + 10+ "'", i77.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "10.0.0.100"+ "'", str78.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i91 + "' != '" + 100+ "'", i91.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str97 + "' != '" + "{[IPBan [ip=100.10.-1.10, expires=1]]}"+ "'", str97.equals("{[IPBan [ip=100.10.-1.10, expires=1]]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test364"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP58.setSecond((java.lang.Integer)1);
    boolean b61 = server0.removeBan(iP58);
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP63 = null;
    boolean b64 = server62.connect(iP63);
    java.lang.String str65 = server62.toString();
    java.lang.String str66 = server62.toString();
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = server62.connect(iP72);
    boolean b77 = server0.addBan(iP72);
    tp2.SinglyLinkedList singlyLinkedList78 = new tp2.SinglyLinkedList();
    tp2.IP iP80 = singlyLinkedList78.get(1);
    tp2.SinglyLinkedList singlyLinkedList81 = new tp2.SinglyLinkedList();
    tp2.IP iP83 = singlyLinkedList81.get((int)' ');
    tp2.Entry entry84 = new tp2.Entry();
    tp2.IP iP89 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i90 = iP89.getFirst();
    java.lang.String str91 = iP89.toString();
    entry84.element = iP89;
    boolean b93 = singlyLinkedList81.remove(iP89);
    boolean b94 = singlyLinkedList78.contains(iP89);
    java.lang.Integer i95 = iP89.getThird();
    boolean b96 = server0.removeBan(iP89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i90 + "' != '" + 10+ "'", i90.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "10.0.0.100"+ "'", str91.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i95 + "' != '" + 0+ "'", i95.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test365"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = server0.connect(iP10);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    java.lang.String str22 = iP19.toString();
    boolean b23 = server0.removeBan(iP19);
    server0.update();
    tp2.StubTime stubTime25 = new tp2.StubTime();
    long long26 = stubTime25.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime25);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long26 == 200000L);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test366"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.SinglyLinkedList singlyLinkedList13 = new tp2.SinglyLinkedList();
    tp2.IP iP15 = singlyLinkedList13.get((int)' ');
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = singlyLinkedList13.remove(iP21);
    tp2.IPBan iPBan27 = new tp2.IPBan(iP21, (java.lang.Long)1L);
    java.lang.String str28 = iPBan27.toString();
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP30 = null;
    boolean b31 = server29.connect(iP30);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b37 = server29.connect(iP36);
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP39 = null;
    boolean b40 = server38.connect(iP39);
    java.lang.String str41 = server38.toString();
    java.lang.String str42 = server38.toString();
    tp2.Entry entry43 = new tp2.Entry();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i49 = iP48.getFirst();
    java.lang.String str50 = iP48.toString();
    entry43.element = iP48;
    boolean b52 = server38.connect(iP48);
    boolean b53 = server29.removeException(iP48);
    tp2.Server server54 = new tp2.Server();
    tp2.IP iP55 = null;
    boolean b56 = server54.connect(iP55);
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b62 = server54.connect(iP61);
    java.lang.Integer i63 = iP61.getFirst();
    boolean b64 = server29.connect(iP61);
    iPBan27.ip = iP61;
    boolean b66 = singlyLinkedList0.contains(iP61);
    java.lang.Integer i67 = iP61.getFourth();
    iP61.setSecond((java.lang.Integer)32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str28.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i49 + "' != '" + 10+ "'", i49.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "10.0.0.100"+ "'", str50.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 100+ "'", i63.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 10+ "'", i67.equals(10));

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test367"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP16.setFirst((java.lang.Integer)1);
    boolean b19 = server9.removeException(iP16);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList20 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan21 = null;
    boolean b22 = strictlySortedSinglyLinkedList20.contains(iPBan21);
    int i23 = strictlySortedSinglyLinkedList20.getSize();
    tp2.IPBan iPBan25 = strictlySortedSinglyLinkedList20.get((int)'#');
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP30.setSecond((java.lang.Integer)(-1));
    boolean b33 = strictlySortedSinglyLinkedList20.removeFromIP(iP30);
    boolean b34 = server9.removeBan(iP30);
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    boolean b48 = iP30.equals((java.lang.Object)iP43);
    boolean b49 = server0.removeException(iP30);
    java.lang.Integer i50 = iP30.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 10+ "'", i50.equals(10));

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test368"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    java.lang.String str29 = server28.toString();
    server28.update();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP35.setFirst((java.lang.Integer)1);
    java.lang.Integer i38 = iP35.getSecond();
    boolean b39 = server28.addException(iP35);
    tp2.Entry entry40 = new tp2.Entry();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i46 = iP45.getFirst();
    java.lang.String str47 = iP45.toString();
    entry40.element = iP45;
    boolean b49 = server28.addException(iP45);
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b55 = server28.removeBan(iP54);
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP57 = null;
    boolean b58 = server56.connect(iP57);
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b64 = server56.connect(iP63);
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP66 = null;
    boolean b67 = server65.connect(iP66);
    java.lang.String str68 = server65.toString();
    java.lang.String str69 = server65.toString();
    tp2.Entry entry70 = new tp2.Entry();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i76 = iP75.getFirst();
    java.lang.String str77 = iP75.toString();
    entry70.element = iP75;
    boolean b79 = server65.connect(iP75);
    boolean b80 = server56.removeException(iP75);
    boolean b81 = server28.connect(iP75);
    java.lang.Integer i82 = iP75.getFirst();
    iP75.setSecond((java.lang.Integer)0);
    java.lang.Integer i85 = iP75.getThird();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList86 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node87 = strictlySortedSinglyLinkedList86.header;
    boolean b88 = iP75.equals((java.lang.Object)strictlySortedSinglyLinkedList86);
    boolean b89 = server0.addBan(iP75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i38 + "' != '" + 0+ "'", i38.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 10+ "'", i46.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "10.0.0.100"+ "'", str47.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str68.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str69.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 10+ "'", i76.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i82 + "' != '" + 10+ "'", i82.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i85 + "' != '" + 0+ "'", i85.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test369"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    boolean b10 = server0.removeException(iP7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList11.contains(iPBan12);
    int i14 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan16 = strictlySortedSinglyLinkedList11.get((int)'#');
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP21.setSecond((java.lang.Integer)(-1));
    boolean b24 = strictlySortedSinglyLinkedList11.removeFromIP(iP21);
    boolean b25 = server0.removeBan(iP21);
    tp2.Entry entry26 = new tp2.Entry();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i32 = iP31.getFirst();
    entry26.element = iP31;
    boolean b34 = server0.removeBan(iP31);
    iP31.setThird((java.lang.Integer)32);
    java.lang.Integer i37 = iP31.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 10+ "'", i32.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 32+ "'", i37.equals(32));

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test370"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.contains(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Node node5 = new tp2.Node();
    tp2.IPBan iPBan6 = null;
    node5.element = iPBan6;
    tp2.SinglyLinkedList singlyLinkedList8 = new tp2.SinglyLinkedList();
    tp2.IP iP10 = singlyLinkedList8.get((int)' ');
    tp2.Entry entry11 = new tp2.Entry();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    entry11.element = iP16;
    boolean b20 = singlyLinkedList8.remove(iP16);
    tp2.IPBan iPBan22 = new tp2.IPBan(iP16, (java.lang.Long)1L);
    java.lang.String str23 = iPBan22.toString();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i29 = iP28.getFirst();
    java.lang.String str30 = iP28.toString();
    java.lang.String str31 = iP28.toString();
    iPBan22.setIp(iP28);
    java.lang.Long long33 = iPBan22.getExpires();
    node5.element = iPBan22;
    tp2.IPBan iPBan35 = node5.element;
    java.lang.String str36 = node5.toString();
    strictlySortedSinglyLinkedList0.header = node5;
    java.lang.String str38 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str23.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 10+ "'", i29.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "10.0.0.100"+ "'", str30.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L+ "'", long33.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[IPBan [ip=10.0.0.100, expires=1]]"+ "'", str36.equals("[IPBan [ip=10.0.0.100, expires=1]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "{}"+ "'", str38.equals("{}"));

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test371"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = entry0.next;
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b17 = server9.connect(iP16);
    java.lang.Integer i18 = iP16.getFirst();
    entry0.element = iP16;
    tp2.Entry entry20 = entry0.next;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str21 = entry20.toString();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 100+ "'", i18.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry20);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test372"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b6 = server0.addException(iP5);
    java.lang.Integer i7 = iP5.getFourth();
    java.lang.String str8 = iP5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i7 + "' != '" + 10+ "'", i7.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "100.10.-1.10"+ "'", str8.equals("100.10.-1.10"));

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test373"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    tp2.IPBan iPBan51 = strictlySortedSinglyLinkedList0.get((int)' ');
    java.lang.String str52 = strictlySortedSinglyLinkedList0.toString();
    tp2.IPBan iPBan54 = strictlySortedSinglyLinkedList0.get((int)(short)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "{}"+ "'", str52.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan54);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test374"); }


    // The following exception was thrown during execution in test generation
    try {
      korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer(32);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test375"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    java.lang.String str11 = iP9.toString();
    java.lang.String str12 = iP9.toString();
    iP9.setThird((java.lang.Integer)(-1));
    entry0.element = iP9;
    tp2.Node node16 = new tp2.Node();
    tp2.IPBan iPBan17 = null;
    node16.element = iPBan17;
    tp2.SinglyLinkedList singlyLinkedList19 = new tp2.SinglyLinkedList();
    tp2.IP iP21 = singlyLinkedList19.get((int)' ');
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = singlyLinkedList19.remove(iP27);
    tp2.IPBan iPBan33 = new tp2.IPBan(iP27, (java.lang.Long)1L);
    java.lang.String str34 = iPBan33.toString();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    java.lang.String str42 = iP39.toString();
    iPBan33.setIp(iP39);
    java.lang.Long long44 = iPBan33.getExpires();
    node16.element = iPBan33;
    iPBan33.expires = 1466185870380L;
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    java.lang.Integer i55 = iP52.getFourth();
    iPBan33.ip = iP52;
    entry0.element = iP52;
    tp2.Entry entry58 = new tp2.Entry();
    java.lang.String str59 = entry58.toString();
    java.lang.String str60 = entry58.toString();
    tp2.Entry entry61 = entry58.next;
    tp2.IP iP62 = entry58.element;
    tp2.IP iP63 = entry58.element;
    tp2.Entry entry64 = new tp2.Entry();
    tp2.Entry entry65 = new tp2.Entry();
    java.lang.String str66 = entry65.toString();
    java.lang.String str67 = entry65.toString();
    tp2.Entry entry68 = entry65.next;
    entry64.next = entry65;
    entry58.next = entry64;
    entry0.next = entry64;
    java.lang.String str72 = entry0.toString();
    java.lang.String str73 = entry0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "10.0.0.100"+ "'", str11.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str34.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L+ "'", long44.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 100+ "'", i55.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "[null]"+ "'", str59.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "[null]"+ "'", str60.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "[null]"+ "'", str66.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[null]"+ "'", str67.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "[10.0.0.100]"+ "'", str72.equals("[10.0.0.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "[10.0.0.100]"+ "'", str73.equals("[10.0.0.100]"));

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test376"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    strictlySortedSinglyLinkedList0.size = 0;
    int i9 = strictlySortedSinglyLinkedList0.size;
    tp2.Node node10 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node11 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan12 = node11.element;
    tp2.Node node13 = node11.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node13);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test377"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get(1);
    java.lang.String str3 = singlyLinkedList0.toString();
    boolean b4 = singlyLinkedList0.isEmpty();
    tp2.Server server5 = new tp2.Server();
    tp2.IP iP6 = null;
    boolean b7 = server5.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b13 = server5.connect(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP15 = null;
    boolean b16 = server14.connect(iP15);
    java.lang.String str17 = server14.toString();
    java.lang.String str18 = server14.toString();
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = server14.connect(iP24);
    boolean b29 = server5.removeException(iP24);
    java.lang.Integer i30 = iP24.getFirst();
    boolean b31 = singlyLinkedList0.contains(iP24);
    int i32 = singlyLinkedList0.getSize();
    tp2.Server server33 = new tp2.Server();
    java.lang.String str34 = server33.toString();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP36 = null;
    boolean b37 = singlyLinkedList35.repOk(set_iP36);
    java.util.Set<tp2.IP> set_iP38 = null;
    boolean b39 = singlyLinkedList35.repOk(set_iP38);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    tp2.IP iP42 = singlyLinkedList40.get((int)' ');
    tp2.Entry entry43 = new tp2.Entry();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i49 = iP48.getFirst();
    java.lang.String str50 = iP48.toString();
    entry43.element = iP48;
    boolean b52 = singlyLinkedList40.remove(iP48);
    tp2.IP iP54 = singlyLinkedList40.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList55 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList55.size = 10;
    tp2.Server server58 = new tp2.Server();
    java.lang.String str59 = server58.toString();
    server58.update();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP65.setFirst((java.lang.Integer)1);
    java.lang.Integer i68 = iP65.getSecond();
    boolean b69 = server58.addException(iP65);
    tp2.Entry entry70 = new tp2.Entry();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i76 = iP75.getFirst();
    java.lang.String str77 = iP75.toString();
    entry70.element = iP75;
    boolean b79 = server58.addException(iP75);
    tp2.IP iP84 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b85 = server58.removeBan(iP84);
    iP84.setThird((java.lang.Integer)0);
    boolean b88 = strictlySortedSinglyLinkedList55.removeFromIP(iP84);
    boolean b89 = singlyLinkedList40.contains(iP84);
    boolean b90 = singlyLinkedList35.contains(iP84);
    boolean b91 = server33.removeBan(iP84);
    boolean b92 = singlyLinkedList0.contains(iP84);
    iP84.setFirst((java.lang.Integer)32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i49 + "' != '" + 10+ "'", i49.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "10.0.0.100"+ "'", str50.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str59.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 0+ "'", i68.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 10+ "'", i76.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test378"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i5 = iP4.getFirst();
    java.lang.String str6 = iP4.toString();
    java.lang.String str7 = iP4.toString();
    iP4.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan11 = new tp2.IPBan(iP4, (java.lang.Long)0L);
    tp2.IP iP12 = iPBan11.getIp();
    iPBan11.setExpires((java.lang.Long)1466185890278L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i5 + "' != '" + 10+ "'", i5.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "10.0.0.100"+ "'", str6.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP12);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test379"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i5 = iP4.getFirst();
    java.lang.String str6 = iP4.toString();
    java.lang.String str7 = iP4.toString();
    iP4.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan11 = new tp2.IPBan(iP4, (java.lang.Long)0L);
    tp2.Server server12 = new tp2.Server();
    tp2.IP iP13 = null;
    boolean b14 = server12.connect(iP13);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b20 = server12.connect(iP19);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList21 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList21.size = 10;
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    server24.update();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP31.setFirst((java.lang.Integer)1);
    java.lang.Integer i34 = iP31.getSecond();
    boolean b35 = server24.addException(iP31);
    tp2.Entry entry36 = new tp2.Entry();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i42 = iP41.getFirst();
    java.lang.String str43 = iP41.toString();
    entry36.element = iP41;
    boolean b45 = server24.addException(iP41);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b51 = server24.removeBan(iP50);
    iP50.setThird((java.lang.Integer)0);
    boolean b54 = strictlySortedSinglyLinkedList21.removeFromIP(iP50);
    tp2.Server server55 = new tp2.Server();
    java.lang.String str56 = server55.toString();
    server55.update();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP62.setFirst((java.lang.Integer)1);
    java.lang.Integer i65 = iP62.getSecond();
    boolean b66 = server55.addException(iP62);
    boolean b67 = strictlySortedSinglyLinkedList21.removeFromIP(iP62);
    boolean b68 = server12.connect(iP62);
    tp2.Server server69 = new tp2.Server();
    tp2.IP iP70 = null;
    boolean b71 = server69.connect(iP70);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b77 = server69.connect(iP76);
    java.lang.Integer i78 = iP76.getFirst();
    boolean b79 = server12.connect(iP76);
    java.lang.Integer i80 = iP76.getFirst();
    iPBan11.ip = iP76;
    java.lang.Integer i82 = iP76.getSecond();
    iP76.setFourth((java.lang.Integer)100);
    java.lang.Integer i85 = iP76.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i5 + "' != '" + 10+ "'", i5.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "10.0.0.100"+ "'", str6.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 0+ "'", i34.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 10+ "'", i42.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 0+ "'", i65.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i78 + "' != '" + 100+ "'", i78.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 100+ "'", i80.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i82 + "' != '" + 10+ "'", i82.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i85 + "' != '" + 100+ "'", i85.equals(100));

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test380"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    java.lang.Integer i54 = iP47.getFirst();
    iP47.setSecond((java.lang.Integer)0);
    java.lang.Integer i57 = iP47.getThird();
    tp2.IPBan iPBan59 = new tp2.IPBan(iP47, (java.lang.Long)1466185872784L);
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)100);
    iP64.setFourth((java.lang.Integer)1);
    iPBan59.ip = iP64;
    iPBan59.expires = 1466185877216L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 0+ "'", i57.equals(0));

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test381"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.ITime iTime3 = null;
    server0.setTime(iTime3);
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i10 = iP9.getFirst();
    tp2.IPBan iPBan12 = new tp2.IPBan(iP9, (java.lang.Long)1466185873844L);
    boolean b13 = server0.removeBan(iP9);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList14 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList14.size = 10;
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    server17.update();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP24.setFirst((java.lang.Integer)1);
    java.lang.Integer i27 = iP24.getSecond();
    boolean b28 = server17.addException(iP24);
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = server17.addException(iP34);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b44 = server17.removeBan(iP43);
    iP43.setThird((java.lang.Integer)0);
    boolean b47 = strictlySortedSinglyLinkedList14.removeFromIP(iP43);
    tp2.Server server48 = new tp2.Server();
    java.lang.String str49 = server48.toString();
    server48.update();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP55.setFirst((java.lang.Integer)1);
    java.lang.Integer i58 = iP55.getSecond();
    boolean b59 = server48.addException(iP55);
    boolean b60 = strictlySortedSinglyLinkedList14.removeFromIP(iP55);
    java.lang.Integer i61 = iP55.getFourth();
    boolean b62 = server0.addException(iP55);
    // The following exception was thrown during execution in test generation
    try {
      server0.update();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 100+ "'", i10.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 0+ "'", i27.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str49.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 0+ "'", i58.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 100+ "'", i61.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test382"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = entry0.next;
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b17 = server9.connect(iP16);
    java.lang.Integer i18 = iP16.getFirst();
    entry0.element = iP16;
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP24.setThird((java.lang.Integer)1);
    entry0.element = iP24;
    tp2.Entry entry28 = new tp2.Entry();
    java.lang.String str29 = entry28.toString();
    tp2.Entry entry30 = new tp2.Entry();
    java.lang.String str31 = entry30.toString();
    entry28.next = entry30;
    entry0.next = entry28;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList34 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan35 = null;
    boolean b36 = strictlySortedSinglyLinkedList34.contains(iPBan35);
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    server37.update();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i45 = iP44.getFirst();
    boolean b46 = server37.connect(iP44);
    boolean b47 = strictlySortedSinglyLinkedList34.removeFromIP(iP44);
    java.lang.Integer i48 = iP44.getThird();
    iP44.setFourth((java.lang.Integer)100);
    entry0.element = iP44;
    tp2.Entry entry52 = new tp2.Entry();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i58 = iP57.getFirst();
    java.lang.String str59 = iP57.toString();
    entry52.element = iP57;
    tp2.IP iP61 = entry52.element;
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP63 = null;
    boolean b64 = server62.connect(iP63);
    java.lang.String str65 = server62.toString();
    java.lang.String str66 = server62.toString();
    tp2.SinglyLinkedList singlyLinkedList67 = new tp2.SinglyLinkedList();
    tp2.IP iP69 = singlyLinkedList67.get((int)' ');
    tp2.Entry entry70 = new tp2.Entry();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i76 = iP75.getFirst();
    java.lang.String str77 = iP75.toString();
    entry70.element = iP75;
    boolean b79 = singlyLinkedList67.remove(iP75);
    tp2.IPBan iPBan81 = new tp2.IPBan(iP75, (java.lang.Long)1L);
    java.lang.String str82 = iPBan81.toString();
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i88 = iP87.getFirst();
    java.lang.String str89 = iP87.toString();
    java.lang.String str90 = iP87.toString();
    iPBan81.setIp(iP87);
    java.lang.Integer i92 = iP87.getFirst();
    boolean b93 = server62.removeException(iP87);
    iP87.setThird((java.lang.Integer)(-1));
    entry52.element = iP87;
    java.lang.String str97 = entry52.toString();
    entry0.next = entry52;
    java.lang.String str99 = entry52.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 100+ "'", i18.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[null]"+ "'", str29.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[null]"+ "'", str31.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 100+ "'", i45.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + (-1)+ "'", i48.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 10+ "'", i58.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "10.0.0.100"+ "'", str59.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 10+ "'", i76.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str82.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 10+ "'", i88.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "10.0.0.100"+ "'", str89.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "10.0.0.100"+ "'", str90.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i92 + "' != '" + 10+ "'", i92.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str97 + "' != '" + "[10.0.-1.100]"+ "'", str97.equals("[10.0.-1.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str99 + "' != '" + "[10.0.-1.100]"+ "'", str99.equals("[10.0.-1.100]"));

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test383"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    int i9 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Node node10 = new tp2.Node();
    tp2.IPBan iPBan11 = null;
    node10.element = iPBan11;
    tp2.IPBan iPBan13 = null;
    node10.element = iPBan13;
    java.lang.String str15 = node10.toString();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList16 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList16.size = 10;
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    server19.update();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP26.setFirst((java.lang.Integer)1);
    java.lang.Integer i29 = iP26.getSecond();
    boolean b30 = server19.addException(iP26);
    tp2.Entry entry31 = new tp2.Entry();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i37 = iP36.getFirst();
    java.lang.String str38 = iP36.toString();
    entry31.element = iP36;
    boolean b40 = server19.addException(iP36);
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b46 = server19.removeBan(iP45);
    iP45.setThird((java.lang.Integer)0);
    boolean b49 = strictlySortedSinglyLinkedList16.removeFromIP(iP45);
    tp2.Server server50 = new tp2.Server();
    java.lang.String str51 = server50.toString();
    server50.update();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    java.lang.Integer i60 = iP57.getSecond();
    boolean b61 = server50.addException(iP57);
    boolean b62 = strictlySortedSinglyLinkedList16.removeFromIP(iP57);
    int i63 = strictlySortedSinglyLinkedList16.size;
    strictlySortedSinglyLinkedList16.size = (byte)1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList66 = new tp2.StrictlySortedSinglyLinkedList();
    int i67 = strictlySortedSinglyLinkedList66.getSize();
    tp2.IPBan iPBan68 = null;
    boolean b69 = strictlySortedSinglyLinkedList66.add(iPBan68);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList70 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node71 = strictlySortedSinglyLinkedList70.header;
    strictlySortedSinglyLinkedList66.header = node71;
    tp2.IPBan iPBan73 = node71.element;
    strictlySortedSinglyLinkedList16.header = node71;
    node10.next = node71;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList76 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan77 = null;
    boolean b78 = strictlySortedSinglyLinkedList76.contains(iPBan77);
    int i79 = strictlySortedSinglyLinkedList76.getSize();
    tp2.Node node80 = strictlySortedSinglyLinkedList76.header;
    tp2.Node node81 = node80.next;
    node10.next = node80;
    strictlySortedSinglyLinkedList0.header = node10;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList84 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan85 = null;
    boolean b86 = strictlySortedSinglyLinkedList84.contains(iPBan85);
    int i87 = strictlySortedSinglyLinkedList84.getSize();
    tp2.IPBan iPBan89 = strictlySortedSinglyLinkedList84.get((int)'#');
    tp2.IP iP94 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP94.setSecond((java.lang.Integer)(-1));
    boolean b97 = strictlySortedSinglyLinkedList84.removeFromIP(iP94);
    tp2.Node node98 = strictlySortedSinglyLinkedList84.header;
    node10.next = node98;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[null]"+ "'", str15.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 0+ "'", i29.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 0+ "'", i60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node98);

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test384"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList15.size = 10;
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    server18.update();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setFirst((java.lang.Integer)1);
    java.lang.Integer i28 = iP25.getSecond();
    boolean b29 = server18.addException(iP25);
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server18.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b45 = server18.removeBan(iP44);
    iP44.setThird((java.lang.Integer)0);
    boolean b48 = strictlySortedSinglyLinkedList15.removeFromIP(iP44);
    boolean b49 = singlyLinkedList0.contains(iP44);
    tp2.IP iP50 = null;
    // The following exception was thrown during execution in test generation
    try {
      singlyLinkedList0.add(iP50);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 0+ "'", i28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test385"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    server4.update();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP11.setFirst((java.lang.Integer)1);
    java.lang.Integer i14 = iP11.getSecond();
    boolean b15 = server4.addException(iP11);
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = server4.addException(iP21);
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b31 = server4.removeBan(iP30);
    iP30.setThird((java.lang.Integer)0);
    // The following exception was thrown during execution in test generation
    try {
      boolean b34 = strictlySortedSinglyLinkedList0.removeFromIP(iP30);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 0+ "'", i14.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test386"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b24 = server16.connect(iP23);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP26 = null;
    boolean b27 = server25.connect(iP26);
    java.lang.String str28 = server25.toString();
    java.lang.String str29 = server25.toString();
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server25.connect(iP35);
    boolean b40 = server16.removeException(iP35);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP42 = null;
    boolean b43 = server41.connect(iP42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b49 = server41.connect(iP48);
    java.lang.Integer i50 = iP48.getFirst();
    boolean b51 = server16.connect(iP48);
    iPBan14.ip = iP48;
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP54 = null;
    boolean b55 = server53.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b61 = server53.connect(iP60);
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP63 = null;
    boolean b64 = server62.connect(iP63);
    java.lang.String str65 = server62.toString();
    java.lang.String str66 = server62.toString();
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = server62.connect(iP72);
    boolean b77 = server53.removeException(iP72);
    tp2.Server server78 = new tp2.Server();
    tp2.IP iP79 = null;
    boolean b80 = server78.connect(iP79);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b86 = server78.connect(iP85);
    java.lang.Integer i87 = iP85.getFirst();
    boolean b88 = server53.connect(iP85);
    iPBan14.setIp(iP85);
    java.lang.Long long90 = iPBan14.expires;
    java.lang.Long long91 = iPBan14.expires;
    tp2.IP iP92 = iPBan14.ip;
    tp2.IP iP97 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b98 = iP92.equals((java.lang.Object)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 100+ "'", i50.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i87 + "' != '" + 100+ "'", i87.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1L+ "'", long90.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long91 + "' != '" + 1L+ "'", long91.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == false);

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test387"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b6 = server0.addException(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP9 = null;
    boolean b10 = server8.connect(iP9);
    java.lang.String str11 = server8.toString();
    java.lang.String str12 = server8.toString();
    tp2.IP iP13 = null;
    boolean b14 = server8.removeException(iP13);
    tp2.RealTime realTime15 = new tp2.RealTime();
    long long16 = realTime15.getCurrentTime();
    long long17 = realTime15.getCurrentTime();
    server8.setTime((tp2.ITime)realTime15);
    server0.setTime((tp2.ITime)realTime15);
    tp2.Entry entry20 = new tp2.Entry();
    java.lang.String str21 = entry20.toString();
    java.lang.String str22 = entry20.toString();
    tp2.Entry entry23 = entry20.next;
    tp2.IP iP24 = entry20.element;
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    java.lang.String str32 = iP29.toString();
    iP29.setThird((java.lang.Integer)(-1));
    entry20.element = iP29;
    boolean b36 = server0.removeBan(iP29);
    iP29.setFirst((java.lang.Integer)100);
    java.lang.Integer i39 = iP29.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1466185890825L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long17 == 1466185890825L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[null]"+ "'", str21.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[null]"+ "'", str22.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + 100+ "'", i39.equals(100));

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test388"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    java.lang.String str34 = strictlySortedSinglyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    java.lang.String str50 = iPBan49.toString();
    boolean b51 = strictlySortedSinglyLinkedList0.contains(iPBan49);
    tp2.IP iP52 = iPBan49.ip;
    iP52.setThird((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "{}"+ "'", str34.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP52);

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test389"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    java.lang.String str3 = singlyLinkedList0.toString();
    java.lang.String str4 = singlyLinkedList0.toString();
    tp2.Server server5 = new tp2.Server();
    tp2.IP iP6 = null;
    boolean b7 = server5.connect(iP6);
    java.lang.String str8 = server5.toString();
    java.lang.String str9 = server5.toString();
    tp2.IP iP10 = null;
    boolean b11 = server5.removeException(iP10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList12 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList12.size = 10;
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    server15.update();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP22.setFirst((java.lang.Integer)1);
    java.lang.Integer i25 = iP22.getSecond();
    boolean b26 = server15.addException(iP22);
    tp2.Entry entry27 = new tp2.Entry();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    entry27.element = iP32;
    boolean b36 = server15.addException(iP32);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b42 = server15.removeBan(iP41);
    iP41.setThird((java.lang.Integer)0);
    boolean b45 = strictlySortedSinglyLinkedList12.removeFromIP(iP41);
    tp2.Server server46 = new tp2.Server();
    java.lang.String str47 = server46.toString();
    server46.update();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP53.setFirst((java.lang.Integer)1);
    java.lang.Integer i56 = iP53.getSecond();
    boolean b57 = server46.addException(iP53);
    boolean b58 = strictlySortedSinglyLinkedList12.removeFromIP(iP53);
    boolean b59 = server5.connect(iP53);
    boolean b60 = singlyLinkedList0.contains(iP53);
    java.util.Set<tp2.IP> set_iP61 = null;
    boolean b62 = singlyLinkedList0.repOk(set_iP61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "()"+ "'", str4.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 0+ "'", i25.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 0+ "'", i56.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test390"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan6 = strictlySortedSinglyLinkedList0.get(100);
    int i7 = strictlySortedSinglyLinkedList0.getSize();
    java.util.Set<tp2.IPBan> set_iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList0.repOk(set_iPBan8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test391"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    java.lang.Long long19 = iPBan14.expires;
    tp2.Server server20 = new tp2.Server();
    java.lang.String str21 = server20.toString();
    server20.update();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP27.setFirst((java.lang.Integer)1);
    java.lang.Integer i30 = iP27.getSecond();
    boolean b31 = server20.addException(iP27);
    tp2.Entry entry32 = new tp2.Entry();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i38 = iP37.getFirst();
    java.lang.String str39 = iP37.toString();
    entry32.element = iP37;
    boolean b41 = server20.addException(iP37);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList42 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList42.size = 10;
    tp2.Server server45 = new tp2.Server();
    java.lang.String str46 = server45.toString();
    server45.update();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP52.setFirst((java.lang.Integer)1);
    java.lang.Integer i55 = iP52.getSecond();
    boolean b56 = server45.addException(iP52);
    tp2.Entry entry57 = new tp2.Entry();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i63 = iP62.getFirst();
    java.lang.String str64 = iP62.toString();
    entry57.element = iP62;
    boolean b66 = server45.addException(iP62);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b72 = server45.removeBan(iP71);
    iP71.setThird((java.lang.Integer)0);
    boolean b75 = strictlySortedSinglyLinkedList42.removeFromIP(iP71);
    boolean b76 = server20.addException(iP71);
    java.lang.String str77 = iP71.toString();
    iPBan14.ip = iP71;
    tp2.IP iP79 = iPBan14.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L+ "'", long19.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 0+ "'", i30.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i38 + "' != '" + 10+ "'", i38.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "10.0.0.100"+ "'", str39.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 0+ "'", i55.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 10+ "'", i63.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "10.0.0.100"+ "'", str64.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.100.0.1"+ "'", str77.equals("10.100.0.1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP79);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test392"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get(1);
    java.lang.String str3 = singlyLinkedList0.toString();
    boolean b4 = singlyLinkedList0.isEmpty();
    tp2.Server server5 = new tp2.Server();
    tp2.IP iP6 = null;
    boolean b7 = server5.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b13 = server5.connect(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP15 = null;
    boolean b16 = server14.connect(iP15);
    java.lang.String str17 = server14.toString();
    java.lang.String str18 = server14.toString();
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = server14.connect(iP24);
    boolean b29 = server5.removeException(iP24);
    java.lang.Integer i30 = iP24.getFirst();
    boolean b31 = singlyLinkedList0.contains(iP24);
    int i32 = singlyLinkedList0.getSize();
    tp2.Server server33 = new tp2.Server();
    java.lang.String str34 = server33.toString();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP36 = null;
    boolean b37 = singlyLinkedList35.repOk(set_iP36);
    java.util.Set<tp2.IP> set_iP38 = null;
    boolean b39 = singlyLinkedList35.repOk(set_iP38);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    tp2.IP iP42 = singlyLinkedList40.get((int)' ');
    tp2.Entry entry43 = new tp2.Entry();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i49 = iP48.getFirst();
    java.lang.String str50 = iP48.toString();
    entry43.element = iP48;
    boolean b52 = singlyLinkedList40.remove(iP48);
    tp2.IP iP54 = singlyLinkedList40.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList55 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList55.size = 10;
    tp2.Server server58 = new tp2.Server();
    java.lang.String str59 = server58.toString();
    server58.update();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP65.setFirst((java.lang.Integer)1);
    java.lang.Integer i68 = iP65.getSecond();
    boolean b69 = server58.addException(iP65);
    tp2.Entry entry70 = new tp2.Entry();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i76 = iP75.getFirst();
    java.lang.String str77 = iP75.toString();
    entry70.element = iP75;
    boolean b79 = server58.addException(iP75);
    tp2.IP iP84 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b85 = server58.removeBan(iP84);
    iP84.setThird((java.lang.Integer)0);
    boolean b88 = strictlySortedSinglyLinkedList55.removeFromIP(iP84);
    boolean b89 = singlyLinkedList40.contains(iP84);
    boolean b90 = singlyLinkedList35.contains(iP84);
    boolean b91 = server33.removeBan(iP84);
    boolean b92 = singlyLinkedList0.contains(iP84);
    int i93 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i49 + "' != '" + 10+ "'", i49.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "10.0.0.100"+ "'", str50.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str59.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 0+ "'", i68.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 10+ "'", i76.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test393"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    java.lang.String str3 = singlyLinkedList0.toString();
    java.lang.String str4 = singlyLinkedList0.toString();
    tp2.IP iP6 = singlyLinkedList0.get((int)'4');
    java.lang.String str7 = singlyLinkedList0.toString();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP12.setThird((java.lang.Integer)1);
    java.lang.Object obj15 = null;
    boolean b16 = iP12.equals(obj15);
    iP12.setThird((java.lang.Integer)0);
    java.lang.Integer i19 = iP12.getSecond();
    java.lang.Integer i20 = iP12.getSecond();
    boolean b21 = singlyLinkedList0.contains(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "()"+ "'", str4.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "()"+ "'", str7.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 0+ "'", i19.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test394"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.getIp();
    iPBan14.setExpires((java.lang.Long)1466185873142L);
    iPBan14.expires = 1466185883554L;
    tp2.IP iP24 = iPBan14.getIp();
    iP24.setSecond((java.lang.Integer)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP24);

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test395"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)'4');
    java.lang.String str15 = singlyLinkedList0.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b24 = server16.connect(iP23);
    java.lang.Integer i25 = iP23.getFirst();
    java.lang.Integer i26 = iP23.getThird();
    boolean b27 = singlyLinkedList0.contains(iP23);
    tp2.IP iP29 = singlyLinkedList0.get((int)(byte)100);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList30 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node31 = strictlySortedSinglyLinkedList30.header;
    tp2.Node node32 = new tp2.Node();
    tp2.IPBan iPBan33 = null;
    node32.element = iPBan33;
    tp2.IPBan iPBan35 = null;
    node32.element = iPBan35;
    strictlySortedSinglyLinkedList30.header = node32;
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b43 = strictlySortedSinglyLinkedList30.containsIP(iP42);
    iP42.setThird((java.lang.Integer)100);
    singlyLinkedList0.add(iP42);
    iP42.setThird((java.lang.Integer)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "()"+ "'", str15.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 100+ "'", i25.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + (-1)+ "'", i26.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test396"); }


    tp2.Node node0 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList1 = new tp2.StrictlySortedSinglyLinkedList();
    int i2 = strictlySortedSinglyLinkedList1.getSize();
    tp2.IPBan iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList1.add(iPBan3);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node6 = strictlySortedSinglyLinkedList5.header;
    strictlySortedSinglyLinkedList1.header = node6;
    node0.next = node6;
    tp2.Node node9 = node0.next;
    tp2.Node node10 = node0.next;
    tp2.Node node11 = new tp2.Node();
    tp2.IPBan iPBan12 = null;
    node11.element = iPBan12;
    tp2.IPBan iPBan14 = null;
    node11.element = iPBan14;
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    server16.update();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP23.setFirst((java.lang.Integer)1);
    java.lang.Integer i26 = iP23.getSecond();
    boolean b27 = server16.addException(iP23);
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = server16.addException(iP33);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b43 = server16.removeBan(iP42);
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP45 = null;
    boolean b46 = server44.connect(iP45);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b52 = server44.connect(iP51);
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP54 = null;
    boolean b55 = server53.connect(iP54);
    java.lang.String str56 = server53.toString();
    java.lang.String str57 = server53.toString();
    tp2.Entry entry58 = new tp2.Entry();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i64 = iP63.getFirst();
    java.lang.String str65 = iP63.toString();
    entry58.element = iP63;
    boolean b67 = server53.connect(iP63);
    boolean b68 = server44.removeException(iP63);
    boolean b69 = server16.connect(iP63);
    java.lang.Integer i70 = iP63.getFirst();
    iP63.setSecond((java.lang.Integer)0);
    java.lang.Integer i73 = iP63.getThird();
    tp2.IPBan iPBan75 = new tp2.IPBan(iP63, (java.lang.Long)1466185872784L);
    node11.element = iPBan75;
    node0.next = node11;
    tp2.Node node78 = new tp2.Node();
    tp2.IPBan iPBan79 = null;
    node78.element = iPBan79;
    tp2.IPBan iPBan81 = node78.element;
    tp2.Node node82 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList83 = new tp2.StrictlySortedSinglyLinkedList();
    int i84 = strictlySortedSinglyLinkedList83.getSize();
    tp2.IPBan iPBan85 = null;
    boolean b86 = strictlySortedSinglyLinkedList83.add(iPBan85);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList87 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node88 = strictlySortedSinglyLinkedList87.header;
    strictlySortedSinglyLinkedList83.header = node88;
    node82.next = node88;
    tp2.Node node91 = node82.next;
    tp2.Node node92 = node82.next;
    node78.next = node92;
    node0.next = node78;
    java.lang.String str95 = node78.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str57.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 10+ "'", i64.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "10.0.0.100"+ "'", str65.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 10+ "'", i70.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 0+ "'", i73.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "[null]"+ "'", str95.equals("[null]"));

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test397"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    tp2.IPBan iPBan6 = new tp2.IPBan(iP4, (java.lang.Long)(-1L));
    tp2.IP iP7 = iPBan6.getIp();
    java.lang.String str8 = iPBan6.toString();
    java.lang.Long long9 = iPBan6.getExpires();
    java.lang.Long long10 = iPBan6.expires;
    iPBan6.expires = 1466185877216L;
    iPBan6.setExpires((java.lang.Long)1466185890825L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "IPBan [ip=10.100.-1.1, expires=-1]"+ "'", str8.equals("IPBan [ip=10.100.-1.1, expires=-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L)+ "'", long9.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L)+ "'", long10.equals((-1L)));

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test398"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    server15.update();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i23 = iP22.getFirst();
    boolean b24 = server15.connect(iP22);
    iPBan14.ip = iP22;
    tp2.IP iP26 = iPBan14.getIp();
    tp2.IP iP27 = iPBan14.ip;
    iP27.setThird((java.lang.Integer)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 100+ "'", i23.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP27);

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test399"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP5 = entry0.element;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.Entry entry7 = new tp2.Entry();
    java.lang.String str8 = entry7.toString();
    java.lang.String str9 = entry7.toString();
    tp2.Entry entry10 = entry7.next;
    entry6.next = entry7;
    entry0.next = entry6;
    tp2.Entry entry13 = entry0.next;
    tp2.Entry entry14 = new tp2.Entry();
    tp2.Entry entry15 = new tp2.Entry();
    java.lang.String str16 = entry15.toString();
    java.lang.String str17 = entry15.toString();
    tp2.Entry entry18 = entry15.next;
    entry14.next = entry15;
    tp2.Entry entry20 = new tp2.Entry();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    entry20.element = iP25;
    tp2.Entry entry28 = entry20.next;
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP30 = null;
    boolean b31 = server29.connect(iP30);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b37 = server29.connect(iP36);
    java.lang.Integer i38 = iP36.getFirst();
    entry20.element = iP36;
    entry15.next = entry20;
    tp2.Entry entry41 = new tp2.Entry();
    java.lang.String str42 = entry41.toString();
    java.lang.String str43 = entry41.toString();
    tp2.Entry entry44 = entry41.next;
    entry20.next = entry44;
    tp2.IP iP46 = entry20.element;
    entry0.next = entry20;
    tp2.Entry entry48 = null;
    entry0.next = entry48;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[null]"+ "'", str8.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[null]"+ "'", str16.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[null]"+ "'", str17.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i38 + "' != '" + 100+ "'", i38.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "[null]"+ "'", str42.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[null]"+ "'", str43.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP46);

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test400"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList15.size = 10;
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    server18.update();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setFirst((java.lang.Integer)1);
    java.lang.Integer i28 = iP25.getSecond();
    boolean b29 = server18.addException(iP25);
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server18.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b45 = server18.removeBan(iP44);
    iP44.setThird((java.lang.Integer)0);
    boolean b48 = strictlySortedSinglyLinkedList15.removeFromIP(iP44);
    boolean b49 = singlyLinkedList0.contains(iP44);
    int i50 = singlyLinkedList0.getSize();
    tp2.Node node51 = new tp2.Node();
    tp2.IPBan iPBan52 = null;
    node51.element = iPBan52;
    tp2.SinglyLinkedList singlyLinkedList54 = new tp2.SinglyLinkedList();
    tp2.IP iP56 = singlyLinkedList54.get((int)' ');
    tp2.Entry entry57 = new tp2.Entry();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i63 = iP62.getFirst();
    java.lang.String str64 = iP62.toString();
    entry57.element = iP62;
    boolean b66 = singlyLinkedList54.remove(iP62);
    tp2.IPBan iPBan68 = new tp2.IPBan(iP62, (java.lang.Long)1L);
    java.lang.String str69 = iPBan68.toString();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i75 = iP74.getFirst();
    java.lang.String str76 = iP74.toString();
    java.lang.String str77 = iP74.toString();
    iPBan68.setIp(iP74);
    java.lang.Long long79 = iPBan68.getExpires();
    node51.element = iPBan68;
    iPBan68.expires = 1466185870380L;
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i88 = iP87.getFirst();
    java.lang.String str89 = iP87.toString();
    java.lang.Integer i90 = iP87.getFourth();
    iPBan68.ip = iP87;
    boolean b92 = singlyLinkedList0.remove(iP87);
    boolean b93 = singlyLinkedList0.isEmpty();
    boolean b94 = singlyLinkedList0.isEmpty();
    java.lang.String str95 = singlyLinkedList0.toString();
    int i96 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 0+ "'", i28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 10+ "'", i63.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "10.0.0.100"+ "'", str64.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str69.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 10+ "'", i75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "10.0.0.100"+ "'", str76.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L+ "'", long79.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 10+ "'", i88.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "10.0.0.100"+ "'", str89.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i90 + "' != '" + 100+ "'", i90.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "()"+ "'", str95.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test401"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i11 = iP10.getFirst();
    boolean b12 = server3.connect(iP10);
    boolean b13 = strictlySortedSinglyLinkedList0.removeFromIP(iP10);
    java.util.Set<tp2.IPBan> set_iPBan14 = null;
    boolean b15 = strictlySortedSinglyLinkedList0.repOk(set_iPBan14);
    tp2.IPBan iPBan17 = strictlySortedSinglyLinkedList0.get((-1));
    java.lang.String str18 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 100+ "'", i11.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "{}"+ "'", str18.equals("{}"));

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test402"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i5 = iP4.getFirst();
    java.lang.String str6 = iP4.toString();
    java.lang.String str7 = iP4.toString();
    iP4.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan11 = new tp2.IPBan(iP4, (java.lang.Long)0L);
    tp2.Server server12 = new tp2.Server();
    tp2.IP iP13 = null;
    boolean b14 = server12.connect(iP13);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b20 = server12.connect(iP19);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList21 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList21.size = 10;
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    server24.update();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP31.setFirst((java.lang.Integer)1);
    java.lang.Integer i34 = iP31.getSecond();
    boolean b35 = server24.addException(iP31);
    tp2.Entry entry36 = new tp2.Entry();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i42 = iP41.getFirst();
    java.lang.String str43 = iP41.toString();
    entry36.element = iP41;
    boolean b45 = server24.addException(iP41);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b51 = server24.removeBan(iP50);
    iP50.setThird((java.lang.Integer)0);
    boolean b54 = strictlySortedSinglyLinkedList21.removeFromIP(iP50);
    tp2.Server server55 = new tp2.Server();
    java.lang.String str56 = server55.toString();
    server55.update();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP62.setFirst((java.lang.Integer)1);
    java.lang.Integer i65 = iP62.getSecond();
    boolean b66 = server55.addException(iP62);
    boolean b67 = strictlySortedSinglyLinkedList21.removeFromIP(iP62);
    boolean b68 = server12.connect(iP62);
    tp2.Server server69 = new tp2.Server();
    tp2.IP iP70 = null;
    boolean b71 = server69.connect(iP70);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b77 = server69.connect(iP76);
    java.lang.Integer i78 = iP76.getFirst();
    boolean b79 = server12.connect(iP76);
    java.lang.Integer i80 = iP76.getFirst();
    iPBan11.ip = iP76;
    java.lang.Long long82 = iPBan11.expires;
    iPBan11.expires = 1466185877442L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i5 + "' != '" + 10+ "'", i5.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "10.0.0.100"+ "'", str6.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 0+ "'", i34.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 10+ "'", i42.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 0+ "'", i65.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i78 + "' != '" + 100+ "'", i78.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 100+ "'", i80.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L+ "'", long82.equals(0L));

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test403"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b6 = server0.addException(iP5);
    java.lang.String str7 = iP5.toString();
    iP5.setFourth((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "100.10.-1.10"+ "'", str7.equals("100.10.-1.10"));

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test404"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    boolean b5 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.IPBan iPBan7 = strictlySortedSinglyLinkedList0.get(0);
    strictlySortedSinglyLinkedList0.size = 0;
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)100, (java.lang.Integer)11);
    // The following exception was thrown during execution in test generation
    try {
      boolean b15 = strictlySortedSinglyLinkedList0.containsIP(iP14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan7);

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test405"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    tp2.Server server4 = new tp2.Server();
    tp2.IP iP5 = null;
    boolean b6 = server4.connect(iP5);
    java.lang.String str7 = server4.toString();
    java.lang.String str8 = server4.toString();
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    java.lang.String str16 = iP14.toString();
    entry9.element = iP14;
    boolean b18 = server4.connect(iP14);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    java.lang.String str26 = iP23.toString();
    boolean b27 = server4.removeBan(iP23);
    iP23.setFirst((java.lang.Integer)10);
    boolean b30 = server0.removeException(iP23);
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP32 = null;
    boolean b33 = server31.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b39 = server31.connect(iP38);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList40 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList40.size = 10;
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    server43.update();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP50.setFirst((java.lang.Integer)1);
    java.lang.Integer i53 = iP50.getSecond();
    boolean b54 = server43.addException(iP50);
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    entry55.element = iP60;
    boolean b64 = server43.addException(iP60);
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b70 = server43.removeBan(iP69);
    iP69.setThird((java.lang.Integer)0);
    boolean b73 = strictlySortedSinglyLinkedList40.removeFromIP(iP69);
    tp2.Server server74 = new tp2.Server();
    java.lang.String str75 = server74.toString();
    server74.update();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP81.setFirst((java.lang.Integer)1);
    java.lang.Integer i84 = iP81.getSecond();
    boolean b85 = server74.addException(iP81);
    boolean b86 = strictlySortedSinglyLinkedList40.removeFromIP(iP81);
    boolean b87 = server31.connect(iP81);
    boolean b88 = server0.connect(iP81);
    java.lang.String str89 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 0+ "'", i53.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str75.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i84 + "' != '" + 0+ "'", i84.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str89.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test406"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = new tp2.Entry();
    java.lang.String str4 = entry3.toString();
    entry0.next = entry3;
    tp2.Entry entry6 = new tp2.Entry();
    java.lang.String str7 = entry6.toString();
    entry0.next = entry6;
    java.lang.String str9 = entry0.toString();
    tp2.Entry entry10 = entry0.next;
    tp2.Entry entry11 = new tp2.Entry();
    java.lang.String str12 = entry11.toString();
    java.lang.String str13 = entry11.toString();
    tp2.IP iP14 = entry11.element;
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    entry15.element = iP20;
    tp2.IP iP23 = entry15.element;
    entry11.next = entry15;
    tp2.Entry entry25 = entry11.next;
    entry10.next = entry25;
    tp2.IP iP27 = entry10.element;
    tp2.IP iP28 = entry10.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[null]"+ "'", str4.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[null]"+ "'", str7.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[null]"+ "'", str12.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[null]"+ "'", str13.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP28);

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test407"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList50 = new tp2.StrictlySortedSinglyLinkedList();
    int i51 = strictlySortedSinglyLinkedList50.getSize();
    tp2.IPBan iPBan52 = null;
    boolean b53 = strictlySortedSinglyLinkedList50.add(iPBan52);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList54 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node55 = strictlySortedSinglyLinkedList54.header;
    strictlySortedSinglyLinkedList50.header = node55;
    tp2.IPBan iPBan57 = node55.element;
    strictlySortedSinglyLinkedList0.header = node55;
    strictlySortedSinglyLinkedList0.size = 0;
    strictlySortedSinglyLinkedList0.size = (byte)0;
    java.lang.String str63 = strictlySortedSinglyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList64 = new tp2.SinglyLinkedList();
    tp2.IP iP66 = singlyLinkedList64.get((int)' ');
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = singlyLinkedList64.remove(iP72);
    tp2.IPBan iPBan78 = new tp2.IPBan(iP72, (java.lang.Long)1L);
    java.lang.String str79 = iPBan78.toString();
    tp2.IP iP84 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i85 = iP84.getFirst();
    java.lang.String str86 = iP84.toString();
    java.lang.String str87 = iP84.toString();
    iPBan78.setIp(iP84);
    tp2.IP iP89 = iPBan78.ip;
    boolean b90 = strictlySortedSinglyLinkedList0.contains(iPBan78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "{}"+ "'", str63.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str79.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i85 + "' != '" + 10+ "'", i85.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "10.0.0.100"+ "'", str86.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "10.0.0.100"+ "'", str87.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test408"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.SinglyLinkedList singlyLinkedList2 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP3 = null;
    boolean b4 = singlyLinkedList2.repOk(set_iP3);
    java.util.Set<tp2.IP> set_iP5 = null;
    boolean b6 = singlyLinkedList2.repOk(set_iP5);
    tp2.SinglyLinkedList singlyLinkedList7 = new tp2.SinglyLinkedList();
    tp2.IP iP9 = singlyLinkedList7.get((int)' ');
    tp2.Entry entry10 = new tp2.Entry();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i16 = iP15.getFirst();
    java.lang.String str17 = iP15.toString();
    entry10.element = iP15;
    boolean b19 = singlyLinkedList7.remove(iP15);
    tp2.IP iP21 = singlyLinkedList7.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList22 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList22.size = 10;
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    server25.update();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP32.setFirst((java.lang.Integer)1);
    java.lang.Integer i35 = iP32.getSecond();
    boolean b36 = server25.addException(iP32);
    tp2.Entry entry37 = new tp2.Entry();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i43 = iP42.getFirst();
    java.lang.String str44 = iP42.toString();
    entry37.element = iP42;
    boolean b46 = server25.addException(iP42);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b52 = server25.removeBan(iP51);
    iP51.setThird((java.lang.Integer)0);
    boolean b55 = strictlySortedSinglyLinkedList22.removeFromIP(iP51);
    boolean b56 = singlyLinkedList7.contains(iP51);
    boolean b57 = singlyLinkedList2.contains(iP51);
    boolean b58 = server0.removeBan(iP51);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList59 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan60 = null;
    boolean b61 = strictlySortedSinglyLinkedList59.contains(iPBan60);
    tp2.Server server62 = new tp2.Server();
    java.lang.String str63 = server62.toString();
    server62.update();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i70 = iP69.getFirst();
    boolean b71 = server62.connect(iP69);
    boolean b72 = strictlySortedSinglyLinkedList59.removeFromIP(iP69);
    java.util.Set<tp2.IPBan> set_iPBan73 = null;
    boolean b74 = strictlySortedSinglyLinkedList59.repOk(set_iPBan73);
    java.lang.String str75 = strictlySortedSinglyLinkedList59.toString();
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP81.setSecond((java.lang.Integer)(-1));
    boolean b84 = server76.addException(iP81);
    iP81.setFourth((java.lang.Integer)0);
    java.lang.String str87 = iP81.toString();
    boolean b88 = strictlySortedSinglyLinkedList59.containsIP(iP81);
    boolean b89 = server0.connect(iP81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 10+ "'", i16.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "10.0.0.100"+ "'", str17.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 0+ "'", i35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 10+ "'", i43.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "10.0.0.100"+ "'", str44.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str63.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 100+ "'", i70.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "{}"+ "'", str75.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "10.-1.0.0"+ "'", str87.equals("10.-1.0.0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test409"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i11 = iP10.getFirst();
    boolean b12 = server3.connect(iP10);
    boolean b13 = strictlySortedSinglyLinkedList0.removeFromIP(iP10);
    java.lang.Integer i14 = iP10.getThird();
    iP10.setFirst((java.lang.Integer)11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 100+ "'", i11.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + (-1)+ "'", i14.equals((-1)));

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test410"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    boolean b39 = iP5.equals((java.lang.Object)iPBan26);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    int i41 = singlyLinkedList40.getSize();
    java.lang.String str42 = singlyLinkedList40.toString();
    int i43 = singlyLinkedList40.getSize();
    java.util.Set<tp2.IP> set_iP44 = null;
    boolean b45 = singlyLinkedList40.repOk(set_iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b51 = singlyLinkedList40.remove(iP50);
    iPBan26.setIp(iP50);
    tp2.IP iP53 = iPBan26.getIp();
    java.lang.Long long54 = iPBan26.getExpires();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "()"+ "'", str42.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L+ "'", long54.equals(1L));

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test411"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    java.lang.Integer i47 = iP41.getFourth();
    java.lang.Integer i48 = iP41.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 100+ "'", i47.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 1+ "'", i48.equals(1));

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test412"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    java.lang.Integer i22 = iP17.getFirst();
    iP17.setFourth((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test413"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.Node node16 = new tp2.Node();
    tp2.IPBan iPBan17 = null;
    node16.element = iPBan17;
    tp2.IPBan iPBan19 = node16.element;
    tp2.IPBan iPBan20 = node16.element;
    node14.next = node16;
    java.lang.String str22 = node16.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[null]"+ "'", str22.equals("[null]"));

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test414"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.ITime iTime3 = null;
    server0.setTime(iTime3);
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get(1);
    tp2.IP iP9 = singlyLinkedList5.get(0);
    java.lang.String str10 = singlyLinkedList5.toString();
    tp2.IP iP12 = singlyLinkedList5.get((int)(byte)100);
    tp2.IP iP14 = singlyLinkedList5.get((int)(byte)0);
    java.util.Set<tp2.IP> set_iP15 = null;
    boolean b16 = singlyLinkedList5.repOk(set_iP15);
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    java.lang.String str24 = iP21.toString();
    iP21.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan28 = new tp2.IPBan(iP21, (java.lang.Long)0L);
    tp2.IP iP29 = iPBan28.ip;
    boolean b30 = singlyLinkedList5.remove(iP29);
    // The following exception was thrown during execution in test generation
    try {
      boolean b31 = server0.addBan(iP29);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "()"+ "'", str10.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "10.0.0.100"+ "'", str24.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test415"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)2, (java.lang.Integer)1, (java.lang.Integer)1, (java.lang.Integer)11);
    iP4.setThird((java.lang.Integer)(-1));

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test416"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node1 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node2 = new tp2.Node();
    tp2.IPBan iPBan3 = null;
    node2.element = iPBan3;
    tp2.IPBan iPBan5 = null;
    node2.element = iPBan5;
    strictlySortedSinglyLinkedList0.header = node2;
    tp2.IPBan iPBan8 = node2.element;
    java.lang.String str9 = node2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test417"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    tp2.Node node5 = strictlySortedSinglyLinkedList0.header;
    java.util.Set<tp2.IPBan> set_iPBan6 = null;
    boolean b7 = strictlySortedSinglyLinkedList0.repOk(set_iPBan6);
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    tp2.IPBan iPBan39 = node9.element;
    java.lang.String str40 = node9.toString();
    tp2.IPBan iPBan41 = node9.element;
    tp2.IP iP42 = iPBan41.ip;
    // The following exception was thrown during execution in test generation
    try {
      boolean b43 = strictlySortedSinglyLinkedList0.contains(iPBan41);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[IPBan [ip=10.0.0.100, expires=1]]"+ "'", str40.equals("[IPBan [ip=10.0.0.100, expires=1]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP42);

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test418"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.Entry entry7 = new tp2.Entry();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i13 = iP12.getFirst();
    entry7.element = iP12;
    boolean b15 = server0.addException(iP12);
    tp2.Entry entry16 = new tp2.Entry();
    tp2.Entry entry17 = new tp2.Entry();
    java.lang.String str18 = entry17.toString();
    java.lang.String str19 = entry17.toString();
    tp2.Entry entry20 = entry17.next;
    entry16.next = entry17;
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    entry22.element = iP27;
    tp2.Entry entry30 = entry22.next;
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP32 = null;
    boolean b33 = server31.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b39 = server31.connect(iP38);
    java.lang.Integer i40 = iP38.getFirst();
    entry22.element = iP38;
    entry17.next = entry22;
    tp2.Entry entry43 = new tp2.Entry();
    java.lang.String str44 = entry43.toString();
    java.lang.String str45 = entry43.toString();
    tp2.Entry entry46 = entry43.next;
    entry22.next = entry46;
    tp2.IP iP48 = entry22.element;
    boolean b49 = server0.removeException(iP48);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList50 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList50.size = 10;
    tp2.Server server53 = new tp2.Server();
    java.lang.String str54 = server53.toString();
    server53.update();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP60.setFirst((java.lang.Integer)1);
    java.lang.Integer i63 = iP60.getSecond();
    boolean b64 = server53.addException(iP60);
    tp2.Entry entry65 = new tp2.Entry();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i71 = iP70.getFirst();
    java.lang.String str72 = iP70.toString();
    entry65.element = iP70;
    boolean b74 = server53.addException(iP70);
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b80 = server53.removeBan(iP79);
    iP79.setThird((java.lang.Integer)0);
    boolean b83 = strictlySortedSinglyLinkedList50.removeFromIP(iP79);
    boolean b84 = server0.addException(iP79);
    iP79.setSecond((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 10+ "'", i13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[null]"+ "'", str18.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[null]"+ "'", str19.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 100+ "'", i40.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "[null]"+ "'", str44.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[null]"+ "'", str45.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str54.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 0+ "'", i63.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i71 + "' != '" + 10+ "'", i71.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "10.0.0.100"+ "'", str72.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test419"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList15.size = 10;
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    server18.update();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setFirst((java.lang.Integer)1);
    java.lang.Integer i28 = iP25.getSecond();
    boolean b29 = server18.addException(iP25);
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server18.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b45 = server18.removeBan(iP44);
    iP44.setThird((java.lang.Integer)0);
    boolean b48 = strictlySortedSinglyLinkedList15.removeFromIP(iP44);
    boolean b49 = singlyLinkedList0.contains(iP44);
    int i50 = singlyLinkedList0.getSize();
    tp2.Node node51 = new tp2.Node();
    tp2.IPBan iPBan52 = null;
    node51.element = iPBan52;
    tp2.SinglyLinkedList singlyLinkedList54 = new tp2.SinglyLinkedList();
    tp2.IP iP56 = singlyLinkedList54.get((int)' ');
    tp2.Entry entry57 = new tp2.Entry();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i63 = iP62.getFirst();
    java.lang.String str64 = iP62.toString();
    entry57.element = iP62;
    boolean b66 = singlyLinkedList54.remove(iP62);
    tp2.IPBan iPBan68 = new tp2.IPBan(iP62, (java.lang.Long)1L);
    java.lang.String str69 = iPBan68.toString();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i75 = iP74.getFirst();
    java.lang.String str76 = iP74.toString();
    java.lang.String str77 = iP74.toString();
    iPBan68.setIp(iP74);
    java.lang.Long long79 = iPBan68.getExpires();
    node51.element = iPBan68;
    iPBan68.expires = 1466185870380L;
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i88 = iP87.getFirst();
    java.lang.String str89 = iP87.toString();
    java.lang.Integer i90 = iP87.getFourth();
    iPBan68.ip = iP87;
    boolean b92 = singlyLinkedList0.remove(iP87);
    boolean b93 = singlyLinkedList0.isEmpty();
    tp2.IP iP94 = null;
    // The following exception was thrown during execution in test generation
    try {
      singlyLinkedList0.add(iP94);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 0+ "'", i28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 10+ "'", i63.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "10.0.0.100"+ "'", str64.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str69.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 10+ "'", i75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "10.0.0.100"+ "'", str76.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L+ "'", long79.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 10+ "'", i88.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "10.0.0.100"+ "'", str89.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i90 + "' != '" + 100+ "'", i90.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test420"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    tp2.Node node5 = strictlySortedSinglyLinkedList0.header;
    java.util.Set<tp2.IPBan> set_iPBan6 = null;
    boolean b7 = strictlySortedSinglyLinkedList0.repOk(set_iPBan6);
    strictlySortedSinglyLinkedList0.size = 0;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test421"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b6 = server0.addException(iP5);
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    server7.update();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP14.setFirst((java.lang.Integer)1);
    java.lang.Integer i17 = iP14.getSecond();
    boolean b18 = server7.addException(iP14);
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = server7.addException(iP24);
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b34 = server7.removeBan(iP33);
    iP33.setThird((java.lang.Integer)0);
    boolean b38 = iP33.equals((java.lang.Object)'4');
    boolean b39 = server0.removeException(iP33);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b46 = server40.addException(iP45);
    java.lang.String str47 = server40.toString();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP49 = null;
    boolean b50 = server48.connect(iP49);
    java.lang.String str51 = server48.toString();
    java.lang.String str52 = server48.toString();
    tp2.IP iP53 = null;
    boolean b54 = server48.removeException(iP53);
    tp2.RealTime realTime55 = new tp2.RealTime();
    long long56 = realTime55.getCurrentTime();
    long long57 = realTime55.getCurrentTime();
    server48.setTime((tp2.ITime)realTime55);
    server40.setTime((tp2.ITime)realTime55);
    server0.setTime((tp2.ITime)realTime55);
    tp2.IP iP61 = null;
    boolean b62 = server0.removeException(iP61);
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP64 = null;
    boolean b65 = server63.connect(iP64);
    java.lang.String str66 = server63.toString();
    java.lang.String str67 = server63.toString();
    tp2.Entry entry68 = new tp2.Entry();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i74 = iP73.getFirst();
    java.lang.String str75 = iP73.toString();
    entry68.element = iP73;
    boolean b77 = server63.connect(iP73);
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i83 = iP82.getFirst();
    java.lang.String str84 = iP82.toString();
    java.lang.String str85 = iP82.toString();
    boolean b86 = server63.removeBan(iP82);
    tp2.Server server87 = new tp2.Server();
    tp2.IP iP88 = null;
    boolean b89 = server87.connect(iP88);
    tp2.IP iP94 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b95 = server87.connect(iP94);
    java.lang.Integer i96 = iP94.getFirst();
    java.lang.Integer i97 = iP94.getSecond();
    boolean b98 = server63.removeException(iP94);
    boolean b99 = server0.removeBan(iP94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 0+ "'", i17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"+ "'", str47.equals("Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str52.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long56 == 1466185891892L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long57 == 1466185891892L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str67.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i74 + "' != '" + 10+ "'", i74.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "10.0.0.100"+ "'", str75.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i83 + "' != '" + 10+ "'", i83.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "10.0.0.100"+ "'", str84.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "10.0.0.100"+ "'", str85.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i96 + "' != '" + 100+ "'", i96.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i97 + "' != '" + 10+ "'", i97.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test422"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    java.lang.String str14 = iP11.toString();
    iP11.setThird((java.lang.Integer)(-1));
    boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP11);
    boolean b18 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList19 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node20 = strictlySortedSinglyLinkedList19.header;
    tp2.SinglyLinkedList singlyLinkedList21 = new tp2.SinglyLinkedList();
    tp2.IP iP23 = singlyLinkedList21.get((int)' ');
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = singlyLinkedList21.remove(iP29);
    tp2.IPBan iPBan35 = new tp2.IPBan(iP29, (java.lang.Long)1L);
    tp2.Server server36 = new tp2.Server();
    java.lang.String str37 = server36.toString();
    server36.update();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i44 = iP43.getFirst();
    boolean b45 = server36.connect(iP43);
    iPBan35.ip = iP43;
    node20.element = iPBan35;
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    java.lang.String str55 = iP52.toString();
    iP52.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan59 = new tp2.IPBan(iP52, (java.lang.Long)0L);
    java.lang.String str60 = iPBan59.toString();
    node20.element = iPBan59;
    strictlySortedSinglyLinkedList0.header = node20;
    tp2.Node node63 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList64 = new tp2.StrictlySortedSinglyLinkedList();
    int i65 = strictlySortedSinglyLinkedList64.getSize();
    tp2.IPBan iPBan66 = null;
    boolean b67 = strictlySortedSinglyLinkedList64.add(iPBan66);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList68 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node69 = strictlySortedSinglyLinkedList68.header;
    strictlySortedSinglyLinkedList64.header = node69;
    node63.next = node69;
    tp2.Node node72 = node63.next;
    tp2.IPBan iPBan73 = node72.element;
    tp2.IPBan iPBan74 = node72.element;
    node20.next = node72;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 100+ "'", i44.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "10.0.0.100"+ "'", str55.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "IPBan [ip=10.0.-1.100, expires=0]"+ "'", str60.equals("IPBan [ip=10.0.-1.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan74);

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test423"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    boolean b9 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    int i11 = strictlySortedSinglyLinkedList10.getSize();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList10.add(iPBan12);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList14 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node15 = strictlySortedSinglyLinkedList14.header;
    strictlySortedSinglyLinkedList10.header = node15;
    strictlySortedSinglyLinkedList10.size = 0;
    int i19 = strictlySortedSinglyLinkedList10.size;
    tp2.Node node20 = strictlySortedSinglyLinkedList10.header;
    tp2.Node node21 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList0.header = node21;
    tp2.Node node23 = node21.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node23);

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test424"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)11, (java.lang.Integer)10, (java.lang.Integer)11);

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test425"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.size;
    int i5 = strictlySortedSinglyLinkedList0.getSize();
    int i6 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str7 = strictlySortedSinglyLinkedList0.toString();
    boolean b8 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.SinglyLinkedList singlyLinkedList9 = new tp2.SinglyLinkedList();
    tp2.IP iP11 = singlyLinkedList9.get((int)' ');
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = singlyLinkedList9.remove(iP17);
    tp2.IPBan iPBan23 = new tp2.IPBan(iP17, (java.lang.Long)1L);
    java.lang.String str24 = iPBan23.toString();
    iPBan23.setExpires((java.lang.Long)0L);
    java.lang.Long long27 = iPBan23.expires;
    tp2.IP iP28 = iPBan23.ip;
    java.lang.String str29 = iPBan23.toString();
    // The following exception was thrown during execution in test generation
    try {
      boolean b30 = strictlySortedSinglyLinkedList0.contains(iPBan23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "{[null]}"+ "'", str7.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str24.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L+ "'", long27.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str29.equals("IPBan [ip=10.0.0.100, expires=0]"));

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test426"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.IP iP4 = singlyLinkedList0.get((int)(byte)100);
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    java.lang.String str11 = iP9.toString();
    java.lang.String str12 = iP9.toString();
    iP9.setThird((java.lang.Integer)100);
    singlyLinkedList0.add(iP9);
    tp2.IP iP17 = singlyLinkedList0.get(0);
    java.lang.Integer i18 = iP17.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "10.0.0.100"+ "'", str11.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test427"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList50 = new tp2.StrictlySortedSinglyLinkedList();
    int i51 = strictlySortedSinglyLinkedList50.getSize();
    tp2.IPBan iPBan52 = null;
    boolean b53 = strictlySortedSinglyLinkedList50.add(iPBan52);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList54 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node55 = strictlySortedSinglyLinkedList54.header;
    strictlySortedSinglyLinkedList50.header = node55;
    tp2.IPBan iPBan57 = node55.element;
    strictlySortedSinglyLinkedList0.header = node55;
    java.util.Set<tp2.IPBan> set_iPBan59 = null;
    boolean b60 = strictlySortedSinglyLinkedList0.repOk(set_iPBan59);
    tp2.IPBan iPBan62 = strictlySortedSinglyLinkedList0.get((int)'4');
    tp2.Node node63 = strictlySortedSinglyLinkedList0.header;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node63);

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test428"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList50 = new tp2.StrictlySortedSinglyLinkedList();
    int i51 = strictlySortedSinglyLinkedList50.getSize();
    tp2.IPBan iPBan52 = null;
    boolean b53 = strictlySortedSinglyLinkedList50.add(iPBan52);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList54 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node55 = strictlySortedSinglyLinkedList54.header;
    strictlySortedSinglyLinkedList50.header = node55;
    tp2.IPBan iPBan57 = node55.element;
    strictlySortedSinglyLinkedList0.header = node55;
    java.util.Set<tp2.IPBan> set_iPBan59 = null;
    boolean b60 = strictlySortedSinglyLinkedList0.repOk(set_iPBan59);
    java.lang.String str61 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "{}"+ "'", str61.equals("{}"));

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test429"); }


    korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer(2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iFinitization1);

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test430"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    java.lang.String str12 = server9.toString();
    java.lang.String str13 = server9.toString();
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    entry14.element = iP19;
    boolean b23 = server9.connect(iP19);
    boolean b24 = server0.removeException(iP19);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP26 = null;
    boolean b27 = server25.connect(iP26);
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b33 = server25.connect(iP32);
    java.lang.Integer i34 = iP32.getFirst();
    boolean b35 = server0.connect(iP32);
    tp2.IPBan iPBan37 = new tp2.IPBan(iP32, (java.lang.Long)1466185872881L);
    java.lang.Integer i38 = iP32.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 100+ "'", i34.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i38 + "' != '" + 100+ "'", i38.equals(100));

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test431"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    iP26.setThird((java.lang.Integer)0);
    boolean b31 = iP26.equals((java.lang.Object)'4');
    java.lang.Integer i32 = iP26.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 100+ "'", i32.equals(100));

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test432"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    boolean b10 = server0.removeException(iP7);
    tp2.Server server11 = new tp2.Server();
    tp2.IP iP12 = null;
    boolean b13 = server11.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b19 = server11.connect(iP18);
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP21 = null;
    boolean b22 = server20.connect(iP21);
    java.lang.String str23 = server20.toString();
    java.lang.String str24 = server20.toString();
    tp2.Entry entry25 = new tp2.Entry();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i31 = iP30.getFirst();
    java.lang.String str32 = iP30.toString();
    entry25.element = iP30;
    boolean b34 = server20.connect(iP30);
    boolean b35 = server11.removeException(iP30);
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP37 = null;
    boolean b38 = server36.connect(iP37);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b44 = server36.connect(iP43);
    java.lang.Integer i45 = iP43.getFirst();
    boolean b46 = server11.connect(iP43);
    boolean b47 = server0.addException(iP43);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.Integer i54 = iP52.getSecond();
    boolean b55 = server0.addBan(iP52);
    iP52.setSecond((java.lang.Integer)11);
    iP52.setFourth((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 10+ "'", i31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 100+ "'", i45.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 100+ "'", i53.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test433"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    server0.update();
    tp2.SinglyLinkedList singlyLinkedList6 = new tp2.SinglyLinkedList();
    tp2.IP iP8 = singlyLinkedList6.get((int)' ');
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    java.lang.String str16 = iP14.toString();
    entry9.element = iP14;
    boolean b18 = singlyLinkedList6.remove(iP14);
    tp2.IPBan iPBan20 = new tp2.IPBan(iP14, (java.lang.Long)1L);
    java.lang.String str21 = iPBan20.toString();
    iPBan20.setExpires((java.lang.Long)0L);
    java.lang.Long long24 = iPBan20.expires;
    tp2.IP iP25 = iPBan20.ip;
    java.lang.String str26 = iPBan20.toString();
    tp2.IP iP27 = iPBan20.getIp();
    iP27.setFirst((java.lang.Integer)100);
    tp2.SinglyLinkedList singlyLinkedList30 = new tp2.SinglyLinkedList();
    tp2.IP iP32 = singlyLinkedList30.get((int)' ');
    tp2.Entry entry33 = new tp2.Entry();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i39 = iP38.getFirst();
    java.lang.String str40 = iP38.toString();
    entry33.element = iP38;
    boolean b42 = singlyLinkedList30.remove(iP38);
    tp2.IP iP44 = singlyLinkedList30.get((int)'4');
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i50 = iP49.getFirst();
    java.lang.String str51 = iP49.toString();
    java.lang.String str52 = iP49.toString();
    iP49.setThird((java.lang.Integer)(-1));
    boolean b55 = singlyLinkedList30.contains(iP49);
    boolean b56 = iP27.equals((java.lang.Object)b55);
    boolean b57 = server0.addBan(iP27);
    java.lang.String str58 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str21.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L+ "'", long24.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str26.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + 10+ "'", i39.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "10.0.0.100"+ "'", str40.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 10+ "'", i50.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "10.0.0.100"+ "'", str51.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "10.0.0.100"+ "'", str52.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Server [lastUpdate=1466185892153, exceptions=(), bans={[IPBan [ip=100.0.0.100, expires=1466185952156]]}]"+ "'", str58.equals("Server [lastUpdate=1466185892153, exceptions=(), bans={[IPBan [ip=100.0.0.100, expires=1466185952156]]}]"));

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test434"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan6 = strictlySortedSinglyLinkedList0.get(100);
    tp2.IPBan iPBan8 = strictlySortedSinglyLinkedList0.get((int)(byte)100);
    tp2.Node node9 = strictlySortedSinglyLinkedList0.header;
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP14.setThird((java.lang.Integer)1);
    java.lang.Object obj17 = null;
    boolean b18 = iP14.equals(obj17);
    iP14.setThird((java.lang.Integer)0);
    // The following exception was thrown during execution in test generation
    try {
      boolean b21 = strictlySortedSinglyLinkedList0.containsIP(iP14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test435"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    java.lang.String str14 = iP11.toString();
    iP11.setThird((java.lang.Integer)(-1));
    boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP11);
    tp2.SinglyLinkedList singlyLinkedList18 = new tp2.SinglyLinkedList();
    tp2.IP iP20 = singlyLinkedList18.get((int)' ');
    tp2.Entry entry21 = new tp2.Entry();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i27 = iP26.getFirst();
    java.lang.String str28 = iP26.toString();
    entry21.element = iP26;
    boolean b30 = singlyLinkedList18.remove(iP26);
    tp2.IPBan iPBan32 = new tp2.IPBan(iP26, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList33 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan34 = null;
    boolean b35 = strictlySortedSinglyLinkedList33.contains(iPBan34);
    int i36 = strictlySortedSinglyLinkedList33.getSize();
    tp2.IPBan iPBan38 = strictlySortedSinglyLinkedList33.get((int)'#');
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP43.setSecond((java.lang.Integer)(-1));
    boolean b46 = strictlySortedSinglyLinkedList33.removeFromIP(iP43);
    iPBan32.ip = iP43;
    boolean b48 = strictlySortedSinglyLinkedList0.removeFromIP(iP43);
    java.util.Set<tp2.IPBan> set_iPBan49 = null;
    boolean b50 = strictlySortedSinglyLinkedList0.repOk(set_iPBan49);
    boolean b51 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.SinglyLinkedList singlyLinkedList52 = new tp2.SinglyLinkedList();
    java.lang.String str53 = singlyLinkedList52.toString();
    java.lang.String str54 = singlyLinkedList52.toString();
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    entry55.element = iP60;
    iP60.setFirst((java.lang.Integer)1);
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP66 = null;
    boolean b67 = server65.connect(iP66);
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP72.setFirst((java.lang.Integer)1);
    boolean b75 = server65.removeException(iP72);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList76 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan77 = null;
    boolean b78 = strictlySortedSinglyLinkedList76.contains(iPBan77);
    int i79 = strictlySortedSinglyLinkedList76.getSize();
    tp2.IPBan iPBan81 = strictlySortedSinglyLinkedList76.get((int)'#');
    tp2.IP iP86 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP86.setSecond((java.lang.Integer)(-1));
    boolean b89 = strictlySortedSinglyLinkedList76.removeFromIP(iP86);
    boolean b90 = server65.removeBan(iP86);
    java.lang.Integer i91 = iP86.getSecond();
    boolean b92 = iP60.equals((java.lang.Object)i91);
    singlyLinkedList52.add(iP60);
    boolean b94 = strictlySortedSinglyLinkedList0.removeFromIP(iP60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "()"+ "'", str53.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "()"+ "'", str54.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i91 + "' != '" + (-1)+ "'", i91.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test436"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    java.lang.String str34 = strictlySortedSinglyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    java.lang.String str50 = iPBan49.toString();
    boolean b51 = strictlySortedSinglyLinkedList0.contains(iPBan49);
    tp2.IPBan iPBan53 = strictlySortedSinglyLinkedList0.get((int)(short)0);
    int i54 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str55 = strictlySortedSinglyLinkedList0.toString();
    tp2.IPBan iPBan57 = strictlySortedSinglyLinkedList0.get(32);
    int i58 = strictlySortedSinglyLinkedList0.size;
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP60 = null;
    boolean b61 = server59.connect(iP60);
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b67 = server59.connect(iP66);
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP69 = null;
    boolean b70 = server68.connect(iP69);
    java.lang.String str71 = server68.toString();
    java.lang.String str72 = server68.toString();
    tp2.Entry entry73 = new tp2.Entry();
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i79 = iP78.getFirst();
    java.lang.String str80 = iP78.toString();
    entry73.element = iP78;
    boolean b82 = server68.connect(iP78);
    boolean b83 = server59.removeException(iP78);
    tp2.Server server84 = new tp2.Server();
    tp2.IP iP85 = null;
    boolean b86 = server84.connect(iP85);
    tp2.IP iP91 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b92 = server84.connect(iP91);
    java.lang.Integer i93 = iP91.getFirst();
    boolean b94 = server59.connect(iP91);
    tp2.IPBan iPBan96 = new tp2.IPBan(iP91, (java.lang.Long)1466185872881L);
    boolean b97 = strictlySortedSinglyLinkedList0.contains(iPBan96);
    iPBan96.expires = 1466185887014L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "{}"+ "'", str34.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "{}"+ "'", str55.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str71.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str72.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i79 + "' != '" + 10+ "'", i79.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "10.0.0.100"+ "'", str80.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i93 + "' != '" + 100+ "'", i93.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test437"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan5 = strictlySortedSinglyLinkedList0.get((int)'#');
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setSecond((java.lang.Integer)(-1));
    boolean b13 = strictlySortedSinglyLinkedList0.removeFromIP(iP10);
    tp2.Node node14 = strictlySortedSinglyLinkedList0.header;
    java.util.Set<tp2.IPBan> set_iPBan15 = null;
    boolean b16 = strictlySortedSinglyLinkedList0.repOk(set_iPBan15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test438"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    entry6.element = iP11;
    tp2.Entry entry14 = entry6.next;
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP16 = null;
    boolean b17 = server15.connect(iP16);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b23 = server15.connect(iP22);
    java.lang.Integer i24 = iP22.getFirst();
    entry6.element = iP22;
    entry1.next = entry6;
    tp2.Entry entry27 = new tp2.Entry();
    java.lang.String str28 = entry27.toString();
    java.lang.String str29 = entry27.toString();
    tp2.Entry entry30 = entry27.next;
    entry6.next = entry30;
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b38 = server32.addException(iP37);
    java.lang.String str39 = iP37.toString();
    entry6.element = iP37;
    tp2.Entry entry41 = entry6.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 100+ "'", i24.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[null]"+ "'", str28.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[null]"+ "'", str29.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "100.10.-1.10"+ "'", str39.equals("100.10.-1.10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry41);

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test439"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.IPBan iPBan3 = null;
    node0.element = iPBan3;
    tp2.Server server5 = new tp2.Server();
    java.lang.String str6 = server5.toString();
    server5.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP12.setFirst((java.lang.Integer)1);
    java.lang.Integer i15 = iP12.getSecond();
    boolean b16 = server5.addException(iP12);
    tp2.Entry entry17 = new tp2.Entry();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i23 = iP22.getFirst();
    java.lang.String str24 = iP22.toString();
    entry17.element = iP22;
    boolean b26 = server5.addException(iP22);
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b32 = server5.removeBan(iP31);
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP34 = null;
    boolean b35 = server33.connect(iP34);
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b41 = server33.connect(iP40);
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP43 = null;
    boolean b44 = server42.connect(iP43);
    java.lang.String str45 = server42.toString();
    java.lang.String str46 = server42.toString();
    tp2.Entry entry47 = new tp2.Entry();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    entry47.element = iP52;
    boolean b56 = server42.connect(iP52);
    boolean b57 = server33.removeException(iP52);
    boolean b58 = server5.connect(iP52);
    java.lang.Integer i59 = iP52.getFirst();
    iP52.setSecond((java.lang.Integer)0);
    java.lang.Integer i62 = iP52.getThird();
    tp2.IPBan iPBan64 = new tp2.IPBan(iP52, (java.lang.Long)1466185872784L);
    node0.element = iPBan64;
    tp2.IP iP66 = iPBan64.getIp();
    tp2.SinglyLinkedList singlyLinkedList67 = new tp2.SinglyLinkedList();
    tp2.IP iP69 = singlyLinkedList67.get((int)' ');
    tp2.Entry entry70 = new tp2.Entry();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i76 = iP75.getFirst();
    java.lang.String str77 = iP75.toString();
    entry70.element = iP75;
    boolean b79 = singlyLinkedList67.remove(iP75);
    tp2.IPBan iPBan81 = new tp2.IPBan(iP75, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList82 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan83 = null;
    boolean b84 = strictlySortedSinglyLinkedList82.contains(iPBan83);
    int i85 = strictlySortedSinglyLinkedList82.getSize();
    tp2.IPBan iPBan87 = strictlySortedSinglyLinkedList82.get((int)'#');
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP92.setSecond((java.lang.Integer)(-1));
    boolean b95 = strictlySortedSinglyLinkedList82.removeFromIP(iP92);
    iPBan81.ip = iP92;
    iP92.setFourth((java.lang.Integer)(-1));
    iPBan64.setIp(iP92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str6.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 0+ "'", i15.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 10+ "'", i23.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "10.0.0.100"+ "'", str24.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 10+ "'", i59.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i62 + "' != '" + 0+ "'", i62.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 10+ "'", i76.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test440"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    tp2.IPBan iPBan51 = strictlySortedSinglyLinkedList0.get((int)' ');
    tp2.IPBan iPBan53 = strictlySortedSinglyLinkedList0.get((int)(byte)100);
    java.util.Set<tp2.IPBan> set_iPBan54 = null;
    boolean b55 = strictlySortedSinglyLinkedList0.repOk(set_iPBan54);
    java.lang.String str56 = strictlySortedSinglyLinkedList0.toString();
    java.lang.String str57 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "{}"+ "'", str56.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "{}"+ "'", str57.equals("{}"));

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test441"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan5 = node4.element;
    tp2.Node node6 = node4.next;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Entry entry10 = new tp2.Entry();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i16 = iP15.getFirst();
    java.lang.String str17 = iP15.toString();
    entry10.element = iP15;
    tp2.Node node19 = new tp2.Node();
    tp2.IPBan iPBan20 = null;
    node19.element = iPBan20;
    tp2.SinglyLinkedList singlyLinkedList22 = new tp2.SinglyLinkedList();
    tp2.IP iP24 = singlyLinkedList22.get((int)' ');
    tp2.Entry entry25 = new tp2.Entry();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i31 = iP30.getFirst();
    java.lang.String str32 = iP30.toString();
    entry25.element = iP30;
    boolean b34 = singlyLinkedList22.remove(iP30);
    tp2.IPBan iPBan36 = new tp2.IPBan(iP30, (java.lang.Long)1L);
    java.lang.String str37 = iPBan36.toString();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i43 = iP42.getFirst();
    java.lang.String str44 = iP42.toString();
    java.lang.String str45 = iP42.toString();
    iPBan36.setIp(iP42);
    java.lang.Long long47 = iPBan36.getExpires();
    node19.element = iPBan36;
    boolean b49 = iP15.equals((java.lang.Object)iPBan36);
    tp2.SinglyLinkedList singlyLinkedList50 = new tp2.SinglyLinkedList();
    int i51 = singlyLinkedList50.getSize();
    java.lang.String str52 = singlyLinkedList50.toString();
    int i53 = singlyLinkedList50.getSize();
    java.util.Set<tp2.IP> set_iP54 = null;
    boolean b55 = singlyLinkedList50.repOk(set_iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b61 = singlyLinkedList50.remove(iP60);
    iPBan36.setIp(iP60);
    iPBan36.setExpires((java.lang.Long)1466185870380L);
    java.lang.String str65 = iPBan36.toString();
    boolean b66 = strictlySortedSinglyLinkedList7.add(iPBan36);
    node4.element = iPBan36;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 10+ "'", i16.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "10.0.0.100"+ "'", str17.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 10+ "'", i31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str37.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 10+ "'", i43.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "10.0.0.100"+ "'", str44.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L+ "'", long47.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "()"+ "'", str52.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "IPBan [ip=100.10.-1.10, expires=1466185870380]"+ "'", str65.equals("IPBan [ip=100.10.-1.10, expires=1466185870380]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test442"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    java.util.Set<tp2.IP> set_iP3 = null;
    boolean b4 = singlyLinkedList0.repOk(set_iP3);
    boolean b5 = singlyLinkedList0.isEmpty();
    int i6 = singlyLinkedList0.getSize();
    int i7 = singlyLinkedList0.getSize();
    java.lang.String str8 = singlyLinkedList0.toString();
    boolean b9 = singlyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "()"+ "'", str8.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test443"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    tp2.Server server3 = new tp2.Server();
    tp2.IP iP4 = null;
    boolean b5 = server3.connect(iP4);
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b11 = server3.connect(iP10);
    java.lang.Integer i12 = iP10.getFirst();
    java.lang.Integer i13 = iP10.getFirst();
    singlyLinkedList0.add(iP10);
    boolean b15 = singlyLinkedList0.isEmpty();
    int i16 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 100+ "'", i12.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 100+ "'", i13.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test444"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    entry55.element = iP60;
    tp2.Entry entry63 = entry55.next;
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP65 = null;
    boolean b66 = server64.connect(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b72 = server64.connect(iP71);
    java.lang.Integer i73 = iP71.getFirst();
    entry55.element = iP71;
    iP71.setFourth((java.lang.Integer)100);
    boolean b77 = server0.removeException(iP71);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList78 = new tp2.StrictlySortedSinglyLinkedList();
    boolean b79 = iP71.equals((java.lang.Object)strictlySortedSinglyLinkedList78);
    java.lang.String str80 = strictlySortedSinglyLinkedList78.toString();
    tp2.Node node81 = strictlySortedSinglyLinkedList78.header;
    java.lang.String str82 = node81.toString();
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i88 = iP87.getFirst();
    java.lang.String str89 = iP87.toString();
    java.lang.String str90 = iP87.toString();
    iP87.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan94 = new tp2.IPBan(iP87, (java.lang.Long)0L);
    java.lang.String str95 = iPBan94.toString();
    node81.element = iPBan94;
    java.lang.String str97 = node81.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 100+ "'", i73.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "{}"+ "'", str80.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "[null]"+ "'", str82.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 10+ "'", i88.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "10.0.0.100"+ "'", str89.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "10.0.0.100"+ "'", str90.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "IPBan [ip=10.0.-1.100, expires=0]"+ "'", str95.equals("IPBan [ip=10.0.-1.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str97 + "' != '" + "[IPBan [ip=10.0.-1.100, expires=0]]"+ "'", str97.equals("[IPBan [ip=10.0.-1.100, expires=0]]"));

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test445"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList3 = new tp2.StrictlySortedSinglyLinkedList();
    int i4 = strictlySortedSinglyLinkedList3.getSize();
    tp2.IPBan iPBan5 = null;
    boolean b6 = strictlySortedSinglyLinkedList3.add(iPBan5);
    tp2.Node node7 = strictlySortedSinglyLinkedList3.header;
    tp2.IPBan iPBan9 = strictlySortedSinglyLinkedList3.get(100);
    tp2.Node node10 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    int i12 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan13 = null;
    boolean b14 = strictlySortedSinglyLinkedList11.add(iPBan13);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node16 = strictlySortedSinglyLinkedList15.header;
    strictlySortedSinglyLinkedList11.header = node16;
    node10.next = node16;
    strictlySortedSinglyLinkedList3.header = node10;
    node0.next = node10;
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    java.lang.String str28 = iP25.toString();
    iP25.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan32 = new tp2.IPBan(iP25, (java.lang.Long)0L);
    node0.element = iPBan32;
    java.lang.String str34 = node0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[IPBan [ip=10.0.-1.100, expires=0]]"+ "'", str34.equals("[IPBan [ip=10.0.-1.100, expires=0]]"));

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test446"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)2, (java.lang.Integer)(-1), (java.lang.Integer)(-1));

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test447"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP58.setSecond((java.lang.Integer)1);
    boolean b61 = server0.removeBan(iP58);
    iP58.setFirst((java.lang.Integer)11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test448"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    boolean b10 = server0.removeException(iP7);
    tp2.SinglyLinkedList singlyLinkedList11 = new tp2.SinglyLinkedList();
    tp2.IP iP13 = singlyLinkedList11.get((int)' ');
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    entry14.element = iP19;
    boolean b23 = singlyLinkedList11.remove(iP19);
    tp2.IPBan iPBan25 = new tp2.IPBan(iP19, (java.lang.Long)1L);
    java.lang.String str26 = iPBan25.toString();
    iPBan25.setExpires((java.lang.Long)0L);
    java.lang.Long long29 = iPBan25.expires;
    tp2.IP iP30 = iPBan25.ip;
    java.lang.String str31 = iPBan25.toString();
    tp2.IP iP32 = iPBan25.getIp();
    iP32.setFirst((java.lang.Integer)100);
    boolean b35 = server0.addException(iP32);
    iP32.setSecond((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str26.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L+ "'", long29.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str31.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test449"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    int i3 = singlyLinkedList0.getSize();
    int i4 = singlyLinkedList0.getSize();
    java.lang.String str5 = singlyLinkedList0.toString();
    java.util.Set<tp2.IP> set_iP6 = null;
    boolean b7 = singlyLinkedList0.repOk(set_iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "()"+ "'", str5.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test450"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i11 = iP10.getFirst();
    boolean b12 = server3.connect(iP10);
    boolean b13 = strictlySortedSinglyLinkedList0.removeFromIP(iP10);
    int i14 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP16 = null;
    boolean b17 = server15.connect(iP16);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP22.setFirst((java.lang.Integer)1);
    boolean b25 = server15.removeException(iP22);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList26 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan27 = null;
    boolean b28 = strictlySortedSinglyLinkedList26.contains(iPBan27);
    int i29 = strictlySortedSinglyLinkedList26.getSize();
    tp2.IPBan iPBan31 = strictlySortedSinglyLinkedList26.get((int)'#');
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP36.setSecond((java.lang.Integer)(-1));
    boolean b39 = strictlySortedSinglyLinkedList26.removeFromIP(iP36);
    boolean b40 = server15.removeBan(iP36);
    java.lang.Integer i41 = iP36.getFourth();
    java.lang.Integer i42 = iP36.getSecond();
    boolean b43 = strictlySortedSinglyLinkedList0.removeFromIP(iP36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 100+ "'", i11.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i41 + "' != '" + 100+ "'", i41.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + (-1)+ "'", i42.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test451"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = server0.connect(iP10);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    java.lang.String str22 = iP19.toString();
    boolean b23 = server0.removeBan(iP19);
    java.lang.Integer i24 = iP19.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 100+ "'", i24.equals(100));

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test452"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    java.lang.String str11 = iP9.toString();
    java.lang.String str12 = iP9.toString();
    iP9.setThird((java.lang.Integer)(-1));
    entry0.element = iP9;
    tp2.Node node16 = new tp2.Node();
    tp2.IPBan iPBan17 = null;
    node16.element = iPBan17;
    tp2.SinglyLinkedList singlyLinkedList19 = new tp2.SinglyLinkedList();
    tp2.IP iP21 = singlyLinkedList19.get((int)' ');
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = singlyLinkedList19.remove(iP27);
    tp2.IPBan iPBan33 = new tp2.IPBan(iP27, (java.lang.Long)1L);
    java.lang.String str34 = iPBan33.toString();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    java.lang.String str42 = iP39.toString();
    iPBan33.setIp(iP39);
    java.lang.Long long44 = iPBan33.getExpires();
    node16.element = iPBan33;
    iPBan33.expires = 1466185870380L;
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    java.lang.Integer i55 = iP52.getFourth();
    iPBan33.ip = iP52;
    entry0.element = iP52;
    tp2.Entry entry58 = new tp2.Entry();
    java.lang.String str59 = entry58.toString();
    tp2.Server server60 = new tp2.Server();
    java.lang.String str61 = server60.toString();
    server60.update();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i68 = iP67.getFirst();
    boolean b69 = server60.connect(iP67);
    entry58.element = iP67;
    entry0.element = iP67;
    java.lang.String str72 = entry0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "10.0.0.100"+ "'", str11.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str34.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L+ "'", long44.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 100+ "'", i55.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "[null]"+ "'", str59.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str61.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 100+ "'", i68.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "[100.10.-1.10]"+ "'", str72.equals("[100.10.-1.10]"));

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test453"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)'4');
    java.lang.String str15 = singlyLinkedList0.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b24 = server16.connect(iP23);
    java.lang.Integer i25 = iP23.getFirst();
    java.lang.Integer i26 = iP23.getThird();
    boolean b27 = singlyLinkedList0.contains(iP23);
    boolean b28 = singlyLinkedList0.isEmpty();
    tp2.IP iP29 = null;
    // The following exception was thrown during execution in test generation
    try {
      singlyLinkedList0.add(iP29);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "()"+ "'", str15.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 100+ "'", i25.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + (-1)+ "'", i26.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test454"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.contains(iPBan2);
    tp2.SinglyLinkedList singlyLinkedList4 = new tp2.SinglyLinkedList();
    tp2.IP iP6 = singlyLinkedList4.get((int)' ');
    tp2.Entry entry7 = new tp2.Entry();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i13 = iP12.getFirst();
    java.lang.String str14 = iP12.toString();
    entry7.element = iP12;
    boolean b16 = singlyLinkedList4.remove(iP12);
    tp2.IPBan iPBan18 = new tp2.IPBan(iP12, (java.lang.Long)1L);
    java.lang.String str19 = iPBan18.toString();
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP21 = null;
    boolean b22 = server20.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b28 = server20.connect(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP30 = null;
    boolean b31 = server29.connect(iP30);
    java.lang.String str32 = server29.toString();
    java.lang.String str33 = server29.toString();
    tp2.Entry entry34 = new tp2.Entry();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    entry34.element = iP39;
    boolean b43 = server29.connect(iP39);
    boolean b44 = server20.removeException(iP39);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP46 = null;
    boolean b47 = server45.connect(iP46);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b53 = server45.connect(iP52);
    java.lang.Integer i54 = iP52.getFirst();
    boolean b55 = server20.connect(iP52);
    iPBan18.ip = iP52;
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP58 = null;
    boolean b59 = server57.connect(iP58);
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b65 = server57.connect(iP64);
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP67 = null;
    boolean b68 = server66.connect(iP67);
    java.lang.String str69 = server66.toString();
    java.lang.String str70 = server66.toString();
    tp2.Entry entry71 = new tp2.Entry();
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i77 = iP76.getFirst();
    java.lang.String str78 = iP76.toString();
    entry71.element = iP76;
    boolean b80 = server66.connect(iP76);
    boolean b81 = server57.removeException(iP76);
    tp2.Server server82 = new tp2.Server();
    tp2.IP iP83 = null;
    boolean b84 = server82.connect(iP83);
    tp2.IP iP89 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b90 = server82.connect(iP89);
    java.lang.Integer i91 = iP89.getFirst();
    boolean b92 = server57.connect(iP89);
    iPBan18.setIp(iP89);
    boolean b94 = strictlySortedSinglyLinkedList0.add(iPBan18);
    strictlySortedSinglyLinkedList0.size = ' ';
    int i97 = strictlySortedSinglyLinkedList0.getSize();
    int i98 = strictlySortedSinglyLinkedList0.getSize();
    boolean b99 = strictlySortedSinglyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 10+ "'", i13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str19.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 100+ "'", i54.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str69.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str70.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i77 + "' != '" + 10+ "'", i77.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "10.0.0.100"+ "'", str78.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i91 + "' != '" + 100+ "'", i91.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i98 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test455"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    entry55.element = iP60;
    tp2.Entry entry63 = entry55.next;
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP65 = null;
    boolean b66 = server64.connect(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b72 = server64.connect(iP71);
    java.lang.Integer i73 = iP71.getFirst();
    entry55.element = iP71;
    iP71.setFourth((java.lang.Integer)100);
    boolean b77 = server0.removeException(iP71);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList78 = new tp2.StrictlySortedSinglyLinkedList();
    boolean b79 = iP71.equals((java.lang.Object)strictlySortedSinglyLinkedList78);
    java.lang.String str80 = strictlySortedSinglyLinkedList78.toString();
    int i81 = strictlySortedSinglyLinkedList78.size;
    strictlySortedSinglyLinkedList78.size = 10;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 100+ "'", i73.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "{}"+ "'", str80.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test456"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan6 = strictlySortedSinglyLinkedList0.get(100);
    java.util.Set<tp2.IPBan> set_iPBan7 = null;
    boolean b8 = strictlySortedSinglyLinkedList0.repOk(set_iPBan7);
    boolean b9 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.SinglyLinkedList singlyLinkedList10 = new tp2.SinglyLinkedList();
    tp2.IP iP12 = singlyLinkedList10.get((int)' ');
    tp2.Entry entry13 = new tp2.Entry();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i19 = iP18.getFirst();
    java.lang.String str20 = iP18.toString();
    entry13.element = iP18;
    boolean b22 = singlyLinkedList10.remove(iP18);
    tp2.IPBan iPBan24 = new tp2.IPBan(iP18, (java.lang.Long)1L);
    // The following exception was thrown during execution in test generation
    try {
      boolean b25 = strictlySortedSinglyLinkedList0.contains(iPBan24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 10+ "'", i19.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "10.0.0.100"+ "'", str20.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test457"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList22 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList22.size = 10;
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    server25.update();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP32.setFirst((java.lang.Integer)1);
    java.lang.Integer i35 = iP32.getSecond();
    boolean b36 = server25.addException(iP32);
    tp2.Entry entry37 = new tp2.Entry();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i43 = iP42.getFirst();
    java.lang.String str44 = iP42.toString();
    entry37.element = iP42;
    boolean b46 = server25.addException(iP42);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b52 = server25.removeBan(iP51);
    iP51.setThird((java.lang.Integer)0);
    boolean b55 = strictlySortedSinglyLinkedList22.removeFromIP(iP51);
    boolean b56 = server0.addException(iP51);
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP58 = null;
    boolean b59 = server57.connect(iP58);
    java.lang.String str60 = server57.toString();
    tp2.Server server61 = new tp2.Server();
    java.lang.String str62 = server61.toString();
    server61.update();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP68.setFirst((java.lang.Integer)1);
    java.lang.Integer i71 = iP68.getSecond();
    boolean b72 = server61.addException(iP68);
    boolean b73 = server57.addException(iP68);
    boolean b74 = server0.addException(iP68);
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i80 = iP79.getFirst();
    iP79.setFourth((java.lang.Integer)1);
    boolean b83 = server0.addException(iP79);
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP88.setSecond((java.lang.Integer)(-1));
    boolean b91 = server0.removeException(iP88);
    java.lang.Integer i92 = iP88.getFourth();
    java.lang.Integer i93 = iP88.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 0+ "'", i35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 10+ "'", i43.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "10.0.0.100"+ "'", str44.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i71 + "' != '" + 0+ "'", i71.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 100+ "'", i80.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i92 + "' != '" + 100+ "'", i92.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i93 + "' != '" + 0+ "'", i93.equals(0));

  }

  @Test
  public void test458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test458"); }


    tp2.Node node0 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList1 = new tp2.StrictlySortedSinglyLinkedList();
    int i2 = strictlySortedSinglyLinkedList1.getSize();
    tp2.IPBan iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList1.add(iPBan3);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node6 = strictlySortedSinglyLinkedList5.header;
    strictlySortedSinglyLinkedList1.header = node6;
    node0.next = node6;
    tp2.IPBan iPBan9 = null;
    node0.element = iPBan9;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    int i12 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan13 = null;
    boolean b14 = strictlySortedSinglyLinkedList11.add(iPBan13);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node16 = strictlySortedSinglyLinkedList15.header;
    strictlySortedSinglyLinkedList11.header = node16;
    tp2.IPBan iPBan18 = node16.element;
    node0.next = node16;
    tp2.IPBan iPBan20 = node0.element;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList21 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan22 = null;
    boolean b23 = strictlySortedSinglyLinkedList21.contains(iPBan22);
    int i24 = strictlySortedSinglyLinkedList21.getSize();
    tp2.IPBan iPBan26 = strictlySortedSinglyLinkedList21.get((int)'#');
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP31.setSecond((java.lang.Integer)(-1));
    boolean b34 = strictlySortedSinglyLinkedList21.removeFromIP(iP31);
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    java.lang.String str50 = iPBan49.toString();
    iPBan49.setExpires((java.lang.Long)0L);
    boolean b53 = strictlySortedSinglyLinkedList21.add(iPBan49);
    tp2.IP iP54 = iPBan49.ip;
    node0.element = iPBan49;
    iPBan49.setExpires((java.lang.Long)1466185884639L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP54);

  }

  @Test
  public void test459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test459"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = server0.connect(iP10);
    iP10.setFirst((java.lang.Integer)0);
    tp2.IPBan iPBan18 = new tp2.IPBan(iP10, (java.lang.Long)0L);
    iP10.setFirst((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test460"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    tp2.IPBan iPBan7 = strictlySortedSinglyLinkedList0.get(0);
    java.util.Set<tp2.IPBan> set_iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList0.repOk(set_iPBan8);
    int i10 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    tp2.IPBan iPBan17 = new tp2.IPBan(iP15, (java.lang.Long)(-1L));
    tp2.IP iP18 = iPBan17.getIp();
    java.lang.String str19 = iPBan17.toString();
    java.lang.Long long20 = iPBan17.getExpires();
    tp2.Server server21 = new tp2.Server();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b27 = server21.addException(iP26);
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.Integer i34 = iP32.getSecond();
    boolean b35 = server21.addBan(iP32);
    iPBan17.setIp(iP32);
    java.lang.String str37 = iPBan17.toString();
    iPBan17.expires = 1466185879175L;
    // The following exception was thrown during execution in test generation
    try {
      boolean b40 = strictlySortedSinglyLinkedList0.contains(iPBan17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "IPBan [ip=10.100.-1.1, expires=-1]"+ "'", str19.equals("IPBan [ip=10.100.-1.1, expires=-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L)+ "'", long20.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 100+ "'", i33.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "IPBan [ip=100.10.-1.10, expires=-1]"+ "'", str37.equals("IPBan [ip=100.10.-1.10, expires=-1]"));

  }

  @Test
  public void test461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test461"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = server0.connect(iP10);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    java.lang.String str22 = iP19.toString();
    boolean b23 = server0.removeBan(iP19);
    java.lang.Integer i24 = iP19.getFirst();
    java.lang.Integer i25 = iP19.getFirst();
    java.lang.Integer i26 = iP19.getThird();
    iP19.setThird((java.lang.Integer)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));

  }

  @Test
  public void test462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test462"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    boolean b39 = iP5.equals((java.lang.Object)iPBan26);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    int i41 = singlyLinkedList40.getSize();
    java.lang.String str42 = singlyLinkedList40.toString();
    int i43 = singlyLinkedList40.getSize();
    java.util.Set<tp2.IP> set_iP44 = null;
    boolean b45 = singlyLinkedList40.repOk(set_iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b51 = singlyLinkedList40.remove(iP50);
    iPBan26.setIp(iP50);
    iPBan26.setExpires((java.lang.Long)1466185870380L);
    iPBan26.setExpires((java.lang.Long)1466185871428L);
    iPBan26.expires = 1466185873844L;
    iPBan26.setExpires((java.lang.Long)1466185883613L);
    java.lang.Long long61 = iPBan26.getExpires();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "()"+ "'", str42.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1466185883613L+ "'", long61.equals(1466185883613L));

  }

  @Test
  public void test463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test463"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i11 = iP10.getFirst();
    boolean b12 = server3.connect(iP10);
    boolean b13 = strictlySortedSinglyLinkedList0.removeFromIP(iP10);
    int i14 = strictlySortedSinglyLinkedList0.getSize();
    java.util.Set<tp2.IPBan> set_iPBan15 = null;
    boolean b16 = strictlySortedSinglyLinkedList0.repOk(set_iPBan15);
    int i17 = strictlySortedSinglyLinkedList0.size;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 100+ "'", i11.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);

  }

  @Test
  public void test464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test464"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node6 = strictlySortedSinglyLinkedList5.header;
    tp2.Node node7 = new tp2.Node();
    tp2.IPBan iPBan8 = null;
    node7.element = iPBan8;
    tp2.IPBan iPBan10 = null;
    node7.element = iPBan10;
    strictlySortedSinglyLinkedList5.header = node7;
    tp2.IPBan iPBan13 = node7.element;
    strictlySortedSinglyLinkedList0.header = node7;
    int i15 = strictlySortedSinglyLinkedList0.size;
    java.lang.String str16 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "{}"+ "'", str16.equals("{}"));

  }

  @Test
  public void test465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test465"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    java.util.Set<tp2.IP> set_iP3 = null;
    boolean b4 = singlyLinkedList0.repOk(set_iP3);
    boolean b5 = singlyLinkedList0.isEmpty();
    int i6 = singlyLinkedList0.getSize();
    int i7 = singlyLinkedList0.getSize();
    java.lang.String str8 = singlyLinkedList0.toString();
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP16.setFirst((java.lang.Integer)1);
    boolean b19 = server9.removeException(iP16);
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP21 = null;
    boolean b22 = server20.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b28 = server20.connect(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP30 = null;
    boolean b31 = server29.connect(iP30);
    java.lang.String str32 = server29.toString();
    java.lang.String str33 = server29.toString();
    tp2.Entry entry34 = new tp2.Entry();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    entry34.element = iP39;
    boolean b43 = server29.connect(iP39);
    boolean b44 = server20.removeException(iP39);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP46 = null;
    boolean b47 = server45.connect(iP46);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b53 = server45.connect(iP52);
    java.lang.Integer i54 = iP52.getFirst();
    boolean b55 = server20.connect(iP52);
    boolean b56 = server9.addException(iP52);
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i62 = iP61.getFirst();
    java.lang.Integer i63 = iP61.getSecond();
    boolean b64 = server9.addBan(iP61);
    java.lang.Integer i65 = iP61.getThird();
    java.lang.String str66 = iP61.toString();
    boolean b67 = singlyLinkedList0.contains(iP61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "()"+ "'", str8.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 100+ "'", i54.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i62 + "' != '" + 100+ "'", i62.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 10+ "'", i63.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + (-1)+ "'", i65.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "100.10.-1.10"+ "'", str66.equals("100.10.-1.10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);

  }

  @Test
  public void test466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test466"); }


    // The following exception was thrown during execution in test generation
    try {
      korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer((int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test467"); }


    tp2.Node node0 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList1 = new tp2.StrictlySortedSinglyLinkedList();
    int i2 = strictlySortedSinglyLinkedList1.getSize();
    tp2.IPBan iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList1.add(iPBan3);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node6 = strictlySortedSinglyLinkedList5.header;
    strictlySortedSinglyLinkedList1.header = node6;
    node0.next = node6;
    tp2.IPBan iPBan9 = null;
    node0.element = iPBan9;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    int i12 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan13 = null;
    boolean b14 = strictlySortedSinglyLinkedList11.add(iPBan13);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node16 = strictlySortedSinglyLinkedList15.header;
    strictlySortedSinglyLinkedList11.header = node16;
    tp2.IPBan iPBan18 = node16.element;
    node0.next = node16;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList20 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node21 = strictlySortedSinglyLinkedList20.header;
    node16.next = node21;
    java.lang.String str23 = node16.toString();
    tp2.Node node24 = node16.next;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList25 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList25.size = 10;
    tp2.Server server28 = new tp2.Server();
    java.lang.String str29 = server28.toString();
    server28.update();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP35.setFirst((java.lang.Integer)1);
    java.lang.Integer i38 = iP35.getSecond();
    boolean b39 = server28.addException(iP35);
    tp2.Entry entry40 = new tp2.Entry();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i46 = iP45.getFirst();
    java.lang.String str47 = iP45.toString();
    entry40.element = iP45;
    boolean b49 = server28.addException(iP45);
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b55 = server28.removeBan(iP54);
    iP54.setThird((java.lang.Integer)0);
    boolean b58 = strictlySortedSinglyLinkedList25.removeFromIP(iP54);
    java.lang.String str59 = strictlySortedSinglyLinkedList25.toString();
    tp2.SinglyLinkedList singlyLinkedList60 = new tp2.SinglyLinkedList();
    tp2.IP iP62 = singlyLinkedList60.get((int)' ');
    tp2.Entry entry63 = new tp2.Entry();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i69 = iP68.getFirst();
    java.lang.String str70 = iP68.toString();
    entry63.element = iP68;
    boolean b72 = singlyLinkedList60.remove(iP68);
    tp2.IPBan iPBan74 = new tp2.IPBan(iP68, (java.lang.Long)1L);
    java.lang.String str75 = iPBan74.toString();
    boolean b76 = strictlySortedSinglyLinkedList25.contains(iPBan74);
    iPBan74.setExpires((java.lang.Long)1466185873141L);
    iPBan74.expires = 1466185880002L;
    iPBan74.setExpires((java.lang.Long)1466185883774L);
    node24.element = iPBan74;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[null]"+ "'", str23.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i38 + "' != '" + 0+ "'", i38.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 10+ "'", i46.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "10.0.0.100"+ "'", str47.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "{}"+ "'", str59.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i69 + "' != '" + 10+ "'", i69.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "10.0.0.100"+ "'", str70.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str75.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);

  }

  @Test
  public void test468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test468"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    tp2.Server server3 = new tp2.Server();
    tp2.IP iP4 = null;
    boolean b5 = server3.connect(iP4);
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b11 = server3.connect(iP10);
    java.lang.Integer i12 = iP10.getFirst();
    java.lang.Integer i13 = iP10.getFirst();
    singlyLinkedList0.add(iP10);
    tp2.IP iP16 = singlyLinkedList0.get((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 100+ "'", i12.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 100+ "'", i13.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP16);

  }

  @Test
  public void test469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test469"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.Entry entry7 = new tp2.Entry();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i13 = iP12.getFirst();
    entry7.element = iP12;
    boolean b15 = server0.addException(iP12);
    tp2.Entry entry16 = new tp2.Entry();
    tp2.Entry entry17 = new tp2.Entry();
    java.lang.String str18 = entry17.toString();
    java.lang.String str19 = entry17.toString();
    tp2.Entry entry20 = entry17.next;
    entry16.next = entry17;
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    entry22.element = iP27;
    tp2.Entry entry30 = entry22.next;
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP32 = null;
    boolean b33 = server31.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b39 = server31.connect(iP38);
    java.lang.Integer i40 = iP38.getFirst();
    entry22.element = iP38;
    entry17.next = entry22;
    tp2.Entry entry43 = new tp2.Entry();
    java.lang.String str44 = entry43.toString();
    java.lang.String str45 = entry43.toString();
    tp2.Entry entry46 = entry43.next;
    entry22.next = entry46;
    tp2.IP iP48 = entry22.element;
    boolean b49 = server0.removeException(iP48);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList50 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList50.size = 10;
    tp2.Server server53 = new tp2.Server();
    java.lang.String str54 = server53.toString();
    server53.update();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP60.setFirst((java.lang.Integer)1);
    java.lang.Integer i63 = iP60.getSecond();
    boolean b64 = server53.addException(iP60);
    tp2.Entry entry65 = new tp2.Entry();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i71 = iP70.getFirst();
    java.lang.String str72 = iP70.toString();
    entry65.element = iP70;
    boolean b74 = server53.addException(iP70);
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b80 = server53.removeBan(iP79);
    iP79.setThird((java.lang.Integer)0);
    boolean b83 = strictlySortedSinglyLinkedList50.removeFromIP(iP79);
    boolean b84 = server0.addException(iP79);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 10+ "'", i13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[null]"+ "'", str18.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[null]"+ "'", str19.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 100+ "'", i40.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "[null]"+ "'", str44.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[null]"+ "'", str45.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str54.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 0+ "'", i63.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i71 + "' != '" + 10+ "'", i71.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "10.0.0.100"+ "'", str72.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);

  }

  @Test
  public void test470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test470"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList54 = new tp2.StrictlySortedSinglyLinkedList();
    int i55 = strictlySortedSinglyLinkedList54.size;
    tp2.IPBan iPBan56 = null;
    boolean b57 = strictlySortedSinglyLinkedList54.add(iPBan56);
    boolean b58 = strictlySortedSinglyLinkedList54.isEmpty();
    tp2.Node node59 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList60 = new tp2.StrictlySortedSinglyLinkedList();
    int i61 = strictlySortedSinglyLinkedList60.getSize();
    tp2.IPBan iPBan62 = null;
    boolean b63 = strictlySortedSinglyLinkedList60.add(iPBan62);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList64 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node65 = strictlySortedSinglyLinkedList64.header;
    strictlySortedSinglyLinkedList60.header = node65;
    node59.next = node65;
    tp2.Node node68 = node59.next;
    strictlySortedSinglyLinkedList54.header = node68;
    java.lang.String str70 = strictlySortedSinglyLinkedList54.toString();
    tp2.Node node71 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList72 = new tp2.StrictlySortedSinglyLinkedList();
    int i73 = strictlySortedSinglyLinkedList72.getSize();
    tp2.IPBan iPBan74 = null;
    boolean b75 = strictlySortedSinglyLinkedList72.add(iPBan74);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList76 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node77 = strictlySortedSinglyLinkedList76.header;
    strictlySortedSinglyLinkedList72.header = node77;
    node71.next = node77;
    tp2.Node node80 = node71.next;
    tp2.Node node81 = node71.next;
    strictlySortedSinglyLinkedList54.header = node81;
    boolean b83 = iP47.equals((java.lang.Object)strictlySortedSinglyLinkedList54);
    tp2.Node node84 = strictlySortedSinglyLinkedList54.header;
    tp2.IPBan iPBan85 = node84.element;
    java.lang.String str86 = node84.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "{}"+ "'", str70.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "[null]"+ "'", str86.equals("[null]"));

  }

  @Test
  public void test471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test471"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    tp2.Server server4 = new tp2.Server();
    tp2.IP iP5 = null;
    boolean b6 = server4.connect(iP5);
    java.lang.String str7 = server4.toString();
    java.lang.String str8 = server4.toString();
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    java.lang.String str16 = iP14.toString();
    entry9.element = iP14;
    boolean b18 = server4.connect(iP14);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    java.lang.String str26 = iP23.toString();
    boolean b27 = server4.removeBan(iP23);
    iP23.setFirst((java.lang.Integer)10);
    boolean b30 = server0.removeException(iP23);
    tp2.IPBan iPBan32 = new tp2.IPBan(iP23, (java.lang.Long)1L);
    java.lang.Long long33 = iPBan32.expires;
    tp2.IP iP34 = iPBan32.ip;
    iP34.setFourth((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L+ "'", long33.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP34);

  }

  @Test
  public void test472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test472"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP58.setSecond((java.lang.Integer)1);
    boolean b61 = server0.removeBan(iP58);
    tp2.StubTime stubTime62 = new tp2.StubTime();
    long long63 = stubTime62.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime62);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long63 == 200000L);

  }

  @Test
  public void test473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test473"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    boolean b9 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    int i11 = strictlySortedSinglyLinkedList10.getSize();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList10.add(iPBan12);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList14 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node15 = strictlySortedSinglyLinkedList14.header;
    strictlySortedSinglyLinkedList10.header = node15;
    strictlySortedSinglyLinkedList10.size = 0;
    int i19 = strictlySortedSinglyLinkedList10.size;
    tp2.Node node20 = strictlySortedSinglyLinkedList10.header;
    tp2.Node node21 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList0.header = node21;
    tp2.Node node23 = strictlySortedSinglyLinkedList0.header;
    java.lang.String str24 = node23.toString();
    tp2.Node node25 = node23.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[null]"+ "'", str24.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node25);

  }

  @Test
  public void test474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test474"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList15.size = 10;
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    server18.update();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setFirst((java.lang.Integer)1);
    java.lang.Integer i28 = iP25.getSecond();
    boolean b29 = server18.addException(iP25);
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server18.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b45 = server18.removeBan(iP44);
    iP44.setThird((java.lang.Integer)0);
    boolean b48 = strictlySortedSinglyLinkedList15.removeFromIP(iP44);
    boolean b49 = singlyLinkedList0.contains(iP44);
    int i50 = singlyLinkedList0.getSize();
    tp2.Node node51 = new tp2.Node();
    tp2.IPBan iPBan52 = null;
    node51.element = iPBan52;
    tp2.SinglyLinkedList singlyLinkedList54 = new tp2.SinglyLinkedList();
    tp2.IP iP56 = singlyLinkedList54.get((int)' ');
    tp2.Entry entry57 = new tp2.Entry();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i63 = iP62.getFirst();
    java.lang.String str64 = iP62.toString();
    entry57.element = iP62;
    boolean b66 = singlyLinkedList54.remove(iP62);
    tp2.IPBan iPBan68 = new tp2.IPBan(iP62, (java.lang.Long)1L);
    java.lang.String str69 = iPBan68.toString();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i75 = iP74.getFirst();
    java.lang.String str76 = iP74.toString();
    java.lang.String str77 = iP74.toString();
    iPBan68.setIp(iP74);
    java.lang.Long long79 = iPBan68.getExpires();
    node51.element = iPBan68;
    iPBan68.expires = 1466185870380L;
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i88 = iP87.getFirst();
    java.lang.String str89 = iP87.toString();
    java.lang.Integer i90 = iP87.getFourth();
    iPBan68.ip = iP87;
    boolean b92 = singlyLinkedList0.remove(iP87);
    boolean b93 = singlyLinkedList0.isEmpty();
    boolean b94 = singlyLinkedList0.isEmpty();
    tp2.IP iP96 = singlyLinkedList0.get(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 0+ "'", i28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 10+ "'", i63.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "10.0.0.100"+ "'", str64.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str69.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 10+ "'", i75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "10.0.0.100"+ "'", str76.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L+ "'", long79.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 10+ "'", i88.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "10.0.0.100"+ "'", str89.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i90 + "' != '" + 100+ "'", i90.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP96);

  }

  @Test
  public void test475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test475"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    iPBan14.expires = 1466185871428L;
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP18 = null;
    boolean b19 = server17.connect(iP18);
    java.lang.String str20 = server17.toString();
    java.lang.String str21 = server17.toString();
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server17.connect(iP27);
    iPBan14.ip = iP27;
    tp2.SinglyLinkedList singlyLinkedList33 = new tp2.SinglyLinkedList();
    tp2.IP iP35 = singlyLinkedList33.get((int)' ');
    tp2.Entry entry36 = new tp2.Entry();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i42 = iP41.getFirst();
    java.lang.String str43 = iP41.toString();
    entry36.element = iP41;
    boolean b45 = singlyLinkedList33.remove(iP41);
    tp2.IPBan iPBan47 = new tp2.IPBan(iP41, (java.lang.Long)1L);
    iPBan47.expires = 1466185871428L;
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP51 = null;
    boolean b52 = server50.connect(iP51);
    java.lang.String str53 = server50.toString();
    java.lang.String str54 = server50.toString();
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    entry55.element = iP60;
    boolean b64 = server50.connect(iP60);
    iPBan47.ip = iP60;
    iPBan14.ip = iP60;
    iPBan14.expires = (-1L);
    tp2.IP iP69 = iPBan14.getIp();
    java.lang.Long long70 = iPBan14.expires;
    iPBan14.expires = 1466185870901L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 10+ "'", i42.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str53.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str54.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L)+ "'", long70.equals((-1L)));

  }

  @Test
  public void test476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test476"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    int i34 = strictlySortedSinglyLinkedList0.getSize();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    java.lang.String str50 = iPBan49.toString();
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP52 = null;
    boolean b53 = server51.connect(iP52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b59 = server51.connect(iP58);
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP61 = null;
    boolean b62 = server60.connect(iP61);
    java.lang.String str63 = server60.toString();
    java.lang.String str64 = server60.toString();
    tp2.Entry entry65 = new tp2.Entry();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i71 = iP70.getFirst();
    java.lang.String str72 = iP70.toString();
    entry65.element = iP70;
    boolean b74 = server60.connect(iP70);
    boolean b75 = server51.removeException(iP70);
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP77 = null;
    boolean b78 = server76.connect(iP77);
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b84 = server76.connect(iP83);
    java.lang.Integer i85 = iP83.getFirst();
    boolean b86 = server51.connect(iP83);
    iPBan49.ip = iP83;
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP92.setFirst((java.lang.Integer)1);
    java.lang.Integer i95 = iP92.getSecond();
    iPBan49.ip = iP92;
    boolean b97 = strictlySortedSinglyLinkedList0.contains(iPBan49);
    java.lang.String str98 = iPBan49.toString();
    tp2.IP iP99 = iPBan49.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str63.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str64.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i71 + "' != '" + 10+ "'", i71.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "10.0.0.100"+ "'", str72.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i85 + "' != '" + 100+ "'", i85.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i95 + "' != '" + 0+ "'", i95.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str98 + "' != '" + "IPBan [ip=1.0.0.100, expires=1]"+ "'", str98.equals("IPBan [ip=1.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP99);

  }

  @Test
  public void test477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test477"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)'4');
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    boolean b22 = singlyLinkedList0.contains(iP19);
    java.lang.String str23 = singlyLinkedList0.toString();
    tp2.Server server24 = new tp2.Server();
    tp2.IP iP25 = null;
    boolean b26 = server24.connect(iP25);
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP31.setFirst((java.lang.Integer)1);
    boolean b34 = server24.removeException(iP31);
    tp2.Server server35 = new tp2.Server();
    tp2.IP iP36 = null;
    boolean b37 = server35.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b43 = server35.connect(iP42);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList44 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList44.size = 10;
    tp2.Server server47 = new tp2.Server();
    java.lang.String str48 = server47.toString();
    server47.update();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP54.setFirst((java.lang.Integer)1);
    java.lang.Integer i57 = iP54.getSecond();
    boolean b58 = server47.addException(iP54);
    tp2.Entry entry59 = new tp2.Entry();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i65 = iP64.getFirst();
    java.lang.String str66 = iP64.toString();
    entry59.element = iP64;
    boolean b68 = server47.addException(iP64);
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b74 = server47.removeBan(iP73);
    iP73.setThird((java.lang.Integer)0);
    boolean b77 = strictlySortedSinglyLinkedList44.removeFromIP(iP73);
    tp2.Server server78 = new tp2.Server();
    java.lang.String str79 = server78.toString();
    server78.update();
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP85.setFirst((java.lang.Integer)1);
    java.lang.Integer i88 = iP85.getSecond();
    boolean b89 = server78.addException(iP85);
    boolean b90 = strictlySortedSinglyLinkedList44.removeFromIP(iP85);
    boolean b91 = server35.connect(iP85);
    boolean b92 = server24.removeBan(iP85);
    boolean b93 = singlyLinkedList0.remove(iP85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "()"+ "'", str23.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 0+ "'", i57.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 10+ "'", i65.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "10.0.0.100"+ "'", str66.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str79.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 0+ "'", i88.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);

  }

  @Test
  public void test478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test478"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    int i34 = strictlySortedSinglyLinkedList0.getSize();
    int i35 = strictlySortedSinglyLinkedList0.size;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList36 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node37 = strictlySortedSinglyLinkedList36.header;
    tp2.Node node38 = new tp2.Node();
    tp2.IPBan iPBan39 = null;
    node38.element = iPBan39;
    tp2.IPBan iPBan41 = null;
    node38.element = iPBan41;
    strictlySortedSinglyLinkedList36.header = node38;
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b49 = strictlySortedSinglyLinkedList36.containsIP(iP48);
    boolean b50 = strictlySortedSinglyLinkedList0.containsIP(iP48);
    tp2.IPBan iPBan52 = new tp2.IPBan(iP48, (java.lang.Long)1466185878456L);
    tp2.IP iP53 = iPBan52.ip;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP53);

  }

  @Test
  public void test479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test479"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    int i9 = strictlySortedSinglyLinkedList0.getSize();
    int i10 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str11 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "{[null]}"+ "'", str11.equals("{[null]}"));

  }

  @Test
  public void test480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test480"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    boolean b39 = iP5.equals((java.lang.Object)iPBan26);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    int i41 = singlyLinkedList40.getSize();
    java.lang.String str42 = singlyLinkedList40.toString();
    int i43 = singlyLinkedList40.getSize();
    java.util.Set<tp2.IP> set_iP44 = null;
    boolean b45 = singlyLinkedList40.repOk(set_iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b51 = singlyLinkedList40.remove(iP50);
    iPBan26.setIp(iP50);
    tp2.SinglyLinkedList singlyLinkedList53 = new tp2.SinglyLinkedList();
    tp2.IP iP55 = singlyLinkedList53.get((int)' ');
    tp2.Entry entry56 = new tp2.Entry();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i62 = iP61.getFirst();
    java.lang.String str63 = iP61.toString();
    entry56.element = iP61;
    boolean b65 = singlyLinkedList53.remove(iP61);
    tp2.IPBan iPBan67 = new tp2.IPBan(iP61, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList68 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan69 = null;
    boolean b70 = strictlySortedSinglyLinkedList68.contains(iPBan69);
    int i71 = strictlySortedSinglyLinkedList68.getSize();
    tp2.IPBan iPBan73 = strictlySortedSinglyLinkedList68.get((int)'#');
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP78.setSecond((java.lang.Integer)(-1));
    boolean b81 = strictlySortedSinglyLinkedList68.removeFromIP(iP78);
    iPBan67.ip = iP78;
    java.lang.Integer i83 = iP78.getThird();
    iPBan26.setIp(iP78);
    java.lang.Long long85 = iPBan26.expires;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "()"+ "'", str42.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i62 + "' != '" + 10+ "'", i62.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "10.0.0.100"+ "'", str63.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i83 + "' != '" + 0+ "'", i83.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1L+ "'", long85.equals(1L));

  }

  @Test
  public void test481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test481"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    int i34 = strictlySortedSinglyLinkedList0.getSize();
    boolean b35 = strictlySortedSinglyLinkedList0.isEmpty();
    java.lang.String str36 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "{}"+ "'", str36.equals("{}"));

  }

  @Test
  public void test482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test482"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = server0.connect(iP10);
    server0.update();
    server0.update();
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    server17.update();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP24.setFirst((java.lang.Integer)1);
    java.lang.Integer i27 = iP24.getSecond();
    boolean b28 = server17.addException(iP24);
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = server17.addException(iP34);
    java.lang.Integer i39 = iP34.getFirst();
    java.lang.String str40 = iP34.toString();
    boolean b41 = server0.removeBan(iP34);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList42 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node43 = strictlySortedSinglyLinkedList42.header;
    tp2.Node node44 = new tp2.Node();
    tp2.IPBan iPBan45 = null;
    node44.element = iPBan45;
    tp2.IPBan iPBan47 = null;
    node44.element = iPBan47;
    strictlySortedSinglyLinkedList42.header = node44;
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b55 = strictlySortedSinglyLinkedList42.containsIP(iP54);
    java.lang.String str56 = iP54.toString();
    boolean b57 = server0.removeBan(iP54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 0+ "'", i27.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + 10+ "'", i39.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "10.0.0.100"+ "'", str40.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "10.0.0.0"+ "'", str56.equals("10.0.0.0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);

  }

  @Test
  public void test483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test483"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan5 = strictlySortedSinglyLinkedList0.get((int)'#');
    strictlySortedSinglyLinkedList0.size = (short)100;
    tp2.SinglyLinkedList singlyLinkedList8 = new tp2.SinglyLinkedList();
    java.lang.String str9 = singlyLinkedList8.toString();
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP11 = null;
    boolean b12 = server10.connect(iP11);
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b18 = server10.connect(iP17);
    tp2.Server server19 = new tp2.Server();
    tp2.IP iP20 = null;
    boolean b21 = server19.connect(iP20);
    java.lang.String str22 = server19.toString();
    java.lang.String str23 = server19.toString();
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = server19.connect(iP29);
    boolean b34 = server10.removeException(iP29);
    boolean b35 = singlyLinkedList8.remove(iP29);
    boolean b36 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    int i37 = strictlySortedSinglyLinkedList0.size;
    java.util.Set<tp2.IPBan> set_iPBan38 = null;
    boolean b39 = strictlySortedSinglyLinkedList0.repOk(set_iPBan38);
    tp2.IPBan iPBan41 = strictlySortedSinglyLinkedList0.get((int)' ');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "()"+ "'", str9.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan41);

  }

  @Test
  public void test484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test484"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    tp2.IPBan iPBan51 = strictlySortedSinglyLinkedList0.get((int)' ');
    tp2.IPBan iPBan53 = strictlySortedSinglyLinkedList0.get((int)(byte)100);
    tp2.IPBan iPBan55 = strictlySortedSinglyLinkedList0.get(32);
    int i56 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);

  }

  @Test
  public void test485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test485"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = server0.connect(iP10);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    java.lang.String str22 = iP19.toString();
    boolean b23 = server0.removeBan(iP19);
    java.lang.Integer i24 = iP19.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 0+ "'", i24.equals(0));

  }

  @Test
  public void test486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test486"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.IP iP8 = entry0.element;
    tp2.IPBan iPBan10 = new tp2.IPBan(iP8, (java.lang.Long)1466185871942L);
    iP8.setThird((java.lang.Integer)32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP8);

  }

  @Test
  public void test487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test487"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    boolean b9 = strictlySortedSinglyLinkedList0.isEmpty();
    int i10 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan12 = strictlySortedSinglyLinkedList0.get((int)(short)10);
    tp2.IPBan iPBan13 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b14 = strictlySortedSinglyLinkedList0.add(iPBan13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan12);

  }

  @Test
  public void test488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test488"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.IPBan iPBan3 = node0.element;
    tp2.Node node4 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    int i6 = strictlySortedSinglyLinkedList5.getSize();
    tp2.IPBan iPBan7 = null;
    boolean b8 = strictlySortedSinglyLinkedList5.add(iPBan7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node10 = strictlySortedSinglyLinkedList9.header;
    strictlySortedSinglyLinkedList5.header = node10;
    node4.next = node10;
    tp2.Node node13 = node4.next;
    tp2.Node node14 = node4.next;
    node0.next = node14;
    tp2.Node node16 = node14.next;
    tp2.Node node17 = node14.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node17);

  }

  @Test
  public void test489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test489"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b24 = server16.connect(iP23);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP26 = null;
    boolean b27 = server25.connect(iP26);
    java.lang.String str28 = server25.toString();
    java.lang.String str29 = server25.toString();
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server25.connect(iP35);
    boolean b40 = server16.removeException(iP35);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP42 = null;
    boolean b43 = server41.connect(iP42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b49 = server41.connect(iP48);
    java.lang.Integer i50 = iP48.getFirst();
    boolean b51 = server16.connect(iP48);
    iPBan14.ip = iP48;
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    java.lang.Integer i60 = iP57.getSecond();
    iPBan14.ip = iP57;
    java.lang.String str62 = iPBan14.toString();
    iPBan14.expires = 1466185871428L;
    iPBan14.expires = 10L;
    iPBan14.expires = 1466185890281L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 100+ "'", i50.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 0+ "'", i60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "IPBan [ip=1.0.0.100, expires=1]"+ "'", str62.equals("IPBan [ip=1.0.0.100, expires=1]"));

  }

  @Test
  public void test490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test490"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList2 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList2.size = 10;
    tp2.Server server5 = new tp2.Server();
    java.lang.String str6 = server5.toString();
    server5.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP12.setFirst((java.lang.Integer)1);
    java.lang.Integer i15 = iP12.getSecond();
    boolean b16 = server5.addException(iP12);
    tp2.Entry entry17 = new tp2.Entry();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i23 = iP22.getFirst();
    java.lang.String str24 = iP22.toString();
    entry17.element = iP22;
    boolean b26 = server5.addException(iP22);
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b32 = server5.removeBan(iP31);
    iP31.setThird((java.lang.Integer)0);
    boolean b35 = strictlySortedSinglyLinkedList2.removeFromIP(iP31);
    java.lang.String str36 = strictlySortedSinglyLinkedList2.toString();
    tp2.SinglyLinkedList singlyLinkedList37 = new tp2.SinglyLinkedList();
    tp2.IP iP39 = singlyLinkedList37.get((int)' ');
    tp2.Entry entry40 = new tp2.Entry();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i46 = iP45.getFirst();
    java.lang.String str47 = iP45.toString();
    entry40.element = iP45;
    boolean b49 = singlyLinkedList37.remove(iP45);
    tp2.IPBan iPBan51 = new tp2.IPBan(iP45, (java.lang.Long)1L);
    java.lang.String str52 = iPBan51.toString();
    boolean b53 = strictlySortedSinglyLinkedList2.contains(iPBan51);
    tp2.IPBan iPBan55 = strictlySortedSinglyLinkedList2.get((int)(short)0);
    int i56 = strictlySortedSinglyLinkedList2.getSize();
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP58 = null;
    boolean b59 = server57.connect(iP58);
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b65 = server57.connect(iP64);
    java.lang.Integer i66 = iP64.getFirst();
    boolean b67 = strictlySortedSinglyLinkedList2.removeFromIP(iP64);
    boolean b68 = singlyLinkedList0.contains(iP64);
    tp2.IP iP70 = singlyLinkedList0.get((int)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str6.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 0+ "'", i15.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 10+ "'", i23.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "10.0.0.100"+ "'", str24.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "{}"+ "'", str36.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 10+ "'", i46.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "10.0.0.100"+ "'", str47.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str52.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i66 + "' != '" + 100+ "'", i66.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP70);

  }

  @Test
  public void test491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test491"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    tp2.Node node12 = new tp2.Node();
    tp2.IPBan iPBan13 = null;
    node12.element = iPBan13;
    tp2.SinglyLinkedList singlyLinkedList15 = new tp2.SinglyLinkedList();
    tp2.IP iP17 = singlyLinkedList15.get((int)' ');
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = singlyLinkedList15.remove(iP23);
    tp2.IPBan iPBan29 = new tp2.IPBan(iP23, (java.lang.Long)1L);
    java.lang.String str30 = iPBan29.toString();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    java.lang.String str38 = iP35.toString();
    iPBan29.setIp(iP35);
    java.lang.Long long40 = iPBan29.getExpires();
    node12.element = iPBan29;
    boolean b42 = iP8.equals((java.lang.Object)iPBan29);
    tp2.SinglyLinkedList singlyLinkedList43 = new tp2.SinglyLinkedList();
    int i44 = singlyLinkedList43.getSize();
    java.lang.String str45 = singlyLinkedList43.toString();
    int i46 = singlyLinkedList43.getSize();
    java.util.Set<tp2.IP> set_iP47 = null;
    boolean b48 = singlyLinkedList43.repOk(set_iP47);
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b54 = singlyLinkedList43.remove(iP53);
    iPBan29.setIp(iP53);
    iPBan29.setExpires((java.lang.Long)1466185870380L);
    java.lang.String str58 = iPBan29.toString();
    boolean b59 = strictlySortedSinglyLinkedList0.add(iPBan29);
    java.lang.Long long60 = iPBan29.expires;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str30.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L+ "'", long40.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "()"+ "'", str45.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "IPBan [ip=100.10.-1.10, expires=1466185870380]"+ "'", str58.equals("IPBan [ip=100.10.-1.10, expires=1466185870380]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1466185870380L+ "'", long60.equals(1466185870380L));

  }

  @Test
  public void test492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test492"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    boolean b9 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    int i11 = strictlySortedSinglyLinkedList10.getSize();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList10.add(iPBan12);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList14 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node15 = strictlySortedSinglyLinkedList14.header;
    strictlySortedSinglyLinkedList10.header = node15;
    strictlySortedSinglyLinkedList10.size = 0;
    int i19 = strictlySortedSinglyLinkedList10.size;
    tp2.Node node20 = strictlySortedSinglyLinkedList10.header;
    tp2.Node node21 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList0.header = node21;
    tp2.Node node23 = strictlySortedSinglyLinkedList0.header;
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)100);
    iP28.setFourth((java.lang.Integer)1);
    boolean b31 = strictlySortedSinglyLinkedList0.containsIP(iP28);
    tp2.SinglyLinkedList singlyLinkedList32 = new tp2.SinglyLinkedList();
    tp2.IP iP34 = singlyLinkedList32.get((int)' ');
    tp2.Entry entry35 = new tp2.Entry();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i41 = iP40.getFirst();
    java.lang.String str42 = iP40.toString();
    entry35.element = iP40;
    boolean b44 = singlyLinkedList32.remove(iP40);
    tp2.IPBan iPBan46 = new tp2.IPBan(iP40, (java.lang.Long)1L);
    java.lang.String str47 = iPBan46.toString();
    iPBan46.setExpires((java.lang.Long)0L);
    java.lang.Long long50 = iPBan46.expires;
    tp2.IP iP51 = iPBan46.ip;
    boolean b52 = strictlySortedSinglyLinkedList0.contains(iPBan46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i41 + "' != '" + 10+ "'", i41.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str47.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L+ "'", long50.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);

  }

  @Test
  public void test493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test493"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    boolean b10 = server0.removeException(iP7);
    tp2.SinglyLinkedList singlyLinkedList11 = new tp2.SinglyLinkedList();
    tp2.IP iP13 = singlyLinkedList11.get((int)' ');
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    entry14.element = iP19;
    boolean b23 = singlyLinkedList11.remove(iP19);
    tp2.IPBan iPBan25 = new tp2.IPBan(iP19, (java.lang.Long)1L);
    java.lang.String str26 = iPBan25.toString();
    iPBan25.setExpires((java.lang.Long)0L);
    java.lang.Long long29 = iPBan25.expires;
    tp2.IP iP30 = iPBan25.ip;
    java.lang.String str31 = iPBan25.toString();
    tp2.IP iP32 = iPBan25.getIp();
    iP32.setFirst((java.lang.Integer)100);
    boolean b35 = server0.addException(iP32);
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP40.setThird((java.lang.Integer)1);
    java.lang.Object obj43 = null;
    boolean b44 = iP40.equals(obj43);
    iP40.setThird((java.lang.Integer)0);
    boolean b47 = server0.removeException(iP40);
    java.lang.String str48 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str26.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L+ "'", long29.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str31.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=null, exceptions=([100.0.0.100]), bans={}]"+ "'", str48.equals("Server [lastUpdate=null, exceptions=([100.0.0.100]), bans={}]"));

  }

  @Test
  public void test494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test494"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    java.util.Set<tp2.IPBan> set_iPBan5 = null;
    boolean b6 = strictlySortedSinglyLinkedList0.repOk(set_iPBan5);
    int i7 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test495"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i5 = iP4.getFirst();
    java.lang.String str6 = iP4.toString();
    java.lang.String str7 = iP4.toString();
    iP4.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan11 = new tp2.IPBan(iP4, (java.lang.Long)0L);
    java.lang.String str12 = iPBan11.toString();
    java.lang.String str13 = iPBan11.toString();
    tp2.IP iP14 = iPBan11.getIp();
    java.lang.Integer i15 = iP14.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i5 + "' != '" + 10+ "'", i5.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "10.0.0.100"+ "'", str6.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "IPBan [ip=10.0.-1.100, expires=0]"+ "'", str12.equals("IPBan [ip=10.0.-1.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "IPBan [ip=10.0.-1.100, expires=0]"+ "'", str13.equals("IPBan [ip=10.0.-1.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 0+ "'", i15.equals(0));

  }

  @Test
  public void test496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test496"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = server0.connect(iP10);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    java.lang.String str22 = iP19.toString();
    boolean b23 = server0.removeBan(iP19);
    server0.update();
    server0.update();
    tp2.SinglyLinkedList singlyLinkedList26 = new tp2.SinglyLinkedList();
    tp2.IP iP28 = singlyLinkedList26.get((int)' ');
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = singlyLinkedList26.remove(iP34);
    tp2.IPBan iPBan40 = new tp2.IPBan(iP34, (java.lang.Long)1L);
    java.lang.String str41 = iPBan40.toString();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i47 = iP46.getFirst();
    java.lang.String str48 = iP46.toString();
    java.lang.String str49 = iP46.toString();
    iPBan40.setIp(iP46);
    java.lang.Integer i51 = iP46.getFourth();
    java.lang.Integer i52 = iP46.getFirst();
    boolean b53 = server0.connect(iP46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str41.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 10+ "'", i47.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "10.0.0.100"+ "'", str48.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 100+ "'", i51.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i52 + "' != '" + 10+ "'", i52.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);

  }

  @Test
  public void test497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test497"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList15.size = 10;
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    server18.update();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setFirst((java.lang.Integer)1);
    java.lang.Integer i28 = iP25.getSecond();
    boolean b29 = server18.addException(iP25);
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server18.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b45 = server18.removeBan(iP44);
    iP44.setThird((java.lang.Integer)0);
    boolean b48 = strictlySortedSinglyLinkedList15.removeFromIP(iP44);
    boolean b49 = singlyLinkedList0.contains(iP44);
    int i50 = singlyLinkedList0.getSize();
    tp2.Node node51 = new tp2.Node();
    tp2.IPBan iPBan52 = null;
    node51.element = iPBan52;
    tp2.SinglyLinkedList singlyLinkedList54 = new tp2.SinglyLinkedList();
    tp2.IP iP56 = singlyLinkedList54.get((int)' ');
    tp2.Entry entry57 = new tp2.Entry();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i63 = iP62.getFirst();
    java.lang.String str64 = iP62.toString();
    entry57.element = iP62;
    boolean b66 = singlyLinkedList54.remove(iP62);
    tp2.IPBan iPBan68 = new tp2.IPBan(iP62, (java.lang.Long)1L);
    java.lang.String str69 = iPBan68.toString();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i75 = iP74.getFirst();
    java.lang.String str76 = iP74.toString();
    java.lang.String str77 = iP74.toString();
    iPBan68.setIp(iP74);
    java.lang.Long long79 = iPBan68.getExpires();
    node51.element = iPBan68;
    iPBan68.expires = 1466185870380L;
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i88 = iP87.getFirst();
    java.lang.String str89 = iP87.toString();
    java.lang.Integer i90 = iP87.getFourth();
    iPBan68.ip = iP87;
    boolean b92 = singlyLinkedList0.remove(iP87);
    boolean b93 = singlyLinkedList0.isEmpty();
    boolean b94 = singlyLinkedList0.isEmpty();
    java.lang.String str95 = singlyLinkedList0.toString();
    java.lang.String str96 = singlyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 0+ "'", i28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 10+ "'", i63.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "10.0.0.100"+ "'", str64.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str69.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 10+ "'", i75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "10.0.0.100"+ "'", str76.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L+ "'", long79.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 10+ "'", i88.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "10.0.0.100"+ "'", str89.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i90 + "' != '" + 100+ "'", i90.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "()"+ "'", str95.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str96 + "' != '" + "()"+ "'", str96.equals("()"));

  }

  @Test
  public void test498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test498"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    java.lang.String str14 = iP11.toString();
    iP11.setThird((java.lang.Integer)(-1));
    boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP11);
    boolean b18 = strictlySortedSinglyLinkedList0.isEmpty();
    int i19 = strictlySortedSinglyLinkedList0.getSize();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList20 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan21 = null;
    boolean b22 = strictlySortedSinglyLinkedList20.contains(iPBan21);
    tp2.Node node23 = new tp2.Node();
    tp2.IPBan iPBan24 = null;
    node23.element = iPBan24;
    tp2.IPBan iPBan26 = null;
    node23.element = iPBan26;
    tp2.IPBan iPBan28 = node23.element;
    strictlySortedSinglyLinkedList20.header = node23;
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP31 = null;
    boolean b32 = server30.connect(iP31);
    java.lang.String str33 = server30.toString();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP35 = null;
    boolean b36 = server34.connect(iP35);
    java.lang.String str37 = server34.toString();
    java.lang.String str38 = server34.toString();
    tp2.Entry entry39 = new tp2.Entry();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i45 = iP44.getFirst();
    java.lang.String str46 = iP44.toString();
    entry39.element = iP44;
    boolean b48 = server34.connect(iP44);
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i54 = iP53.getFirst();
    java.lang.String str55 = iP53.toString();
    java.lang.String str56 = iP53.toString();
    boolean b57 = server34.removeBan(iP53);
    iP53.setFirst((java.lang.Integer)10);
    boolean b60 = server30.removeException(iP53);
    tp2.IPBan iPBan62 = new tp2.IPBan(iP53, (java.lang.Long)1L);
    java.lang.Long long63 = iPBan62.expires;
    tp2.IP iP64 = iPBan62.ip;
    boolean b65 = strictlySortedSinglyLinkedList20.removeFromIP(iP64);
    boolean b66 = strictlySortedSinglyLinkedList0.containsIP(iP64);
    java.lang.String str67 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 10+ "'", i45.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "10.0.0.100"+ "'", str46.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "10.0.0.100"+ "'", str55.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "10.0.0.100"+ "'", str56.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L+ "'", long63.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "{}"+ "'", str67.equals("{}"));

  }

  @Test
  public void test499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test499"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP58.setSecond((java.lang.Integer)1);
    boolean b61 = server0.removeBan(iP58);
    tp2.RealTime realTime62 = new tp2.RealTime();
    long long63 = realTime62.getCurrentTime();
    long long64 = realTime62.getCurrentTime();
    server0.setTime((tp2.ITime)realTime62);
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP67 = null;
    boolean b68 = server66.connect(iP67);
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b74 = server66.connect(iP73);
    boolean b75 = server0.addException(iP73);
    java.lang.String str76 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long63 == 1466185894241L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long64 == 1466185894241L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Server [lastUpdate=1466185894239, exceptions=([100.10.-1.10][10.0.0.100][1.0.0.100]), bans={}]"+ "'", str76.equals("Server [lastUpdate=1466185894239, exceptions=([100.10.-1.10][10.0.0.100][1.0.0.100]), bans={}]"));

  }

  @Test
  public void test500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test500"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    boolean b3 = singlyLinkedList0.isEmpty();
    tp2.IP iP4 = null;
    boolean b5 = singlyLinkedList0.remove(iP4);
    boolean b6 = singlyLinkedList0.isEmpty();
    tp2.SinglyLinkedList singlyLinkedList7 = new tp2.SinglyLinkedList();
    tp2.IP iP9 = singlyLinkedList7.get((int)' ');
    tp2.Entry entry10 = new tp2.Entry();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i16 = iP15.getFirst();
    java.lang.String str17 = iP15.toString();
    entry10.element = iP15;
    boolean b19 = singlyLinkedList7.remove(iP15);
    tp2.IPBan iPBan21 = new tp2.IPBan(iP15, (java.lang.Long)1L);
    java.lang.String str22 = iPBan21.toString();
    iPBan21.setExpires((java.lang.Long)0L);
    java.lang.Long long25 = iPBan21.expires;
    tp2.IP iP26 = iPBan21.ip;
    java.lang.String str27 = iPBan21.toString();
    tp2.IP iP28 = iPBan21.getIp();
    iP28.setFirst((java.lang.Integer)100);
    java.lang.Integer i31 = iP28.getFirst();
    singlyLinkedList0.add(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 10+ "'", i16.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "10.0.0.100"+ "'", str17.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str22.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L+ "'", long25.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 100+ "'", i31.equals(100));

  }

}
