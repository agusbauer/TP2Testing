package tp2;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test001"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    int i3 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b11 = singlyLinkedList0.remove(iP10);
    boolean b12 = singlyLinkedList0.isEmpty();
    boolean b13 = singlyLinkedList0.isEmpty();
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    entry14.element = iP19;
    tp2.IP iP23 = entry14.element;
    java.lang.String str24 = iP23.toString();
    singlyLinkedList0.add(iP23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "10.0.0.100"+ "'", str24.equals("10.0.0.100"));

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test002"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP5 = entry0.element;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.Entry entry7 = new tp2.Entry();
    java.lang.String str8 = entry7.toString();
    java.lang.String str9 = entry7.toString();
    tp2.Entry entry10 = entry7.next;
    entry6.next = entry7;
    entry0.next = entry6;
    tp2.Entry entry13 = entry0.next;
    tp2.Entry entry14 = entry13.next;
    java.lang.String str15 = entry13.toString();
    tp2.IP iP16 = entry13.element;
    tp2.SinglyLinkedList singlyLinkedList17 = new tp2.SinglyLinkedList();
    tp2.IP iP19 = singlyLinkedList17.get((int)' ');
    tp2.Entry entry20 = new tp2.Entry();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    entry20.element = iP25;
    boolean b29 = singlyLinkedList17.remove(iP25);
    tp2.IPBan iPBan31 = new tp2.IPBan(iP25, (java.lang.Long)1L);
    iPBan31.expires = 1466185871428L;
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP35 = null;
    boolean b36 = server34.connect(iP35);
    java.lang.String str37 = server34.toString();
    java.lang.String str38 = server34.toString();
    tp2.Entry entry39 = new tp2.Entry();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i45 = iP44.getFirst();
    java.lang.String str46 = iP44.toString();
    entry39.element = iP44;
    boolean b48 = server34.connect(iP44);
    iPBan31.ip = iP44;
    tp2.IP iP50 = iPBan31.ip;
    tp2.IP iP51 = iPBan31.getIp();
    java.lang.Integer i52 = iP51.getSecond();
    entry13.element = iP51;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[null]"+ "'", str8.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[null]"+ "'", str15.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 10+ "'", i45.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "10.0.0.100"+ "'", str46.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i52 + "' != '" + 0+ "'", i52.equals(0));

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test003"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get((int)' ');
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    boolean b17 = singlyLinkedList5.remove(iP13);
    tp2.IPBan iPBan19 = new tp2.IPBan(iP13, (java.lang.Long)1L);
    java.lang.String str20 = iPBan19.toString();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    java.lang.String str28 = iP25.toString();
    iPBan19.setIp(iP25);
    java.lang.Integer i30 = iP25.getFirst();
    boolean b31 = server0.removeException(iP25);
    tp2.SinglyLinkedList singlyLinkedList32 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP33 = null;
    boolean b34 = singlyLinkedList32.repOk(set_iP33);
    boolean b35 = singlyLinkedList32.isEmpty();
    tp2.Node node36 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList37 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList37.size = 10;
    tp2.Server server40 = new tp2.Server();
    java.lang.String str41 = server40.toString();
    server40.update();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP47.setFirst((java.lang.Integer)1);
    java.lang.Integer i50 = iP47.getSecond();
    boolean b51 = server40.addException(iP47);
    tp2.Entry entry52 = new tp2.Entry();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i58 = iP57.getFirst();
    java.lang.String str59 = iP57.toString();
    entry52.element = iP57;
    boolean b61 = server40.addException(iP57);
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b67 = server40.removeBan(iP66);
    iP66.setThird((java.lang.Integer)0);
    boolean b70 = strictlySortedSinglyLinkedList37.removeFromIP(iP66);
    java.lang.String str71 = strictlySortedSinglyLinkedList37.toString();
    tp2.SinglyLinkedList singlyLinkedList72 = new tp2.SinglyLinkedList();
    tp2.IP iP74 = singlyLinkedList72.get((int)' ');
    tp2.Entry entry75 = new tp2.Entry();
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i81 = iP80.getFirst();
    java.lang.String str82 = iP80.toString();
    entry75.element = iP80;
    boolean b84 = singlyLinkedList72.remove(iP80);
    tp2.IPBan iPBan86 = new tp2.IPBan(iP80, (java.lang.Long)1L);
    java.lang.String str87 = iPBan86.toString();
    boolean b88 = strictlySortedSinglyLinkedList37.contains(iPBan86);
    node36.element = iPBan86;
    iPBan86.setExpires((java.lang.Long)1466185871497L);
    tp2.IP iP92 = iPBan86.getIp();
    boolean b93 = singlyLinkedList32.contains(iP92);
    java.lang.Integer i94 = iP92.getThird();
    java.lang.Integer i95 = iP92.getFirst();
    boolean b96 = server0.addException(iP92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 0+ "'", i50.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 10+ "'", i58.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "10.0.0.100"+ "'", str59.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "{}"+ "'", str71.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i81 + "' != '" + 10+ "'", i81.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "10.0.0.100"+ "'", str82.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str87.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i94 + "' != '" + 0+ "'", i94.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i95 + "' != '" + 10+ "'", i95.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test004"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.ip;
    java.lang.String str20 = iPBan14.toString();
    tp2.IP iP21 = iPBan14.getIp();
    iP21.setFirst((java.lang.Integer)100);
    tp2.SinglyLinkedList singlyLinkedList24 = new tp2.SinglyLinkedList();
    tp2.IP iP26 = singlyLinkedList24.get((int)' ');
    tp2.Entry entry27 = new tp2.Entry();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    entry27.element = iP32;
    boolean b36 = singlyLinkedList24.remove(iP32);
    tp2.IP iP38 = singlyLinkedList24.get((int)'4');
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    java.lang.String str46 = iP43.toString();
    iP43.setThird((java.lang.Integer)(-1));
    boolean b49 = singlyLinkedList24.contains(iP43);
    boolean b50 = iP21.equals((java.lang.Object)b49);
    java.lang.Integer i51 = iP21.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "10.0.0.100"+ "'", str46.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test005"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP5 = entry0.element;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.Entry entry7 = new tp2.Entry();
    java.lang.String str8 = entry7.toString();
    java.lang.String str9 = entry7.toString();
    tp2.Entry entry10 = entry7.next;
    entry6.next = entry7;
    entry0.next = entry6;
    tp2.Entry entry13 = entry0.next;
    tp2.Entry entry14 = new tp2.Entry();
    tp2.Entry entry15 = new tp2.Entry();
    java.lang.String str16 = entry15.toString();
    java.lang.String str17 = entry15.toString();
    tp2.Entry entry18 = entry15.next;
    entry14.next = entry15;
    tp2.Entry entry20 = new tp2.Entry();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    entry20.element = iP25;
    tp2.Entry entry28 = entry20.next;
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP30 = null;
    boolean b31 = server29.connect(iP30);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b37 = server29.connect(iP36);
    java.lang.Integer i38 = iP36.getFirst();
    entry20.element = iP36;
    entry15.next = entry20;
    tp2.Entry entry41 = new tp2.Entry();
    java.lang.String str42 = entry41.toString();
    java.lang.String str43 = entry41.toString();
    tp2.Entry entry44 = entry41.next;
    entry20.next = entry44;
    tp2.IP iP46 = entry20.element;
    entry0.next = entry20;
    tp2.Entry entry48 = new tp2.Entry();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i54 = iP53.getFirst();
    java.lang.String str55 = iP53.toString();
    entry48.element = iP53;
    tp2.Entry entry57 = new tp2.Entry();
    tp2.Entry entry58 = new tp2.Entry();
    java.lang.String str59 = entry58.toString();
    java.lang.String str60 = entry58.toString();
    tp2.Entry entry61 = entry58.next;
    entry57.next = entry58;
    tp2.IP iP63 = entry57.element;
    entry48.next = entry57;
    tp2.SinglyLinkedList singlyLinkedList65 = new tp2.SinglyLinkedList();
    int i66 = singlyLinkedList65.getSize();
    java.lang.String str67 = singlyLinkedList65.toString();
    int i68 = singlyLinkedList65.getSize();
    java.util.Set<tp2.IP> set_iP69 = null;
    boolean b70 = singlyLinkedList65.repOk(set_iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b76 = singlyLinkedList65.remove(iP75);
    entry48.element = iP75;
    entry0.next = entry48;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[null]"+ "'", str8.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[null]"+ "'", str16.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[null]"+ "'", str17.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i38 + "' != '" + 100+ "'", i38.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "[null]"+ "'", str42.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[null]"+ "'", str43.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "10.0.0.100"+ "'", str55.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "[null]"+ "'", str59.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "[null]"+ "'", str60.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "()"+ "'", str67.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test006"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    entry6.element = iP11;
    tp2.Entry entry14 = entry6.next;
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP16 = null;
    boolean b17 = server15.connect(iP16);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b23 = server15.connect(iP22);
    java.lang.Integer i24 = iP22.getFirst();
    entry6.element = iP22;
    entry1.next = entry6;
    tp2.Entry entry27 = entry1.next;
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP35.setFirst((java.lang.Integer)1);
    boolean b38 = server28.removeException(iP35);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList39 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan40 = null;
    boolean b41 = strictlySortedSinglyLinkedList39.contains(iPBan40);
    int i42 = strictlySortedSinglyLinkedList39.getSize();
    tp2.IPBan iPBan44 = strictlySortedSinglyLinkedList39.get((int)'#');
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP49.setSecond((java.lang.Integer)(-1));
    boolean b52 = strictlySortedSinglyLinkedList39.removeFromIP(iP49);
    boolean b53 = server28.removeBan(iP49);
    tp2.SinglyLinkedList singlyLinkedList54 = new tp2.SinglyLinkedList();
    tp2.IP iP56 = singlyLinkedList54.get((int)' ');
    tp2.Entry entry57 = new tp2.Entry();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i63 = iP62.getFirst();
    java.lang.String str64 = iP62.toString();
    entry57.element = iP62;
    boolean b66 = singlyLinkedList54.remove(iP62);
    boolean b67 = iP49.equals((java.lang.Object)iP62);
    iP62.setFirst((java.lang.Integer)1);
    java.lang.Integer i70 = iP62.getFourth();
    entry27.element = iP62;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 100+ "'", i24.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 10+ "'", i63.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "10.0.0.100"+ "'", str64.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 100+ "'", i70.equals(100));

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test007"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan6 = strictlySortedSinglyLinkedList0.get(100);
    tp2.IPBan iPBan8 = strictlySortedSinglyLinkedList0.get((int)(byte)100);
    tp2.Node node9 = strictlySortedSinglyLinkedList0.header;
    boolean b10 = strictlySortedSinglyLinkedList0.isEmpty();
    boolean b11 = strictlySortedSinglyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test008"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.Entry entry7 = new tp2.Entry();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i13 = iP12.getFirst();
    entry7.element = iP12;
    boolean b15 = server0.addException(iP12);
    tp2.SinglyLinkedList singlyLinkedList16 = new tp2.SinglyLinkedList();
    int i17 = singlyLinkedList16.getSize();
    java.lang.String str18 = singlyLinkedList16.toString();
    int i19 = singlyLinkedList16.getSize();
    java.util.Set<tp2.IP> set_iP20 = null;
    boolean b21 = singlyLinkedList16.repOk(set_iP20);
    int i22 = singlyLinkedList16.getSize();
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP24 = null;
    boolean b25 = server23.connect(iP24);
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b31 = server23.connect(iP30);
    java.lang.Integer i32 = iP30.getFirst();
    boolean b33 = singlyLinkedList16.contains(iP30);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP38.setThird((java.lang.Integer)1);
    java.lang.Object obj41 = null;
    boolean b42 = iP38.equals(obj41);
    iP38.setThird((java.lang.Integer)0);
    singlyLinkedList16.add(iP38);
    boolean b46 = server0.addException(iP38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 10+ "'", i13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "()"+ "'", str18.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 100+ "'", i32.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test009"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    boolean b3 = singlyLinkedList0.isEmpty();
    java.lang.String str4 = singlyLinkedList0.toString();
    boolean b5 = singlyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "()"+ "'", str4.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test010"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    boolean b3 = singlyLinkedList0.isEmpty();
    tp2.Server server4 = new tp2.Server();
    tp2.IP iP5 = null;
    boolean b6 = server4.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b12 = server4.connect(iP11);
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP14 = null;
    boolean b15 = server13.connect(iP14);
    java.lang.String str16 = server13.toString();
    java.lang.String str17 = server13.toString();
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = server13.connect(iP23);
    boolean b28 = server4.removeException(iP23);
    java.lang.Integer i29 = iP23.getThird();
    boolean b30 = singlyLinkedList0.contains(iP23);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList31 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList31.size = 10;
    tp2.Entry entry34 = new tp2.Entry();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    entry34.element = iP39;
    tp2.Node node43 = new tp2.Node();
    tp2.IPBan iPBan44 = null;
    node43.element = iPBan44;
    tp2.SinglyLinkedList singlyLinkedList46 = new tp2.SinglyLinkedList();
    tp2.IP iP48 = singlyLinkedList46.get((int)' ');
    tp2.Entry entry49 = new tp2.Entry();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i55 = iP54.getFirst();
    java.lang.String str56 = iP54.toString();
    entry49.element = iP54;
    boolean b58 = singlyLinkedList46.remove(iP54);
    tp2.IPBan iPBan60 = new tp2.IPBan(iP54, (java.lang.Long)1L);
    java.lang.String str61 = iPBan60.toString();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i67 = iP66.getFirst();
    java.lang.String str68 = iP66.toString();
    java.lang.String str69 = iP66.toString();
    iPBan60.setIp(iP66);
    java.lang.Long long71 = iPBan60.getExpires();
    node43.element = iPBan60;
    boolean b73 = iP39.equals((java.lang.Object)iPBan60);
    tp2.SinglyLinkedList singlyLinkedList74 = new tp2.SinglyLinkedList();
    int i75 = singlyLinkedList74.getSize();
    java.lang.String str76 = singlyLinkedList74.toString();
    int i77 = singlyLinkedList74.getSize();
    java.util.Set<tp2.IP> set_iP78 = null;
    boolean b79 = singlyLinkedList74.repOk(set_iP78);
    tp2.IP iP84 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b85 = singlyLinkedList74.remove(iP84);
    iPBan60.setIp(iP84);
    iPBan60.setExpires((java.lang.Long)1466185870380L);
    java.lang.String str89 = iPBan60.toString();
    boolean b90 = strictlySortedSinglyLinkedList31.add(iPBan60);
    boolean b91 = iP23.equals((java.lang.Object)strictlySortedSinglyLinkedList31);
    int i92 = strictlySortedSinglyLinkedList31.size;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 0+ "'", i29.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 10+ "'", i55.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "10.0.0.100"+ "'", str56.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str61.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 10+ "'", i67.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "10.0.0.100"+ "'", str68.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "10.0.0.100"+ "'", str69.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L+ "'", long71.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "()"+ "'", str76.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "IPBan [ip=100.10.-1.10, expires=1466185870380]"+ "'", str89.equals("IPBan [ip=100.10.-1.10, expires=1466185870380]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 11);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test011"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    java.lang.String str11 = iP9.toString();
    java.lang.String str12 = iP9.toString();
    iP9.setThird((java.lang.Integer)(-1));
    entry0.element = iP9;
    tp2.Node node16 = new tp2.Node();
    tp2.IPBan iPBan17 = null;
    node16.element = iPBan17;
    tp2.SinglyLinkedList singlyLinkedList19 = new tp2.SinglyLinkedList();
    tp2.IP iP21 = singlyLinkedList19.get((int)' ');
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = singlyLinkedList19.remove(iP27);
    tp2.IPBan iPBan33 = new tp2.IPBan(iP27, (java.lang.Long)1L);
    java.lang.String str34 = iPBan33.toString();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    java.lang.String str42 = iP39.toString();
    iPBan33.setIp(iP39);
    java.lang.Long long44 = iPBan33.getExpires();
    node16.element = iPBan33;
    iPBan33.expires = 1466185870380L;
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    java.lang.Integer i55 = iP52.getFourth();
    iPBan33.ip = iP52;
    entry0.element = iP52;
    java.lang.Integer i58 = iP52.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "10.0.0.100"+ "'", str11.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str34.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L+ "'", long44.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 100+ "'", i55.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 100+ "'", i58.equals(100));

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test012"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = server0.connect(iP10);
    tp2.SinglyLinkedList singlyLinkedList15 = new tp2.SinglyLinkedList();
    tp2.IP iP17 = singlyLinkedList15.get((int)' ');
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = singlyLinkedList15.remove(iP23);
    tp2.IPBan iPBan29 = new tp2.IPBan(iP23, (java.lang.Long)1L);
    java.lang.String str30 = iPBan29.toString();
    iPBan29.setExpires((java.lang.Long)0L);
    java.lang.Long long33 = iPBan29.expires;
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP35 = null;
    boolean b36 = server34.connect(iP35);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b42 = server34.connect(iP41);
    java.lang.Integer i43 = iP41.getFirst();
    java.lang.Integer i44 = iP41.getFirst();
    iPBan29.setIp(iP41);
    boolean b46 = server0.removeException(iP41);
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP48 = null;
    boolean b49 = server47.connect(iP48);
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b55 = server47.connect(iP54);
    java.lang.Integer i56 = iP54.getFirst();
    java.lang.Integer i57 = iP54.getSecond();
    boolean b58 = server0.connect(iP54);
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i64 = iP63.getFirst();
    java.lang.String str65 = iP63.toString();
    java.lang.String str66 = iP63.toString();
    iP63.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan70 = new tp2.IPBan(iP63, (java.lang.Long)0L);
    iPBan70.expires = 1466185878456L;
    iPBan70.expires = 1466185888005L;
    java.lang.String str75 = iPBan70.toString();
    tp2.IP iP76 = iPBan70.getIp();
    boolean b77 = server0.addException(iP76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str30.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L+ "'", long33.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 100+ "'", i43.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 100+ "'", i44.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 100+ "'", i56.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 10+ "'", i57.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 10+ "'", i64.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "10.0.0.100"+ "'", str65.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "10.0.0.100"+ "'", str66.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "IPBan [ip=10.0.-1.100, expires=1466185888005]"+ "'", str75.equals("IPBan [ip=10.0.-1.100, expires=1466185888005]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test013"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get((int)' ');
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    boolean b17 = singlyLinkedList5.remove(iP13);
    tp2.IPBan iPBan19 = new tp2.IPBan(iP13, (java.lang.Long)1L);
    java.lang.String str20 = iPBan19.toString();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    java.lang.String str28 = iP25.toString();
    iPBan19.setIp(iP25);
    java.lang.Integer i30 = iP25.getFirst();
    boolean b31 = server0.removeException(iP25);
    tp2.SinglyLinkedList singlyLinkedList32 = new tp2.SinglyLinkedList();
    tp2.IP iP34 = singlyLinkedList32.get((int)' ');
    tp2.Entry entry35 = new tp2.Entry();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i41 = iP40.getFirst();
    java.lang.String str42 = iP40.toString();
    entry35.element = iP40;
    boolean b44 = singlyLinkedList32.remove(iP40);
    tp2.IP iP46 = singlyLinkedList32.get((int)(byte)10);
    boolean b47 = singlyLinkedList32.isEmpty();
    tp2.SinglyLinkedList singlyLinkedList48 = new tp2.SinglyLinkedList();
    tp2.IP iP50 = singlyLinkedList48.get((int)' ');
    tp2.Entry entry51 = new tp2.Entry();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i57 = iP56.getFirst();
    java.lang.String str58 = iP56.toString();
    entry51.element = iP56;
    boolean b60 = singlyLinkedList48.remove(iP56);
    tp2.IPBan iPBan62 = new tp2.IPBan(iP56, (java.lang.Long)1L);
    java.lang.String str63 = iPBan62.toString();
    iPBan62.setExpires((java.lang.Long)0L);
    java.lang.Long long66 = iPBan62.expires;
    tp2.Server server67 = new tp2.Server();
    tp2.IP iP68 = null;
    boolean b69 = server67.connect(iP68);
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b75 = server67.connect(iP74);
    java.lang.Integer i76 = iP74.getFirst();
    java.lang.Integer i77 = iP74.getFirst();
    iPBan62.setIp(iP74);
    tp2.IP iP79 = iPBan62.getIp();
    boolean b80 = singlyLinkedList32.contains(iP79);
    java.lang.Integer i81 = iP79.getSecond();
    boolean b82 = server0.connect(iP79);
    iP79.setThird((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i41 + "' != '" + 10+ "'", i41.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 10+ "'", i57.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "10.0.0.100"+ "'", str58.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str63.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L+ "'", long66.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 100+ "'", i76.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i77 + "' != '" + 100+ "'", i77.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i81 + "' != '" + 10+ "'", i81.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test014"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    tp2.Node node5 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node6 = null;
    node5.next = node6;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test015"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = new tp2.Entry();
    java.lang.String str4 = entry3.toString();
    entry0.next = entry3;
    tp2.Entry entry6 = new tp2.Entry();
    java.lang.String str7 = entry6.toString();
    entry0.next = entry6;
    tp2.IP iP9 = entry0.element;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i27 = iP26.getFirst();
    java.lang.String str28 = iP26.toString();
    java.lang.String str29 = iP26.toString();
    iP26.setThird((java.lang.Integer)(-1));
    boolean b32 = server10.addBan(iP26);
    iP26.setThird((java.lang.Integer)100);
    entry0.element = iP26;
    tp2.IP iP36 = entry0.element;
    tp2.IP iP37 = entry0.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[null]"+ "'", str4.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[null]"+ "'", str7.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 10+ "'", i27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP37);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test016"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    java.util.Set<tp2.IPBan> set_iPBan5 = null;
    boolean b6 = strictlySortedSinglyLinkedList0.repOk(set_iPBan5);
    tp2.IPBan iPBan8 = strictlySortedSinglyLinkedList0.get((int)(short)0);
    tp2.IPBan iPBan10 = strictlySortedSinglyLinkedList0.get(33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan10);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test017"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan6 = strictlySortedSinglyLinkedList0.get(100);
    strictlySortedSinglyLinkedList0.size = '#';
    strictlySortedSinglyLinkedList0.size = 100;
    tp2.Node node11 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList12 = new tp2.StrictlySortedSinglyLinkedList();
    int i13 = strictlySortedSinglyLinkedList12.getSize();
    tp2.IPBan iPBan14 = null;
    boolean b15 = strictlySortedSinglyLinkedList12.add(iPBan14);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList16 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node17 = strictlySortedSinglyLinkedList16.header;
    strictlySortedSinglyLinkedList12.header = node17;
    node11.next = node17;
    tp2.Node node20 = node11.next;
    tp2.IPBan iPBan21 = node20.element;
    tp2.IPBan iPBan22 = node20.element;
    tp2.Node node23 = new tp2.Node();
    tp2.IPBan iPBan24 = null;
    node23.element = iPBan24;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList26 = new tp2.StrictlySortedSinglyLinkedList();
    int i27 = strictlySortedSinglyLinkedList26.getSize();
    tp2.IPBan iPBan28 = null;
    boolean b29 = strictlySortedSinglyLinkedList26.add(iPBan28);
    tp2.Node node30 = strictlySortedSinglyLinkedList26.header;
    tp2.IPBan iPBan32 = strictlySortedSinglyLinkedList26.get(100);
    tp2.Node node33 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList34 = new tp2.StrictlySortedSinglyLinkedList();
    int i35 = strictlySortedSinglyLinkedList34.getSize();
    tp2.IPBan iPBan36 = null;
    boolean b37 = strictlySortedSinglyLinkedList34.add(iPBan36);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList38 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node39 = strictlySortedSinglyLinkedList38.header;
    strictlySortedSinglyLinkedList34.header = node39;
    node33.next = node39;
    strictlySortedSinglyLinkedList26.header = node33;
    node23.next = node33;
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i49 = iP48.getFirst();
    java.lang.String str50 = iP48.toString();
    java.lang.String str51 = iP48.toString();
    iP48.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan55 = new tp2.IPBan(iP48, (java.lang.Long)0L);
    node23.element = iPBan55;
    node20.element = iPBan55;
    strictlySortedSinglyLinkedList0.header = node20;
    tp2.Node node59 = node20.next;
    // The following exception was thrown during execution in test generation
    try {
      tp2.Node node60 = node59.next;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i49 + "' != '" + 10+ "'", i49.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "10.0.0.100"+ "'", str50.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "10.0.0.100"+ "'", str51.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node59);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test018"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    boolean b39 = iP5.equals((java.lang.Object)iPBan26);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    int i41 = singlyLinkedList40.getSize();
    java.lang.String str42 = singlyLinkedList40.toString();
    int i43 = singlyLinkedList40.getSize();
    java.util.Set<tp2.IP> set_iP44 = null;
    boolean b45 = singlyLinkedList40.repOk(set_iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b51 = singlyLinkedList40.remove(iP50);
    iPBan26.setIp(iP50);
    iPBan26.setExpires((java.lang.Long)1466185875369L);
    java.lang.Long long55 = iPBan26.expires;
    iPBan26.setExpires((java.lang.Long)1466185871428L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "()"+ "'", str42.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1466185875369L+ "'", long55.equals(1466185875369L));

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test019"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    java.lang.String str3 = singlyLinkedList0.toString();
    java.lang.String str4 = singlyLinkedList0.toString();
    tp2.Server server5 = new tp2.Server();
    tp2.IP iP6 = null;
    boolean b7 = server5.connect(iP6);
    java.lang.String str8 = server5.toString();
    java.lang.String str9 = server5.toString();
    tp2.IP iP10 = null;
    boolean b11 = server5.removeException(iP10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList12 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList12.size = 10;
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    server15.update();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP22.setFirst((java.lang.Integer)1);
    java.lang.Integer i25 = iP22.getSecond();
    boolean b26 = server15.addException(iP22);
    tp2.Entry entry27 = new tp2.Entry();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    entry27.element = iP32;
    boolean b36 = server15.addException(iP32);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b42 = server15.removeBan(iP41);
    iP41.setThird((java.lang.Integer)0);
    boolean b45 = strictlySortedSinglyLinkedList12.removeFromIP(iP41);
    tp2.Server server46 = new tp2.Server();
    java.lang.String str47 = server46.toString();
    server46.update();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP53.setFirst((java.lang.Integer)1);
    java.lang.Integer i56 = iP53.getSecond();
    boolean b57 = server46.addException(iP53);
    boolean b58 = strictlySortedSinglyLinkedList12.removeFromIP(iP53);
    boolean b59 = server5.connect(iP53);
    boolean b60 = singlyLinkedList0.contains(iP53);
    boolean b61 = singlyLinkedList0.isEmpty();
    java.util.Set<tp2.IP> set_iP62 = null;
    boolean b63 = singlyLinkedList0.repOk(set_iP62);
    boolean b64 = singlyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "()"+ "'", str4.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 0+ "'", i25.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 0+ "'", i56.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test020"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.IP iP9 = entry0.element;
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP11 = null;
    boolean b12 = server10.connect(iP11);
    java.lang.String str13 = server10.toString();
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    server14.update();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP21.setFirst((java.lang.Integer)1);
    java.lang.Integer i24 = iP21.getSecond();
    boolean b25 = server14.addException(iP21);
    boolean b26 = server10.addException(iP21);
    entry0.element = iP21;
    java.lang.String str28 = entry0.toString();
    tp2.Entry entry29 = entry0.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 0+ "'", i24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[1.0.0.100]"+ "'", str28.equals("[1.0.0.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry29);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test021"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    int i7 = strictlySortedSinglyLinkedList0.size;
    tp2.Node node8 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node9 = strictlySortedSinglyLinkedList0.header;
    java.lang.String str10 = node9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[null]"+ "'", str10.equals("[null]"));

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test022"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = server0.connect(iP10);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP16 = null;
    boolean b17 = server15.connect(iP16);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP22.setFirst((java.lang.Integer)1);
    boolean b25 = server15.removeException(iP22);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList26 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan27 = null;
    boolean b28 = strictlySortedSinglyLinkedList26.contains(iPBan27);
    int i29 = strictlySortedSinglyLinkedList26.getSize();
    tp2.IPBan iPBan31 = strictlySortedSinglyLinkedList26.get((int)'#');
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP36.setSecond((java.lang.Integer)(-1));
    boolean b39 = strictlySortedSinglyLinkedList26.removeFromIP(iP36);
    boolean b40 = server15.removeBan(iP36);
    tp2.SinglyLinkedList singlyLinkedList41 = new tp2.SinglyLinkedList();
    tp2.IP iP43 = singlyLinkedList41.get((int)' ');
    tp2.Entry entry44 = new tp2.Entry();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i50 = iP49.getFirst();
    java.lang.String str51 = iP49.toString();
    entry44.element = iP49;
    boolean b53 = singlyLinkedList41.remove(iP49);
    boolean b54 = iP36.equals((java.lang.Object)iP49);
    iP49.setFirst((java.lang.Integer)1);
    java.lang.Integer i57 = iP49.getFourth();
    boolean b58 = server0.removeException(iP49);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList59 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan60 = null;
    boolean b61 = strictlySortedSinglyLinkedList59.contains(iPBan60);
    tp2.Server server62 = new tp2.Server();
    java.lang.String str63 = server62.toString();
    server62.update();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i70 = iP69.getFirst();
    boolean b71 = server62.connect(iP69);
    boolean b72 = strictlySortedSinglyLinkedList59.removeFromIP(iP69);
    java.lang.Integer i73 = iP69.getThird();
    iP69.setFourth((java.lang.Integer)100);
    java.lang.String str76 = iP69.toString();
    boolean b77 = server0.removeException(iP69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 10+ "'", i50.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "10.0.0.100"+ "'", str51.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 100+ "'", i57.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str63.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 100+ "'", i70.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + (-1)+ "'", i73.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "100.10.-1.100"+ "'", str76.equals("100.10.-1.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test023"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    int i3 = singlyLinkedList0.getSize();
    boolean b4 = singlyLinkedList0.isEmpty();
    tp2.IP iP6 = singlyLinkedList0.get(2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test024"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    int i7 = strictlySortedSinglyLinkedList0.getSize();
    tp2.SinglyLinkedList singlyLinkedList8 = new tp2.SinglyLinkedList();
    tp2.IP iP10 = singlyLinkedList8.get((int)' ');
    tp2.Entry entry11 = new tp2.Entry();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    entry11.element = iP16;
    boolean b20 = singlyLinkedList8.remove(iP16);
    tp2.IPBan iPBan22 = new tp2.IPBan(iP16, (java.lang.Long)1L);
    java.lang.String str23 = iPBan22.toString();
    tp2.Server server24 = new tp2.Server();
    tp2.IP iP25 = null;
    boolean b26 = server24.connect(iP25);
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b32 = server24.connect(iP31);
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP34 = null;
    boolean b35 = server33.connect(iP34);
    java.lang.String str36 = server33.toString();
    java.lang.String str37 = server33.toString();
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = server33.connect(iP43);
    boolean b48 = server24.removeException(iP43);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP50 = null;
    boolean b51 = server49.connect(iP50);
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b57 = server49.connect(iP56);
    java.lang.Integer i58 = iP56.getFirst();
    boolean b59 = server24.connect(iP56);
    iPBan22.ip = iP56;
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP65.setFirst((java.lang.Integer)1);
    java.lang.Integer i68 = iP65.getSecond();
    iPBan22.ip = iP65;
    boolean b70 = strictlySortedSinglyLinkedList0.contains(iPBan22);
    iPBan22.expires = 1466185894666L;
    java.lang.Long long73 = iPBan22.expires;
    iPBan22.expires = 0L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str23.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 100+ "'", i58.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 0+ "'", i68.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1466185894666L+ "'", long73.equals(1466185894666L));

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test025"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.IP iP6 = entry0.element;
    tp2.Entry entry7 = entry0.next;
    tp2.IP iP8 = entry7.element;
    java.lang.String str9 = entry7.toString();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList10.size = 10;
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    server13.update();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP20.setFirst((java.lang.Integer)1);
    java.lang.Integer i23 = iP20.getSecond();
    boolean b24 = server13.addException(iP20);
    tp2.Entry entry25 = new tp2.Entry();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i31 = iP30.getFirst();
    java.lang.String str32 = iP30.toString();
    entry25.element = iP30;
    boolean b34 = server13.addException(iP30);
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b40 = server13.removeBan(iP39);
    iP39.setThird((java.lang.Integer)0);
    boolean b43 = strictlySortedSinglyLinkedList10.removeFromIP(iP39);
    java.lang.String str44 = strictlySortedSinglyLinkedList10.toString();
    tp2.SinglyLinkedList singlyLinkedList45 = new tp2.SinglyLinkedList();
    tp2.IP iP47 = singlyLinkedList45.get((int)' ');
    tp2.Entry entry48 = new tp2.Entry();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i54 = iP53.getFirst();
    java.lang.String str55 = iP53.toString();
    entry48.element = iP53;
    boolean b57 = singlyLinkedList45.remove(iP53);
    tp2.IPBan iPBan59 = new tp2.IPBan(iP53, (java.lang.Long)1L);
    java.lang.String str60 = iPBan59.toString();
    boolean b61 = strictlySortedSinglyLinkedList10.contains(iPBan59);
    tp2.IP iP62 = iPBan59.ip;
    entry7.element = iP62;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 0+ "'", i23.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 10+ "'", i31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "{}"+ "'", str44.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "10.0.0.100"+ "'", str55.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str60.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP62);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test026"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    java.util.Set<tp2.IP> set_iP3 = null;
    boolean b4 = singlyLinkedList0.repOk(set_iP3);
    boolean b5 = singlyLinkedList0.isEmpty();
    tp2.IP iP7 = singlyLinkedList0.get((int)(short)1);
    boolean b8 = singlyLinkedList0.isEmpty();
    int i9 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test027"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    java.lang.String str1 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "{}"+ "'", str1.equals("{}"));

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test028"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    int i9 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Node node10 = new tp2.Node();
    tp2.IPBan iPBan11 = null;
    node10.element = iPBan11;
    tp2.IPBan iPBan13 = null;
    node10.element = iPBan13;
    java.lang.String str15 = node10.toString();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList16 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList16.size = 10;
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    server19.update();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP26.setFirst((java.lang.Integer)1);
    java.lang.Integer i29 = iP26.getSecond();
    boolean b30 = server19.addException(iP26);
    tp2.Entry entry31 = new tp2.Entry();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i37 = iP36.getFirst();
    java.lang.String str38 = iP36.toString();
    entry31.element = iP36;
    boolean b40 = server19.addException(iP36);
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b46 = server19.removeBan(iP45);
    iP45.setThird((java.lang.Integer)0);
    boolean b49 = strictlySortedSinglyLinkedList16.removeFromIP(iP45);
    tp2.Server server50 = new tp2.Server();
    java.lang.String str51 = server50.toString();
    server50.update();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    java.lang.Integer i60 = iP57.getSecond();
    boolean b61 = server50.addException(iP57);
    boolean b62 = strictlySortedSinglyLinkedList16.removeFromIP(iP57);
    int i63 = strictlySortedSinglyLinkedList16.size;
    strictlySortedSinglyLinkedList16.size = (byte)1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList66 = new tp2.StrictlySortedSinglyLinkedList();
    int i67 = strictlySortedSinglyLinkedList66.getSize();
    tp2.IPBan iPBan68 = null;
    boolean b69 = strictlySortedSinglyLinkedList66.add(iPBan68);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList70 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node71 = strictlySortedSinglyLinkedList70.header;
    strictlySortedSinglyLinkedList66.header = node71;
    tp2.IPBan iPBan73 = node71.element;
    strictlySortedSinglyLinkedList16.header = node71;
    node10.next = node71;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList76 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan77 = null;
    boolean b78 = strictlySortedSinglyLinkedList76.contains(iPBan77);
    int i79 = strictlySortedSinglyLinkedList76.getSize();
    tp2.Node node80 = strictlySortedSinglyLinkedList76.header;
    tp2.Node node81 = node80.next;
    node10.next = node80;
    strictlySortedSinglyLinkedList0.header = node10;
    strictlySortedSinglyLinkedList0.size = (short)0;
    strictlySortedSinglyLinkedList0.size = (short)10;
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)100);
    tp2.IPBan iPBan94 = new tp2.IPBan(iP92, (java.lang.Long)1466185883613L);
    // The following exception was thrown during execution in test generation
    try {
      boolean b95 = strictlySortedSinglyLinkedList0.containsIP(iP92);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[null]"+ "'", str15.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 0+ "'", i29.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 0+ "'", i60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node81);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test029"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    java.lang.String str11 = iP9.toString();
    java.lang.String str12 = iP9.toString();
    iP9.setThird((java.lang.Integer)(-1));
    entry0.element = iP9;
    tp2.IP iP16 = entry0.element;
    tp2.IP iP17 = entry0.element;
    tp2.IP iP18 = entry0.element;
    tp2.IPBan iPBan20 = new tp2.IPBan(iP18, (java.lang.Long)1466185875369L);
    iP18.setFourth((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "10.0.0.100"+ "'", str11.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP18);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test030"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    server15.update();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i23 = iP22.getFirst();
    boolean b24 = server15.connect(iP22);
    iPBan14.ip = iP22;
    java.lang.Long long26 = iPBan14.getExpires();
    iPBan14.expires = 1466185896900L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 100+ "'", i23.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L+ "'", long26.equals(1L));

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test031"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP16.setFirst((java.lang.Integer)1);
    boolean b19 = server9.removeException(iP16);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList20 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan21 = null;
    boolean b22 = strictlySortedSinglyLinkedList20.contains(iPBan21);
    int i23 = strictlySortedSinglyLinkedList20.getSize();
    tp2.IPBan iPBan25 = strictlySortedSinglyLinkedList20.get((int)'#');
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP30.setSecond((java.lang.Integer)(-1));
    boolean b33 = strictlySortedSinglyLinkedList20.removeFromIP(iP30);
    boolean b34 = server9.removeBan(iP30);
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    boolean b48 = iP30.equals((java.lang.Object)iP43);
    boolean b49 = server0.removeException(iP30);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test032"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    java.util.Set<tp2.IP> set_iP3 = null;
    boolean b4 = singlyLinkedList0.repOk(set_iP3);
    boolean b5 = singlyLinkedList0.isEmpty();
    int i6 = singlyLinkedList0.getSize();
    int i7 = singlyLinkedList0.getSize();
    tp2.IP iP9 = singlyLinkedList0.get((int)(byte)10);
    java.lang.String str10 = singlyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "()"+ "'", str10.equals("()"));

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test033"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    java.lang.String str7 = strictlySortedSinglyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList8 = new tp2.SinglyLinkedList();
    tp2.IP iP10 = singlyLinkedList8.get((int)' ');
    tp2.Entry entry11 = new tp2.Entry();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    entry11.element = iP16;
    boolean b20 = singlyLinkedList8.remove(iP16);
    tp2.IPBan iPBan22 = new tp2.IPBan(iP16, (java.lang.Long)1L);
    java.lang.String str23 = iPBan22.toString();
    iPBan22.setExpires((java.lang.Long)0L);
    java.lang.Long long26 = iPBan22.expires;
    tp2.IP iP27 = iPBan22.getIp();
    tp2.IP iP28 = iPBan22.ip;
    tp2.IP iP29 = iPBan22.getIp();
    java.lang.Long long30 = iPBan22.expires;
    boolean b31 = strictlySortedSinglyLinkedList0.add(iPBan22);
    iPBan22.setExpires((java.lang.Long)1466185888007L);
    java.lang.Long long34 = iPBan22.expires;
    java.lang.Long long35 = iPBan22.expires;
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)35, (java.lang.Integer)11, (java.lang.Integer)35, (java.lang.Integer)35);
    iPBan22.ip = iP40;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "{}"+ "'", str7.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str23.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L+ "'", long26.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L+ "'", long30.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1466185888007L+ "'", long34.equals(1466185888007L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1466185888007L+ "'", long35.equals(1466185888007L));

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test034"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    boolean b47 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node48 = strictlySortedSinglyLinkedList0.header;
    int i49 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 10);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test035"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    java.lang.String str11 = iP9.toString();
    java.lang.String str12 = iP9.toString();
    iP9.setThird((java.lang.Integer)(-1));
    entry0.element = iP9;
    java.lang.String str16 = entry0.toString();
    tp2.IP iP17 = entry0.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "10.0.0.100"+ "'", str11.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[10.0.-1.100]"+ "'", str16.equals("[10.0.-1.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP17);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test036"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    iPBan14.expires = 1466185877442L;
    tp2.IP iP20 = iPBan14.getIp();
    tp2.SinglyLinkedList singlyLinkedList21 = new tp2.SinglyLinkedList();
    java.lang.String str22 = singlyLinkedList21.toString();
    java.lang.String str23 = singlyLinkedList21.toString();
    java.lang.String str24 = singlyLinkedList21.toString();
    java.lang.String str25 = singlyLinkedList21.toString();
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP27 = null;
    boolean b28 = server26.connect(iP27);
    java.lang.String str29 = server26.toString();
    java.lang.String str30 = server26.toString();
    tp2.IP iP31 = null;
    boolean b32 = server26.removeException(iP31);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList33 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList33.size = 10;
    tp2.Server server36 = new tp2.Server();
    java.lang.String str37 = server36.toString();
    server36.update();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP43.setFirst((java.lang.Integer)1);
    java.lang.Integer i46 = iP43.getSecond();
    boolean b47 = server36.addException(iP43);
    tp2.Entry entry48 = new tp2.Entry();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i54 = iP53.getFirst();
    java.lang.String str55 = iP53.toString();
    entry48.element = iP53;
    boolean b57 = server36.addException(iP53);
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b63 = server36.removeBan(iP62);
    iP62.setThird((java.lang.Integer)0);
    boolean b66 = strictlySortedSinglyLinkedList33.removeFromIP(iP62);
    tp2.Server server67 = new tp2.Server();
    java.lang.String str68 = server67.toString();
    server67.update();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP74.setFirst((java.lang.Integer)1);
    java.lang.Integer i77 = iP74.getSecond();
    boolean b78 = server67.addException(iP74);
    boolean b79 = strictlySortedSinglyLinkedList33.removeFromIP(iP74);
    boolean b80 = server26.connect(iP74);
    boolean b81 = singlyLinkedList21.contains(iP74);
    tp2.Server server82 = new tp2.Server();
    java.lang.String str83 = server82.toString();
    server82.update();
    tp2.IP iP89 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP89.setFirst((java.lang.Integer)1);
    java.lang.Integer i92 = iP89.getSecond();
    boolean b93 = server82.addException(iP89);
    boolean b94 = iP74.equals((java.lang.Object)iP89);
    iPBan14.setIp(iP74);
    tp2.IP iP96 = iPBan14.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "()"+ "'", str22.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "()"+ "'", str23.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "()"+ "'", str24.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "()"+ "'", str25.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 0+ "'", i46.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "10.0.0.100"+ "'", str55.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str68.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i77 + "' != '" + 0+ "'", i77.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str83.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i92 + "' != '" + 0+ "'", i92.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP96);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test037"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    boolean b39 = iP5.equals((java.lang.Object)iPBan26);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    int i41 = singlyLinkedList40.getSize();
    java.lang.String str42 = singlyLinkedList40.toString();
    int i43 = singlyLinkedList40.getSize();
    java.util.Set<tp2.IP> set_iP44 = null;
    boolean b45 = singlyLinkedList40.repOk(set_iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b51 = singlyLinkedList40.remove(iP50);
    iPBan26.setIp(iP50);
    iPBan26.setExpires((java.lang.Long)1466185870380L);
    java.lang.String str55 = iPBan26.toString();
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP57 = null;
    boolean b58 = server56.connect(iP57);
    java.lang.String str59 = server56.toString();
    java.lang.String str60 = server56.toString();
    tp2.Entry entry61 = new tp2.Entry();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i67 = iP66.getFirst();
    java.lang.String str68 = iP66.toString();
    entry61.element = iP66;
    boolean b70 = server56.connect(iP66);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i76 = iP75.getFirst();
    java.lang.String str77 = iP75.toString();
    java.lang.String str78 = iP75.toString();
    boolean b79 = server56.removeBan(iP75);
    java.lang.Integer i80 = iP75.getFirst();
    iPBan26.ip = iP75;
    tp2.IP iP82 = iPBan26.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "()"+ "'", str42.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "IPBan [ip=100.10.-1.10, expires=1466185870380]"+ "'", str55.equals("IPBan [ip=100.10.-1.10, expires=1466185870380]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str59.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 10+ "'", i67.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "10.0.0.100"+ "'", str68.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 10+ "'", i76.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "10.0.0.100"+ "'", str78.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 10+ "'", i80.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP82);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test038"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    java.lang.String str34 = strictlySortedSinglyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    java.lang.String str50 = iPBan49.toString();
    boolean b51 = strictlySortedSinglyLinkedList0.contains(iPBan49);
    tp2.IP iP52 = iPBan49.ip;
    java.lang.Long long53 = iPBan49.getExpires();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "{}"+ "'", str34.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L+ "'", long53.equals(1L));

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test039"); }


    tp2.Node node0 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList1 = new tp2.StrictlySortedSinglyLinkedList();
    int i2 = strictlySortedSinglyLinkedList1.getSize();
    tp2.IPBan iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList1.add(iPBan3);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node6 = strictlySortedSinglyLinkedList5.header;
    strictlySortedSinglyLinkedList1.header = node6;
    node0.next = node6;
    tp2.Node node9 = node0.next;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan11 = null;
    boolean b12 = strictlySortedSinglyLinkedList10.contains(iPBan11);
    int i13 = strictlySortedSinglyLinkedList10.getSize();
    tp2.Node node14 = strictlySortedSinglyLinkedList10.header;
    tp2.Node node15 = node14.next;
    node9.next = node14;
    java.lang.String str17 = node9.toString();
    java.lang.String str18 = node9.toString();
    tp2.IPBan iPBan19 = node9.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[null]"+ "'", str17.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[null]"+ "'", str18.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan19);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test040"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    server0.update();
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    server6.update();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP13.setFirst((java.lang.Integer)1);
    java.lang.Integer i16 = iP13.getSecond();
    boolean b17 = server6.addException(iP13);
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = server6.addException(iP23);
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b33 = server6.removeBan(iP32);
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP35 = null;
    boolean b36 = server34.connect(iP35);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b42 = server34.connect(iP41);
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP44 = null;
    boolean b45 = server43.connect(iP44);
    java.lang.String str46 = server43.toString();
    java.lang.String str47 = server43.toString();
    tp2.Entry entry48 = new tp2.Entry();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i54 = iP53.getFirst();
    java.lang.String str55 = iP53.toString();
    entry48.element = iP53;
    boolean b57 = server43.connect(iP53);
    boolean b58 = server34.removeException(iP53);
    boolean b59 = server6.connect(iP53);
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP64.setSecond((java.lang.Integer)1);
    boolean b67 = server6.removeBan(iP64);
    tp2.StubTime stubTime68 = new tp2.StubTime();
    long long69 = stubTime68.getCurrentTime();
    server6.setTime((tp2.ITime)stubTime68);
    long long71 = stubTime68.getCurrentTime();
    long long72 = stubTime68.getCurrentTime();
    long long73 = stubTime68.getCurrentTime();
    long long74 = stubTime68.getCurrentTime();
    long long75 = stubTime68.getCurrentTime();
    long long76 = stubTime68.getCurrentTime();
    long long77 = stubTime68.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 0+ "'", i16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "10.0.0.100"+ "'", str55.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long69 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long71 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long72 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long73 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long74 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long75 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long76 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long77 == 200000L);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test041"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    boolean b5 = strictlySortedSinglyLinkedList0.isEmpty();
    int i6 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test042"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan5 = strictlySortedSinglyLinkedList0.get((int)'#');
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setSecond((java.lang.Integer)(-1));
    boolean b13 = strictlySortedSinglyLinkedList0.removeFromIP(iP10);
    tp2.SinglyLinkedList singlyLinkedList14 = new tp2.SinglyLinkedList();
    tp2.IP iP16 = singlyLinkedList14.get((int)' ');
    tp2.Entry entry17 = new tp2.Entry();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i23 = iP22.getFirst();
    java.lang.String str24 = iP22.toString();
    entry17.element = iP22;
    boolean b26 = singlyLinkedList14.remove(iP22);
    tp2.IPBan iPBan28 = new tp2.IPBan(iP22, (java.lang.Long)1L);
    java.lang.String str29 = iPBan28.toString();
    iPBan28.setExpires((java.lang.Long)0L);
    boolean b32 = strictlySortedSinglyLinkedList0.add(iPBan28);
    boolean b33 = strictlySortedSinglyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 10+ "'", i23.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "10.0.0.100"+ "'", str24.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str29.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test043"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.contains(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    tp2.Node node14 = new tp2.Node();
    tp2.IPBan iPBan15 = null;
    node14.element = iPBan15;
    tp2.SinglyLinkedList singlyLinkedList17 = new tp2.SinglyLinkedList();
    tp2.IP iP19 = singlyLinkedList17.get((int)' ');
    tp2.Entry entry20 = new tp2.Entry();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    entry20.element = iP25;
    boolean b29 = singlyLinkedList17.remove(iP25);
    tp2.IPBan iPBan31 = new tp2.IPBan(iP25, (java.lang.Long)1L);
    java.lang.String str32 = iPBan31.toString();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i38 = iP37.getFirst();
    java.lang.String str39 = iP37.toString();
    java.lang.String str40 = iP37.toString();
    iPBan31.setIp(iP37);
    java.lang.Long long42 = iPBan31.getExpires();
    node14.element = iPBan31;
    boolean b44 = iP10.equals((java.lang.Object)iPBan31);
    boolean b45 = strictlySortedSinglyLinkedList0.contains(iPBan31);
    java.lang.String str46 = iPBan31.toString();
    java.lang.String str47 = iPBan31.toString();
    java.lang.String str48 = iPBan31.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str32.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i38 + "' != '" + 10+ "'", i38.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "10.0.0.100"+ "'", str39.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "10.0.0.100"+ "'", str40.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L+ "'", long42.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str46.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str47.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str48.equals("IPBan [ip=10.0.0.100, expires=1]"));

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test044"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i11 = iP10.getFirst();
    boolean b12 = server3.connect(iP10);
    boolean b13 = strictlySortedSinglyLinkedList0.removeFromIP(iP10);
    java.util.Set<tp2.IPBan> set_iPBan14 = null;
    boolean b15 = strictlySortedSinglyLinkedList0.repOk(set_iPBan14);
    java.lang.String str16 = strictlySortedSinglyLinkedList0.toString();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP22.setSecond((java.lang.Integer)(-1));
    boolean b25 = server17.addException(iP22);
    iP22.setFourth((java.lang.Integer)0);
    java.lang.String str28 = iP22.toString();
    boolean b29 = strictlySortedSinglyLinkedList0.containsIP(iP22);
    tp2.IPBan iPBan31 = new tp2.IPBan(iP22, (java.lang.Long)1466185880799L);
    java.lang.Integer i32 = iP22.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 100+ "'", i11.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "{}"+ "'", str16.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.-1.0.0"+ "'", str28.equals("10.-1.0.0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 0+ "'", i32.equals(0));

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test045"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    java.lang.Integer i47 = iP41.getFourth();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList48 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan49 = null;
    boolean b50 = strictlySortedSinglyLinkedList48.contains(iPBan49);
    int i51 = strictlySortedSinglyLinkedList48.getSize();
    tp2.IPBan iPBan53 = strictlySortedSinglyLinkedList48.get((int)'#');
    strictlySortedSinglyLinkedList48.size = (short)100;
    tp2.Node node56 = strictlySortedSinglyLinkedList48.header;
    boolean b57 = iP41.equals((java.lang.Object)strictlySortedSinglyLinkedList48);
    java.lang.Integer i58 = iP41.getSecond();
    java.lang.String str59 = iP41.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 100+ "'", i47.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 0+ "'", i58.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "1.0.0.100"+ "'", str59.equals("1.0.0.100"));

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test046"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i11 = iP10.getFirst();
    boolean b12 = server3.connect(iP10);
    boolean b13 = strictlySortedSinglyLinkedList0.removeFromIP(iP10);
    java.lang.Integer i14 = iP10.getThird();
    iP10.setFourth((java.lang.Integer)100);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList17 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan18 = null;
    boolean b19 = strictlySortedSinglyLinkedList17.add(iPBan18);
    java.util.Set<tp2.IPBan> set_iPBan20 = null;
    boolean b21 = strictlySortedSinglyLinkedList17.repOk(set_iPBan20);
    tp2.Node node22 = strictlySortedSinglyLinkedList17.header;
    boolean b23 = iP10.equals((java.lang.Object)node22);
    iP10.setFourth((java.lang.Integer)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 100+ "'", i11.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + (-1)+ "'", i14.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test047"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    tp2.Server server2 = new tp2.Server();
    java.lang.String str3 = server2.toString();
    server2.update();
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i10 = iP9.getFirst();
    boolean b11 = server2.connect(iP9);
    entry0.element = iP9;
    iP9.setFirst((java.lang.Integer)32);
    java.lang.Integer i15 = iP9.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 100+ "'", i10.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 32+ "'", i15.equals(32));

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test048"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    iPBan14.expires = 1466185871428L;
    iPBan14.expires = 0L;
    iPBan14.setExpires((java.lang.Long)1466185872205L);
    iPBan14.expires = 1466185877431L;
    java.lang.Long long23 = iPBan14.getExpires();
    iPBan14.expires = 1466185900248L;
    tp2.Server server26 = new tp2.Server();
    java.lang.String str27 = server26.toString();
    server26.update();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP33.setFirst((java.lang.Integer)1);
    java.lang.Integer i36 = iP33.getSecond();
    boolean b37 = server26.addException(iP33);
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = server26.addException(iP43);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b53 = server26.removeBan(iP52);
    iP52.setThird((java.lang.Integer)0);
    iP52.setFourth((java.lang.Integer)10);
    iPBan14.setIp(iP52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1466185877431L+ "'", long23.equals(1466185877431L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str27.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 0+ "'", i36.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test049"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get(1);
    tp2.IP iP4 = singlyLinkedList0.get(0);
    java.lang.String str5 = singlyLinkedList0.toString();
    tp2.IP iP7 = singlyLinkedList0.get((int)(byte)100);
    boolean b8 = singlyLinkedList0.isEmpty();
    java.lang.String str9 = singlyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "()"+ "'", str5.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "()"+ "'", str9.equals("()"));

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test050"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    boolean b9 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    int i11 = strictlySortedSinglyLinkedList10.getSize();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList10.add(iPBan12);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList14 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node15 = strictlySortedSinglyLinkedList14.header;
    strictlySortedSinglyLinkedList10.header = node15;
    strictlySortedSinglyLinkedList10.size = 0;
    int i19 = strictlySortedSinglyLinkedList10.size;
    tp2.Node node20 = strictlySortedSinglyLinkedList10.header;
    tp2.Node node21 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList0.header = node21;
    tp2.IPBan iPBan24 = strictlySortedSinglyLinkedList0.get(1);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList25 = new tp2.StrictlySortedSinglyLinkedList();
    int i26 = strictlySortedSinglyLinkedList25.getSize();
    tp2.IPBan iPBan27 = null;
    boolean b28 = strictlySortedSinglyLinkedList25.add(iPBan27);
    tp2.Node node29 = strictlySortedSinglyLinkedList25.header;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList30 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node31 = strictlySortedSinglyLinkedList30.header;
    tp2.Node node32 = new tp2.Node();
    tp2.IPBan iPBan33 = null;
    node32.element = iPBan33;
    tp2.IPBan iPBan35 = null;
    node32.element = iPBan35;
    strictlySortedSinglyLinkedList30.header = node32;
    tp2.IPBan iPBan38 = node32.element;
    strictlySortedSinglyLinkedList25.header = node32;
    java.lang.String str40 = strictlySortedSinglyLinkedList25.toString();
    tp2.Node node41 = new tp2.Node();
    tp2.IPBan iPBan42 = null;
    node41.element = iPBan42;
    tp2.SinglyLinkedList singlyLinkedList44 = new tp2.SinglyLinkedList();
    tp2.IP iP46 = singlyLinkedList44.get((int)' ');
    tp2.Entry entry47 = new tp2.Entry();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    entry47.element = iP52;
    boolean b56 = singlyLinkedList44.remove(iP52);
    tp2.IPBan iPBan58 = new tp2.IPBan(iP52, (java.lang.Long)1L);
    java.lang.String str59 = iPBan58.toString();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i65 = iP64.getFirst();
    java.lang.String str66 = iP64.toString();
    java.lang.String str67 = iP64.toString();
    iPBan58.setIp(iP64);
    java.lang.Long long69 = iPBan58.getExpires();
    node41.element = iPBan58;
    iPBan58.expires = 1466185870380L;
    iPBan58.setExpires((java.lang.Long)1466185872205L);
    java.lang.Long long75 = iPBan58.getExpires();
    boolean b76 = strictlySortedSinglyLinkedList25.add(iPBan58);
    boolean b77 = strictlySortedSinglyLinkedList0.contains(iPBan58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "{}"+ "'", str40.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str59.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 10+ "'", i65.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "10.0.0.100"+ "'", str66.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "10.0.0.100"+ "'", str67.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L+ "'", long69.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1466185872205L+ "'", long75.equals(1466185872205L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test051"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.IP iP3 = entry0.element;
    tp2.Entry entry4 = new tp2.Entry();
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    entry4.element = iP9;
    tp2.IP iP12 = entry4.element;
    entry0.next = entry4;
    tp2.Entry entry14 = entry0.next;
    tp2.IP iP15 = entry0.element;
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b22 = server16.addException(iP21);
    java.lang.String str23 = server16.toString();
    tp2.Server server24 = new tp2.Server();
    tp2.IP iP25 = null;
    boolean b26 = server24.connect(iP25);
    java.lang.String str27 = server24.toString();
    java.lang.String str28 = server24.toString();
    tp2.IP iP29 = null;
    boolean b30 = server24.removeException(iP29);
    tp2.RealTime realTime31 = new tp2.RealTime();
    long long32 = realTime31.getCurrentTime();
    long long33 = realTime31.getCurrentTime();
    server24.setTime((tp2.ITime)realTime31);
    server16.setTime((tp2.ITime)realTime31);
    tp2.Entry entry36 = new tp2.Entry();
    java.lang.String str37 = entry36.toString();
    java.lang.String str38 = entry36.toString();
    tp2.Entry entry39 = entry36.next;
    tp2.IP iP40 = entry36.element;
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i46 = iP45.getFirst();
    java.lang.String str47 = iP45.toString();
    java.lang.String str48 = iP45.toString();
    iP45.setThird((java.lang.Integer)(-1));
    entry36.element = iP45;
    boolean b52 = server16.removeBan(iP45);
    iP45.setFirst((java.lang.Integer)100);
    entry0.element = iP45;
    tp2.Entry entry56 = new tp2.Entry();
    tp2.Entry entry57 = new tp2.Entry();
    java.lang.String str58 = entry57.toString();
    java.lang.String str59 = entry57.toString();
    tp2.Entry entry60 = entry57.next;
    entry56.next = entry57;
    tp2.IP iP62 = entry56.element;
    tp2.Entry entry63 = entry56.next;
    tp2.IP iP64 = entry63.element;
    java.lang.String str65 = entry63.toString();
    tp2.Entry entry66 = entry63.next;
    entry0.next = entry63;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"+ "'", str23.equals("Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str27.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long32 == 1466185926917L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long33 == 1466185926917L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[null]"+ "'", str37.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[null]"+ "'", str38.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 10+ "'", i46.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "10.0.0.100"+ "'", str47.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "10.0.0.100"+ "'", str48.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "[null]"+ "'", str58.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "[null]"+ "'", str59.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "[null]"+ "'", str65.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry66);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test052"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = new tp2.Entry();
    java.lang.String str4 = entry3.toString();
    entry0.next = entry3;
    tp2.Entry entry6 = new tp2.Entry();
    java.lang.String str7 = entry6.toString();
    entry0.next = entry6;
    tp2.IP iP9 = entry0.element;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i18 = iP17.getFirst();
    boolean b19 = server10.connect(iP17);
    java.lang.Integer i20 = iP17.getSecond();
    java.lang.String str21 = iP17.toString();
    java.lang.Integer i22 = iP17.getSecond();
    entry0.element = iP17;
    tp2.IP iP24 = entry0.element;
    iP24.setFourth((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[null]"+ "'", str4.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[null]"+ "'", str7.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 100+ "'", i18.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "100.10.-1.10"+ "'", str21.equals("100.10.-1.10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP24);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test053"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = entry0.next;
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b17 = server9.connect(iP16);
    java.lang.Integer i18 = iP16.getFirst();
    entry0.element = iP16;
    java.lang.Integer i20 = iP16.getThird();
    tp2.IPBan iPBan22 = new tp2.IPBan(iP16, (java.lang.Long)1466185883089L);
    tp2.Entry entry23 = new tp2.Entry();
    java.lang.String str24 = entry23.toString();
    java.lang.String str25 = entry23.toString();
    tp2.Entry entry26 = new tp2.Entry();
    java.lang.String str27 = entry26.toString();
    entry23.next = entry26;
    java.lang.String str29 = entry23.toString();
    tp2.SinglyLinkedList singlyLinkedList30 = new tp2.SinglyLinkedList();
    tp2.IP iP32 = singlyLinkedList30.get((int)' ');
    tp2.Entry entry33 = new tp2.Entry();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i39 = iP38.getFirst();
    java.lang.String str40 = iP38.toString();
    entry33.element = iP38;
    boolean b42 = singlyLinkedList30.remove(iP38);
    tp2.IPBan iPBan44 = new tp2.IPBan(iP38, (java.lang.Long)1L);
    java.lang.String str45 = iPBan44.toString();
    iPBan44.setExpires((java.lang.Long)0L);
    java.lang.Long long48 = iPBan44.expires;
    tp2.IP iP49 = iPBan44.ip;
    entry23.element = iP49;
    tp2.Entry entry51 = new tp2.Entry();
    java.lang.String str52 = entry51.toString();
    java.lang.String str53 = entry51.toString();
    tp2.Entry entry54 = entry51.next;
    tp2.IP iP55 = entry51.element;
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    java.lang.String str63 = iP60.toString();
    iP60.setThird((java.lang.Integer)(-1));
    entry51.element = iP60;
    iP60.setFourth((java.lang.Integer)(-1));
    java.lang.Integer i69 = iP60.getSecond();
    entry23.element = iP60;
    iPBan22.setIp(iP60);
    iP60.setFourth((java.lang.Integer)11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 100+ "'", i18.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + (-1)+ "'", i20.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[null]"+ "'", str24.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[null]"+ "'", str25.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[null]"+ "'", str27.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[null]"+ "'", str29.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + 10+ "'", i39.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "10.0.0.100"+ "'", str40.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str45.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L+ "'", long48.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "[null]"+ "'", str52.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "[null]"+ "'", str53.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "10.0.0.100"+ "'", str63.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i69 + "' != '" + 0+ "'", i69.equals(0));

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test054"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    java.lang.String str12 = server9.toString();
    java.lang.String str13 = server9.toString();
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    entry14.element = iP19;
    boolean b23 = server9.connect(iP19);
    boolean b24 = server0.removeException(iP19);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP26 = null;
    boolean b27 = server25.connect(iP26);
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b33 = server25.connect(iP32);
    java.lang.Integer i34 = iP32.getFirst();
    boolean b35 = server0.connect(iP32);
    tp2.StubTime stubTime36 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 100+ "'", i34.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test055"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = new tp2.Entry();
    java.lang.String str4 = entry3.toString();
    entry0.next = entry3;
    tp2.Entry entry6 = new tp2.Entry();
    java.lang.String str7 = entry6.toString();
    entry0.next = entry6;
    java.lang.String str9 = entry0.toString();
    tp2.Entry entry10 = entry0.next;
    tp2.SinglyLinkedList singlyLinkedList11 = new tp2.SinglyLinkedList();
    tp2.IP iP13 = singlyLinkedList11.get((int)' ');
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    entry14.element = iP19;
    boolean b23 = singlyLinkedList11.remove(iP19);
    tp2.IPBan iPBan25 = new tp2.IPBan(iP19, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList26 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan27 = null;
    boolean b28 = strictlySortedSinglyLinkedList26.contains(iPBan27);
    int i29 = strictlySortedSinglyLinkedList26.getSize();
    tp2.IPBan iPBan31 = strictlySortedSinglyLinkedList26.get((int)'#');
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP36.setSecond((java.lang.Integer)(-1));
    boolean b39 = strictlySortedSinglyLinkedList26.removeFromIP(iP36);
    iPBan25.ip = iP36;
    tp2.IP iP41 = iPBan25.getIp();
    java.lang.String str42 = iPBan25.toString();
    tp2.IP iP43 = iPBan25.getIp();
    entry10.element = iP43;
    tp2.IP iP45 = entry10.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[null]"+ "'", str4.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[null]"+ "'", str7.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "IPBan [ip=10.-1.0.100, expires=1]"+ "'", str42.equals("IPBan [ip=10.-1.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP45);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test056"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = entry0.next;
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b17 = server9.connect(iP16);
    java.lang.Integer i18 = iP16.getFirst();
    entry0.element = iP16;
    java.lang.Integer i20 = iP16.getThird();
    tp2.IPBan iPBan22 = new tp2.IPBan(iP16, (java.lang.Long)1466185883089L);
    tp2.Entry entry23 = new tp2.Entry();
    java.lang.String str24 = entry23.toString();
    java.lang.String str25 = entry23.toString();
    tp2.Entry entry26 = new tp2.Entry();
    java.lang.String str27 = entry26.toString();
    entry23.next = entry26;
    java.lang.String str29 = entry23.toString();
    tp2.SinglyLinkedList singlyLinkedList30 = new tp2.SinglyLinkedList();
    tp2.IP iP32 = singlyLinkedList30.get((int)' ');
    tp2.Entry entry33 = new tp2.Entry();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i39 = iP38.getFirst();
    java.lang.String str40 = iP38.toString();
    entry33.element = iP38;
    boolean b42 = singlyLinkedList30.remove(iP38);
    tp2.IPBan iPBan44 = new tp2.IPBan(iP38, (java.lang.Long)1L);
    java.lang.String str45 = iPBan44.toString();
    iPBan44.setExpires((java.lang.Long)0L);
    java.lang.Long long48 = iPBan44.expires;
    tp2.IP iP49 = iPBan44.ip;
    entry23.element = iP49;
    tp2.Entry entry51 = new tp2.Entry();
    java.lang.String str52 = entry51.toString();
    java.lang.String str53 = entry51.toString();
    tp2.Entry entry54 = entry51.next;
    tp2.IP iP55 = entry51.element;
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    java.lang.String str63 = iP60.toString();
    iP60.setThird((java.lang.Integer)(-1));
    entry51.element = iP60;
    iP60.setFourth((java.lang.Integer)(-1));
    java.lang.Integer i69 = iP60.getSecond();
    entry23.element = iP60;
    iPBan22.setIp(iP60);
    tp2.IPBan iPBan73 = new tp2.IPBan(iP60, (java.lang.Long)1466185894663L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 100+ "'", i18.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + (-1)+ "'", i20.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[null]"+ "'", str24.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[null]"+ "'", str25.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[null]"+ "'", str27.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[null]"+ "'", str29.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + 10+ "'", i39.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "10.0.0.100"+ "'", str40.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str45.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L+ "'", long48.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "[null]"+ "'", str52.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "[null]"+ "'", str53.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "10.0.0.100"+ "'", str63.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i69 + "' != '" + 0+ "'", i69.equals(0));

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test057"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    java.lang.String str5 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node6 = new tp2.Node();
    tp2.IPBan iPBan7 = null;
    node6.element = iPBan7;
    tp2.IPBan iPBan9 = node6.element;
    strictlySortedSinglyLinkedList0.header = node6;
    tp2.IPBan iPBan12 = strictlySortedSinglyLinkedList0.get((-1));
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP14 = null;
    boolean b15 = server13.connect(iP14);
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b21 = server13.connect(iP20);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    tp2.IP iP31 = entry22.element;
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP33 = null;
    boolean b34 = server32.connect(iP33);
    java.lang.String str35 = server32.toString();
    tp2.Server server36 = new tp2.Server();
    java.lang.String str37 = server36.toString();
    server36.update();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP43.setFirst((java.lang.Integer)1);
    java.lang.Integer i46 = iP43.getSecond();
    boolean b47 = server36.addException(iP43);
    boolean b48 = server32.addException(iP43);
    entry22.element = iP43;
    boolean b50 = server13.removeBan(iP43);
    boolean b51 = strictlySortedSinglyLinkedList0.containsIP(iP43);
    iP43.setFourth((java.lang.Integer)101);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "{[null]}"+ "'", str5.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 0+ "'", i46.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test058"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.IP iP3 = entry0.element;
    tp2.Entry entry4 = new tp2.Entry();
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    entry4.element = iP9;
    tp2.IP iP12 = entry4.element;
    entry0.next = entry4;
    tp2.IP iP14 = null;
    entry4.element = iP14;
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    server16.update();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP23.setFirst((java.lang.Integer)1);
    java.lang.Integer i26 = iP23.getSecond();
    boolean b27 = server16.addException(iP23);
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = server16.addException(iP33);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b43 = server16.removeBan(iP42);
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP45 = null;
    boolean b46 = server44.connect(iP45);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b52 = server44.connect(iP51);
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP54 = null;
    boolean b55 = server53.connect(iP54);
    java.lang.String str56 = server53.toString();
    java.lang.String str57 = server53.toString();
    tp2.Entry entry58 = new tp2.Entry();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i64 = iP63.getFirst();
    java.lang.String str65 = iP63.toString();
    entry58.element = iP63;
    boolean b67 = server53.connect(iP63);
    boolean b68 = server44.removeException(iP63);
    boolean b69 = server16.connect(iP63);
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP74.setSecond((java.lang.Integer)1);
    boolean b77 = server16.removeBan(iP74);
    tp2.Server server78 = new tp2.Server();
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b84 = server78.addException(iP83);
    tp2.IP iP89 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i90 = iP89.getFirst();
    java.lang.Integer i91 = iP89.getSecond();
    boolean b92 = server78.addBan(iP89);
    boolean b93 = iP74.equals((java.lang.Object)iP89);
    entry4.element = iP74;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str57.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 10+ "'", i64.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "10.0.0.100"+ "'", str65.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i90 + "' != '" + 100+ "'", i90.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i91 + "' != '" + 10+ "'", i91.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test059"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    java.lang.String str5 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node6 = new tp2.Node();
    tp2.IPBan iPBan7 = null;
    node6.element = iPBan7;
    tp2.IPBan iPBan9 = node6.element;
    strictlySortedSinglyLinkedList0.header = node6;
    tp2.IPBan iPBan12 = strictlySortedSinglyLinkedList0.get((-1));
    tp2.IP iP13 = null;
    boolean b14 = strictlySortedSinglyLinkedList0.containsIP(iP13);
    tp2.Node node15 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node16 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList17 = new tp2.StrictlySortedSinglyLinkedList();
    int i18 = strictlySortedSinglyLinkedList17.getSize();
    tp2.IPBan iPBan19 = null;
    boolean b20 = strictlySortedSinglyLinkedList17.add(iPBan19);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList21 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node22 = strictlySortedSinglyLinkedList21.header;
    strictlySortedSinglyLinkedList17.header = node22;
    node16.next = node22;
    tp2.Node node25 = node16.next;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList26 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan27 = null;
    boolean b28 = strictlySortedSinglyLinkedList26.contains(iPBan27);
    int i29 = strictlySortedSinglyLinkedList26.getSize();
    tp2.Node node30 = strictlySortedSinglyLinkedList26.header;
    tp2.Node node31 = node30.next;
    node25.next = node30;
    java.lang.String str33 = node25.toString();
    node15.next = node25;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList35 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node36 = strictlySortedSinglyLinkedList35.header;
    tp2.Node node37 = new tp2.Node();
    tp2.IPBan iPBan38 = null;
    node37.element = iPBan38;
    tp2.IPBan iPBan40 = null;
    node37.element = iPBan40;
    strictlySortedSinglyLinkedList35.header = node37;
    tp2.IPBan iPBan43 = node37.element;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList44 = new tp2.StrictlySortedSinglyLinkedList();
    int i45 = strictlySortedSinglyLinkedList44.getSize();
    tp2.IPBan iPBan46 = null;
    boolean b47 = strictlySortedSinglyLinkedList44.add(iPBan46);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList48 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node49 = strictlySortedSinglyLinkedList48.header;
    strictlySortedSinglyLinkedList44.header = node49;
    strictlySortedSinglyLinkedList44.size = 0;
    int i53 = strictlySortedSinglyLinkedList44.size;
    tp2.Node node54 = strictlySortedSinglyLinkedList44.header;
    java.lang.String str55 = node54.toString();
    node37.next = node54;
    node15.next = node37;
    tp2.IPBan iPBan58 = node37.element;
    tp2.Node node59 = new tp2.Node();
    tp2.IPBan iPBan60 = null;
    node59.element = iPBan60;
    tp2.IPBan iPBan62 = null;
    node59.element = iPBan62;
    java.lang.String str64 = node59.toString();
    node37.next = node59;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "{[null]}"+ "'", str5.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "[null]"+ "'", str33.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "[null]"+ "'", str55.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "[null]"+ "'", str64.equals("[null]"));

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test060"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i5 = iP4.getFirst();
    java.lang.String str6 = iP4.toString();
    java.lang.String str7 = iP4.toString();
    iP4.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan11 = new tp2.IPBan(iP4, (java.lang.Long)0L);
    java.lang.String str12 = iPBan11.toString();
    java.lang.Long long13 = iPBan11.getExpires();
    java.lang.String str14 = iPBan11.toString();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)2, (java.lang.Integer)11, (java.lang.Integer)(-1), (java.lang.Integer)10);
    tp2.Node node20 = new tp2.Node();
    tp2.IPBan iPBan21 = null;
    node20.element = iPBan21;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList23 = new tp2.StrictlySortedSinglyLinkedList();
    int i24 = strictlySortedSinglyLinkedList23.getSize();
    tp2.IPBan iPBan25 = null;
    boolean b26 = strictlySortedSinglyLinkedList23.add(iPBan25);
    tp2.Node node27 = strictlySortedSinglyLinkedList23.header;
    tp2.IPBan iPBan29 = strictlySortedSinglyLinkedList23.get(100);
    tp2.Node node30 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList31 = new tp2.StrictlySortedSinglyLinkedList();
    int i32 = strictlySortedSinglyLinkedList31.getSize();
    tp2.IPBan iPBan33 = null;
    boolean b34 = strictlySortedSinglyLinkedList31.add(iPBan33);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList35 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node36 = strictlySortedSinglyLinkedList35.header;
    strictlySortedSinglyLinkedList31.header = node36;
    node30.next = node36;
    strictlySortedSinglyLinkedList23.header = node30;
    node20.next = node30;
    tp2.Node node41 = node20.next;
    boolean b42 = iP19.equals((java.lang.Object)node41);
    iPBan11.ip = iP19;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i5 + "' != '" + 10+ "'", i5.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "10.0.0.100"+ "'", str6.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "IPBan [ip=10.0.-1.100, expires=0]"+ "'", str12.equals("IPBan [ip=10.0.-1.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L+ "'", long13.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "IPBan [ip=10.0.-1.100, expires=0]"+ "'", str14.equals("IPBan [ip=10.0.-1.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test061"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList3 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList3.size = 10;
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    server6.update();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP13.setFirst((java.lang.Integer)1);
    java.lang.Integer i16 = iP13.getSecond();
    boolean b17 = server6.addException(iP13);
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = server6.addException(iP23);
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b33 = server6.removeBan(iP32);
    iP32.setThird((java.lang.Integer)0);
    boolean b36 = strictlySortedSinglyLinkedList3.removeFromIP(iP32);
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    server37.update();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP44.setFirst((java.lang.Integer)1);
    java.lang.Integer i47 = iP44.getSecond();
    boolean b48 = server37.addException(iP44);
    boolean b49 = strictlySortedSinglyLinkedList3.removeFromIP(iP44);
    singlyLinkedList0.add(iP44);
    tp2.IP iP52 = singlyLinkedList0.get(1);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    singlyLinkedList0.add(iP57);
    java.lang.Integer i61 = iP57.getSecond();
    java.lang.Integer i62 = iP57.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 0+ "'", i16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 0+ "'", i47.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 0+ "'", i61.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i62 + "' != '" + 0+ "'", i62.equals(0));

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test062"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    java.lang.String str5 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node6 = new tp2.Node();
    tp2.IPBan iPBan7 = null;
    node6.element = iPBan7;
    tp2.IPBan iPBan9 = node6.element;
    strictlySortedSinglyLinkedList0.header = node6;
    tp2.IPBan iPBan12 = strictlySortedSinglyLinkedList0.get((-1));
    tp2.IPBan iPBan14 = strictlySortedSinglyLinkedList0.get((int)' ');
    int i15 = strictlySortedSinglyLinkedList0.size;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "{[null]}"+ "'", str5.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test063"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList50 = new tp2.StrictlySortedSinglyLinkedList();
    int i51 = strictlySortedSinglyLinkedList50.getSize();
    tp2.IPBan iPBan52 = null;
    boolean b53 = strictlySortedSinglyLinkedList50.add(iPBan52);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList54 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node55 = strictlySortedSinglyLinkedList54.header;
    strictlySortedSinglyLinkedList50.header = node55;
    tp2.IPBan iPBan57 = node55.element;
    strictlySortedSinglyLinkedList0.header = node55;
    strictlySortedSinglyLinkedList0.size = 0;
    strictlySortedSinglyLinkedList0.size = (byte)0;
    java.lang.String str63 = strictlySortedSinglyLinkedList0.toString();
    java.util.Set<tp2.IPBan> set_iPBan64 = null;
    boolean b65 = strictlySortedSinglyLinkedList0.repOk(set_iPBan64);
    int i66 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "{}"+ "'", str63.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test064"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    tp2.Entry entry2 = new tp2.Entry();
    java.lang.String str3 = entry2.toString();
    entry0.next = entry2;
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    tp2.IP iP14 = entry5.element;
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP16 = null;
    boolean b17 = server15.connect(iP16);
    java.lang.String str18 = server15.toString();
    java.lang.String str19 = server15.toString();
    tp2.SinglyLinkedList singlyLinkedList20 = new tp2.SinglyLinkedList();
    tp2.IP iP22 = singlyLinkedList20.get((int)' ');
    tp2.Entry entry23 = new tp2.Entry();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i29 = iP28.getFirst();
    java.lang.String str30 = iP28.toString();
    entry23.element = iP28;
    boolean b32 = singlyLinkedList20.remove(iP28);
    tp2.IPBan iPBan34 = new tp2.IPBan(iP28, (java.lang.Long)1L);
    java.lang.String str35 = iPBan34.toString();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i41 = iP40.getFirst();
    java.lang.String str42 = iP40.toString();
    java.lang.String str43 = iP40.toString();
    iPBan34.setIp(iP40);
    java.lang.Integer i45 = iP40.getFirst();
    boolean b46 = server15.removeException(iP40);
    iP40.setThird((java.lang.Integer)(-1));
    entry5.element = iP40;
    entry2.next = entry5;
    tp2.IP iP51 = entry2.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 10+ "'", i29.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "10.0.0.100"+ "'", str30.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str35.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i41 + "' != '" + 10+ "'", i41.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 10+ "'", i45.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP51);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test065"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList15.size = 10;
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    server18.update();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setFirst((java.lang.Integer)1);
    java.lang.Integer i28 = iP25.getSecond();
    boolean b29 = server18.addException(iP25);
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server18.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b45 = server18.removeBan(iP44);
    iP44.setThird((java.lang.Integer)0);
    boolean b48 = strictlySortedSinglyLinkedList15.removeFromIP(iP44);
    boolean b49 = singlyLinkedList0.contains(iP44);
    tp2.Server server50 = new tp2.Server();
    java.lang.String str51 = server50.toString();
    server50.update();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    java.lang.Integer i60 = iP57.getSecond();
    boolean b61 = server50.addException(iP57);
    tp2.Entry entry62 = new tp2.Entry();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i68 = iP67.getFirst();
    java.lang.String str69 = iP67.toString();
    entry62.element = iP67;
    boolean b71 = server50.addException(iP67);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b77 = server50.removeBan(iP76);
    iP76.setThird((java.lang.Integer)0);
    boolean b80 = singlyLinkedList0.remove(iP76);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP85.setFirst((java.lang.Integer)1);
    singlyLinkedList0.add(iP85);
    tp2.IP iP90 = singlyLinkedList0.get((int)(short)0);
    iP90.setThird((java.lang.Integer)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 0+ "'", i28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 0+ "'", i60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 10+ "'", i68.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "10.0.0.100"+ "'", str69.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP90);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test066"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList15.size = 10;
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    server18.update();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setFirst((java.lang.Integer)1);
    java.lang.Integer i28 = iP25.getSecond();
    boolean b29 = server18.addException(iP25);
    tp2.Entry entry30 = new tp2.Entry();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.String str37 = iP35.toString();
    entry30.element = iP35;
    boolean b39 = server18.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b45 = server18.removeBan(iP44);
    iP44.setThird((java.lang.Integer)0);
    boolean b48 = strictlySortedSinglyLinkedList15.removeFromIP(iP44);
    boolean b49 = singlyLinkedList0.contains(iP44);
    tp2.Server server50 = new tp2.Server();
    java.lang.String str51 = server50.toString();
    server50.update();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP57.setFirst((java.lang.Integer)1);
    java.lang.Integer i60 = iP57.getSecond();
    boolean b61 = server50.addException(iP57);
    tp2.Entry entry62 = new tp2.Entry();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i68 = iP67.getFirst();
    java.lang.String str69 = iP67.toString();
    entry62.element = iP67;
    boolean b71 = server50.addException(iP67);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b77 = server50.removeBan(iP76);
    iP76.setThird((java.lang.Integer)0);
    boolean b80 = singlyLinkedList0.remove(iP76);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP85.setFirst((java.lang.Integer)1);
    singlyLinkedList0.add(iP85);
    tp2.IP iP90 = singlyLinkedList0.get((int)(byte)10);
    int i91 = singlyLinkedList0.getSize();
    tp2.IP iP93 = singlyLinkedList0.get(10);
    java.util.Set<tp2.IP> set_iP94 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b95 = singlyLinkedList0.repOk(set_iP94);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 0+ "'", i28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 10+ "'", i36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "10.0.0.100"+ "'", str37.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 0+ "'", i60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 10+ "'", i68.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "10.0.0.100"+ "'", str69.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP93);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test067"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = server0.addException(iP17);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b27 = server0.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b36 = server28.connect(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP38 = null;
    boolean b39 = server37.connect(iP38);
    java.lang.String str40 = server37.toString();
    java.lang.String str41 = server37.toString();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = server37.connect(iP47);
    boolean b52 = server28.removeException(iP47);
    boolean b53 = server0.connect(iP47);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP58.setSecond((java.lang.Integer)1);
    boolean b61 = server0.removeBan(iP58);
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP63 = null;
    boolean b64 = server62.connect(iP63);
    java.lang.String str65 = server62.toString();
    java.lang.String str66 = server62.toString();
    tp2.Entry entry67 = new tp2.Entry();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    entry67.element = iP72;
    boolean b76 = server62.connect(iP72);
    boolean b77 = server0.addBan(iP72);
    server0.update();
    server0.update();
    java.lang.String str80 = server0.toString();
    server0.update();
    server0.update();
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i88 = iP87.getFirst();
    java.lang.String str89 = iP87.toString();
    java.lang.String str90 = iP87.toString();
    iP87.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan94 = new tp2.IPBan(iP87, (java.lang.Long)0L);
    java.lang.String str95 = iPBan94.toString();
    java.lang.String str96 = iPBan94.toString();
    tp2.IP iP97 = iPBan94.getIp();
    boolean b98 = server0.addException(iP97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1466185927199, exceptions=([10.0.0.100][1.0.0.100]), bans={}]"+ "'", str80.equals("Server [lastUpdate=1466185927199, exceptions=([10.0.0.100][1.0.0.100]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 10+ "'", i88.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "10.0.0.100"+ "'", str89.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "10.0.0.100"+ "'", str90.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "IPBan [ip=10.0.-1.100, expires=0]"+ "'", str95.equals("IPBan [ip=10.0.-1.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str96 + "' != '" + "IPBan [ip=10.0.-1.100, expires=0]"+ "'", str96.equals("IPBan [ip=10.0.-1.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == true);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test068"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get(1);
    java.lang.String str3 = singlyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList4 = new tp2.SinglyLinkedList();
    tp2.IP iP6 = singlyLinkedList4.get((int)' ');
    tp2.Entry entry7 = new tp2.Entry();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i13 = iP12.getFirst();
    java.lang.String str14 = iP12.toString();
    entry7.element = iP12;
    boolean b16 = singlyLinkedList4.remove(iP12);
    tp2.IP iP18 = singlyLinkedList4.get((int)'4');
    java.lang.String str19 = singlyLinkedList4.toString();
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP21 = null;
    boolean b22 = server20.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b28 = server20.connect(iP27);
    java.lang.Integer i29 = iP27.getFirst();
    java.lang.Integer i30 = iP27.getThird();
    boolean b31 = singlyLinkedList4.contains(iP27);
    tp2.IP iP33 = singlyLinkedList4.get((int)(byte)100);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList34 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList34.size = 10;
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    server37.update();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP44.setFirst((java.lang.Integer)1);
    java.lang.Integer i47 = iP44.getSecond();
    boolean b48 = server37.addException(iP44);
    tp2.Entry entry49 = new tp2.Entry();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i55 = iP54.getFirst();
    java.lang.String str56 = iP54.toString();
    entry49.element = iP54;
    boolean b58 = server37.addException(iP54);
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b64 = server37.removeBan(iP63);
    iP63.setThird((java.lang.Integer)0);
    boolean b67 = strictlySortedSinglyLinkedList34.removeFromIP(iP63);
    tp2.Server server68 = new tp2.Server();
    java.lang.String str69 = server68.toString();
    server68.update();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP75.setFirst((java.lang.Integer)1);
    java.lang.Integer i78 = iP75.getSecond();
    boolean b79 = server68.addException(iP75);
    boolean b80 = strictlySortedSinglyLinkedList34.removeFromIP(iP75);
    java.lang.Integer i81 = iP75.getFourth();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList82 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan83 = null;
    boolean b84 = strictlySortedSinglyLinkedList82.contains(iPBan83);
    int i85 = strictlySortedSinglyLinkedList82.getSize();
    tp2.IPBan iPBan87 = strictlySortedSinglyLinkedList82.get((int)'#');
    strictlySortedSinglyLinkedList82.size = (short)100;
    tp2.Node node90 = strictlySortedSinglyLinkedList82.header;
    boolean b91 = iP75.equals((java.lang.Object)strictlySortedSinglyLinkedList82);
    boolean b92 = singlyLinkedList4.contains(iP75);
    java.lang.Integer i93 = iP75.getFirst();
    boolean b94 = singlyLinkedList0.contains(iP75);
    java.lang.Integer i95 = iP75.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 10+ "'", i13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "()"+ "'", str19.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 100+ "'", i29.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + (-1)+ "'", i30.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 0+ "'", i47.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 10+ "'", i55.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "10.0.0.100"+ "'", str56.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str69.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i78 + "' != '" + 0+ "'", i78.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i81 + "' != '" + 100+ "'", i81.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i93 + "' != '" + 1+ "'", i93.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i95 + "' != '" + 0+ "'", i95.equals(0));

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test069"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.ip;
    java.lang.String str20 = iPBan14.toString();
    java.lang.Long long21 = iPBan14.getExpires();
    tp2.IP iP22 = iPBan14.getIp();
    tp2.IP iP23 = iPBan14.ip;
    tp2.Server server24 = new tp2.Server();
    tp2.IP iP25 = null;
    boolean b26 = server24.connect(iP25);
    java.lang.String str27 = server24.toString();
    java.lang.String str28 = server24.toString();
    tp2.IP iP29 = null;
    boolean b30 = server24.removeException(iP29);
    tp2.RealTime realTime31 = new tp2.RealTime();
    long long32 = realTime31.getCurrentTime();
    long long33 = realTime31.getCurrentTime();
    server24.setTime((tp2.ITime)realTime31);
    boolean b35 = iP23.equals((java.lang.Object)server24);
    iP23.setThird((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L+ "'", long21.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str27.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long32 == 1466185927255L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long33 == 1466185927255L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test070"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    int i3 = singlyLinkedList0.getSize();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    server4.update();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP11.setFirst((java.lang.Integer)1);
    java.lang.Integer i14 = iP11.getSecond();
    boolean b15 = server4.addException(iP11);
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = server4.addException(iP21);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList26 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList26.size = 10;
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    server29.update();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP36.setFirst((java.lang.Integer)1);
    java.lang.Integer i39 = iP36.getSecond();
    boolean b40 = server29.addException(iP36);
    tp2.Entry entry41 = new tp2.Entry();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i47 = iP46.getFirst();
    java.lang.String str48 = iP46.toString();
    entry41.element = iP46;
    boolean b50 = server29.addException(iP46);
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b56 = server29.removeBan(iP55);
    iP55.setThird((java.lang.Integer)0);
    boolean b59 = strictlySortedSinglyLinkedList26.removeFromIP(iP55);
    boolean b60 = server4.addException(iP55);
    java.lang.String str61 = iP55.toString();
    boolean b62 = singlyLinkedList0.contains(iP55);
    tp2.IP iP64 = singlyLinkedList0.get((int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 0+ "'", i14.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + 0+ "'", i39.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 10+ "'", i47.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "10.0.0.100"+ "'", str48.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "10.100.0.1"+ "'", str61.equals("10.100.0.1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP64);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test071"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)33, (java.lang.Integer)1, (java.lang.Integer)97, (java.lang.Integer)0);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test072"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b7 = strictlySortedSinglyLinkedList0.containsIP(iP6);
    int i8 = strictlySortedSinglyLinkedList0.size;
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    java.lang.String str16 = iP14.toString();
    entry9.element = iP14;
    tp2.Node node18 = new tp2.Node();
    tp2.IPBan iPBan19 = null;
    node18.element = iPBan19;
    tp2.SinglyLinkedList singlyLinkedList21 = new tp2.SinglyLinkedList();
    tp2.IP iP23 = singlyLinkedList21.get((int)' ');
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = singlyLinkedList21.remove(iP29);
    tp2.IPBan iPBan35 = new tp2.IPBan(iP29, (java.lang.Long)1L);
    java.lang.String str36 = iPBan35.toString();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i42 = iP41.getFirst();
    java.lang.String str43 = iP41.toString();
    java.lang.String str44 = iP41.toString();
    iPBan35.setIp(iP41);
    java.lang.Long long46 = iPBan35.getExpires();
    node18.element = iPBan35;
    boolean b48 = iP14.equals((java.lang.Object)iPBan35);
    tp2.SinglyLinkedList singlyLinkedList49 = new tp2.SinglyLinkedList();
    int i50 = singlyLinkedList49.getSize();
    java.lang.String str51 = singlyLinkedList49.toString();
    int i52 = singlyLinkedList49.getSize();
    java.util.Set<tp2.IP> set_iP53 = null;
    boolean b54 = singlyLinkedList49.repOk(set_iP53);
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b60 = singlyLinkedList49.remove(iP59);
    iPBan35.setIp(iP59);
    java.lang.String str62 = iPBan35.toString();
    boolean b63 = strictlySortedSinglyLinkedList0.contains(iPBan35);
    int i64 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan66 = strictlySortedSinglyLinkedList0.get(97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str36.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 10+ "'", i42.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "10.0.0.100"+ "'", str44.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L+ "'", long46.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "()"+ "'", str51.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "IPBan [ip=100.10.-1.10, expires=1]"+ "'", str62.equals("IPBan [ip=100.10.-1.10, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan66);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test073"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)'a');
    int i3 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test074"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.ip;
    java.lang.String str20 = iPBan14.toString();
    java.lang.Long long21 = iPBan14.getExpires();
    tp2.IP iP22 = iPBan14.getIp();
    tp2.IP iP23 = iPBan14.ip;
    java.lang.Long long24 = iPBan14.expires;
    iPBan14.setExpires((java.lang.Long)1466185901507L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L+ "'", long21.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L+ "'", long24.equals(0L));

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test075"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.Entry entry6 = entry1.next;
    tp2.Entry entry7 = new tp2.Entry();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i13 = iP12.getFirst();
    entry7.element = iP12;
    tp2.Entry entry15 = entry7.next;
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b24 = server16.connect(iP23);
    java.lang.Integer i25 = iP23.getFirst();
    entry7.element = iP23;
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP31.setThird((java.lang.Integer)1);
    entry7.element = iP31;
    tp2.Entry entry35 = new tp2.Entry();
    java.lang.String str36 = entry35.toString();
    tp2.Entry entry37 = new tp2.Entry();
    java.lang.String str38 = entry37.toString();
    entry35.next = entry37;
    entry7.next = entry35;
    entry1.next = entry35;
    tp2.IP iP42 = entry1.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 10+ "'", i13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 100+ "'", i25.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[null]"+ "'", str36.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[null]"+ "'", str38.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP42);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test076"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP5.setSecond((java.lang.Integer)(-1));
    boolean b8 = server0.addException(iP5);
    java.lang.String str9 = server0.toString();
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    java.lang.String str32 = iP27.toString();
    java.lang.Integer i33 = iP27.getSecond();
    boolean b34 = server0.removeBan(iP27);
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    int i36 = singlyLinkedList35.getSize();
    java.lang.String str37 = singlyLinkedList35.toString();
    int i38 = singlyLinkedList35.getSize();
    java.util.Set<tp2.IP> set_iP39 = null;
    boolean b40 = singlyLinkedList35.repOk(set_iP39);
    int i41 = singlyLinkedList35.getSize();
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    entry42.element = iP47;
    tp2.Entry entry50 = entry42.next;
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP52 = null;
    boolean b53 = server51.connect(iP52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b59 = server51.connect(iP58);
    java.lang.Integer i60 = iP58.getFirst();
    entry42.element = iP58;
    iP58.setFourth((java.lang.Integer)100);
    java.lang.String str64 = iP58.toString();
    singlyLinkedList35.add(iP58);
    boolean b66 = server0.removeBan(iP58);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=null, exceptions=([10.-1.0.100]), bans={}]"+ "'", str9.equals("Server [lastUpdate=null, exceptions=([10.-1.0.100]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 0+ "'", i33.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "()"+ "'", str37.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 100+ "'", i60.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "100.10.-1.100"+ "'", str64.equals("100.10.-1.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test077"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    java.lang.String str14 = iP11.toString();
    iP11.setThird((java.lang.Integer)(-1));
    boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP11);
    tp2.IPBan iPBan19 = strictlySortedSinglyLinkedList0.get((int)(short)(-1));
    java.util.Set<tp2.IPBan> set_iPBan20 = null;
    boolean b21 = strictlySortedSinglyLinkedList0.repOk(set_iPBan20);
    java.util.Set<tp2.IPBan> set_iPBan22 = null;
    boolean b23 = strictlySortedSinglyLinkedList0.repOk(set_iPBan22);
    int i24 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test078"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = entry0.next;
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b17 = server9.connect(iP16);
    java.lang.Integer i18 = iP16.getFirst();
    entry0.element = iP16;
    java.lang.Integer i20 = iP16.getThird();
    tp2.IPBan iPBan22 = new tp2.IPBan(iP16, (java.lang.Long)1466185883089L);
    iPBan22.expires = 1466185916503L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 100+ "'", i18.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + (-1)+ "'", i20.equals((-1)));

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test079"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    boolean b3 = singlyLinkedList0.isEmpty();
    tp2.Server server4 = new tp2.Server();
    tp2.IP iP5 = null;
    boolean b6 = server4.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b12 = server4.connect(iP11);
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP14 = null;
    boolean b15 = server13.connect(iP14);
    java.lang.String str16 = server13.toString();
    java.lang.String str17 = server13.toString();
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = server13.connect(iP23);
    boolean b28 = server4.removeException(iP23);
    java.lang.Integer i29 = iP23.getThird();
    boolean b30 = singlyLinkedList0.contains(iP23);
    int i31 = singlyLinkedList0.getSize();
    java.lang.String str32 = singlyLinkedList0.toString();
    tp2.Entry entry33 = new tp2.Entry();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i39 = iP38.getFirst();
    java.lang.String str40 = iP38.toString();
    entry33.element = iP38;
    tp2.Node node42 = new tp2.Node();
    tp2.IPBan iPBan43 = null;
    node42.element = iPBan43;
    tp2.SinglyLinkedList singlyLinkedList45 = new tp2.SinglyLinkedList();
    tp2.IP iP47 = singlyLinkedList45.get((int)' ');
    tp2.Entry entry48 = new tp2.Entry();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i54 = iP53.getFirst();
    java.lang.String str55 = iP53.toString();
    entry48.element = iP53;
    boolean b57 = singlyLinkedList45.remove(iP53);
    tp2.IPBan iPBan59 = new tp2.IPBan(iP53, (java.lang.Long)1L);
    java.lang.String str60 = iPBan59.toString();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i66 = iP65.getFirst();
    java.lang.String str67 = iP65.toString();
    java.lang.String str68 = iP65.toString();
    iPBan59.setIp(iP65);
    java.lang.Long long70 = iPBan59.getExpires();
    node42.element = iPBan59;
    boolean b72 = iP38.equals((java.lang.Object)iPBan59);
    tp2.SinglyLinkedList singlyLinkedList73 = new tp2.SinglyLinkedList();
    int i74 = singlyLinkedList73.getSize();
    java.lang.String str75 = singlyLinkedList73.toString();
    int i76 = singlyLinkedList73.getSize();
    java.util.Set<tp2.IP> set_iP77 = null;
    boolean b78 = singlyLinkedList73.repOk(set_iP77);
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b84 = singlyLinkedList73.remove(iP83);
    iPBan59.setIp(iP83);
    boolean b86 = singlyLinkedList0.remove(iP83);
    java.lang.String str87 = singlyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 0+ "'", i29.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "()"+ "'", str32.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + 10+ "'", i39.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "10.0.0.100"+ "'", str40.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "10.0.0.100"+ "'", str55.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str60.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i66 + "' != '" + 10+ "'", i66.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "10.0.0.100"+ "'", str67.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "10.0.0.100"+ "'", str68.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L+ "'", long70.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "()"+ "'", str75.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "()"+ "'", str87.equals("()"));

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test080"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    iPBan26.expires = 1466185871428L;
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP30 = null;
    boolean b31 = server29.connect(iP30);
    java.lang.String str32 = server29.toString();
    java.lang.String str33 = server29.toString();
    tp2.Entry entry34 = new tp2.Entry();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    entry34.element = iP39;
    boolean b43 = server29.connect(iP39);
    iPBan26.ip = iP39;
    tp2.IP iP45 = iPBan26.ip;
    java.lang.Long long46 = iPBan26.getExpires();
    tp2.IP iP47 = iPBan26.getIp();
    boolean b48 = iP7.equals((java.lang.Object)iP47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1466185871428L+ "'", long46.equals(1466185871428L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test081"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.size;
    tp2.Node node5 = strictlySortedSinglyLinkedList0.header;
    java.lang.String str6 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node7 = new tp2.Node();
    tp2.IPBan iPBan8 = null;
    node7.element = iPBan8;
    tp2.SinglyLinkedList singlyLinkedList10 = new tp2.SinglyLinkedList();
    tp2.IP iP12 = singlyLinkedList10.get((int)' ');
    tp2.Entry entry13 = new tp2.Entry();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i19 = iP18.getFirst();
    java.lang.String str20 = iP18.toString();
    entry13.element = iP18;
    boolean b22 = singlyLinkedList10.remove(iP18);
    tp2.IPBan iPBan24 = new tp2.IPBan(iP18, (java.lang.Long)1L);
    java.lang.String str25 = iPBan24.toString();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i31 = iP30.getFirst();
    java.lang.String str32 = iP30.toString();
    java.lang.String str33 = iP30.toString();
    iPBan24.setIp(iP30);
    java.lang.Long long35 = iPBan24.getExpires();
    node7.element = iPBan24;
    iPBan24.expires = 1466185870380L;
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    java.lang.Integer i46 = iP43.getFourth();
    iPBan24.ip = iP43;
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1466185890638L);
    tp2.IP iP50 = iPBan49.ip;
    iPBan49.expires = 1466185875369L;
    // The following exception was thrown during execution in test generation
    try {
      boolean b53 = strictlySortedSinglyLinkedList0.add(iPBan49);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "{[null]}"+ "'", str6.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 10+ "'", i19.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "10.0.0.100"+ "'", str20.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str25.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 10+ "'", i31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "10.0.0.100"+ "'", str33.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L+ "'", long35.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 100+ "'", i46.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP50);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test082"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    boolean b3 = singlyLinkedList0.isEmpty();
    tp2.Server server4 = new tp2.Server();
    tp2.IP iP5 = null;
    boolean b6 = server4.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b12 = server4.connect(iP11);
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP14 = null;
    boolean b15 = server13.connect(iP14);
    java.lang.String str16 = server13.toString();
    java.lang.String str17 = server13.toString();
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = server13.connect(iP23);
    boolean b28 = server4.removeException(iP23);
    java.lang.Integer i29 = iP23.getThird();
    boolean b30 = singlyLinkedList0.contains(iP23);
    int i31 = singlyLinkedList0.getSize();
    tp2.Entry entry32 = new tp2.Entry();
    java.lang.String str33 = entry32.toString();
    java.lang.String str34 = entry32.toString();
    tp2.Entry entry35 = new tp2.Entry();
    java.lang.String str36 = entry35.toString();
    entry32.next = entry35;
    tp2.Entry entry38 = new tp2.Entry();
    java.lang.String str39 = entry38.toString();
    entry32.next = entry38;
    java.lang.String str41 = entry32.toString();
    tp2.Entry entry42 = entry32.next;
    tp2.Entry entry43 = new tp2.Entry();
    java.lang.String str44 = entry43.toString();
    java.lang.String str45 = entry43.toString();
    tp2.IP iP46 = entry43.element;
    tp2.Entry entry47 = new tp2.Entry();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    entry47.element = iP52;
    tp2.IP iP55 = entry47.element;
    entry43.next = entry47;
    tp2.Entry entry57 = entry43.next;
    entry42.next = entry57;
    tp2.IP iP59 = entry42.element;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList60 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan61 = null;
    boolean b62 = strictlySortedSinglyLinkedList60.contains(iPBan61);
    tp2.Server server63 = new tp2.Server();
    java.lang.String str64 = server63.toString();
    server63.update();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i71 = iP70.getFirst();
    boolean b72 = server63.connect(iP70);
    boolean b73 = strictlySortedSinglyLinkedList60.removeFromIP(iP70);
    java.lang.Integer i74 = iP70.getThird();
    iP70.setFourth((java.lang.Integer)100);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList77 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan78 = null;
    boolean b79 = strictlySortedSinglyLinkedList77.add(iPBan78);
    java.util.Set<tp2.IPBan> set_iPBan80 = null;
    boolean b81 = strictlySortedSinglyLinkedList77.repOk(set_iPBan80);
    tp2.Node node82 = strictlySortedSinglyLinkedList77.header;
    boolean b83 = iP70.equals((java.lang.Object)node82);
    iP70.setThird((java.lang.Integer)32);
    entry42.element = iP70;
    singlyLinkedList0.add(iP70);
    int i88 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP89 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b90 = singlyLinkedList0.repOk(set_iP89);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 0+ "'", i29.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "[null]"+ "'", str33.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[null]"+ "'", str34.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[null]"+ "'", str36.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[null]"+ "'", str39.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[null]"+ "'", str41.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "[null]"+ "'", str44.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[null]"+ "'", str45.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str64.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i71 + "' != '" + 100+ "'", i71.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i74 + "' != '" + (-1)+ "'", i74.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 1);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test083"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.IPBan iPBan3 = node0.element;
    tp2.SinglyLinkedList singlyLinkedList4 = new tp2.SinglyLinkedList();
    tp2.IP iP6 = singlyLinkedList4.get((int)' ');
    tp2.Entry entry7 = new tp2.Entry();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i13 = iP12.getFirst();
    java.lang.String str14 = iP12.toString();
    entry7.element = iP12;
    boolean b16 = singlyLinkedList4.remove(iP12);
    tp2.IPBan iPBan18 = new tp2.IPBan(iP12, (java.lang.Long)1L);
    java.lang.String str19 = iPBan18.toString();
    iPBan18.setExpires((java.lang.Long)0L);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP26.setSecond((java.lang.Integer)(-1));
    iPBan18.ip = iP26;
    iPBan18.setExpires((java.lang.Long)200000L);
    iPBan18.expires = 1466185890638L;
    node0.element = iPBan18;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 10+ "'", i13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str19.equals("IPBan [ip=10.0.0.100, expires=1]"));

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test084"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = new tp2.Entry();
    java.lang.String str4 = entry3.toString();
    entry0.next = entry3;
    tp2.IP iP6 = entry3.element;
    tp2.IP iP7 = entry3.element;
    tp2.SinglyLinkedList singlyLinkedList8 = new tp2.SinglyLinkedList();
    java.lang.String str9 = singlyLinkedList8.toString();
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP11 = null;
    boolean b12 = server10.connect(iP11);
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b18 = server10.connect(iP17);
    tp2.Server server19 = new tp2.Server();
    tp2.IP iP20 = null;
    boolean b21 = server19.connect(iP20);
    java.lang.String str22 = server19.toString();
    java.lang.String str23 = server19.toString();
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = server19.connect(iP29);
    boolean b34 = server10.removeException(iP29);
    boolean b35 = singlyLinkedList8.remove(iP29);
    java.lang.String str36 = singlyLinkedList8.toString();
    tp2.IP iP38 = singlyLinkedList8.get((int)(byte)10);
    tp2.IP iP40 = singlyLinkedList8.get((int)(byte)10);
    java.util.Set<tp2.IP> set_iP41 = null;
    boolean b42 = singlyLinkedList8.repOk(set_iP41);
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    server43.update();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP50.setFirst((java.lang.Integer)1);
    java.lang.Integer i53 = iP50.getSecond();
    boolean b54 = server43.addException(iP50);
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    entry55.element = iP60;
    boolean b64 = server43.addException(iP60);
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b70 = server43.removeBan(iP69);
    iP69.setThird((java.lang.Integer)0);
    iP69.setFourth((java.lang.Integer)10);
    java.lang.String str75 = iP69.toString();
    singlyLinkedList8.add(iP69);
    entry3.element = iP69;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[null]"+ "'", str4.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "()"+ "'", str9.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "()"+ "'", str36.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 0+ "'", i53.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "10.100.0.10"+ "'", str75.equals("10.100.0.10"));

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test085"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)'4');
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    boolean b22 = singlyLinkedList0.contains(iP19);
    java.lang.String str23 = singlyLinkedList0.toString();
    int i24 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "()"+ "'", str23.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test086"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    java.lang.String str5 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node6 = new tp2.Node();
    tp2.IPBan iPBan7 = null;
    node6.element = iPBan7;
    tp2.IPBan iPBan9 = node6.element;
    strictlySortedSinglyLinkedList0.header = node6;
    int i11 = strictlySortedSinglyLinkedList0.getSize();
    int i12 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "{[null]}"+ "'", str5.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test087"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    java.lang.String str23 = iP20.toString();
    iPBan14.setIp(iP20);
    java.lang.Long long25 = iPBan14.getExpires();
    iPBan14.setExpires((java.lang.Long)0L);
    tp2.IP iP28 = iPBan14.ip;
    iP28.setFourth((java.lang.Integer)11);
    java.lang.String str31 = iP28.toString();
    iP28.setThird((java.lang.Integer)32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L+ "'", long25.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.11"+ "'", str31.equals("10.0.0.11"));

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test088"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP5.setSecond((java.lang.Integer)(-1));
    boolean b8 = server0.addException(iP5);
    server0.update();
    tp2.SinglyLinkedList singlyLinkedList10 = new tp2.SinglyLinkedList();
    tp2.IP iP12 = singlyLinkedList10.get((int)' ');
    tp2.Entry entry13 = new tp2.Entry();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i19 = iP18.getFirst();
    java.lang.String str20 = iP18.toString();
    entry13.element = iP18;
    boolean b22 = singlyLinkedList10.remove(iP18);
    boolean b23 = server0.connect(iP18);
    java.lang.String str24 = server0.toString();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)32, (java.lang.Integer)11, (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b30 = server0.removeBan(iP29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i19 + "' != '" + 10+ "'", i19.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "10.0.0.100"+ "'", str20.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=1466185927435, exceptions=([10.-1.0.100]), bans={}]"+ "'", str24.equals("Server [lastUpdate=1466185927435, exceptions=([10.-1.0.100]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test089"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan16 = null;
    boolean b17 = strictlySortedSinglyLinkedList15.contains(iPBan16);
    int i18 = strictlySortedSinglyLinkedList15.getSize();
    tp2.IPBan iPBan20 = strictlySortedSinglyLinkedList15.get((int)'#');
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setSecond((java.lang.Integer)(-1));
    boolean b28 = strictlySortedSinglyLinkedList15.removeFromIP(iP25);
    iPBan14.ip = iP25;
    java.lang.Long long30 = iPBan14.expires;
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i36 = iP35.getFirst();
    java.lang.Integer i37 = iP35.getSecond();
    iPBan14.setIp(iP35);
    tp2.SinglyLinkedList singlyLinkedList39 = new tp2.SinglyLinkedList();
    tp2.IP iP41 = singlyLinkedList39.get((int)' ');
    tp2.Entry entry42 = new tp2.Entry();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i48 = iP47.getFirst();
    java.lang.String str49 = iP47.toString();
    entry42.element = iP47;
    boolean b51 = singlyLinkedList39.remove(iP47);
    tp2.IPBan iPBan53 = new tp2.IPBan(iP47, (java.lang.Long)1L);
    java.lang.Integer i54 = iP47.getFirst();
    iPBan14.setIp(iP47);
    iPBan14.setExpires((java.lang.Long)1466185890280L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L+ "'", long30.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i36 + "' != '" + 100+ "'", i36.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + 10+ "'", i48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test090"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i5 = iP4.getFirst();
    java.lang.String str6 = iP4.toString();
    java.lang.String str7 = iP4.toString();
    iP4.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan11 = new tp2.IPBan(iP4, (java.lang.Long)0L);
    tp2.IP iP12 = iPBan11.ip;
    java.lang.String str13 = iPBan11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i5 + "' != '" + 10+ "'", i5.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "10.0.0.100"+ "'", str6.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "IPBan [ip=10.0.-1.100, expires=0]"+ "'", str13.equals("IPBan [ip=10.0.-1.100, expires=0]"));

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test091"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    strictlySortedSinglyLinkedList0.size = 0;
    int i9 = strictlySortedSinglyLinkedList0.size;
    tp2.Node node10 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node11 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node12 = node11.next;
    tp2.Node node13 = node11.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node13);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test092"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = new tp2.Node();
    tp2.IPBan iPBan5 = null;
    node4.element = iPBan5;
    tp2.IPBan iPBan7 = null;
    node4.element = iPBan7;
    tp2.IPBan iPBan9 = node4.element;
    strictlySortedSinglyLinkedList0.header = node4;
    int i11 = strictlySortedSinglyLinkedList0.size;
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    server12.update();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP19.setFirst((java.lang.Integer)1);
    java.lang.Integer i22 = iP19.getSecond();
    boolean b23 = server12.addException(iP19);
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = server12.addException(iP29);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b39 = server12.removeBan(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP41 = null;
    boolean b42 = server40.connect(iP41);
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b48 = server40.connect(iP47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP50 = null;
    boolean b51 = server49.connect(iP50);
    java.lang.String str52 = server49.toString();
    java.lang.String str53 = server49.toString();
    tp2.Entry entry54 = new tp2.Entry();
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i60 = iP59.getFirst();
    java.lang.String str61 = iP59.toString();
    entry54.element = iP59;
    boolean b63 = server49.connect(iP59);
    boolean b64 = server40.removeException(iP59);
    boolean b65 = server12.connect(iP59);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList66 = new tp2.StrictlySortedSinglyLinkedList();
    int i67 = strictlySortedSinglyLinkedList66.size;
    tp2.IPBan iPBan68 = null;
    boolean b69 = strictlySortedSinglyLinkedList66.add(iPBan68);
    boolean b70 = strictlySortedSinglyLinkedList66.isEmpty();
    tp2.Node node71 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList72 = new tp2.StrictlySortedSinglyLinkedList();
    int i73 = strictlySortedSinglyLinkedList72.getSize();
    tp2.IPBan iPBan74 = null;
    boolean b75 = strictlySortedSinglyLinkedList72.add(iPBan74);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList76 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node77 = strictlySortedSinglyLinkedList76.header;
    strictlySortedSinglyLinkedList72.header = node77;
    node71.next = node77;
    tp2.Node node80 = node71.next;
    strictlySortedSinglyLinkedList66.header = node80;
    java.lang.String str82 = strictlySortedSinglyLinkedList66.toString();
    tp2.Node node83 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList84 = new tp2.StrictlySortedSinglyLinkedList();
    int i85 = strictlySortedSinglyLinkedList84.getSize();
    tp2.IPBan iPBan86 = null;
    boolean b87 = strictlySortedSinglyLinkedList84.add(iPBan86);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList88 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node89 = strictlySortedSinglyLinkedList88.header;
    strictlySortedSinglyLinkedList84.header = node89;
    node83.next = node89;
    tp2.Node node92 = node83.next;
    tp2.Node node93 = node83.next;
    strictlySortedSinglyLinkedList66.header = node93;
    boolean b95 = iP59.equals((java.lang.Object)strictlySortedSinglyLinkedList66);
    tp2.Node node96 = strictlySortedSinglyLinkedList66.header;
    tp2.IPBan iPBan97 = node96.element;
    strictlySortedSinglyLinkedList0.header = node96;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 0+ "'", i22.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str52.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str53.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 10+ "'", i60.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "10.0.0.100"+ "'", str61.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "{}"+ "'", str82.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan97);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test093"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = new tp2.Node();
    tp2.IPBan iPBan5 = null;
    node4.element = iPBan5;
    tp2.IPBan iPBan7 = null;
    node4.element = iPBan7;
    tp2.IPBan iPBan9 = node4.element;
    strictlySortedSinglyLinkedList0.header = node4;
    java.lang.String str11 = strictlySortedSinglyLinkedList0.toString();
    int i12 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)2, (java.lang.Integer)1, (java.lang.Integer)2, (java.lang.Integer)10);
    boolean b18 = strictlySortedSinglyLinkedList0.containsIP(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "{}"+ "'", str11.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test094"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i8 = iP7.getFirst();
    java.lang.String str9 = iP7.toString();
    java.lang.String str10 = iP7.toString();
    iP7.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan14 = new tp2.IPBan(iP7, (java.lang.Long)0L);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP16 = null;
    boolean b17 = server15.connect(iP16);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b23 = server15.connect(iP22);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList24 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList24.size = 10;
    tp2.Server server27 = new tp2.Server();
    java.lang.String str28 = server27.toString();
    server27.update();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP34.setFirst((java.lang.Integer)1);
    java.lang.Integer i37 = iP34.getSecond();
    boolean b38 = server27.addException(iP34);
    tp2.Entry entry39 = new tp2.Entry();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i45 = iP44.getFirst();
    java.lang.String str46 = iP44.toString();
    entry39.element = iP44;
    boolean b48 = server27.addException(iP44);
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b54 = server27.removeBan(iP53);
    iP53.setThird((java.lang.Integer)0);
    boolean b57 = strictlySortedSinglyLinkedList24.removeFromIP(iP53);
    tp2.Server server58 = new tp2.Server();
    java.lang.String str59 = server58.toString();
    server58.update();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP65.setFirst((java.lang.Integer)1);
    java.lang.Integer i68 = iP65.getSecond();
    boolean b69 = server58.addException(iP65);
    boolean b70 = strictlySortedSinglyLinkedList24.removeFromIP(iP65);
    boolean b71 = server15.connect(iP65);
    tp2.Server server72 = new tp2.Server();
    tp2.IP iP73 = null;
    boolean b74 = server72.connect(iP73);
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b80 = server72.connect(iP79);
    java.lang.Integer i81 = iP79.getFirst();
    boolean b82 = server15.connect(iP79);
    java.lang.Integer i83 = iP79.getFirst();
    iPBan14.ip = iP79;
    tp2.IP iP85 = iPBan14.ip;
    iPBan14.setExpires((java.lang.Long)1466185872933L);
    boolean b88 = strictlySortedSinglyLinkedList0.add(iPBan14);
    int i89 = strictlySortedSinglyLinkedList0.size;
    int i90 = strictlySortedSinglyLinkedList0.getSize();
    int i91 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i8 + "' != '" + 10+ "'", i8.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "10.0.0.100"+ "'", str9.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 0+ "'", i37.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 10+ "'", i45.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "10.0.0.100"+ "'", str46.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str59.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 0+ "'", i68.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i81 + "' != '" + 100+ "'", i81.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i83 + "' != '" + 100+ "'", i83.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 11);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test095"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList9.size = 10;
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    server12.update();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP19.setFirst((java.lang.Integer)1);
    java.lang.Integer i22 = iP19.getSecond();
    boolean b23 = server12.addException(iP19);
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = server12.addException(iP29);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b39 = server12.removeBan(iP38);
    iP38.setThird((java.lang.Integer)0);
    boolean b42 = strictlySortedSinglyLinkedList9.removeFromIP(iP38);
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    server43.update();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP50.setFirst((java.lang.Integer)1);
    java.lang.Integer i53 = iP50.getSecond();
    boolean b54 = server43.addException(iP50);
    boolean b55 = strictlySortedSinglyLinkedList9.removeFromIP(iP50);
    boolean b56 = server0.connect(iP50);
    java.lang.String str57 = server0.toString();
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 0+ "'", i22.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 0+ "'", i53.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str57.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test096"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    java.lang.String str16 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node17 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList18 = new tp2.StrictlySortedSinglyLinkedList();
    int i19 = strictlySortedSinglyLinkedList18.getSize();
    tp2.IPBan iPBan20 = null;
    boolean b21 = strictlySortedSinglyLinkedList18.add(iPBan20);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList22 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node23 = strictlySortedSinglyLinkedList22.header;
    strictlySortedSinglyLinkedList18.header = node23;
    node17.next = node23;
    tp2.Node node26 = node17.next;
    tp2.Node node27 = node17.next;
    strictlySortedSinglyLinkedList0.header = node27;
    java.lang.String str29 = node27.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "{}"+ "'", str16.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[null]"+ "'", str29.equals("[null]"));

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test097"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    boolean b9 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node10 = strictlySortedSinglyLinkedList0.header;
    boolean b11 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node12 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList13 = new tp2.StrictlySortedSinglyLinkedList();
    int i14 = strictlySortedSinglyLinkedList13.getSize();
    tp2.IPBan iPBan15 = null;
    boolean b16 = strictlySortedSinglyLinkedList13.add(iPBan15);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList17 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node18 = strictlySortedSinglyLinkedList17.header;
    strictlySortedSinglyLinkedList13.header = node18;
    node12.next = node18;
    tp2.Node node21 = node12.next;
    tp2.IPBan iPBan22 = node21.element;
    tp2.IPBan iPBan23 = node21.element;
    tp2.Node node24 = new tp2.Node();
    tp2.IPBan iPBan25 = null;
    node24.element = iPBan25;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList27 = new tp2.StrictlySortedSinglyLinkedList();
    int i28 = strictlySortedSinglyLinkedList27.getSize();
    tp2.IPBan iPBan29 = null;
    boolean b30 = strictlySortedSinglyLinkedList27.add(iPBan29);
    tp2.Node node31 = strictlySortedSinglyLinkedList27.header;
    tp2.IPBan iPBan33 = strictlySortedSinglyLinkedList27.get(100);
    tp2.Node node34 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList35 = new tp2.StrictlySortedSinglyLinkedList();
    int i36 = strictlySortedSinglyLinkedList35.getSize();
    tp2.IPBan iPBan37 = null;
    boolean b38 = strictlySortedSinglyLinkedList35.add(iPBan37);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList39 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node40 = strictlySortedSinglyLinkedList39.header;
    strictlySortedSinglyLinkedList35.header = node40;
    node34.next = node40;
    strictlySortedSinglyLinkedList27.header = node34;
    node24.next = node34;
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i50 = iP49.getFirst();
    java.lang.String str51 = iP49.toString();
    java.lang.String str52 = iP49.toString();
    iP49.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan56 = new tp2.IPBan(iP49, (java.lang.Long)0L);
    node24.element = iPBan56;
    node21.element = iPBan56;
    tp2.Node node59 = node21.next;
    strictlySortedSinglyLinkedList0.header = node59;
    tp2.Node node61 = strictlySortedSinglyLinkedList0.header;
    // The following exception was thrown during execution in test generation
    try {
      boolean b62 = strictlySortedSinglyLinkedList0.isEmpty();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 10+ "'", i50.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "10.0.0.100"+ "'", str51.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "10.0.0.100"+ "'", str52.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node61);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test098"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.IP iP3 = entry0.element;
    tp2.Entry entry4 = new tp2.Entry();
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i10 = iP9.getFirst();
    entry4.element = iP9;
    tp2.IP iP12 = entry4.element;
    entry0.next = entry4;
    tp2.IP iP14 = entry4.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 10+ "'", i10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP14);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test099"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)100);
    java.lang.Integer i5 = iP4.getSecond();
    java.lang.String str6 = iP4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i5 + "' != '" + 10+ "'", i5.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "0.10.-1.100"+ "'", str6.equals("0.10.-1.100"));

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test100"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP56.setFirst((java.lang.Integer)1);
    java.lang.Integer i59 = iP56.getSecond();
    iP56.setThird((java.lang.Integer)(-1));
    iP56.setThird((java.lang.Integer)1);
    boolean b64 = strictlySortedSinglyLinkedList0.removeFromIP(iP56);
    tp2.SinglyLinkedList singlyLinkedList65 = new tp2.SinglyLinkedList();
    tp2.IP iP67 = singlyLinkedList65.get((int)' ');
    tp2.Entry entry68 = new tp2.Entry();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i74 = iP73.getFirst();
    java.lang.String str75 = iP73.toString();
    entry68.element = iP73;
    boolean b77 = singlyLinkedList65.remove(iP73);
    tp2.IPBan iPBan79 = new tp2.IPBan(iP73, (java.lang.Long)1L);
    java.lang.String str80 = iPBan79.toString();
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i86 = iP85.getFirst();
    java.lang.String str87 = iP85.toString();
    java.lang.String str88 = iP85.toString();
    iPBan79.setIp(iP85);
    java.lang.Integer i90 = iP85.getFourth();
    java.lang.Integer i91 = iP85.getSecond();
    boolean b92 = strictlySortedSinglyLinkedList0.removeFromIP(iP85);
    tp2.Node node93 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan94 = node93.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 0+ "'", i59.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i74 + "' != '" + 10+ "'", i74.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "10.0.0.100"+ "'", str75.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str80.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i86 + "' != '" + 10+ "'", i86.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "10.0.0.100"+ "'", str87.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "10.0.0.100"+ "'", str88.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i90 + "' != '" + 100+ "'", i90.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i91 + "' != '" + 0+ "'", i91.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan94);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test101"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)'4');
    java.lang.String str15 = singlyLinkedList0.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b24 = server16.connect(iP23);
    java.lang.Integer i25 = iP23.getFirst();
    java.lang.Integer i26 = iP23.getThird();
    boolean b27 = singlyLinkedList0.contains(iP23);
    tp2.IP iP29 = singlyLinkedList0.get((int)(byte)100);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList30 = new tp2.StrictlySortedSinglyLinkedList();
    int i31 = strictlySortedSinglyLinkedList30.size;
    tp2.IPBan iPBan32 = null;
    boolean b33 = strictlySortedSinglyLinkedList30.add(iPBan32);
    boolean b34 = strictlySortedSinglyLinkedList30.isEmpty();
    java.lang.String str35 = strictlySortedSinglyLinkedList30.toString();
    tp2.Node node36 = new tp2.Node();
    tp2.IPBan iPBan37 = null;
    node36.element = iPBan37;
    tp2.IPBan iPBan39 = node36.element;
    strictlySortedSinglyLinkedList30.header = node36;
    tp2.IPBan iPBan42 = strictlySortedSinglyLinkedList30.get((-1));
    tp2.SinglyLinkedList singlyLinkedList43 = new tp2.SinglyLinkedList();
    tp2.IP iP45 = singlyLinkedList43.get((int)' ');
    tp2.Entry entry46 = new tp2.Entry();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i52 = iP51.getFirst();
    java.lang.String str53 = iP51.toString();
    entry46.element = iP51;
    boolean b55 = singlyLinkedList43.remove(iP51);
    tp2.IPBan iPBan57 = new tp2.IPBan(iP51, (java.lang.Long)1L);
    java.lang.String str58 = iPBan57.toString();
    java.lang.Long long59 = iPBan57.getExpires();
    iPBan57.expires = 0L;
    boolean b62 = strictlySortedSinglyLinkedList30.contains(iPBan57);
    tp2.IP iP63 = iPBan57.ip;
    tp2.IP iP64 = iPBan57.ip;
    singlyLinkedList0.add(iP64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "()"+ "'", str15.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 100+ "'", i25.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + (-1)+ "'", i26.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "{[null]}"+ "'", str35.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i52 + "' != '" + 10+ "'", i52.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "10.0.0.100"+ "'", str53.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str58.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L+ "'", long59.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP64);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test102"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    boolean b2 = singlyLinkedList0.isEmpty();
    boolean b3 = singlyLinkedList0.isEmpty();
    tp2.SinglyLinkedList singlyLinkedList4 = new tp2.SinglyLinkedList();
    tp2.IP iP6 = singlyLinkedList4.get((int)' ');
    tp2.Entry entry7 = new tp2.Entry();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i13 = iP12.getFirst();
    java.lang.String str14 = iP12.toString();
    entry7.element = iP12;
    boolean b16 = singlyLinkedList4.remove(iP12);
    tp2.IP iP18 = singlyLinkedList4.get((int)'4');
    java.lang.String str19 = singlyLinkedList4.toString();
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP21 = null;
    boolean b22 = server20.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b28 = server20.connect(iP27);
    java.lang.Integer i29 = iP27.getFirst();
    java.lang.Integer i30 = iP27.getThird();
    boolean b31 = singlyLinkedList4.contains(iP27);
    java.lang.Integer i32 = iP27.getFirst();
    boolean b33 = singlyLinkedList0.contains(iP27);
    java.util.Set<tp2.IP> set_iP34 = null;
    boolean b35 = singlyLinkedList0.repOk(set_iP34);
    tp2.IP iP37 = singlyLinkedList0.get(2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 10+ "'", i13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "()"+ "'", str19.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 100+ "'", i29.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + (-1)+ "'", i30.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 100+ "'", i32.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test103"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP4.setFirst((java.lang.Integer)1);
    java.lang.Integer i7 = iP4.getFourth();
    tp2.IPBan iPBan9 = new tp2.IPBan(iP4, (java.lang.Long)1466185886166L);
    java.lang.Long long10 = iPBan9.getExpires();
    tp2.IP iP11 = iPBan9.ip;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i7 + "' != '" + 100+ "'", i7.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1466185886166L+ "'", long10.equals(1466185886166L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP11);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test104"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    boolean b10 = server0.removeException(iP7);
    tp2.SinglyLinkedList singlyLinkedList11 = new tp2.SinglyLinkedList();
    tp2.IP iP13 = singlyLinkedList11.get((int)' ');
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    entry14.element = iP19;
    boolean b23 = singlyLinkedList11.remove(iP19);
    tp2.IPBan iPBan25 = new tp2.IPBan(iP19, (java.lang.Long)1L);
    java.lang.String str26 = iPBan25.toString();
    iPBan25.setExpires((java.lang.Long)0L);
    java.lang.Long long29 = iPBan25.expires;
    tp2.IP iP30 = iPBan25.ip;
    java.lang.String str31 = iPBan25.toString();
    tp2.IP iP32 = iPBan25.getIp();
    iP32.setFirst((java.lang.Integer)100);
    boolean b35 = server0.addException(iP32);
    server0.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setThird((java.lang.Integer)1);
    java.lang.Object obj44 = null;
    boolean b45 = iP41.equals(obj44);
    iP41.setThird((java.lang.Integer)0);
    iP41.setSecond((java.lang.Integer)35);
    java.lang.Integer i50 = iP41.getFourth();
    boolean b51 = server0.connect(iP41);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str26.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L+ "'", long29.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str31.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 100+ "'", i50.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test105"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    tp2.IPBan iPBan51 = strictlySortedSinglyLinkedList0.get((int)' ');
    java.lang.String str52 = strictlySortedSinglyLinkedList0.toString();
    int i53 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str54 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "{}"+ "'", str52.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "{}"+ "'", str54.equals("{}"));

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test106"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    strictlySortedSinglyLinkedList0.size = 1;
    java.util.Set<tp2.IPBan> set_iPBan52 = null;
    boolean b53 = strictlySortedSinglyLinkedList0.repOk(set_iPBan52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test107"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    java.lang.String str14 = iP11.toString();
    iP11.setThird((java.lang.Integer)(-1));
    boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP11);
    boolean b18 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node19 = new tp2.Node();
    tp2.IPBan iPBan20 = null;
    node19.element = iPBan20;
    tp2.SinglyLinkedList singlyLinkedList22 = new tp2.SinglyLinkedList();
    tp2.IP iP24 = singlyLinkedList22.get((int)' ');
    tp2.Entry entry25 = new tp2.Entry();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i31 = iP30.getFirst();
    java.lang.String str32 = iP30.toString();
    entry25.element = iP30;
    boolean b34 = singlyLinkedList22.remove(iP30);
    tp2.IPBan iPBan36 = new tp2.IPBan(iP30, (java.lang.Long)1L);
    java.lang.String str37 = iPBan36.toString();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i43 = iP42.getFirst();
    java.lang.String str44 = iP42.toString();
    java.lang.String str45 = iP42.toString();
    iPBan36.setIp(iP42);
    java.lang.Long long47 = iPBan36.getExpires();
    node19.element = iPBan36;
    boolean b49 = strictlySortedSinglyLinkedList0.add(iPBan36);
    int i50 = strictlySortedSinglyLinkedList0.size;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 10+ "'", i31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str37.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 10+ "'", i43.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "10.0.0.100"+ "'", str44.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L+ "'", long47.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 2);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test108"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    boolean b10 = server0.removeException(iP7);
    tp2.Server server11 = new tp2.Server();
    tp2.IP iP12 = null;
    boolean b13 = server11.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b19 = server11.connect(iP18);
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP21 = null;
    boolean b22 = server20.connect(iP21);
    java.lang.String str23 = server20.toString();
    java.lang.String str24 = server20.toString();
    tp2.Entry entry25 = new tp2.Entry();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i31 = iP30.getFirst();
    java.lang.String str32 = iP30.toString();
    entry25.element = iP30;
    boolean b34 = server20.connect(iP30);
    boolean b35 = server11.removeException(iP30);
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP37 = null;
    boolean b38 = server36.connect(iP37);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b44 = server36.connect(iP43);
    java.lang.Integer i45 = iP43.getFirst();
    boolean b46 = server11.connect(iP43);
    boolean b47 = server0.addException(iP43);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)32, (java.lang.Integer)100, (java.lang.Integer)100, (java.lang.Integer)11);
    boolean b53 = server0.connect(iP52);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 10+ "'", i31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 100+ "'", i45.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test109"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)101, (java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)33);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test110"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.IPBan iPBan3 = null;
    node0.element = iPBan3;
    tp2.Server server5 = new tp2.Server();
    java.lang.String str6 = server5.toString();
    server5.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP12.setFirst((java.lang.Integer)1);
    java.lang.Integer i15 = iP12.getSecond();
    boolean b16 = server5.addException(iP12);
    tp2.Entry entry17 = new tp2.Entry();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i23 = iP22.getFirst();
    java.lang.String str24 = iP22.toString();
    entry17.element = iP22;
    boolean b26 = server5.addException(iP22);
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b32 = server5.removeBan(iP31);
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP34 = null;
    boolean b35 = server33.connect(iP34);
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b41 = server33.connect(iP40);
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP43 = null;
    boolean b44 = server42.connect(iP43);
    java.lang.String str45 = server42.toString();
    java.lang.String str46 = server42.toString();
    tp2.Entry entry47 = new tp2.Entry();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    entry47.element = iP52;
    boolean b56 = server42.connect(iP52);
    boolean b57 = server33.removeException(iP52);
    boolean b58 = server5.connect(iP52);
    java.lang.Integer i59 = iP52.getFirst();
    iP52.setSecond((java.lang.Integer)0);
    java.lang.Integer i62 = iP52.getThird();
    tp2.IPBan iPBan64 = new tp2.IPBan(iP52, (java.lang.Long)1466185872784L);
    node0.element = iPBan64;
    tp2.Node node66 = node0.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str6.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 0+ "'", i15.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 10+ "'", i23.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "10.0.0.100"+ "'", str24.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 10+ "'", i59.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i62 + "' != '" + 0+ "'", i62.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node66);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test111"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList3 = new tp2.StrictlySortedSinglyLinkedList();
    int i4 = strictlySortedSinglyLinkedList3.getSize();
    tp2.IPBan iPBan5 = null;
    boolean b6 = strictlySortedSinglyLinkedList3.add(iPBan5);
    tp2.Node node7 = strictlySortedSinglyLinkedList3.header;
    tp2.IPBan iPBan9 = strictlySortedSinglyLinkedList3.get(100);
    tp2.Node node10 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    int i12 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan13 = null;
    boolean b14 = strictlySortedSinglyLinkedList11.add(iPBan13);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node16 = strictlySortedSinglyLinkedList15.header;
    strictlySortedSinglyLinkedList11.header = node16;
    node10.next = node16;
    strictlySortedSinglyLinkedList3.header = node10;
    node0.next = node10;
    tp2.Node node21 = new tp2.Node();
    tp2.IPBan iPBan22 = null;
    node21.element = iPBan22;
    tp2.SinglyLinkedList singlyLinkedList24 = new tp2.SinglyLinkedList();
    tp2.IP iP26 = singlyLinkedList24.get((int)' ');
    tp2.Entry entry27 = new tp2.Entry();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    entry27.element = iP32;
    boolean b36 = singlyLinkedList24.remove(iP32);
    tp2.IPBan iPBan38 = new tp2.IPBan(iP32, (java.lang.Long)1L);
    java.lang.String str39 = iPBan38.toString();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i45 = iP44.getFirst();
    java.lang.String str46 = iP44.toString();
    java.lang.String str47 = iP44.toString();
    iPBan38.setIp(iP44);
    java.lang.Long long49 = iPBan38.getExpires();
    node21.element = iPBan38;
    tp2.IPBan iPBan51 = node21.element;
    java.lang.Long long52 = iPBan51.getExpires();
    node10.element = iPBan51;
    iPBan51.setExpires((java.lang.Long)1466185881284L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str39.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 10+ "'", i45.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "10.0.0.100"+ "'", str46.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "10.0.0.100"+ "'", str47.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L+ "'", long49.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L+ "'", long52.equals(1L));

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test112"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan16 = null;
    boolean b17 = strictlySortedSinglyLinkedList15.contains(iPBan16);
    int i18 = strictlySortedSinglyLinkedList15.getSize();
    tp2.IPBan iPBan20 = strictlySortedSinglyLinkedList15.get((int)'#');
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP25.setSecond((java.lang.Integer)(-1));
    boolean b28 = strictlySortedSinglyLinkedList15.removeFromIP(iP25);
    iPBan14.ip = iP25;
    iP25.setFourth((java.lang.Integer)(-1));
    java.lang.Integer i32 = iP25.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + (-1)+ "'", i32.equals((-1)));

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test113"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    iPBan14.expires = 1466185871428L;
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP18 = null;
    boolean b19 = server17.connect(iP18);
    java.lang.String str20 = server17.toString();
    java.lang.String str21 = server17.toString();
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server17.connect(iP27);
    iPBan14.ip = iP27;
    tp2.SinglyLinkedList singlyLinkedList33 = new tp2.SinglyLinkedList();
    tp2.IP iP35 = singlyLinkedList33.get((int)' ');
    tp2.Entry entry36 = new tp2.Entry();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i42 = iP41.getFirst();
    java.lang.String str43 = iP41.toString();
    entry36.element = iP41;
    boolean b45 = singlyLinkedList33.remove(iP41);
    tp2.IPBan iPBan47 = new tp2.IPBan(iP41, (java.lang.Long)1L);
    iPBan47.expires = 1466185871428L;
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP51 = null;
    boolean b52 = server50.connect(iP51);
    java.lang.String str53 = server50.toString();
    java.lang.String str54 = server50.toString();
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    entry55.element = iP60;
    boolean b64 = server50.connect(iP60);
    iPBan47.ip = iP60;
    iPBan14.ip = iP60;
    iPBan14.expires = (-1L);
    java.lang.String str69 = iPBan14.toString();
    tp2.IP iP70 = iPBan14.getIp();
    java.lang.Long long71 = iPBan14.getExpires();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 10+ "'", i42.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str53.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str54.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "IPBan [ip=10.0.0.100, expires=-1]"+ "'", str69.equals("IPBan [ip=10.0.0.100, expires=-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L)+ "'", long71.equals((-1L)));

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test114"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b8 = server0.connect(iP7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    int i10 = strictlySortedSinglyLinkedList9.getSize();
    tp2.IPBan iPBan11 = null;
    boolean b12 = strictlySortedSinglyLinkedList9.contains(iPBan11);
    int i13 = strictlySortedSinglyLinkedList9.getSize();
    tp2.Node node14 = new tp2.Node();
    tp2.IPBan iPBan15 = null;
    node14.element = iPBan15;
    tp2.SinglyLinkedList singlyLinkedList17 = new tp2.SinglyLinkedList();
    tp2.IP iP19 = singlyLinkedList17.get((int)' ');
    tp2.Entry entry20 = new tp2.Entry();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    entry20.element = iP25;
    boolean b29 = singlyLinkedList17.remove(iP25);
    tp2.IPBan iPBan31 = new tp2.IPBan(iP25, (java.lang.Long)1L);
    java.lang.String str32 = iPBan31.toString();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i38 = iP37.getFirst();
    java.lang.String str39 = iP37.toString();
    java.lang.String str40 = iP37.toString();
    iPBan31.setIp(iP37);
    java.lang.Long long42 = iPBan31.getExpires();
    node14.element = iPBan31;
    tp2.IPBan iPBan44 = node14.element;
    java.lang.String str45 = node14.toString();
    strictlySortedSinglyLinkedList9.header = node14;
    tp2.SinglyLinkedList singlyLinkedList47 = new tp2.SinglyLinkedList();
    tp2.IP iP49 = singlyLinkedList47.get((int)' ');
    tp2.Entry entry50 = new tp2.Entry();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i56 = iP55.getFirst();
    java.lang.String str57 = iP55.toString();
    entry50.element = iP55;
    boolean b59 = singlyLinkedList47.remove(iP55);
    tp2.IPBan iPBan61 = new tp2.IPBan(iP55, (java.lang.Long)1L);
    java.lang.String str62 = iPBan61.toString();
    iPBan61.setExpires((java.lang.Long)0L);
    java.lang.Long long65 = iPBan61.expires;
    tp2.IP iP66 = iPBan61.getIp();
    tp2.IP iP67 = iPBan61.ip;
    tp2.IP iP68 = iPBan61.getIp();
    iPBan61.expires = 1466185876788L;
    iPBan61.expires = 0L;
    tp2.Entry entry73 = new tp2.Entry();
    java.lang.String str74 = entry73.toString();
    java.lang.String str75 = entry73.toString();
    tp2.Entry entry76 = entry73.next;
    tp2.IP iP77 = entry73.element;
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i83 = iP82.getFirst();
    java.lang.String str84 = iP82.toString();
    java.lang.String str85 = iP82.toString();
    iP82.setThird((java.lang.Integer)(-1));
    entry73.element = iP82;
    tp2.IP iP89 = entry73.element;
    iP89.setFirst((java.lang.Integer)1);
    iPBan61.setIp(iP89);
    java.lang.Integer i93 = iP89.getThird();
    boolean b94 = strictlySortedSinglyLinkedList9.containsIP(iP89);
    boolean b95 = server0.removeException(iP89);
    java.lang.String str96 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str32.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i38 + "' != '" + 10+ "'", i38.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "10.0.0.100"+ "'", str39.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "10.0.0.100"+ "'", str40.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L+ "'", long42.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[IPBan [ip=10.0.0.100, expires=1]]"+ "'", str45.equals("[IPBan [ip=10.0.0.100, expires=1]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 10+ "'", i56.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "10.0.0.100"+ "'", str57.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str62.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L+ "'", long65.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "[null]"+ "'", str74.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "[null]"+ "'", str75.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i83 + "' != '" + 10+ "'", i83.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "10.0.0.100"+ "'", str84.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "10.0.0.100"+ "'", str85.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i93 + "' != '" + (-1)+ "'", i93.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str96 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str96.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test115"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.SinglyLinkedList singlyLinkedList16 = new tp2.SinglyLinkedList();
    tp2.IP iP18 = singlyLinkedList16.get((int)' ');
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = singlyLinkedList16.remove(iP24);
    tp2.IPBan iPBan30 = new tp2.IPBan(iP24, (java.lang.Long)1L);
    java.lang.String str31 = iPBan30.toString();
    iPBan30.setExpires((java.lang.Long)0L);
    java.lang.Long long34 = iPBan30.expires;
    tp2.IP iP35 = iPBan30.ip;
    java.lang.String str36 = iPBan30.toString();
    boolean b37 = strictlySortedSinglyLinkedList0.add(iPBan30);
    tp2.IP iP38 = iPBan30.ip;
    iP38.setFirst((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str31.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L+ "'", long34.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str36.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP38);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test116"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    tp2.Node node3 = strictlySortedSinglyLinkedList0.header;
    java.lang.String str4 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node5 = strictlySortedSinglyLinkedList0.header;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.size;
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    boolean b10 = strictlySortedSinglyLinkedList6.isEmpty();
    java.lang.String str11 = strictlySortedSinglyLinkedList6.toString();
    tp2.Node node12 = new tp2.Node();
    tp2.IPBan iPBan13 = null;
    node12.element = iPBan13;
    tp2.IPBan iPBan15 = node12.element;
    strictlySortedSinglyLinkedList6.header = node12;
    tp2.Entry entry17 = new tp2.Entry();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i23 = iP22.getFirst();
    entry17.element = iP22;
    tp2.IP iP25 = entry17.element;
    tp2.IPBan iPBan27 = new tp2.IPBan(iP25, (java.lang.Long)1466185871942L);
    node12.element = iPBan27;
    tp2.Node node29 = node12.next;
    node5.next = node29;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "{}"+ "'", str4.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "{[null]}"+ "'", str11.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 10+ "'", i23.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node29);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test117"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    server0.update();
    tp2.Server server6 = new tp2.Server();
    tp2.IP iP7 = null;
    boolean b8 = server6.connect(iP7);
    java.lang.String str9 = server6.toString();
    java.lang.String str10 = server6.toString();
    tp2.IP iP11 = null;
    boolean b12 = server6.removeException(iP11);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList13 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList13.size = 10;
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    server16.update();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP23.setFirst((java.lang.Integer)1);
    java.lang.Integer i26 = iP23.getSecond();
    boolean b27 = server16.addException(iP23);
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = server16.addException(iP33);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b43 = server16.removeBan(iP42);
    iP42.setThird((java.lang.Integer)0);
    boolean b46 = strictlySortedSinglyLinkedList13.removeFromIP(iP42);
    tp2.Server server47 = new tp2.Server();
    java.lang.String str48 = server47.toString();
    server47.update();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP54.setFirst((java.lang.Integer)1);
    java.lang.Integer i57 = iP54.getSecond();
    boolean b58 = server47.addException(iP54);
    boolean b59 = strictlySortedSinglyLinkedList13.removeFromIP(iP54);
    boolean b60 = server6.connect(iP54);
    tp2.RealTime realTime61 = new tp2.RealTime();
    long long62 = realTime61.getCurrentTime();
    server6.setTime((tp2.ITime)realTime61);
    long long64 = realTime61.getCurrentTime();
    long long65 = realTime61.getCurrentTime();
    server0.setTime((tp2.ITime)realTime61);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList67 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan68 = null;
    boolean b69 = strictlySortedSinglyLinkedList67.contains(iPBan68);
    tp2.Server server70 = new tp2.Server();
    java.lang.String str71 = server70.toString();
    server70.update();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i78 = iP77.getFirst();
    boolean b79 = server70.connect(iP77);
    boolean b80 = strictlySortedSinglyLinkedList67.removeFromIP(iP77);
    java.util.Set<tp2.IPBan> set_iPBan81 = null;
    boolean b82 = strictlySortedSinglyLinkedList67.repOk(set_iPBan81);
    tp2.Server server83 = new tp2.Server();
    tp2.IP iP84 = null;
    boolean b85 = server83.connect(iP84);
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b91 = server83.connect(iP90);
    java.lang.Integer i92 = iP90.getFirst();
    java.lang.Integer i93 = iP90.getFirst();
    boolean b94 = strictlySortedSinglyLinkedList67.containsIP(iP90);
    boolean b95 = server0.removeBan(iP90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 0+ "'", i57.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long62 == 1466185927845L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long64 == 1466185927845L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long65 == 1466185927845L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str71.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i78 + "' != '" + 100+ "'", i78.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i92 + "' != '" + 100+ "'", i92.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i93 + "' != '" + 100+ "'", i93.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test118"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    java.lang.String str19 = iP16.toString();
    iP16.setThird((java.lang.Integer)(-1));
    boolean b22 = server0.addBan(iP16);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList23 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node24 = strictlySortedSinglyLinkedList23.header;
    tp2.Node node25 = new tp2.Node();
    tp2.IPBan iPBan26 = null;
    node25.element = iPBan26;
    tp2.IPBan iPBan28 = null;
    node25.element = iPBan28;
    strictlySortedSinglyLinkedList23.header = node25;
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b36 = strictlySortedSinglyLinkedList23.containsIP(iP35);
    iP35.setThird((java.lang.Integer)100);
    boolean b39 = server0.removeException(iP35);
    iP35.setFirst((java.lang.Integer)1);
    java.lang.Integer i42 = iP35.getFourth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 0+ "'", i42.equals(0));

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test119"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    iPBan14.expires = 1466185877442L;
    tp2.IP iP20 = iPBan14.ip;
    java.lang.String str21 = iPBan14.toString();
    java.lang.Long long22 = iPBan14.getExpires();
    iPBan14.expires = 100L;
    tp2.IP iP25 = iPBan14.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "IPBan [ip=10.0.0.100, expires=1466185877442]"+ "'", str21.equals("IPBan [ip=10.0.0.100, expires=1466185877442]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1466185877442L+ "'", long22.equals(1466185877442L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP25);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test120"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.getIp();
    tp2.IP iP20 = iPBan14.ip;
    tp2.IP iP21 = iPBan14.getIp();
    tp2.IP iP22 = iPBan14.ip;
    java.lang.Integer i23 = iP22.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 10+ "'", i23.equals(10));

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test121"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    server4.update();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP11.setFirst((java.lang.Integer)1);
    java.lang.Integer i14 = iP11.getSecond();
    boolean b15 = server4.addException(iP11);
    boolean b16 = server0.addException(iP11);
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP21.setSecond((java.lang.Integer)1);
    boolean b24 = server0.addException(iP21);
    java.lang.String str25 = iP21.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 0+ "'", i14.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "100.1.-1.10"+ "'", str25.equals("100.1.-1.10"));

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test122"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP3 = null;
    boolean b4 = server2.connect(iP3);
    tp2.IP iP9 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b10 = server2.connect(iP9);
    tp2.Server server11 = new tp2.Server();
    tp2.IP iP12 = null;
    boolean b13 = server11.connect(iP12);
    java.lang.String str14 = server11.toString();
    java.lang.String str15 = server11.toString();
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = server11.connect(iP21);
    boolean b26 = server2.removeException(iP21);
    boolean b27 = singlyLinkedList0.remove(iP21);
    java.util.Set<tp2.IP> set_iP28 = null;
    boolean b29 = singlyLinkedList0.repOk(set_iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test123"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    java.lang.String str34 = strictlySortedSinglyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    java.lang.String str50 = iPBan49.toString();
    boolean b51 = strictlySortedSinglyLinkedList0.contains(iPBan49);
    tp2.SinglyLinkedList singlyLinkedList52 = new tp2.SinglyLinkedList();
    tp2.IP iP54 = singlyLinkedList52.get((int)' ');
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    entry55.element = iP60;
    boolean b64 = singlyLinkedList52.remove(iP60);
    tp2.IPBan iPBan66 = new tp2.IPBan(iP60, (java.lang.Long)1L);
    tp2.Server server67 = new tp2.Server();
    java.lang.String str68 = server67.toString();
    server67.update();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i75 = iP74.getFirst();
    boolean b76 = server67.connect(iP74);
    iPBan66.ip = iP74;
    tp2.IP iP78 = iPBan66.ip;
    boolean b79 = strictlySortedSinglyLinkedList0.add(iPBan66);
    tp2.IPBan iPBan81 = strictlySortedSinglyLinkedList0.get((int)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "{}"+ "'", str34.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str68.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 100+ "'", i75.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan81);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test124"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.Entry entry7 = new tp2.Entry();
    java.lang.String str8 = entry7.toString();
    java.lang.String str9 = entry7.toString();
    tp2.Entry entry10 = entry7.next;
    entry6.next = entry7;
    entry1.next = entry6;
    tp2.Entry entry13 = entry6.next;
    tp2.Entry entry14 = new tp2.Entry();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    entry14.element = iP19;
    tp2.Entry entry23 = new tp2.Entry();
    tp2.Entry entry24 = new tp2.Entry();
    java.lang.String str25 = entry24.toString();
    java.lang.String str26 = entry24.toString();
    tp2.Entry entry27 = entry24.next;
    entry23.next = entry24;
    tp2.IP iP29 = entry23.element;
    entry14.next = entry23;
    tp2.Entry entry31 = entry14.next;
    entry13.next = entry31;
    tp2.Entry entry33 = entry13.next;
    java.lang.String str34 = entry33.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[null]"+ "'", str8.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[null]"+ "'", str25.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[null]"+ "'", str26.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[null]"+ "'", str34.equals("[null]"));

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test125"); }


    tp2.IP iP0 = null;
    tp2.IPBan iPBan2 = new tp2.IPBan(iP0, (java.lang.Long)1466185918343L);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test126"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    boolean b3 = singlyLinkedList0.isEmpty();
    tp2.Server server4 = new tp2.Server();
    tp2.IP iP5 = null;
    boolean b6 = server4.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b12 = server4.connect(iP11);
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP14 = null;
    boolean b15 = server13.connect(iP14);
    java.lang.String str16 = server13.toString();
    java.lang.String str17 = server13.toString();
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = server13.connect(iP23);
    boolean b28 = server4.removeException(iP23);
    java.lang.Integer i29 = iP23.getThird();
    boolean b30 = singlyLinkedList0.contains(iP23);
    boolean b31 = singlyLinkedList0.isEmpty();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP36.setSecond((java.lang.Integer)1);
    java.lang.Integer i39 = iP36.getThird();
    java.lang.String str40 = iP36.toString();
    iP36.setSecond((java.lang.Integer)100);
    boolean b43 = singlyLinkedList0.contains(iP36);
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP45 = null;
    boolean b46 = server44.connect(iP45);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b52 = server44.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i58 = iP57.getFirst();
    java.lang.String str59 = iP57.toString();
    boolean b60 = server44.addException(iP57);
    singlyLinkedList0.add(iP57);
    iP57.setFourth((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 0+ "'", i29.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + (-1)+ "'", i39.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "100.1.-1.10"+ "'", str40.equals("100.1.-1.10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 100+ "'", i58.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "100.10.-1.10"+ "'", str59.equals("100.10.-1.10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test127"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get(1);
    java.lang.String str3 = singlyLinkedList0.toString();
    boolean b4 = singlyLinkedList0.isEmpty();
    tp2.Server server5 = new tp2.Server();
    tp2.IP iP6 = null;
    boolean b7 = server5.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b13 = server5.connect(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP15 = null;
    boolean b16 = server14.connect(iP15);
    java.lang.String str17 = server14.toString();
    java.lang.String str18 = server14.toString();
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = server14.connect(iP24);
    boolean b29 = server5.removeException(iP24);
    java.lang.Integer i30 = iP24.getFirst();
    boolean b31 = singlyLinkedList0.contains(iP24);
    int i32 = singlyLinkedList0.getSize();
    tp2.Server server33 = new tp2.Server();
    java.lang.String str34 = server33.toString();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP36 = null;
    boolean b37 = singlyLinkedList35.repOk(set_iP36);
    java.util.Set<tp2.IP> set_iP38 = null;
    boolean b39 = singlyLinkedList35.repOk(set_iP38);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    tp2.IP iP42 = singlyLinkedList40.get((int)' ');
    tp2.Entry entry43 = new tp2.Entry();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i49 = iP48.getFirst();
    java.lang.String str50 = iP48.toString();
    entry43.element = iP48;
    boolean b52 = singlyLinkedList40.remove(iP48);
    tp2.IP iP54 = singlyLinkedList40.get((int)(byte)10);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList55 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList55.size = 10;
    tp2.Server server58 = new tp2.Server();
    java.lang.String str59 = server58.toString();
    server58.update();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP65.setFirst((java.lang.Integer)1);
    java.lang.Integer i68 = iP65.getSecond();
    boolean b69 = server58.addException(iP65);
    tp2.Entry entry70 = new tp2.Entry();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i76 = iP75.getFirst();
    java.lang.String str77 = iP75.toString();
    entry70.element = iP75;
    boolean b79 = server58.addException(iP75);
    tp2.IP iP84 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b85 = server58.removeBan(iP84);
    iP84.setThird((java.lang.Integer)0);
    boolean b88 = strictlySortedSinglyLinkedList55.removeFromIP(iP84);
    boolean b89 = singlyLinkedList40.contains(iP84);
    boolean b90 = singlyLinkedList35.contains(iP84);
    boolean b91 = server33.removeBan(iP84);
    boolean b92 = singlyLinkedList0.contains(iP84);
    boolean b93 = singlyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i49 + "' != '" + 10+ "'", i49.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "10.0.0.100"+ "'", str50.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str59.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 0+ "'", i68.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 10+ "'", i76.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test128"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b6 = server0.addException(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP9 = null;
    boolean b10 = server8.connect(iP9);
    java.lang.String str11 = server8.toString();
    java.lang.String str12 = server8.toString();
    tp2.IP iP13 = null;
    boolean b14 = server8.removeException(iP13);
    tp2.RealTime realTime15 = new tp2.RealTime();
    long long16 = realTime15.getCurrentTime();
    long long17 = realTime15.getCurrentTime();
    server8.setTime((tp2.ITime)realTime15);
    server0.setTime((tp2.ITime)realTime15);
    tp2.Entry entry20 = new tp2.Entry();
    java.lang.String str21 = entry20.toString();
    java.lang.String str22 = entry20.toString();
    tp2.Entry entry23 = entry20.next;
    tp2.IP iP24 = entry20.element;
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    java.lang.String str32 = iP29.toString();
    iP29.setThird((java.lang.Integer)(-1));
    entry20.element = iP29;
    boolean b36 = server0.removeBan(iP29);
    java.lang.Integer i37 = iP29.getSecond();
    java.lang.Integer i38 = iP29.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=([100.10.-1.10]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1466185927995L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long17 == 1466185927996L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[null]"+ "'", str21.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[null]"+ "'", str22.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 0+ "'", i37.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i38 + "' != '" + 0+ "'", i38.equals(0));

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test129"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    tp2.IP iP15 = iPBan14.ip;
    tp2.IP iP16 = iPBan14.getIp();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList17 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList17.size = 10;
    tp2.Server server20 = new tp2.Server();
    java.lang.String str21 = server20.toString();
    server20.update();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP27.setFirst((java.lang.Integer)1);
    java.lang.Integer i30 = iP27.getSecond();
    boolean b31 = server20.addException(iP27);
    tp2.Entry entry32 = new tp2.Entry();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i38 = iP37.getFirst();
    java.lang.String str39 = iP37.toString();
    entry32.element = iP37;
    boolean b41 = server20.addException(iP37);
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b47 = server20.removeBan(iP46);
    iP46.setThird((java.lang.Integer)0);
    boolean b50 = strictlySortedSinglyLinkedList17.removeFromIP(iP46);
    java.lang.String str51 = strictlySortedSinglyLinkedList17.toString();
    tp2.SinglyLinkedList singlyLinkedList52 = new tp2.SinglyLinkedList();
    tp2.IP iP54 = singlyLinkedList52.get((int)' ');
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    entry55.element = iP60;
    boolean b64 = singlyLinkedList52.remove(iP60);
    tp2.IP iP66 = singlyLinkedList52.get((int)'4');
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i72 = iP71.getFirst();
    java.lang.String str73 = iP71.toString();
    boolean b74 = singlyLinkedList52.contains(iP71);
    tp2.IPBan iPBan76 = new tp2.IPBan(iP71, (java.lang.Long)200000L);
    boolean b77 = strictlySortedSinglyLinkedList17.add(iPBan76);
    boolean b78 = iP16.equals((java.lang.Object)strictlySortedSinglyLinkedList17);
    java.lang.Integer i79 = iP16.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 0+ "'", i30.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i38 + "' != '" + 10+ "'", i38.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "10.0.0.100"+ "'", str39.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "{}"+ "'", str51.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i72 + "' != '" + 10+ "'", i72.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "10.0.0.100"+ "'", str73.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i79 + "' != '" + 10+ "'", i79.equals(10));

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test130"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    int i7 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    java.lang.String str9 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node10 = new tp2.Node();
    tp2.IPBan iPBan11 = null;
    node10.element = iPBan11;
    tp2.SinglyLinkedList singlyLinkedList13 = new tp2.SinglyLinkedList();
    tp2.IP iP15 = singlyLinkedList13.get((int)' ');
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = singlyLinkedList13.remove(iP21);
    tp2.IPBan iPBan27 = new tp2.IPBan(iP21, (java.lang.Long)1L);
    java.lang.String str28 = iPBan27.toString();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    java.lang.String str36 = iP33.toString();
    iPBan27.setIp(iP33);
    java.lang.Long long38 = iPBan27.getExpires();
    node10.element = iPBan27;
    tp2.IPBan iPBan40 = node10.element;
    strictlySortedSinglyLinkedList0.header = node10;
    tp2.SinglyLinkedList singlyLinkedList42 = new tp2.SinglyLinkedList();
    tp2.IP iP44 = singlyLinkedList42.get((int)' ');
    tp2.Entry entry45 = new tp2.Entry();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i51 = iP50.getFirst();
    java.lang.String str52 = iP50.toString();
    entry45.element = iP50;
    boolean b54 = singlyLinkedList42.remove(iP50);
    tp2.IPBan iPBan56 = new tp2.IPBan(iP50, (java.lang.Long)1L);
    java.lang.String str57 = iPBan56.toString();
    iPBan56.setExpires((java.lang.Long)0L);
    java.lang.Long long60 = iPBan56.expires;
    tp2.IP iP61 = iPBan56.ip;
    java.lang.String str62 = iPBan56.toString();
    java.lang.Long long63 = iPBan56.getExpires();
    tp2.IP iP64 = iPBan56.getIp();
    tp2.IP iP65 = iPBan56.ip;
    boolean b66 = strictlySortedSinglyLinkedList0.add(iPBan56);
    tp2.Node node67 = strictlySortedSinglyLinkedList0.header;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList68 = new tp2.StrictlySortedSinglyLinkedList();
    int i69 = strictlySortedSinglyLinkedList68.getSize();
    tp2.IPBan iPBan70 = null;
    boolean b71 = strictlySortedSinglyLinkedList68.add(iPBan70);
    java.util.Set<tp2.IPBan> set_iPBan72 = null;
    boolean b73 = strictlySortedSinglyLinkedList68.repOk(set_iPBan72);
    strictlySortedSinglyLinkedList68.size = ' ';
    java.lang.String str76 = strictlySortedSinglyLinkedList68.toString();
    boolean b77 = strictlySortedSinglyLinkedList68.isEmpty();
    tp2.Node node78 = strictlySortedSinglyLinkedList68.header;
    java.lang.String str79 = node78.toString();
    strictlySortedSinglyLinkedList0.header = node78;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{}"+ "'", str8.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "{}"+ "'", str9.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str28.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L+ "'", long38.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 10+ "'", i51.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "10.0.0.100"+ "'", str52.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str57.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L+ "'", long60.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str62.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L+ "'", long63.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "{[null]}"+ "'", str76.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "[null]"+ "'", str79.equals("[null]"));

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test131"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    tp2.Node node5 = strictlySortedSinglyLinkedList0.header;
    tp2.SinglyLinkedList singlyLinkedList6 = new tp2.SinglyLinkedList();
    tp2.IP iP8 = singlyLinkedList6.get((int)' ');
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    java.lang.String str16 = iP14.toString();
    entry9.element = iP14;
    boolean b18 = singlyLinkedList6.remove(iP14);
    tp2.IPBan iPBan20 = new tp2.IPBan(iP14, (java.lang.Long)1L);
    java.lang.String str21 = iPBan20.toString();
    iPBan20.setExpires((java.lang.Long)0L);
    java.lang.Long long24 = iPBan20.expires;
    tp2.IP iP25 = iPBan20.getIp();
    tp2.IP iP26 = iPBan20.ip;
    tp2.IP iP27 = iPBan20.getIp();
    iPBan20.expires = 1466185876788L;
    java.lang.Long long30 = iPBan20.getExpires();
    // The following exception was thrown during execution in test generation
    try {
      boolean b31 = strictlySortedSinglyLinkedList0.contains(iPBan20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str21.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L+ "'", long24.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1466185876788L+ "'", long30.equals(1466185876788L));

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test132"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    tp2.Node node16 = node14.next;
    tp2.IPBan iPBan17 = node14.element;
    tp2.Node node18 = new tp2.Node();
    tp2.IPBan iPBan19 = null;
    node18.element = iPBan19;
    tp2.SinglyLinkedList singlyLinkedList21 = new tp2.SinglyLinkedList();
    tp2.IP iP23 = singlyLinkedList21.get((int)' ');
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = singlyLinkedList21.remove(iP29);
    tp2.IPBan iPBan35 = new tp2.IPBan(iP29, (java.lang.Long)1L);
    java.lang.String str36 = iPBan35.toString();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i42 = iP41.getFirst();
    java.lang.String str43 = iP41.toString();
    java.lang.String str44 = iP41.toString();
    iPBan35.setIp(iP41);
    java.lang.Long long46 = iPBan35.getExpires();
    node18.element = iPBan35;
    iPBan35.expires = 1466185870380L;
    iPBan35.setExpires((java.lang.Long)1466185872205L);
    node14.element = iPBan35;
    java.lang.String str53 = node14.toString();
    java.lang.String str54 = node14.toString();
    tp2.Node node55 = node14.next;
    // The following exception was thrown during execution in test generation
    try {
      tp2.IPBan iPBan56 = node55.element;
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str36.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 10+ "'", i42.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "10.0.0.100"+ "'", str44.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L+ "'", long46.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "[IPBan [ip=10.0.0.100, expires=1466185872205]]"+ "'", str53.equals("[IPBan [ip=10.0.0.100, expires=1466185872205]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "[IPBan [ip=10.0.0.100, expires=1466185872205]]"+ "'", str54.equals("[IPBan [ip=10.0.0.100, expires=1466185872205]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node55);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test133"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    tp2.IPBan iPBan53 = strictlySortedSinglyLinkedList0.get((int)(byte)100);
    java.lang.String str54 = strictlySortedSinglyLinkedList0.toString();
    java.util.Set<tp2.IPBan> set_iPBan55 = null;
    boolean b56 = strictlySortedSinglyLinkedList0.repOk(set_iPBan55);
    strictlySortedSinglyLinkedList0.size = 100;
    tp2.SinglyLinkedList singlyLinkedList59 = new tp2.SinglyLinkedList();
    tp2.IP iP61 = singlyLinkedList59.get((int)' ');
    tp2.Entry entry62 = new tp2.Entry();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i68 = iP67.getFirst();
    java.lang.String str69 = iP67.toString();
    entry62.element = iP67;
    boolean b71 = singlyLinkedList59.remove(iP67);
    tp2.IPBan iPBan73 = new tp2.IPBan(iP67, (java.lang.Long)1L);
    java.lang.String str74 = iPBan73.toString();
    iPBan73.setExpires((java.lang.Long)0L);
    java.lang.Long long77 = iPBan73.expires;
    tp2.IP iP78 = iPBan73.getIp();
    java.lang.Long long79 = iPBan73.getExpires();
    iPBan73.expires = 1466185872523L;
    boolean b82 = strictlySortedSinglyLinkedList0.add(iPBan73);
    tp2.IP iP83 = iPBan73.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "{}"+ "'", str54.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 10+ "'", i68.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "10.0.0.100"+ "'", str69.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str74.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L+ "'", long77.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L+ "'", long79.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP83);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test134"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP5 = entry0.element;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.Entry entry7 = new tp2.Entry();
    java.lang.String str8 = entry7.toString();
    java.lang.String str9 = entry7.toString();
    tp2.Entry entry10 = entry7.next;
    entry6.next = entry7;
    entry0.next = entry6;
    tp2.Entry entry13 = entry0.next;
    tp2.Entry entry14 = new tp2.Entry();
    java.lang.String str15 = entry14.toString();
    java.lang.String str16 = entry14.toString();
    tp2.IP iP17 = entry14.element;
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    entry18.element = iP23;
    tp2.IP iP26 = entry18.element;
    entry14.next = entry18;
    tp2.Entry entry28 = entry14.next;
    java.lang.String str29 = entry28.toString();
    entry0.next = entry28;
    tp2.Entry entry31 = entry0.next;
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP33 = null;
    boolean b34 = server32.connect(iP33);
    java.lang.String str35 = server32.toString();
    java.lang.String str36 = server32.toString();
    tp2.Entry entry37 = new tp2.Entry();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i43 = iP42.getFirst();
    java.lang.String str44 = iP42.toString();
    entry37.element = iP42;
    boolean b46 = server32.connect(iP42);
    tp2.SinglyLinkedList singlyLinkedList47 = new tp2.SinglyLinkedList();
    tp2.IP iP49 = singlyLinkedList47.get((int)' ');
    tp2.Entry entry50 = new tp2.Entry();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i56 = iP55.getFirst();
    java.lang.String str57 = iP55.toString();
    entry50.element = iP55;
    boolean b59 = singlyLinkedList47.remove(iP55);
    tp2.IPBan iPBan61 = new tp2.IPBan(iP55, (java.lang.Long)1L);
    java.lang.String str62 = iPBan61.toString();
    iPBan61.setExpires((java.lang.Long)0L);
    java.lang.Long long65 = iPBan61.expires;
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP67 = null;
    boolean b68 = server66.connect(iP67);
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b74 = server66.connect(iP73);
    java.lang.Integer i75 = iP73.getFirst();
    java.lang.Integer i76 = iP73.getFirst();
    iPBan61.setIp(iP73);
    boolean b78 = server32.removeException(iP73);
    tp2.Server server79 = new tp2.Server();
    tp2.IP iP80 = null;
    boolean b81 = server79.connect(iP80);
    tp2.IP iP86 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b87 = server79.connect(iP86);
    java.lang.Integer i88 = iP86.getFirst();
    java.lang.Integer i89 = iP86.getSecond();
    boolean b90 = server32.connect(iP86);
    tp2.IPBan iPBan92 = new tp2.IPBan(iP86, (java.lang.Long)0L);
    java.lang.Integer i93 = iP86.getFourth();
    entry31.element = iP86;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[null]"+ "'", str8.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[null]"+ "'", str15.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[null]"+ "'", str16.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[10.0.0.100]"+ "'", str29.equals("[10.0.0.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i43 + "' != '" + 10+ "'", i43.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "10.0.0.100"+ "'", str44.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i56 + "' != '" + 10+ "'", i56.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "10.0.0.100"+ "'", str57.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str62.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L+ "'", long65.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i75 + "' != '" + 100+ "'", i75.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 100+ "'", i76.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 100+ "'", i88.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i89 + "' != '" + 10+ "'", i89.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i93 + "' != '" + 10+ "'", i93.equals(10));

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test135"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = entry0.next;
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b17 = server9.connect(iP16);
    java.lang.Integer i18 = iP16.getFirst();
    entry0.element = iP16;
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP24.setThird((java.lang.Integer)1);
    entry0.element = iP24;
    tp2.Entry entry28 = new tp2.Entry();
    java.lang.String str29 = entry28.toString();
    tp2.Entry entry30 = new tp2.Entry();
    java.lang.String str31 = entry30.toString();
    entry28.next = entry30;
    entry0.next = entry28;
    java.lang.String str34 = entry28.toString();
    tp2.Entry entry35 = new tp2.Entry();
    tp2.Entry entry36 = new tp2.Entry();
    java.lang.String str37 = entry36.toString();
    java.lang.String str38 = entry36.toString();
    tp2.Entry entry39 = entry36.next;
    entry35.next = entry36;
    tp2.Entry entry41 = new tp2.Entry();
    tp2.Entry entry42 = new tp2.Entry();
    java.lang.String str43 = entry42.toString();
    java.lang.String str44 = entry42.toString();
    tp2.Entry entry45 = entry42.next;
    entry41.next = entry42;
    entry36.next = entry41;
    tp2.Entry entry48 = entry41.next;
    entry28.next = entry48;
    java.lang.String str50 = entry48.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 100+ "'", i18.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[null]"+ "'", str29.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[null]"+ "'", str31.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[null]"+ "'", str34.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[null]"+ "'", str37.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[null]"+ "'", str38.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[null]"+ "'", str43.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "[null]"+ "'", str44.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "[null]"+ "'", str50.equals("[null]"));

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test136"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    java.lang.String str19 = iP16.toString();
    iP16.setThird((java.lang.Integer)(-1));
    boolean b22 = server0.addBan(iP16);
    iP16.setThird((java.lang.Integer)100);
    java.lang.Integer i25 = iP16.getFourth();
    iP16.setSecond((java.lang.Integer)35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 100+ "'", i25.equals(100));

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test137"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP32 = null;
    boolean b33 = server31.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b39 = server31.connect(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP41 = null;
    boolean b42 = server40.connect(iP41);
    java.lang.String str43 = server40.toString();
    java.lang.String str44 = server40.toString();
    tp2.Entry entry45 = new tp2.Entry();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i51 = iP50.getFirst();
    java.lang.String str52 = iP50.toString();
    entry45.element = iP50;
    boolean b54 = server40.connect(iP50);
    boolean b55 = server31.removeException(iP50);
    boolean b56 = server3.connect(iP50);
    java.lang.Integer i57 = iP50.getFirst();
    iP50.setSecond((java.lang.Integer)0);
    java.lang.Integer i60 = iP50.getThird();
    tp2.IPBan iPBan62 = new tp2.IPBan(iP50, (java.lang.Long)1466185872784L);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)100);
    iP67.setFourth((java.lang.Integer)1);
    iPBan62.ip = iP67;
    boolean b71 = strictlySortedSinglyLinkedList0.removeFromIP(iP67);
    iP67.setThird((java.lang.Integer)97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str43.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 10+ "'", i51.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "10.0.0.100"+ "'", str52.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i57 + "' != '" + 10+ "'", i57.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i60 + "' != '" + 0+ "'", i60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test138"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    boolean b39 = iP5.equals((java.lang.Object)iPBan26);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    int i41 = singlyLinkedList40.getSize();
    java.lang.String str42 = singlyLinkedList40.toString();
    int i43 = singlyLinkedList40.getSize();
    java.util.Set<tp2.IP> set_iP44 = null;
    boolean b45 = singlyLinkedList40.repOk(set_iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b51 = singlyLinkedList40.remove(iP50);
    iPBan26.setIp(iP50);
    iPBan26.setExpires((java.lang.Long)1466185870380L);
    java.lang.String str55 = iPBan26.toString();
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP57 = null;
    boolean b58 = server56.connect(iP57);
    java.lang.String str59 = server56.toString();
    java.lang.String str60 = server56.toString();
    tp2.Entry entry61 = new tp2.Entry();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i67 = iP66.getFirst();
    java.lang.String str68 = iP66.toString();
    entry61.element = iP66;
    boolean b70 = server56.connect(iP66);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i76 = iP75.getFirst();
    java.lang.String str77 = iP75.toString();
    java.lang.String str78 = iP75.toString();
    boolean b79 = server56.removeBan(iP75);
    java.lang.Integer i80 = iP75.getFirst();
    iPBan26.ip = iP75;
    tp2.IP iP82 = iPBan26.ip;
    tp2.Server server83 = new tp2.Server();
    java.lang.String str84 = server83.toString();
    server83.update();
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP90.setFirst((java.lang.Integer)1);
    java.lang.Integer i93 = iP90.getSecond();
    boolean b94 = server83.addException(iP90);
    java.lang.String str95 = iP90.toString();
    iPBan26.ip = iP90;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "()"+ "'", str42.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "IPBan [ip=100.10.-1.10, expires=1466185870380]"+ "'", str55.equals("IPBan [ip=100.10.-1.10, expires=1466185870380]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str59.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 10+ "'", i67.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "10.0.0.100"+ "'", str68.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 10+ "'", i76.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "10.0.0.100"+ "'", str78.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 10+ "'", i80.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str84.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i93 + "' != '" + 0+ "'", i93.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "1.0.0.100"+ "'", str95.equals("1.0.0.100"));

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test139"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    int i3 = singlyLinkedList0.getSize();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    java.lang.Integer i11 = iP8.getFourth();
    boolean b12 = singlyLinkedList0.contains(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1466185870901L);
    java.lang.Integer i15 = iP8.getFirst();
    tp2.SinglyLinkedList singlyLinkedList16 = new tp2.SinglyLinkedList();
    int i17 = singlyLinkedList16.getSize();
    java.lang.String str18 = singlyLinkedList16.toString();
    int i19 = singlyLinkedList16.getSize();
    java.util.Set<tp2.IP> set_iP20 = null;
    boolean b21 = singlyLinkedList16.repOk(set_iP20);
    int i22 = singlyLinkedList16.getSize();
    tp2.IP iP24 = singlyLinkedList16.get(0);
    java.util.Set<tp2.IP> set_iP25 = null;
    boolean b26 = singlyLinkedList16.repOk(set_iP25);
    int i27 = singlyLinkedList16.getSize();
    boolean b28 = iP8.equals((java.lang.Object)singlyLinkedList16);
    tp2.SinglyLinkedList singlyLinkedList29 = new tp2.SinglyLinkedList();
    tp2.IP iP31 = singlyLinkedList29.get((int)' ');
    tp2.Entry entry32 = new tp2.Entry();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i38 = iP37.getFirst();
    java.lang.String str39 = iP37.toString();
    entry32.element = iP37;
    boolean b41 = singlyLinkedList29.remove(iP37);
    tp2.IPBan iPBan43 = new tp2.IPBan(iP37, (java.lang.Long)1L);
    java.lang.String str44 = iPBan43.toString();
    iPBan43.setExpires((java.lang.Long)0L);
    java.lang.Long long47 = iPBan43.expires;
    tp2.IP iP48 = iPBan43.getIp();
    tp2.IP iP49 = iPBan43.ip;
    iP49.setSecond((java.lang.Integer)11);
    korat.finitization.IFinitization iFinitization53 = tp2.Server.finServer((int)(short)1);
    boolean b54 = iP49.equals((java.lang.Object)(short)1);
    singlyLinkedList16.add(iP49);
    int i56 = singlyLinkedList16.getSize();
    int i57 = singlyLinkedList16.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 100+ "'", i11.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "()"+ "'", str18.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i38 + "' != '" + 10+ "'", i38.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "10.0.0.100"+ "'", str39.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str44.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L+ "'", long47.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iFinitization53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test140"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP56.setFirst((java.lang.Integer)1);
    java.lang.Integer i59 = iP56.getSecond();
    iP56.setThird((java.lang.Integer)(-1));
    iP56.setThird((java.lang.Integer)1);
    boolean b64 = strictlySortedSinglyLinkedList0.removeFromIP(iP56);
    tp2.SinglyLinkedList singlyLinkedList65 = new tp2.SinglyLinkedList();
    tp2.IP iP67 = singlyLinkedList65.get((int)' ');
    tp2.Entry entry68 = new tp2.Entry();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i74 = iP73.getFirst();
    java.lang.String str75 = iP73.toString();
    entry68.element = iP73;
    boolean b77 = singlyLinkedList65.remove(iP73);
    tp2.IPBan iPBan79 = new tp2.IPBan(iP73, (java.lang.Long)1L);
    java.lang.String str80 = iPBan79.toString();
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i86 = iP85.getFirst();
    java.lang.String str87 = iP85.toString();
    java.lang.String str88 = iP85.toString();
    iPBan79.setIp(iP85);
    java.lang.Integer i90 = iP85.getFourth();
    java.lang.Integer i91 = iP85.getSecond();
    boolean b92 = strictlySortedSinglyLinkedList0.removeFromIP(iP85);
    tp2.IPBan iPBan94 = strictlySortedSinglyLinkedList0.get((int)(byte)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 0+ "'", i59.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i74 + "' != '" + 10+ "'", i74.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "10.0.0.100"+ "'", str75.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str80.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i86 + "' != '" + 10+ "'", i86.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "10.0.0.100"+ "'", str87.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "10.0.0.100"+ "'", str88.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i90 + "' != '" + 100+ "'", i90.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i91 + "' != '" + 0+ "'", i91.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan94);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test141"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.SinglyLinkedList singlyLinkedList3 = new tp2.SinglyLinkedList();
    tp2.IP iP5 = singlyLinkedList3.get((int)' ');
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    entry6.element = iP11;
    boolean b15 = singlyLinkedList3.remove(iP11);
    tp2.IPBan iPBan17 = new tp2.IPBan(iP11, (java.lang.Long)1L);
    java.lang.String str18 = iPBan17.toString();
    tp2.Server server19 = new tp2.Server();
    tp2.IP iP20 = null;
    boolean b21 = server19.connect(iP20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b27 = server19.connect(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP29 = null;
    boolean b30 = server28.connect(iP29);
    java.lang.String str31 = server28.toString();
    java.lang.String str32 = server28.toString();
    tp2.Entry entry33 = new tp2.Entry();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i39 = iP38.getFirst();
    java.lang.String str40 = iP38.toString();
    entry33.element = iP38;
    boolean b42 = server28.connect(iP38);
    boolean b43 = server19.removeException(iP38);
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP45 = null;
    boolean b46 = server44.connect(iP45);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b52 = server44.connect(iP51);
    java.lang.Integer i53 = iP51.getFirst();
    boolean b54 = server19.connect(iP51);
    iPBan17.ip = iP51;
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP57 = null;
    boolean b58 = server56.connect(iP57);
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b64 = server56.connect(iP63);
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP66 = null;
    boolean b67 = server65.connect(iP66);
    java.lang.String str68 = server65.toString();
    java.lang.String str69 = server65.toString();
    tp2.Entry entry70 = new tp2.Entry();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i76 = iP75.getFirst();
    java.lang.String str77 = iP75.toString();
    entry70.element = iP75;
    boolean b79 = server65.connect(iP75);
    boolean b80 = server56.removeException(iP75);
    tp2.Server server81 = new tp2.Server();
    tp2.IP iP82 = null;
    boolean b83 = server81.connect(iP82);
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b89 = server81.connect(iP88);
    java.lang.Integer i90 = iP88.getFirst();
    boolean b91 = server56.connect(iP88);
    iPBan17.setIp(iP88);
    java.lang.Long long93 = iPBan17.expires;
    java.lang.Long long94 = iPBan17.expires;
    tp2.IP iP95 = iPBan17.ip;
    boolean b96 = server0.connect(iP95);
    iP95.setFourth((java.lang.Integer)32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str18.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + 10+ "'", i39.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "10.0.0.100"+ "'", str40.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 100+ "'", i53.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str68.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str69.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 10+ "'", i76.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "10.0.0.100"+ "'", str77.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i90 + "' != '" + 100+ "'", i90.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L+ "'", long93.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1L+ "'", long94.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test142"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b7 = strictlySortedSinglyLinkedList0.containsIP(iP6);
    strictlySortedSinglyLinkedList0.size = 0;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test143"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    boolean b3 = singlyLinkedList0.isEmpty();
    tp2.Node node4 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList5.size = 10;
    tp2.Server server8 = new tp2.Server();
    java.lang.String str9 = server8.toString();
    server8.update();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP15.setFirst((java.lang.Integer)1);
    java.lang.Integer i18 = iP15.getSecond();
    boolean b19 = server8.addException(iP15);
    tp2.Entry entry20 = new tp2.Entry();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    entry20.element = iP25;
    boolean b29 = server8.addException(iP25);
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b35 = server8.removeBan(iP34);
    iP34.setThird((java.lang.Integer)0);
    boolean b38 = strictlySortedSinglyLinkedList5.removeFromIP(iP34);
    java.lang.String str39 = strictlySortedSinglyLinkedList5.toString();
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    tp2.IP iP42 = singlyLinkedList40.get((int)' ');
    tp2.Entry entry43 = new tp2.Entry();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i49 = iP48.getFirst();
    java.lang.String str50 = iP48.toString();
    entry43.element = iP48;
    boolean b52 = singlyLinkedList40.remove(iP48);
    tp2.IPBan iPBan54 = new tp2.IPBan(iP48, (java.lang.Long)1L);
    java.lang.String str55 = iPBan54.toString();
    boolean b56 = strictlySortedSinglyLinkedList5.contains(iPBan54);
    node4.element = iPBan54;
    iPBan54.setExpires((java.lang.Long)1466185871497L);
    tp2.IP iP60 = iPBan54.getIp();
    boolean b61 = singlyLinkedList0.contains(iP60);
    java.lang.Integer i62 = iP60.getThird();
    java.lang.Integer i63 = iP60.getFourth();
    java.lang.Integer i64 = iP60.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 0+ "'", i18.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "{}"+ "'", str39.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i49 + "' != '" + 10+ "'", i49.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "10.0.0.100"+ "'", str50.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str55.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i62 + "' != '" + 0+ "'", i62.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 100+ "'", i63.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 0+ "'", i64.equals(0));

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test144"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.Node node5 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    node5.next = node11;
    tp2.Node node14 = node5.next;
    strictlySortedSinglyLinkedList0.header = node14;
    java.lang.String str16 = strictlySortedSinglyLinkedList0.toString();
    java.util.Set<tp2.IPBan> set_iPBan17 = null;
    boolean b18 = strictlySortedSinglyLinkedList0.repOk(set_iPBan17);
    int i19 = strictlySortedSinglyLinkedList0.getSize();
    int i20 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Node node21 = strictlySortedSinglyLinkedList0.header;
    boolean b22 = strictlySortedSinglyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "{}"+ "'", str16.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test145"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    int i3 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b11 = singlyLinkedList0.remove(iP10);
    boolean b12 = singlyLinkedList0.isEmpty();
    tp2.IP iP14 = singlyLinkedList0.get((-1));
    int i15 = singlyLinkedList0.getSize();
    tp2.SinglyLinkedList singlyLinkedList16 = new tp2.SinglyLinkedList();
    tp2.IP iP18 = singlyLinkedList16.get((int)' ');
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = singlyLinkedList16.remove(iP24);
    tp2.IPBan iPBan30 = new tp2.IPBan(iP24, (java.lang.Long)1L);
    java.lang.String str31 = iPBan30.toString();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i37 = iP36.getFirst();
    java.lang.String str38 = iP36.toString();
    java.lang.String str39 = iP36.toString();
    iPBan30.setIp(iP36);
    java.lang.Integer i41 = iP36.getFirst();
    iP36.setSecond((java.lang.Integer)(-1));
    singlyLinkedList0.add(iP36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str31.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "10.0.0.100"+ "'", str39.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i41 + "' != '" + 10+ "'", i41.equals(10));

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test146"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.IP iP6 = entry0.element;
    tp2.Entry entry7 = entry0.next;
    tp2.Entry entry8 = entry7.next;
    java.lang.String str9 = entry7.toString();
    java.lang.String str10 = entry7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[null]"+ "'", str10.equals("[null]"));

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test147"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.IPBan iPBan7 = node5.element;
    tp2.IPBan iPBan8 = node5.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan8);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test148"); }


    tp2.IP iP0 = null;
    tp2.IPBan iPBan2 = new tp2.IPBan(iP0, (java.lang.Long)1466185872204L);
    tp2.IP iP3 = iPBan2.getIp();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    int i5 = strictlySortedSinglyLinkedList4.getSize();
    tp2.IPBan iPBan6 = null;
    boolean b7 = strictlySortedSinglyLinkedList4.add(iPBan6);
    tp2.Node node8 = strictlySortedSinglyLinkedList4.header;
    tp2.SinglyLinkedList singlyLinkedList9 = new tp2.SinglyLinkedList();
    tp2.IP iP11 = singlyLinkedList9.get((int)' ');
    tp2.Entry entry12 = new tp2.Entry();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    entry12.element = iP17;
    boolean b21 = singlyLinkedList9.remove(iP17);
    tp2.IPBan iPBan23 = new tp2.IPBan(iP17, (java.lang.Long)1L);
    java.lang.String str24 = iPBan23.toString();
    iPBan23.setExpires((java.lang.Long)0L);
    java.lang.Long long27 = iPBan23.expires;
    node8.element = iPBan23;
    tp2.IPBan iPBan29 = node8.element;
    tp2.SinglyLinkedList singlyLinkedList30 = new tp2.SinglyLinkedList();
    tp2.IP iP32 = singlyLinkedList30.get((int)' ');
    tp2.Entry entry33 = new tp2.Entry();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i39 = iP38.getFirst();
    java.lang.String str40 = iP38.toString();
    entry33.element = iP38;
    boolean b42 = singlyLinkedList30.remove(iP38);
    tp2.IPBan iPBan44 = new tp2.IPBan(iP38, (java.lang.Long)1L);
    java.lang.String str45 = iPBan44.toString();
    iPBan44.setExpires((java.lang.Long)0L);
    java.lang.Long long48 = iPBan44.expires;
    tp2.IP iP49 = iPBan44.ip;
    java.lang.String str50 = iPBan44.toString();
    tp2.IP iP51 = iPBan44.getIp();
    iPBan29.ip = iP51;
    iPBan2.ip = iP51;
    java.lang.Integer i54 = iP51.getFourth();
    java.lang.Integer i55 = iP51.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str24.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L+ "'", long27.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + 10+ "'", i39.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "10.0.0.100"+ "'", str40.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str45.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L+ "'", long48.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 100+ "'", i54.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 0+ "'", i55.equals(0));

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test149"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b6 = server0.addException(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.Integer i13 = iP11.getSecond();
    boolean b14 = server0.addBan(iP11);
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    server15.update();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP22.setFirst((java.lang.Integer)1);
    java.lang.Integer i25 = iP22.getSecond();
    boolean b26 = server15.addException(iP22);
    tp2.Entry entry27 = new tp2.Entry();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    entry27.element = iP32;
    boolean b36 = server15.addException(iP32);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b42 = server15.removeBan(iP41);
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP44 = null;
    boolean b45 = server43.connect(iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b51 = server43.connect(iP50);
    tp2.Server server52 = new tp2.Server();
    tp2.IP iP53 = null;
    boolean b54 = server52.connect(iP53);
    java.lang.String str55 = server52.toString();
    java.lang.String str56 = server52.toString();
    tp2.Entry entry57 = new tp2.Entry();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i63 = iP62.getFirst();
    java.lang.String str64 = iP62.toString();
    entry57.element = iP62;
    boolean b66 = server52.connect(iP62);
    boolean b67 = server43.removeException(iP62);
    boolean b68 = server15.connect(iP62);
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    iP73.setSecond((java.lang.Integer)1);
    boolean b76 = server15.removeBan(iP73);
    tp2.Server server77 = new tp2.Server();
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b83 = server77.addException(iP82);
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i89 = iP88.getFirst();
    java.lang.Integer i90 = iP88.getSecond();
    boolean b91 = server77.addBan(iP88);
    boolean b92 = iP73.equals((java.lang.Object)iP88);
    boolean b93 = server0.removeBan(iP88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 100+ "'", i12.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 10+ "'", i13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 0+ "'", i25.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str55.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 10+ "'", i63.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "10.0.0.100"+ "'", str64.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i89 + "' != '" + 100+ "'", i89.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i90 + "' != '" + 10+ "'", i90.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test150"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    int i7 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    java.lang.String str9 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node10 = new tp2.Node();
    tp2.IPBan iPBan11 = null;
    node10.element = iPBan11;
    tp2.SinglyLinkedList singlyLinkedList13 = new tp2.SinglyLinkedList();
    tp2.IP iP15 = singlyLinkedList13.get((int)' ');
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = singlyLinkedList13.remove(iP21);
    tp2.IPBan iPBan27 = new tp2.IPBan(iP21, (java.lang.Long)1L);
    java.lang.String str28 = iPBan27.toString();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    java.lang.String str36 = iP33.toString();
    iPBan27.setIp(iP33);
    java.lang.Long long38 = iPBan27.getExpires();
    node10.element = iPBan27;
    tp2.IPBan iPBan40 = node10.element;
    strictlySortedSinglyLinkedList0.header = node10;
    strictlySortedSinglyLinkedList0.size = '#';
    java.util.Set<tp2.IPBan> set_iPBan44 = null;
    boolean b45 = strictlySortedSinglyLinkedList0.repOk(set_iPBan44);
    strictlySortedSinglyLinkedList0.size = 'a';
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{}"+ "'", str8.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "{}"+ "'", str9.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str28.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L+ "'", long38.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test151"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    tp2.Entry entry2 = new tp2.Entry();
    tp2.Entry entry3 = new tp2.Entry();
    java.lang.String str4 = entry3.toString();
    java.lang.String str5 = entry3.toString();
    tp2.Entry entry6 = entry3.next;
    entry2.next = entry3;
    tp2.Entry entry8 = new tp2.Entry();
    tp2.Entry entry9 = new tp2.Entry();
    java.lang.String str10 = entry9.toString();
    java.lang.String str11 = entry9.toString();
    tp2.Entry entry12 = entry9.next;
    entry8.next = entry9;
    entry3.next = entry8;
    entry0.next = entry3;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[null]"+ "'", str4.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[null]"+ "'", str5.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[null]"+ "'", str10.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[null]"+ "'", str11.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry12);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test152"); }


    tp2.Node node0 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList1 = new tp2.StrictlySortedSinglyLinkedList();
    int i2 = strictlySortedSinglyLinkedList1.getSize();
    tp2.IPBan iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList1.add(iPBan3);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node6 = strictlySortedSinglyLinkedList5.header;
    strictlySortedSinglyLinkedList1.header = node6;
    node0.next = node6;
    tp2.Node node9 = node0.next;
    tp2.Node node10 = node0.next;
    tp2.Node node11 = new tp2.Node();
    tp2.IPBan iPBan12 = null;
    node11.element = iPBan12;
    tp2.IPBan iPBan14 = null;
    node11.element = iPBan14;
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    server16.update();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP23.setFirst((java.lang.Integer)1);
    java.lang.Integer i26 = iP23.getSecond();
    boolean b27 = server16.addException(iP23);
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = server16.addException(iP33);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b43 = server16.removeBan(iP42);
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP45 = null;
    boolean b46 = server44.connect(iP45);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b52 = server44.connect(iP51);
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP54 = null;
    boolean b55 = server53.connect(iP54);
    java.lang.String str56 = server53.toString();
    java.lang.String str57 = server53.toString();
    tp2.Entry entry58 = new tp2.Entry();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i64 = iP63.getFirst();
    java.lang.String str65 = iP63.toString();
    entry58.element = iP63;
    boolean b67 = server53.connect(iP63);
    boolean b68 = server44.removeException(iP63);
    boolean b69 = server16.connect(iP63);
    java.lang.Integer i70 = iP63.getFirst();
    iP63.setSecond((java.lang.Integer)0);
    java.lang.Integer i73 = iP63.getThird();
    tp2.IPBan iPBan75 = new tp2.IPBan(iP63, (java.lang.Long)1466185872784L);
    node11.element = iPBan75;
    node0.next = node11;
    tp2.Node node78 = new tp2.Node();
    tp2.IPBan iPBan79 = null;
    node78.element = iPBan79;
    tp2.IPBan iPBan81 = node78.element;
    tp2.Node node82 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList83 = new tp2.StrictlySortedSinglyLinkedList();
    int i84 = strictlySortedSinglyLinkedList83.getSize();
    tp2.IPBan iPBan85 = null;
    boolean b86 = strictlySortedSinglyLinkedList83.add(iPBan85);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList87 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node88 = strictlySortedSinglyLinkedList87.header;
    strictlySortedSinglyLinkedList83.header = node88;
    node82.next = node88;
    tp2.Node node91 = node82.next;
    tp2.Node node92 = node82.next;
    node78.next = node92;
    node0.next = node78;
    tp2.IPBan iPBan95 = node0.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str57.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 10+ "'", i64.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "10.0.0.100"+ "'", str65.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 10+ "'", i70.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 0+ "'", i73.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan95);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test153"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)'4');
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    boolean b22 = singlyLinkedList0.contains(iP19);
    java.lang.String str23 = singlyLinkedList0.toString();
    java.lang.String str24 = singlyLinkedList0.toString();
    int i25 = singlyLinkedList0.getSize();
    tp2.SinglyLinkedList singlyLinkedList26 = new tp2.SinglyLinkedList();
    tp2.IP iP28 = singlyLinkedList26.get((int)' ');
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = singlyLinkedList26.remove(iP34);
    tp2.IPBan iPBan40 = new tp2.IPBan(iP34, (java.lang.Long)1L);
    java.lang.String str41 = iPBan40.toString();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP43 = null;
    boolean b44 = server42.connect(iP43);
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b50 = server42.connect(iP49);
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP52 = null;
    boolean b53 = server51.connect(iP52);
    java.lang.String str54 = server51.toString();
    java.lang.String str55 = server51.toString();
    tp2.Entry entry56 = new tp2.Entry();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i62 = iP61.getFirst();
    java.lang.String str63 = iP61.toString();
    entry56.element = iP61;
    boolean b65 = server51.connect(iP61);
    boolean b66 = server42.removeException(iP61);
    tp2.Server server67 = new tp2.Server();
    tp2.IP iP68 = null;
    boolean b69 = server67.connect(iP68);
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b75 = server67.connect(iP74);
    java.lang.Integer i76 = iP74.getFirst();
    boolean b77 = server42.connect(iP74);
    iPBan40.ip = iP74;
    java.lang.Integer i79 = iP74.getThird();
    java.lang.Integer i80 = iP74.getThird();
    singlyLinkedList0.add(iP74);
    java.lang.String str82 = singlyLinkedList0.toString();
    java.util.Set<tp2.IP> set_iP83 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b84 = singlyLinkedList0.repOk(set_iP83);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "()"+ "'", str23.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "()"+ "'", str24.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str41.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str54.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str55.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i62 + "' != '" + 10+ "'", i62.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "10.0.0.100"+ "'", str63.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i76 + "' != '" + 100+ "'", i76.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i79 + "' != '" + (-1)+ "'", i79.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + (-1)+ "'", i80.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "([100.10.-1.10])"+ "'", str82.equals("([100.10.-1.10])"));

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test154"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node1 = strictlySortedSinglyLinkedList0.header;
    tp2.SinglyLinkedList singlyLinkedList2 = new tp2.SinglyLinkedList();
    tp2.IP iP4 = singlyLinkedList2.get((int)' ');
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = singlyLinkedList2.remove(iP10);
    tp2.IPBan iPBan16 = new tp2.IPBan(iP10, (java.lang.Long)1L);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    server17.update();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i25 = iP24.getFirst();
    boolean b26 = server17.connect(iP24);
    iPBan16.ip = iP24;
    node1.element = iPBan16;
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    java.lang.String str36 = iP33.toString();
    iP33.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan40 = new tp2.IPBan(iP33, (java.lang.Long)0L);
    java.lang.String str41 = iPBan40.toString();
    node1.element = iPBan40;
    iPBan40.setExpires((java.lang.Long)1466185873038L);
    iPBan40.setExpires((java.lang.Long)1466185891607L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 100+ "'", i25.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "IPBan [ip=10.0.-1.100, expires=0]"+ "'", str41.equals("IPBan [ip=10.0.-1.100, expires=0]"));

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test155"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP1 = null;
    boolean b2 = singlyLinkedList0.repOk(set_iP1);
    int i3 = singlyLinkedList0.getSize();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    java.lang.Integer i11 = iP8.getFourth();
    boolean b12 = singlyLinkedList0.contains(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1466185870901L);
    java.lang.Integer i15 = iP8.getFirst();
    tp2.SinglyLinkedList singlyLinkedList16 = new tp2.SinglyLinkedList();
    int i17 = singlyLinkedList16.getSize();
    java.lang.String str18 = singlyLinkedList16.toString();
    int i19 = singlyLinkedList16.getSize();
    java.util.Set<tp2.IP> set_iP20 = null;
    boolean b21 = singlyLinkedList16.repOk(set_iP20);
    int i22 = singlyLinkedList16.getSize();
    tp2.IP iP24 = singlyLinkedList16.get(0);
    java.util.Set<tp2.IP> set_iP25 = null;
    boolean b26 = singlyLinkedList16.repOk(set_iP25);
    int i27 = singlyLinkedList16.getSize();
    boolean b28 = iP8.equals((java.lang.Object)singlyLinkedList16);
    tp2.SinglyLinkedList singlyLinkedList29 = new tp2.SinglyLinkedList();
    tp2.IP iP31 = singlyLinkedList29.get((int)' ');
    tp2.Entry entry32 = new tp2.Entry();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i38 = iP37.getFirst();
    java.lang.String str39 = iP37.toString();
    entry32.element = iP37;
    boolean b41 = singlyLinkedList29.remove(iP37);
    tp2.IPBan iPBan43 = new tp2.IPBan(iP37, (java.lang.Long)1L);
    java.lang.String str44 = iPBan43.toString();
    iPBan43.setExpires((java.lang.Long)0L);
    java.lang.Long long47 = iPBan43.expires;
    tp2.IP iP48 = iPBan43.getIp();
    tp2.IP iP49 = iPBan43.ip;
    iP49.setSecond((java.lang.Integer)11);
    korat.finitization.IFinitization iFinitization53 = tp2.Server.finServer((int)(short)1);
    boolean b54 = iP49.equals((java.lang.Object)(short)1);
    singlyLinkedList16.add(iP49);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP60.setThird((java.lang.Integer)1);
    java.lang.Object obj63 = null;
    boolean b64 = iP60.equals(obj63);
    iP60.setThird((java.lang.Integer)0);
    iP60.setSecond((java.lang.Integer)35);
    java.lang.Integer i69 = iP60.getFourth();
    singlyLinkedList16.add(iP60);
    boolean b71 = singlyLinkedList16.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 100+ "'", i11.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "()"+ "'", str18.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i38 + "' != '" + 10+ "'", i38.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "10.0.0.100"+ "'", str39.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str44.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L+ "'", long47.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iFinitization53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i69 + "' != '" + 100+ "'", i69.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test156"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    tp2.IPBan iPBan4 = strictlySortedSinglyLinkedList0.get((int)(byte)100);
    int i5 = strictlySortedSinglyLinkedList0.size;
    int i6 = strictlySortedSinglyLinkedList0.getSize();
    strictlySortedSinglyLinkedList0.size = (byte)(-1);
    tp2.IPBan iPBan10 = strictlySortedSinglyLinkedList0.get((int)(byte)0);
    int i11 = strictlySortedSinglyLinkedList0.getSize();
    strictlySortedSinglyLinkedList0.size = 35;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test157"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan6 = strictlySortedSinglyLinkedList0.get(100);
    strictlySortedSinglyLinkedList0.size = '#';
    tp2.Node node9 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    int i11 = strictlySortedSinglyLinkedList10.getSize();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList10.add(iPBan12);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList14 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node15 = strictlySortedSinglyLinkedList14.header;
    strictlySortedSinglyLinkedList10.header = node15;
    node9.next = node15;
    tp2.Node node18 = node9.next;
    tp2.Node node19 = node9.next;
    strictlySortedSinglyLinkedList0.header = node19;
    java.lang.String str21 = node19.toString();
    tp2.SinglyLinkedList singlyLinkedList22 = new tp2.SinglyLinkedList();
    tp2.IP iP24 = singlyLinkedList22.get((int)' ');
    tp2.Entry entry25 = new tp2.Entry();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i31 = iP30.getFirst();
    java.lang.String str32 = iP30.toString();
    entry25.element = iP30;
    boolean b34 = singlyLinkedList22.remove(iP30);
    tp2.IPBan iPBan36 = new tp2.IPBan(iP30, (java.lang.Long)1L);
    iPBan36.expires = 1466185871428L;
    iPBan36.expires = 0L;
    node19.element = iPBan36;
    tp2.Node node42 = node19.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[null]"+ "'", str21.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 10+ "'", i31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node42);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test158"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    boolean b9 = strictlySortedSinglyLinkedList0.isEmpty();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    int i11 = strictlySortedSinglyLinkedList10.getSize();
    tp2.IPBan iPBan12 = null;
    boolean b13 = strictlySortedSinglyLinkedList10.add(iPBan12);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList14 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node15 = strictlySortedSinglyLinkedList14.header;
    strictlySortedSinglyLinkedList10.header = node15;
    strictlySortedSinglyLinkedList10.size = 0;
    int i19 = strictlySortedSinglyLinkedList10.size;
    tp2.Node node20 = strictlySortedSinglyLinkedList10.header;
    tp2.Node node21 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList0.header = node21;
    tp2.IPBan iPBan24 = strictlySortedSinglyLinkedList0.get(1);
    tp2.Node node25 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node26 = new tp2.Node();
    tp2.IPBan iPBan27 = null;
    node26.element = iPBan27;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList29 = new tp2.StrictlySortedSinglyLinkedList();
    int i30 = strictlySortedSinglyLinkedList29.getSize();
    tp2.IPBan iPBan31 = null;
    boolean b32 = strictlySortedSinglyLinkedList29.add(iPBan31);
    tp2.Node node33 = strictlySortedSinglyLinkedList29.header;
    tp2.IPBan iPBan35 = strictlySortedSinglyLinkedList29.get(100);
    tp2.Node node36 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList37 = new tp2.StrictlySortedSinglyLinkedList();
    int i38 = strictlySortedSinglyLinkedList37.getSize();
    tp2.IPBan iPBan39 = null;
    boolean b40 = strictlySortedSinglyLinkedList37.add(iPBan39);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList41 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node42 = strictlySortedSinglyLinkedList41.header;
    strictlySortedSinglyLinkedList37.header = node42;
    node36.next = node42;
    strictlySortedSinglyLinkedList29.header = node36;
    node26.next = node36;
    tp2.Node node47 = new tp2.Node();
    tp2.IPBan iPBan48 = null;
    node47.element = iPBan48;
    tp2.SinglyLinkedList singlyLinkedList50 = new tp2.SinglyLinkedList();
    tp2.IP iP52 = singlyLinkedList50.get((int)' ');
    tp2.Entry entry53 = new tp2.Entry();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i59 = iP58.getFirst();
    java.lang.String str60 = iP58.toString();
    entry53.element = iP58;
    boolean b62 = singlyLinkedList50.remove(iP58);
    tp2.IPBan iPBan64 = new tp2.IPBan(iP58, (java.lang.Long)1L);
    java.lang.String str65 = iPBan64.toString();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i71 = iP70.getFirst();
    java.lang.String str72 = iP70.toString();
    java.lang.String str73 = iP70.toString();
    iPBan64.setIp(iP70);
    java.lang.Long long75 = iPBan64.getExpires();
    node47.element = iPBan64;
    tp2.IPBan iPBan77 = node47.element;
    java.lang.Long long78 = iPBan77.getExpires();
    node36.element = iPBan77;
    java.lang.String str80 = iPBan77.toString();
    boolean b81 = strictlySortedSinglyLinkedList0.add(iPBan77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{[null]}"+ "'", str8.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 10+ "'", i59.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "10.0.0.100"+ "'", str60.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str65.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i71 + "' != '" + 10+ "'", i71.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "10.0.0.100"+ "'", str72.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "10.0.0.100"+ "'", str73.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L+ "'", long75.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L+ "'", long78.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str80.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test159"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.contains(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    tp2.IPBan iPBan7 = strictlySortedSinglyLinkedList0.get(0);
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{}"+ "'", str8.equals("{}"));

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test160"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.IPBan iPBan5 = node4.element;
    tp2.SinglyLinkedList singlyLinkedList6 = new tp2.SinglyLinkedList();
    tp2.IP iP8 = singlyLinkedList6.get((int)' ');
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    java.lang.String str16 = iP14.toString();
    entry9.element = iP14;
    boolean b18 = singlyLinkedList6.remove(iP14);
    tp2.IPBan iPBan20 = new tp2.IPBan(iP14, (java.lang.Long)1L);
    tp2.Server server21 = new tp2.Server();
    java.lang.String str22 = server21.toString();
    server21.update();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i29 = iP28.getFirst();
    boolean b30 = server21.connect(iP28);
    iPBan20.ip = iP28;
    node4.element = iPBan20;
    tp2.IPBan iPBan33 = node4.element;
    java.lang.String str34 = node4.toString();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IPBan iPBan49 = new tp2.IPBan(iP43, (java.lang.Long)1L);
    java.lang.String str50 = iPBan49.toString();
    iPBan49.setExpires((java.lang.Long)0L);
    iPBan49.expires = 1466185877442L;
    tp2.IP iP55 = iPBan49.ip;
    java.lang.String str56 = iPBan49.toString();
    node4.element = iPBan49;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 100+ "'", i29.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[IPBan [ip=100.10.-1.10, expires=1]]"+ "'", str34.equals("[IPBan [ip=100.10.-1.10, expires=1]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str50.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "IPBan [ip=10.0.0.100, expires=1466185877442]"+ "'", str56.equals("IPBan [ip=10.0.0.100, expires=1466185877442]"));

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test161"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get(1);
    tp2.SinglyLinkedList singlyLinkedList8 = new tp2.SinglyLinkedList();
    tp2.IP iP10 = singlyLinkedList8.get((int)' ');
    tp2.Entry entry11 = new tp2.Entry();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    entry11.element = iP16;
    boolean b20 = singlyLinkedList8.remove(iP16);
    boolean b21 = singlyLinkedList5.contains(iP16);
    tp2.Server server22 = new tp2.Server();
    java.lang.String str23 = server22.toString();
    server22.update();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP29.setFirst((java.lang.Integer)1);
    java.lang.Integer i32 = iP29.getSecond();
    boolean b33 = server22.addException(iP29);
    tp2.Entry entry34 = new tp2.Entry();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    entry34.element = iP39;
    boolean b43 = server22.addException(iP39);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b49 = server22.removeBan(iP48);
    boolean b50 = iP16.equals((java.lang.Object)server22);
    boolean b51 = server0.removeBan(iP16);
    tp2.SinglyLinkedList singlyLinkedList52 = new tp2.SinglyLinkedList();
    java.util.Set<tp2.IP> set_iP53 = null;
    boolean b54 = singlyLinkedList52.repOk(set_iP53);
    int i55 = singlyLinkedList52.getSize();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    java.lang.Integer i63 = iP60.getFourth();
    boolean b64 = singlyLinkedList52.contains(iP60);
    tp2.IPBan iPBan66 = new tp2.IPBan(iP60, (java.lang.Long)1466185870901L);
    java.lang.Integer i67 = iP60.getFirst();
    tp2.SinglyLinkedList singlyLinkedList68 = new tp2.SinglyLinkedList();
    int i69 = singlyLinkedList68.getSize();
    java.lang.String str70 = singlyLinkedList68.toString();
    int i71 = singlyLinkedList68.getSize();
    java.util.Set<tp2.IP> set_iP72 = null;
    boolean b73 = singlyLinkedList68.repOk(set_iP72);
    int i74 = singlyLinkedList68.getSize();
    tp2.IP iP76 = singlyLinkedList68.get(0);
    java.util.Set<tp2.IP> set_iP77 = null;
    boolean b78 = singlyLinkedList68.repOk(set_iP77);
    int i79 = singlyLinkedList68.getSize();
    boolean b80 = iP60.equals((java.lang.Object)singlyLinkedList68);
    boolean b81 = server0.removeException(iP60);
    java.lang.String str82 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 0+ "'", i32.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 100+ "'", i63.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i67 + "' != '" + 10+ "'", i67.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "()"+ "'", str70.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str82.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test162"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i5 = iP4.getFirst();
    java.lang.String str6 = iP4.toString();
    java.lang.String str7 = iP4.toString();
    iP4.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan11 = new tp2.IPBan(iP4, (java.lang.Long)0L);
    iPBan11.expires = 1466185878456L;
    iPBan11.expires = 1466185888005L;
    java.lang.String str16 = iPBan11.toString();
    tp2.IP iP17 = iPBan11.getIp();
    java.lang.Long long18 = iPBan11.getExpires();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i5 + "' != '" + 10+ "'", i5.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "10.0.0.100"+ "'", str6.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "IPBan [ip=10.0.-1.100, expires=1466185888005]"+ "'", str16.equals("IPBan [ip=10.0.-1.100, expires=1466185888005]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1466185888005L+ "'", long18.equals(1466185888005L));

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test163"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Node node9 = new tp2.Node();
    tp2.IPBan iPBan10 = null;
    node9.element = iPBan10;
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    java.lang.String str27 = iPBan26.toString();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i33 = iP32.getFirst();
    java.lang.String str34 = iP32.toString();
    java.lang.String str35 = iP32.toString();
    iPBan26.setIp(iP32);
    java.lang.Long long37 = iPBan26.getExpires();
    node9.element = iPBan26;
    boolean b39 = iP5.equals((java.lang.Object)iPBan26);
    tp2.SinglyLinkedList singlyLinkedList40 = new tp2.SinglyLinkedList();
    int i41 = singlyLinkedList40.getSize();
    java.lang.String str42 = singlyLinkedList40.toString();
    int i43 = singlyLinkedList40.getSize();
    java.util.Set<tp2.IP> set_iP44 = null;
    boolean b45 = singlyLinkedList40.repOk(set_iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b51 = singlyLinkedList40.remove(iP50);
    iPBan26.setIp(iP50);
    tp2.IP iP53 = iPBan26.getIp();
    java.lang.Long long54 = iPBan26.expires;
    tp2.IP iP55 = iPBan26.ip;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str27.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i33 + "' != '" + 10+ "'", i33.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10.0.0.100"+ "'", str34.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L+ "'", long37.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "()"+ "'", str42.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L+ "'", long54.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP55);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test164"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    server0.update();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP7.setFirst((java.lang.Integer)1);
    java.lang.Integer i10 = iP7.getSecond();
    boolean b11 = server0.addException(iP7);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    java.lang.String str19 = iP16.toString();
    iP16.setThird((java.lang.Integer)(-1));
    boolean b22 = server0.addBan(iP16);
    tp2.IP iP23 = null;
    boolean b24 = server0.removeException(iP23);
    tp2.SinglyLinkedList singlyLinkedList25 = new tp2.SinglyLinkedList();
    tp2.IP iP27 = singlyLinkedList25.get((int)' ');
    tp2.Entry entry28 = new tp2.Entry();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i34 = iP33.getFirst();
    java.lang.String str35 = iP33.toString();
    entry28.element = iP33;
    boolean b37 = singlyLinkedList25.remove(iP33);
    tp2.IP iP39 = singlyLinkedList25.get((int)'4');
    java.lang.String str40 = singlyLinkedList25.toString();
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP42 = null;
    boolean b43 = server41.connect(iP42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b49 = server41.connect(iP48);
    java.lang.Integer i50 = iP48.getFirst();
    java.lang.Integer i51 = iP48.getThird();
    boolean b52 = singlyLinkedList25.contains(iP48);
    boolean b53 = server0.removeException(iP48);
    iP48.setThird((java.lang.Integer)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 0+ "'", i10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 10+ "'", i34.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "10.0.0.100"+ "'", str35.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "()"+ "'", str40.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i50 + "' != '" + 100+ "'", i50.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + (-1)+ "'", i51.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test165"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    java.lang.String str14 = iP11.toString();
    iP11.setThird((java.lang.Integer)(-1));
    boolean b17 = strictlySortedSinglyLinkedList0.containsIP(iP11);
    boolean b18 = strictlySortedSinglyLinkedList0.isEmpty();
    java.util.Set<tp2.IPBan> set_iPBan19 = null;
    boolean b20 = strictlySortedSinglyLinkedList0.repOk(set_iPBan19);
    java.lang.String str21 = strictlySortedSinglyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "10.0.0.100"+ "'", str14.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "{}"+ "'", str21.equals("{}"));

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test166"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    int i7 = strictlySortedSinglyLinkedList0.getSize();
    java.lang.String str8 = strictlySortedSinglyLinkedList0.toString();
    java.lang.String str9 = strictlySortedSinglyLinkedList0.toString();
    java.util.Set<tp2.IPBan> set_iPBan10 = null;
    boolean b11 = strictlySortedSinglyLinkedList0.repOk(set_iPBan10);
    tp2.SinglyLinkedList singlyLinkedList12 = new tp2.SinglyLinkedList();
    tp2.IP iP14 = singlyLinkedList12.get((int)' ');
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = singlyLinkedList12.remove(iP20);
    tp2.IPBan iPBan26 = new tp2.IPBan(iP20, (java.lang.Long)1L);
    iPBan26.expires = 1466185871428L;
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP30 = null;
    boolean b31 = server29.connect(iP30);
    java.lang.String str32 = server29.toString();
    java.lang.String str33 = server29.toString();
    tp2.Entry entry34 = new tp2.Entry();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i40 = iP39.getFirst();
    java.lang.String str41 = iP39.toString();
    entry34.element = iP39;
    boolean b43 = server29.connect(iP39);
    iPBan26.ip = iP39;
    boolean b45 = strictlySortedSinglyLinkedList0.add(iPBan26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "{}"+ "'", str8.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "{}"+ "'", str9.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 10+ "'", i40.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10.0.0.100"+ "'", str41.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test167"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b7 = strictlySortedSinglyLinkedList0.containsIP(iP6);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList8 = new tp2.StrictlySortedSinglyLinkedList();
    int i9 = strictlySortedSinglyLinkedList8.size;
    tp2.IPBan iPBan10 = null;
    boolean b11 = strictlySortedSinglyLinkedList8.add(iPBan10);
    boolean b12 = strictlySortedSinglyLinkedList8.isEmpty();
    java.lang.String str13 = strictlySortedSinglyLinkedList8.toString();
    tp2.Node node14 = new tp2.Node();
    tp2.IPBan iPBan15 = null;
    node14.element = iPBan15;
    tp2.IPBan iPBan17 = node14.element;
    strictlySortedSinglyLinkedList8.header = node14;
    tp2.IPBan iPBan20 = strictlySortedSinglyLinkedList8.get((-1));
    tp2.IPBan iPBan22 = strictlySortedSinglyLinkedList8.get((int)' ');
    tp2.Node node23 = strictlySortedSinglyLinkedList8.header;
    strictlySortedSinglyLinkedList0.header = node23;
    tp2.Node node25 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList26 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList26.size = 10;
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    server29.update();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP36.setFirst((java.lang.Integer)1);
    java.lang.Integer i39 = iP36.getSecond();
    boolean b40 = server29.addException(iP36);
    tp2.Entry entry41 = new tp2.Entry();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i47 = iP46.getFirst();
    java.lang.String str48 = iP46.toString();
    entry41.element = iP46;
    boolean b50 = server29.addException(iP46);
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b56 = server29.removeBan(iP55);
    iP55.setThird((java.lang.Integer)0);
    boolean b59 = strictlySortedSinglyLinkedList26.removeFromIP(iP55);
    java.lang.String str60 = strictlySortedSinglyLinkedList26.toString();
    tp2.SinglyLinkedList singlyLinkedList61 = new tp2.SinglyLinkedList();
    tp2.IP iP63 = singlyLinkedList61.get((int)' ');
    tp2.Entry entry64 = new tp2.Entry();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i70 = iP69.getFirst();
    java.lang.String str71 = iP69.toString();
    entry64.element = iP69;
    boolean b73 = singlyLinkedList61.remove(iP69);
    tp2.IPBan iPBan75 = new tp2.IPBan(iP69, (java.lang.Long)1L);
    java.lang.String str76 = iPBan75.toString();
    boolean b77 = strictlySortedSinglyLinkedList26.contains(iPBan75);
    node25.element = iPBan75;
    iPBan75.setExpires((java.lang.Long)1466185879376L);
    tp2.IP iP81 = iPBan75.getIp();
    node23.element = iPBan75;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "{[null]}"+ "'", str13.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i39 + "' != '" + 0+ "'", i39.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 10+ "'", i47.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "10.0.0.100"+ "'", str48.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "{}"+ "'", str60.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i70 + "' != '" + 10+ "'", i70.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "10.0.0.100"+ "'", str71.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str76.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP81);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test168"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    boolean b3 = singlyLinkedList0.isEmpty();
    boolean b4 = singlyLinkedList0.isEmpty();
    tp2.IP iP6 = singlyLinkedList0.get(11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test169"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = new tp2.Entry();
    tp2.Entry entry9 = new tp2.Entry();
    java.lang.String str10 = entry9.toString();
    java.lang.String str11 = entry9.toString();
    tp2.Entry entry12 = entry9.next;
    entry8.next = entry9;
    tp2.Entry entry14 = new tp2.Entry();
    tp2.Entry entry15 = new tp2.Entry();
    java.lang.String str16 = entry15.toString();
    java.lang.String str17 = entry15.toString();
    tp2.Entry entry18 = entry15.next;
    entry14.next = entry15;
    entry9.next = entry14;
    java.lang.String str21 = entry9.toString();
    tp2.IP iP22 = entry9.element;
    java.lang.String str23 = entry9.toString();
    entry0.next = entry9;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[null]"+ "'", str10.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[null]"+ "'", str11.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[null]"+ "'", str16.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[null]"+ "'", str17.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[null]"+ "'", str21.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[null]"+ "'", str23.equals("[null]"));

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test170"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)2, (java.lang.Integer)97, (java.lang.Integer)100, (java.lang.Integer)35);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test171"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    int i50 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)10;
    tp2.IPBan iPBan54 = strictlySortedSinglyLinkedList0.get((int)(short)1);
    strictlySortedSinglyLinkedList0.size = 101;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan54);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test172"); }


    tp2.Entry entry0 = new tp2.Entry();
    java.lang.String str1 = entry0.toString();
    java.lang.String str2 = entry0.toString();
    tp2.Entry entry3 = entry0.next;
    tp2.IP iP4 = entry0.element;
    tp2.IP iP5 = entry0.element;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.Entry entry7 = new tp2.Entry();
    java.lang.String str8 = entry7.toString();
    java.lang.String str9 = entry7.toString();
    tp2.Entry entry10 = entry7.next;
    entry6.next = entry7;
    entry0.next = entry6;
    tp2.Entry entry13 = entry0.next;
    java.lang.String str14 = entry0.toString();
    tp2.Entry entry15 = entry0.next;
    java.lang.String str16 = entry0.toString();
    tp2.Entry entry17 = entry0.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[null]"+ "'", str1.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[null]"+ "'", str8.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[null]"+ "'", str14.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[null]"+ "'", str16.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry17);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test173"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i5 = iP4.getFirst();
    java.lang.String str6 = iP4.toString();
    java.lang.String str7 = iP4.toString();
    iP4.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan11 = new tp2.IPBan(iP4, (java.lang.Long)0L);
    tp2.Server server12 = new tp2.Server();
    tp2.IP iP13 = null;
    boolean b14 = server12.connect(iP13);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b20 = server12.connect(iP19);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList21 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList21.size = 10;
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    server24.update();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP31.setFirst((java.lang.Integer)1);
    java.lang.Integer i34 = iP31.getSecond();
    boolean b35 = server24.addException(iP31);
    tp2.Entry entry36 = new tp2.Entry();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i42 = iP41.getFirst();
    java.lang.String str43 = iP41.toString();
    entry36.element = iP41;
    boolean b45 = server24.addException(iP41);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b51 = server24.removeBan(iP50);
    iP50.setThird((java.lang.Integer)0);
    boolean b54 = strictlySortedSinglyLinkedList21.removeFromIP(iP50);
    tp2.Server server55 = new tp2.Server();
    java.lang.String str56 = server55.toString();
    server55.update();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP62.setFirst((java.lang.Integer)1);
    java.lang.Integer i65 = iP62.getSecond();
    boolean b66 = server55.addException(iP62);
    boolean b67 = strictlySortedSinglyLinkedList21.removeFromIP(iP62);
    boolean b68 = server12.connect(iP62);
    tp2.Server server69 = new tp2.Server();
    tp2.IP iP70 = null;
    boolean b71 = server69.connect(iP70);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b77 = server69.connect(iP76);
    java.lang.Integer i78 = iP76.getFirst();
    boolean b79 = server12.connect(iP76);
    java.lang.Integer i80 = iP76.getFirst();
    iPBan11.ip = iP76;
    tp2.Entry entry82 = new tp2.Entry();
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i88 = iP87.getFirst();
    entry82.element = iP87;
    iP87.setFirst((java.lang.Integer)1);
    iPBan11.setIp(iP87);
    iP87.setSecond((java.lang.Integer)2);
    tp2.IPBan iPBan96 = new tp2.IPBan(iP87, (java.lang.Long)1466185916701L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i5 + "' != '" + 10+ "'", i5.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "10.0.0.100"+ "'", str6.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 0+ "'", i34.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i42 + "' != '" + 10+ "'", i42.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10.0.0.100"+ "'", str43.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 0+ "'", i65.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i78 + "' != '" + 100+ "'", i78.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 100+ "'", i80.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i88 + "' != '" + 10+ "'", i88.equals(10));

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test174"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    java.util.Set<tp2.IPBan> set_iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList0.repOk(set_iPBan4);
    strictlySortedSinglyLinkedList0.size = ' ';
    tp2.IPBan iPBan9 = strictlySortedSinglyLinkedList0.get(1);
    tp2.IPBan iPBan11 = strictlySortedSinglyLinkedList0.get(100);
    boolean b12 = strictlySortedSinglyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test175"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.IP iP9 = entry0.element;
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP11 = null;
    boolean b12 = server10.connect(iP11);
    java.lang.String str13 = server10.toString();
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    server14.update();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP21.setFirst((java.lang.Integer)1);
    java.lang.Integer i24 = iP21.getSecond();
    boolean b25 = server14.addException(iP21);
    boolean b26 = server10.addException(iP21);
    entry0.element = iP21;
    tp2.IP iP28 = entry0.element;
    tp2.IP iP29 = entry0.element;
    java.lang.String str30 = entry0.toString();
    tp2.Entry entry31 = entry0.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 0+ "'", i24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[1.0.0.100]"+ "'", str30.equals("[1.0.0.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry31);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test176"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.SinglyLinkedList singlyLinkedList13 = new tp2.SinglyLinkedList();
    tp2.IP iP15 = singlyLinkedList13.get((int)' ');
    tp2.Entry entry16 = new tp2.Entry();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    entry16.element = iP21;
    boolean b25 = singlyLinkedList13.remove(iP21);
    tp2.IPBan iPBan27 = new tp2.IPBan(iP21, (java.lang.Long)1L);
    java.lang.String str28 = iPBan27.toString();
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP30 = null;
    boolean b31 = server29.connect(iP30);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b37 = server29.connect(iP36);
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP39 = null;
    boolean b40 = server38.connect(iP39);
    java.lang.String str41 = server38.toString();
    java.lang.String str42 = server38.toString();
    tp2.Entry entry43 = new tp2.Entry();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i49 = iP48.getFirst();
    java.lang.String str50 = iP48.toString();
    entry43.element = iP48;
    boolean b52 = server38.connect(iP48);
    boolean b53 = server29.removeException(iP48);
    tp2.Server server54 = new tp2.Server();
    tp2.IP iP55 = null;
    boolean b56 = server54.connect(iP55);
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b62 = server54.connect(iP61);
    java.lang.Integer i63 = iP61.getFirst();
    boolean b64 = server29.connect(iP61);
    iPBan27.ip = iP61;
    boolean b66 = singlyLinkedList0.contains(iP61);
    java.util.Set<tp2.IP> set_iP67 = null;
    boolean b68 = singlyLinkedList0.repOk(set_iP67);
    tp2.IP iP70 = singlyLinkedList0.get(32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str28.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i49 + "' != '" + 10+ "'", i49.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "10.0.0.100"+ "'", str50.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i63 + "' != '" + 100+ "'", i63.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP70);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test177"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)11, (java.lang.Integer)2, (java.lang.Integer)10, (java.lang.Integer)32);
    iP4.setThird((java.lang.Integer)33);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test178"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    boolean b5 = strictlySortedSinglyLinkedList0.isEmpty();
    int i6 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan8 = strictlySortedSinglyLinkedList0.get((int)(short)10);
    strictlySortedSinglyLinkedList0.size = 11;
    java.util.Set<tp2.IPBan> set_iPBan11 = null;
    boolean b12 = strictlySortedSinglyLinkedList0.repOk(set_iPBan11);
    tp2.Node node13 = strictlySortedSinglyLinkedList0.header;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList14 = new tp2.StrictlySortedSinglyLinkedList();
    int i15 = strictlySortedSinglyLinkedList14.getSize();
    tp2.IPBan iPBan16 = null;
    boolean b17 = strictlySortedSinglyLinkedList14.add(iPBan16);
    tp2.Node node18 = strictlySortedSinglyLinkedList14.header;
    tp2.SinglyLinkedList singlyLinkedList19 = new tp2.SinglyLinkedList();
    tp2.IP iP21 = singlyLinkedList19.get((int)' ');
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = singlyLinkedList19.remove(iP27);
    tp2.IPBan iPBan33 = new tp2.IPBan(iP27, (java.lang.Long)1L);
    java.lang.String str34 = iPBan33.toString();
    iPBan33.setExpires((java.lang.Long)0L);
    java.lang.Long long37 = iPBan33.expires;
    node18.element = iPBan33;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList39 = new tp2.StrictlySortedSinglyLinkedList();
    int i40 = strictlySortedSinglyLinkedList39.getSize();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b46 = strictlySortedSinglyLinkedList39.containsIP(iP45);
    tp2.Node node47 = strictlySortedSinglyLinkedList39.header;
    java.lang.String str48 = node47.toString();
    node18.next = node47;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList50 = new tp2.StrictlySortedSinglyLinkedList();
    int i51 = strictlySortedSinglyLinkedList50.size;
    tp2.IPBan iPBan52 = null;
    boolean b53 = strictlySortedSinglyLinkedList50.add(iPBan52);
    boolean b54 = strictlySortedSinglyLinkedList50.isEmpty();
    tp2.Node node55 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList56 = new tp2.StrictlySortedSinglyLinkedList();
    int i57 = strictlySortedSinglyLinkedList56.getSize();
    tp2.IPBan iPBan58 = null;
    boolean b59 = strictlySortedSinglyLinkedList56.add(iPBan58);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList60 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node61 = strictlySortedSinglyLinkedList60.header;
    strictlySortedSinglyLinkedList56.header = node61;
    node55.next = node61;
    tp2.Node node64 = node55.next;
    strictlySortedSinglyLinkedList50.header = node64;
    java.lang.String str66 = node64.toString();
    node47.next = node64;
    node13.next = node64;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str34.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L+ "'", long37.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "[null]"+ "'", str48.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "[null]"+ "'", str66.equals("[null]"));

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test179"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList3 = new tp2.StrictlySortedSinglyLinkedList();
    int i4 = strictlySortedSinglyLinkedList3.getSize();
    tp2.IPBan iPBan5 = null;
    boolean b6 = strictlySortedSinglyLinkedList3.add(iPBan5);
    tp2.Node node7 = strictlySortedSinglyLinkedList3.header;
    tp2.IPBan iPBan9 = strictlySortedSinglyLinkedList3.get(100);
    tp2.Node node10 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    int i12 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan13 = null;
    boolean b14 = strictlySortedSinglyLinkedList11.add(iPBan13);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node16 = strictlySortedSinglyLinkedList15.header;
    strictlySortedSinglyLinkedList11.header = node16;
    node10.next = node16;
    strictlySortedSinglyLinkedList3.header = node10;
    node0.next = node10;
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    java.lang.String str28 = iP25.toString();
    iP25.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan32 = new tp2.IPBan(iP25, (java.lang.Long)0L);
    node0.element = iPBan32;
    tp2.IP iP34 = iPBan32.getIp();
    tp2.IP iP35 = iPBan32.getIp();
    iPBan32.expires = 1466185888007L;
    tp2.IP iP38 = iPBan32.getIp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP38);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test180"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList3 = new tp2.SinglyLinkedList();
    tp2.IP iP5 = singlyLinkedList3.get((int)' ');
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    java.lang.String str13 = iP11.toString();
    entry6.element = iP11;
    boolean b15 = singlyLinkedList3.remove(iP11);
    tp2.IPBan iPBan17 = new tp2.IPBan(iP11, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList18 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan19 = null;
    boolean b20 = strictlySortedSinglyLinkedList18.contains(iPBan19);
    int i21 = strictlySortedSinglyLinkedList18.getSize();
    tp2.IPBan iPBan23 = strictlySortedSinglyLinkedList18.get((int)'#');
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP28.setSecond((java.lang.Integer)(-1));
    boolean b31 = strictlySortedSinglyLinkedList18.removeFromIP(iP28);
    iPBan17.ip = iP28;
    tp2.IP iP33 = iPBan17.ip;
    boolean b34 = singlyLinkedList0.contains(iP33);
    java.util.Set<tp2.IP> set_iP35 = null;
    boolean b36 = singlyLinkedList0.repOk(set_iP35);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList37 = new tp2.StrictlySortedSinglyLinkedList();
    int i38 = strictlySortedSinglyLinkedList37.getSize();
    tp2.IPBan iPBan39 = null;
    boolean b40 = strictlySortedSinglyLinkedList37.add(iPBan39);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList41 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node42 = strictlySortedSinglyLinkedList41.header;
    strictlySortedSinglyLinkedList37.header = node42;
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i49 = iP48.getFirst();
    java.lang.String str50 = iP48.toString();
    java.lang.String str51 = iP48.toString();
    iP48.setThird((java.lang.Integer)(-1));
    boolean b54 = strictlySortedSinglyLinkedList37.containsIP(iP48);
    tp2.SinglyLinkedList singlyLinkedList55 = new tp2.SinglyLinkedList();
    tp2.IP iP57 = singlyLinkedList55.get((int)' ');
    tp2.Entry entry58 = new tp2.Entry();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i64 = iP63.getFirst();
    java.lang.String str65 = iP63.toString();
    entry58.element = iP63;
    boolean b67 = singlyLinkedList55.remove(iP63);
    tp2.IPBan iPBan69 = new tp2.IPBan(iP63, (java.lang.Long)1L);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList70 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan71 = null;
    boolean b72 = strictlySortedSinglyLinkedList70.contains(iPBan71);
    int i73 = strictlySortedSinglyLinkedList70.getSize();
    tp2.IPBan iPBan75 = strictlySortedSinglyLinkedList70.get((int)'#');
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP80.setSecond((java.lang.Integer)(-1));
    boolean b83 = strictlySortedSinglyLinkedList70.removeFromIP(iP80);
    iPBan69.ip = iP80;
    boolean b85 = strictlySortedSinglyLinkedList37.removeFromIP(iP80);
    boolean b86 = singlyLinkedList0.remove(iP80);
    boolean b87 = singlyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "10.0.0.100"+ "'", str13.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i49 + "' != '" + 10+ "'", i49.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "10.0.0.100"+ "'", str50.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "10.0.0.100"+ "'", str51.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 10+ "'", i64.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "10.0.0.100"+ "'", str65.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test181"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    java.lang.String str34 = strictlySortedSinglyLinkedList0.toString();
    int i35 = strictlySortedSinglyLinkedList0.size;
    tp2.SinglyLinkedList singlyLinkedList36 = new tp2.SinglyLinkedList();
    tp2.IP iP38 = singlyLinkedList36.get((int)' ');
    tp2.Entry entry39 = new tp2.Entry();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i45 = iP44.getFirst();
    java.lang.String str46 = iP44.toString();
    entry39.element = iP44;
    boolean b48 = singlyLinkedList36.remove(iP44);
    tp2.IPBan iPBan50 = new tp2.IPBan(iP44, (java.lang.Long)1L);
    java.lang.String str51 = iPBan50.toString();
    iPBan50.setExpires((java.lang.Long)0L);
    java.lang.Long long54 = iPBan50.expires;
    tp2.IP iP55 = iPBan50.getIp();
    java.lang.Long long56 = iPBan50.getExpires();
    iPBan50.expires = 1466185872523L;
    java.lang.Long long59 = iPBan50.getExpires();
    java.lang.String str60 = iPBan50.toString();
    boolean b61 = strictlySortedSinglyLinkedList0.contains(iPBan50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "{}"+ "'", str34.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 10+ "'", i45.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "10.0.0.100"+ "'", str46.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str51.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L+ "'", long54.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L+ "'", long56.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1466185872523L+ "'", long59.equals(1466185872523L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "IPBan [ip=10.0.0.100, expires=1466185872523]"+ "'", str60.equals("IPBan [ip=10.0.0.100, expires=1466185872523]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test182"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.IPBan iPBan3 = null;
    node0.element = iPBan3;
    tp2.Node node5 = new tp2.Node();
    tp2.IPBan iPBan6 = null;
    node5.element = iPBan6;
    tp2.IPBan iPBan8 = null;
    node5.element = iPBan8;
    tp2.Node node10 = node5.next;
    node0.next = node5;
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    java.lang.String str19 = iP16.toString();
    iP16.setThird((java.lang.Integer)(-1));
    tp2.IPBan iPBan23 = new tp2.IPBan(iP16, (java.lang.Long)0L);
    node0.element = iPBan23;
    tp2.Node node25 = node0.next;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList26 = new tp2.StrictlySortedSinglyLinkedList();
    int i27 = strictlySortedSinglyLinkedList26.getSize();
    tp2.IPBan iPBan28 = null;
    boolean b29 = strictlySortedSinglyLinkedList26.contains(iPBan28);
    int i30 = strictlySortedSinglyLinkedList26.getSize();
    tp2.Entry entry31 = new tp2.Entry();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i37 = iP36.getFirst();
    java.lang.String str38 = iP36.toString();
    entry31.element = iP36;
    tp2.Node node40 = new tp2.Node();
    tp2.IPBan iPBan41 = null;
    node40.element = iPBan41;
    tp2.SinglyLinkedList singlyLinkedList43 = new tp2.SinglyLinkedList();
    tp2.IP iP45 = singlyLinkedList43.get((int)' ');
    tp2.Entry entry46 = new tp2.Entry();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i52 = iP51.getFirst();
    java.lang.String str53 = iP51.toString();
    entry46.element = iP51;
    boolean b55 = singlyLinkedList43.remove(iP51);
    tp2.IPBan iPBan57 = new tp2.IPBan(iP51, (java.lang.Long)1L);
    java.lang.String str58 = iPBan57.toString();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i64 = iP63.getFirst();
    java.lang.String str65 = iP63.toString();
    java.lang.String str66 = iP63.toString();
    iPBan57.setIp(iP63);
    java.lang.Long long68 = iPBan57.getExpires();
    node40.element = iPBan57;
    boolean b70 = iP36.equals((java.lang.Object)iPBan57);
    boolean b71 = strictlySortedSinglyLinkedList26.contains(iPBan57);
    java.lang.String str72 = iPBan57.toString();
    java.lang.String str73 = iPBan57.toString();
    node25.element = iPBan57;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i37 + "' != '" + 10+ "'", i37.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "10.0.0.100"+ "'", str38.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i52 + "' != '" + 10+ "'", i52.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "10.0.0.100"+ "'", str53.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str58.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 10+ "'", i64.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "10.0.0.100"+ "'", str65.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "10.0.0.100"+ "'", str66.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L+ "'", long68.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str72.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str73.equals("IPBan [ip=10.0.0.100, expires=1]"));

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test183"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    boolean b4 = strictlySortedSinglyLinkedList0.isEmpty();
    java.lang.String str5 = strictlySortedSinglyLinkedList0.toString();
    tp2.Node node6 = new tp2.Node();
    tp2.IPBan iPBan7 = null;
    node6.element = iPBan7;
    tp2.IPBan iPBan9 = node6.element;
    strictlySortedSinglyLinkedList0.header = node6;
    tp2.IPBan iPBan12 = strictlySortedSinglyLinkedList0.get((-1));
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP14 = null;
    boolean b15 = server13.connect(iP14);
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b21 = server13.connect(iP20);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    tp2.IP iP31 = entry22.element;
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP33 = null;
    boolean b34 = server32.connect(iP33);
    java.lang.String str35 = server32.toString();
    tp2.Server server36 = new tp2.Server();
    java.lang.String str37 = server36.toString();
    server36.update();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP43.setFirst((java.lang.Integer)1);
    java.lang.Integer i46 = iP43.getSecond();
    boolean b47 = server36.addException(iP43);
    boolean b48 = server32.addException(iP43);
    entry22.element = iP43;
    boolean b50 = server13.removeBan(iP43);
    boolean b51 = strictlySortedSinglyLinkedList0.containsIP(iP43);
    tp2.SinglyLinkedList singlyLinkedList52 = new tp2.SinglyLinkedList();
    tp2.IP iP54 = singlyLinkedList52.get((int)' ');
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    entry55.element = iP60;
    boolean b64 = singlyLinkedList52.remove(iP60);
    tp2.IPBan iPBan66 = new tp2.IPBan(iP60, (java.lang.Long)1L);
    java.lang.String str67 = iPBan66.toString();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i73 = iP72.getFirst();
    java.lang.String str74 = iP72.toString();
    java.lang.String str75 = iP72.toString();
    iPBan66.setIp(iP72);
    java.lang.Long long77 = iPBan66.getExpires();
    iPBan66.setExpires((java.lang.Long)0L);
    java.lang.String str80 = iPBan66.toString();
    tp2.Entry entry81 = new tp2.Entry();
    tp2.IP iP86 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i87 = iP86.getFirst();
    java.lang.String str88 = iP86.toString();
    entry81.element = iP86;
    tp2.IP iP90 = entry81.element;
    iPBan66.setIp(iP90);
    java.lang.String str92 = iPBan66.toString();
    tp2.IP iP93 = iPBan66.ip;
    boolean b94 = strictlySortedSinglyLinkedList0.contains(iPBan66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "{[null]}"+ "'", str5.equals("{[null]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 0+ "'", i46.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str67.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 10+ "'", i73.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10.0.0.100"+ "'", str74.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "10.0.0.100"+ "'", str75.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L+ "'", long77.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str80.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i87 + "' != '" + 10+ "'", i87.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "10.0.0.100"+ "'", str88.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str92.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test184"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Entry entry9 = new tp2.Entry();
    tp2.Entry entry10 = new tp2.Entry();
    java.lang.String str11 = entry10.toString();
    java.lang.String str12 = entry10.toString();
    tp2.Entry entry13 = entry10.next;
    entry9.next = entry10;
    tp2.IP iP15 = entry9.element;
    entry0.next = entry9;
    tp2.Entry entry17 = entry0.next;
    java.lang.String str18 = entry0.toString();
    tp2.Entry entry19 = null;
    entry0.next = entry19;
    tp2.IP iP21 = null;
    entry0.element = iP21;
    tp2.Entry entry23 = new tp2.Entry();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i29 = iP28.getFirst();
    java.lang.String str30 = iP28.toString();
    entry23.element = iP28;
    tp2.Entry entry32 = new tp2.Entry();
    tp2.Entry entry33 = new tp2.Entry();
    java.lang.String str34 = entry33.toString();
    java.lang.String str35 = entry33.toString();
    tp2.Entry entry36 = entry33.next;
    entry32.next = entry33;
    tp2.IP iP38 = entry32.element;
    entry23.next = entry32;
    tp2.Entry entry40 = entry23.next;
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP42 = null;
    boolean b43 = server41.connect(iP42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b49 = server41.connect(iP48);
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP51 = null;
    boolean b52 = server50.connect(iP51);
    java.lang.String str53 = server50.toString();
    java.lang.String str54 = server50.toString();
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    java.lang.String str62 = iP60.toString();
    entry55.element = iP60;
    boolean b64 = server50.connect(iP60);
    boolean b65 = server41.removeException(iP60);
    java.lang.Integer i66 = iP60.getFourth();
    entry23.element = iP60;
    tp2.IP iP68 = entry23.element;
    entry0.next = entry23;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[null]"+ "'", str11.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[null]"+ "'", str12.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[10.0.0.100]"+ "'", str18.equals("[10.0.0.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i29 + "' != '" + 10+ "'", i29.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "10.0.0.100"+ "'", str30.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[null]"+ "'", str34.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[null]"+ "'", str35.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str53.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str54.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "10.0.0.100"+ "'", str62.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i66 + "' != '" + 100+ "'", i66.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP68);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test185"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    java.lang.String str7 = iP5.toString();
    entry0.element = iP5;
    tp2.Entry entry9 = new tp2.Entry();
    tp2.Entry entry10 = new tp2.Entry();
    java.lang.String str11 = entry10.toString();
    java.lang.String str12 = entry10.toString();
    tp2.Entry entry13 = entry10.next;
    entry9.next = entry10;
    tp2.IP iP15 = entry9.element;
    entry0.next = entry9;
    tp2.Entry entry17 = entry0.next;
    java.lang.String str18 = entry0.toString();
    tp2.IP iP19 = entry0.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "10.0.0.100"+ "'", str7.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[null]"+ "'", str11.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[null]"+ "'", str12.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[10.0.0.100]"+ "'", str18.equals("[10.0.0.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test186"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get((int)' ');
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    boolean b17 = singlyLinkedList5.remove(iP13);
    tp2.IPBan iPBan19 = new tp2.IPBan(iP13, (java.lang.Long)1L);
    java.lang.String str20 = iPBan19.toString();
    iPBan19.setExpires((java.lang.Long)0L);
    java.lang.Long long23 = iPBan19.expires;
    node4.element = iPBan19;
    tp2.IPBan iPBan25 = node4.element;
    tp2.IPBan iPBan26 = node4.element;
    tp2.IPBan iPBan27 = node4.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L+ "'", long23.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan27);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test187"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = entry0.next;
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b17 = server9.connect(iP16);
    java.lang.Integer i18 = iP16.getFirst();
    entry0.element = iP16;
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP24.setThird((java.lang.Integer)1);
    entry0.element = iP24;
    tp2.Entry entry28 = new tp2.Entry();
    java.lang.String str29 = entry28.toString();
    tp2.Entry entry30 = new tp2.Entry();
    java.lang.String str31 = entry30.toString();
    entry28.next = entry30;
    entry0.next = entry28;
    tp2.IP iP34 = entry0.element;
    tp2.Entry entry35 = new tp2.Entry();
    tp2.Entry entry36 = new tp2.Entry();
    java.lang.String str37 = entry36.toString();
    java.lang.String str38 = entry36.toString();
    tp2.Entry entry39 = entry36.next;
    entry35.next = entry36;
    tp2.Entry entry41 = new tp2.Entry();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i47 = iP46.getFirst();
    entry41.element = iP46;
    tp2.Entry entry49 = entry41.next;
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP51 = null;
    boolean b52 = server50.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b58 = server50.connect(iP57);
    java.lang.Integer i59 = iP57.getFirst();
    entry41.element = iP57;
    entry36.next = entry41;
    tp2.IP iP62 = entry36.element;
    entry0.next = entry36;
    tp2.Entry entry64 = entry36.next;
    tp2.Entry entry65 = new tp2.Entry();
    tp2.Entry entry66 = new tp2.Entry();
    java.lang.String str67 = entry66.toString();
    java.lang.String str68 = entry66.toString();
    tp2.Entry entry69 = entry66.next;
    entry65.next = entry66;
    tp2.IP iP71 = entry65.element;
    tp2.Entry entry72 = entry65.next;
    entry36.next = entry65;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 100+ "'", i18.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[null]"+ "'", str29.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[null]"+ "'", str31.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[null]"+ "'", str37.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[null]"+ "'", str38.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 10+ "'", i47.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i59 + "' != '" + 100+ "'", i59.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[null]"+ "'", str67.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "[null]"+ "'", str68.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry72);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test188"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    iPBan14.expires = 1466185877442L;
    tp2.IP iP20 = iPBan14.getIp();
    iPBan14.expires = 0L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test189"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan5 = strictlySortedSinglyLinkedList0.get((int)'#');
    strictlySortedSinglyLinkedList0.size = (short)100;
    tp2.SinglyLinkedList singlyLinkedList8 = new tp2.SinglyLinkedList();
    java.lang.String str9 = singlyLinkedList8.toString();
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP11 = null;
    boolean b12 = server10.connect(iP11);
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b18 = server10.connect(iP17);
    tp2.Server server19 = new tp2.Server();
    tp2.IP iP20 = null;
    boolean b21 = server19.connect(iP20);
    java.lang.String str22 = server19.toString();
    java.lang.String str23 = server19.toString();
    tp2.Entry entry24 = new tp2.Entry();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i30 = iP29.getFirst();
    java.lang.String str31 = iP29.toString();
    entry24.element = iP29;
    boolean b33 = server19.connect(iP29);
    boolean b34 = server10.removeException(iP29);
    boolean b35 = singlyLinkedList8.remove(iP29);
    boolean b36 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    int i37 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan39 = strictlySortedSinglyLinkedList0.get(35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "()"+ "'", str9.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "10.0.0.100"+ "'", str31.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan39);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test190"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i12 = iP11.getFirst();
    entry6.element = iP11;
    tp2.Entry entry14 = entry6.next;
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP16 = null;
    boolean b17 = server15.connect(iP16);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b23 = server15.connect(iP22);
    java.lang.Integer i24 = iP22.getFirst();
    entry6.element = iP22;
    entry1.next = entry6;
    tp2.Entry entry27 = entry1.next;
    tp2.Entry entry28 = new tp2.Entry();
    tp2.Entry entry29 = entry28.next;
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)10, (java.lang.Integer)11, (java.lang.Integer)2);
    entry28.element = iP34;
    entry1.element = iP34;
    java.lang.String str37 = entry1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i12 + "' != '" + 10+ "'", i12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 100+ "'", i24.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[1.10.11.2]"+ "'", str37.equals("[1.10.11.2]"));

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test191"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList7 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList7.size = 10;
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    server10.update();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP17.setFirst((java.lang.Integer)1);
    java.lang.Integer i20 = iP17.getSecond();
    boolean b21 = server10.addException(iP17);
    tp2.Entry entry22 = new tp2.Entry();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i28 = iP27.getFirst();
    java.lang.String str29 = iP27.toString();
    entry22.element = iP27;
    boolean b31 = server10.addException(iP27);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b37 = server10.removeBan(iP36);
    iP36.setThird((java.lang.Integer)0);
    boolean b40 = strictlySortedSinglyLinkedList7.removeFromIP(iP36);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    server41.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP48.setFirst((java.lang.Integer)1);
    java.lang.Integer i51 = iP48.getSecond();
    boolean b52 = server41.addException(iP48);
    boolean b53 = strictlySortedSinglyLinkedList7.removeFromIP(iP48);
    boolean b54 = server0.connect(iP48);
    tp2.Entry entry55 = new tp2.Entry();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i61 = iP60.getFirst();
    entry55.element = iP60;
    tp2.Entry entry63 = entry55.next;
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP65 = null;
    boolean b66 = server64.connect(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b72 = server64.connect(iP71);
    java.lang.Integer i73 = iP71.getFirst();
    entry55.element = iP71;
    iP71.setFourth((java.lang.Integer)100);
    boolean b77 = server0.removeException(iP71);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList78 = new tp2.StrictlySortedSinglyLinkedList();
    boolean b79 = iP71.equals((java.lang.Object)strictlySortedSinglyLinkedList78);
    java.lang.String str80 = strictlySortedSinglyLinkedList78.toString();
    java.util.Set<tp2.IPBan> set_iPBan81 = null;
    boolean b82 = strictlySortedSinglyLinkedList78.repOk(set_iPBan81);
    tp2.Node node83 = strictlySortedSinglyLinkedList78.header;
    java.lang.String str84 = node83.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 0+ "'", i20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i28 + "' != '" + 10+ "'", i28.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "10.0.0.100"+ "'", str29.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 0+ "'", i51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i73 + "' != '" + 100+ "'", i73.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "{}"+ "'", str80.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "[null]"+ "'", str84.equals("[null]"));

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test192"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList3 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList3.size = 10;
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    server6.update();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP13.setFirst((java.lang.Integer)1);
    java.lang.Integer i16 = iP13.getSecond();
    boolean b17 = server6.addException(iP13);
    tp2.Entry entry18 = new tp2.Entry();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    entry18.element = iP23;
    boolean b27 = server6.addException(iP23);
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b33 = server6.removeBan(iP32);
    iP32.setThird((java.lang.Integer)0);
    boolean b36 = strictlySortedSinglyLinkedList3.removeFromIP(iP32);
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    server37.update();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP44.setFirst((java.lang.Integer)1);
    java.lang.Integer i47 = iP44.getSecond();
    boolean b48 = server37.addException(iP44);
    boolean b49 = strictlySortedSinglyLinkedList3.removeFromIP(iP44);
    singlyLinkedList0.add(iP44);
    tp2.IP iP52 = singlyLinkedList0.get(1);
    boolean b53 = singlyLinkedList0.isEmpty();
    boolean b54 = singlyLinkedList0.isEmpty();
    boolean b55 = singlyLinkedList0.isEmpty();
    java.util.Set<tp2.IP> set_iP56 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b57 = singlyLinkedList0.repOk(set_iP56);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i16 + "' != '" + 0+ "'", i16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 0+ "'", i47.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test193"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.Entry entry1 = new tp2.Entry();
    java.lang.String str2 = entry1.toString();
    java.lang.String str3 = entry1.toString();
    tp2.Entry entry4 = entry1.next;
    entry0.next = entry1;
    tp2.Entry entry6 = new tp2.Entry();
    tp2.Entry entry7 = new tp2.Entry();
    java.lang.String str8 = entry7.toString();
    java.lang.String str9 = entry7.toString();
    tp2.Entry entry10 = entry7.next;
    entry6.next = entry7;
    entry1.next = entry6;
    java.lang.String str13 = entry1.toString();
    tp2.Entry entry14 = entry1.next;
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFourth();
    entry14.element = iP19;
    tp2.Entry entry22 = new tp2.Entry();
    java.lang.String str23 = entry22.toString();
    java.lang.String str24 = entry22.toString();
    tp2.Entry entry25 = entry22.next;
    entry14.next = entry22;
    tp2.Entry entry27 = new tp2.Entry();
    tp2.Entry entry28 = new tp2.Entry();
    java.lang.String str29 = entry28.toString();
    java.lang.String str30 = entry28.toString();
    tp2.Entry entry31 = entry28.next;
    entry27.next = entry28;
    tp2.IP iP33 = entry27.element;
    tp2.IP iP34 = null;
    entry27.element = iP34;
    tp2.Entry entry36 = new tp2.Entry();
    java.lang.String str37 = entry36.toString();
    tp2.Server server38 = new tp2.Server();
    java.lang.String str39 = server38.toString();
    server38.update();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i46 = iP45.getFirst();
    boolean b47 = server38.connect(iP45);
    entry36.element = iP45;
    java.lang.String str49 = entry36.toString();
    entry27.next = entry36;
    tp2.Entry entry51 = entry27.next;
    entry22.next = entry27;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[null]"+ "'", str2.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[null]"+ "'", str3.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[null]"+ "'", str8.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null]"+ "'", str9.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[null]"+ "'", str13.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 100+ "'", i20.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[null]"+ "'", str23.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[null]"+ "'", str24.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[null]"+ "'", str29.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[null]"+ "'", str30.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[null]"+ "'", str37.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i46 + "' != '" + 100+ "'", i46.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "[100.10.-1.10]"+ "'", str49.equals("[100.10.-1.10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entry51);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test194"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.Entry entry8 = entry0.next;
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP10 = null;
    boolean b11 = server9.connect(iP10);
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b17 = server9.connect(iP16);
    java.lang.Integer i18 = iP16.getFirst();
    entry0.element = iP16;
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP24.setThird((java.lang.Integer)1);
    entry0.element = iP24;
    tp2.Entry entry28 = new tp2.Entry();
    java.lang.String str29 = entry28.toString();
    tp2.Entry entry30 = new tp2.Entry();
    java.lang.String str31 = entry30.toString();
    entry28.next = entry30;
    entry0.next = entry28;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList34 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan35 = null;
    boolean b36 = strictlySortedSinglyLinkedList34.contains(iPBan35);
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    server37.update();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i45 = iP44.getFirst();
    boolean b46 = server37.connect(iP44);
    boolean b47 = strictlySortedSinglyLinkedList34.removeFromIP(iP44);
    java.lang.Integer i48 = iP44.getThird();
    iP44.setFourth((java.lang.Integer)100);
    entry0.element = iP44;
    iP44.setFirst((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 100+ "'", i18.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[null]"+ "'", str29.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[null]"+ "'", str31.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 100+ "'", i45.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i48 + "' != '" + (-1)+ "'", i48.equals((-1)));

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test195"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Node node4 = strictlySortedSinglyLinkedList0.header;
    int i5 = strictlySortedSinglyLinkedList0.size;
    tp2.IP iP6 = null;
    boolean b7 = strictlySortedSinglyLinkedList0.containsIP(iP6);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList8 = new tp2.StrictlySortedSinglyLinkedList();
    int i9 = strictlySortedSinglyLinkedList8.size;
    tp2.IPBan iPBan10 = null;
    boolean b11 = strictlySortedSinglyLinkedList8.add(iPBan10);
    boolean b12 = strictlySortedSinglyLinkedList8.isEmpty();
    tp2.Node node13 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList14 = new tp2.StrictlySortedSinglyLinkedList();
    int i15 = strictlySortedSinglyLinkedList14.getSize();
    tp2.IPBan iPBan16 = null;
    boolean b17 = strictlySortedSinglyLinkedList14.add(iPBan16);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList18 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node19 = strictlySortedSinglyLinkedList18.header;
    strictlySortedSinglyLinkedList14.header = node19;
    node13.next = node19;
    tp2.Node node22 = node13.next;
    strictlySortedSinglyLinkedList8.header = node22;
    java.lang.String str24 = strictlySortedSinglyLinkedList8.toString();
    tp2.Node node25 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList26 = new tp2.StrictlySortedSinglyLinkedList();
    int i27 = strictlySortedSinglyLinkedList26.getSize();
    tp2.IPBan iPBan28 = null;
    boolean b29 = strictlySortedSinglyLinkedList26.add(iPBan28);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList30 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node31 = strictlySortedSinglyLinkedList30.header;
    strictlySortedSinglyLinkedList26.header = node31;
    node25.next = node31;
    tp2.Node node34 = node25.next;
    tp2.Node node35 = node25.next;
    strictlySortedSinglyLinkedList8.header = node35;
    boolean b37 = strictlySortedSinglyLinkedList8.isEmpty();
    java.util.Set<tp2.IPBan> set_iPBan38 = null;
    boolean b39 = strictlySortedSinglyLinkedList8.repOk(set_iPBan38);
    tp2.Node node40 = strictlySortedSinglyLinkedList8.header;
    strictlySortedSinglyLinkedList0.header = node40;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "{}"+ "'", str24.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node40);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test196"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    java.lang.Integer i11 = iP10.getFirst();
    boolean b12 = server3.connect(iP10);
    boolean b13 = strictlySortedSinglyLinkedList0.removeFromIP(iP10);
    java.lang.String str14 = strictlySortedSinglyLinkedList0.toString();
    boolean b15 = strictlySortedSinglyLinkedList0.isEmpty();
    boolean b16 = strictlySortedSinglyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 100+ "'", i11.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "{}"+ "'", str14.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test197"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    java.lang.String str3 = singlyLinkedList0.toString();
    java.lang.String str4 = singlyLinkedList0.toString();
    tp2.IP iP6 = singlyLinkedList0.get((int)'4');
    boolean b7 = singlyLinkedList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "()"+ "'", str4.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test198"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    server34.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP41.setFirst((java.lang.Integer)1);
    java.lang.Integer i44 = iP41.getSecond();
    boolean b45 = server34.addException(iP41);
    boolean b46 = strictlySortedSinglyLinkedList0.removeFromIP(iP41);
    int i47 = strictlySortedSinglyLinkedList0.size;
    strictlySortedSinglyLinkedList0.size = (byte)1;
    tp2.IPBan iPBan51 = strictlySortedSinglyLinkedList0.get((int)' ');
    tp2.IPBan iPBan53 = strictlySortedSinglyLinkedList0.get((int)(byte)100);
    tp2.Node node54 = strictlySortedSinglyLinkedList0.header;
    tp2.SinglyLinkedList singlyLinkedList55 = new tp2.SinglyLinkedList();
    tp2.IP iP57 = singlyLinkedList55.get((int)' ');
    tp2.Entry entry58 = new tp2.Entry();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i64 = iP63.getFirst();
    java.lang.String str65 = iP63.toString();
    entry58.element = iP63;
    boolean b67 = singlyLinkedList55.remove(iP63);
    tp2.IPBan iPBan69 = new tp2.IPBan(iP63, (java.lang.Long)1L);
    java.lang.String str70 = iPBan69.toString();
    iPBan69.setExpires((java.lang.Long)0L);
    java.lang.Long long73 = iPBan69.expires;
    tp2.IP iP74 = iPBan69.ip;
    tp2.IP iP75 = iPBan69.ip;
    tp2.IP iP76 = iPBan69.ip;
    iPBan69.setExpires((java.lang.Long)1466185881409L);
    boolean b79 = strictlySortedSinglyLinkedList0.add(iPBan69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 0+ "'", i44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 10+ "'", i64.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "10.0.0.100"+ "'", str65.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str70.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L+ "'", long73.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test199"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    java.lang.String str2 = singlyLinkedList0.toString();
    int i3 = singlyLinkedList0.getSize();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b11 = singlyLinkedList0.remove(iP10);
    tp2.Node node12 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList13 = new tp2.StrictlySortedSinglyLinkedList();
    int i14 = strictlySortedSinglyLinkedList13.getSize();
    tp2.IPBan iPBan15 = null;
    boolean b16 = strictlySortedSinglyLinkedList13.add(iPBan15);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList17 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node18 = strictlySortedSinglyLinkedList17.header;
    strictlySortedSinglyLinkedList13.header = node18;
    node12.next = node18;
    tp2.IPBan iPBan21 = node18.element;
    boolean b22 = iP10.equals((java.lang.Object)iPBan21);
    java.lang.Integer i23 = iP10.getFirst();
    iP10.setThird((java.lang.Integer)32);
    iP10.setFourth((java.lang.Integer)1);
    iP10.setSecond((java.lang.Integer)1);
    iP10.setFirst((java.lang.Integer)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 100+ "'", i23.equals(100));

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test200"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList0.size = 10;
    tp2.Server server3 = new tp2.Server();
    java.lang.String str4 = server3.toString();
    server3.update();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP10.setFirst((java.lang.Integer)1);
    java.lang.Integer i13 = iP10.getSecond();
    boolean b14 = server3.addException(iP10);
    tp2.Entry entry15 = new tp2.Entry();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i21 = iP20.getFirst();
    java.lang.String str22 = iP20.toString();
    entry15.element = iP20;
    boolean b24 = server3.addException(iP20);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b30 = server3.removeBan(iP29);
    iP29.setThird((java.lang.Integer)0);
    boolean b33 = strictlySortedSinglyLinkedList0.removeFromIP(iP29);
    java.lang.String str34 = strictlySortedSinglyLinkedList0.toString();
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IP iP49 = singlyLinkedList35.get((int)'4');
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i55 = iP54.getFirst();
    java.lang.String str56 = iP54.toString();
    boolean b57 = singlyLinkedList35.contains(iP54);
    tp2.IPBan iPBan59 = new tp2.IPBan(iP54, (java.lang.Long)200000L);
    boolean b60 = strictlySortedSinglyLinkedList0.add(iPBan59);
    strictlySortedSinglyLinkedList0.size = 0;
    strictlySortedSinglyLinkedList0.size = (byte)(-1);
    int i65 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0+ "'", i13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i21 + "' != '" + 10+ "'", i21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "{}"+ "'", str34.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 10+ "'", i55.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "10.0.0.100"+ "'", str56.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == (-1));

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test201"); }


    tp2.Node node0 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList1 = new tp2.StrictlySortedSinglyLinkedList();
    int i2 = strictlySortedSinglyLinkedList1.getSize();
    tp2.IPBan iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList1.add(iPBan3);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node6 = strictlySortedSinglyLinkedList5.header;
    strictlySortedSinglyLinkedList1.header = node6;
    node0.next = node6;
    tp2.Node node9 = node0.next;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan11 = null;
    boolean b12 = strictlySortedSinglyLinkedList10.contains(iPBan11);
    int i13 = strictlySortedSinglyLinkedList10.getSize();
    tp2.Node node14 = strictlySortedSinglyLinkedList10.header;
    tp2.Node node15 = node14.next;
    node9.next = node14;
    java.lang.String str17 = node9.toString();
    java.lang.String str18 = node9.toString();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList19 = new tp2.StrictlySortedSinglyLinkedList();
    int i20 = strictlySortedSinglyLinkedList19.getSize();
    tp2.IPBan iPBan21 = null;
    boolean b22 = strictlySortedSinglyLinkedList19.add(iPBan21);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList23 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node24 = strictlySortedSinglyLinkedList23.header;
    strictlySortedSinglyLinkedList19.header = node24;
    int i26 = strictlySortedSinglyLinkedList19.getSize();
    java.lang.String str27 = strictlySortedSinglyLinkedList19.toString();
    java.lang.String str28 = strictlySortedSinglyLinkedList19.toString();
    tp2.Node node29 = new tp2.Node();
    tp2.IPBan iPBan30 = null;
    node29.element = iPBan30;
    tp2.SinglyLinkedList singlyLinkedList32 = new tp2.SinglyLinkedList();
    tp2.IP iP34 = singlyLinkedList32.get((int)' ');
    tp2.Entry entry35 = new tp2.Entry();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i41 = iP40.getFirst();
    java.lang.String str42 = iP40.toString();
    entry35.element = iP40;
    boolean b44 = singlyLinkedList32.remove(iP40);
    tp2.IPBan iPBan46 = new tp2.IPBan(iP40, (java.lang.Long)1L);
    java.lang.String str47 = iPBan46.toString();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    java.lang.String str55 = iP52.toString();
    iPBan46.setIp(iP52);
    java.lang.Long long57 = iPBan46.getExpires();
    node29.element = iPBan46;
    tp2.IPBan iPBan59 = node29.element;
    strictlySortedSinglyLinkedList19.header = node29;
    tp2.Node node61 = strictlySortedSinglyLinkedList19.header;
    node9.next = node61;
    tp2.Node node63 = node9.next;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[null]"+ "'", str17.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[null]"+ "'", str18.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "{}"+ "'", str27.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "{}"+ "'", str28.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i41 + "' != '" + 10+ "'", i41.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10.0.0.100"+ "'", str42.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str47.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "10.0.0.100"+ "'", str55.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L+ "'", long57.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node63);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test202"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    int i3 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan5 = strictlySortedSinglyLinkedList0.get((int)'#');
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    int i7 = strictlySortedSinglyLinkedList6.getSize();
    tp2.IPBan iPBan8 = null;
    boolean b9 = strictlySortedSinglyLinkedList6.add(iPBan8);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node11 = strictlySortedSinglyLinkedList10.header;
    strictlySortedSinglyLinkedList6.header = node11;
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i18 = iP17.getFirst();
    java.lang.String str19 = iP17.toString();
    java.lang.String str20 = iP17.toString();
    iP17.setThird((java.lang.Integer)(-1));
    boolean b23 = strictlySortedSinglyLinkedList6.containsIP(iP17);
    iP17.setFourth((java.lang.Integer)0);
    boolean b26 = strictlySortedSinglyLinkedList0.containsIP(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i18 + "' != '" + 10+ "'", i18.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "10.0.0.100"+ "'", str19.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "10.0.0.100"+ "'", str20.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test203"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.getIp();
    java.lang.Long long20 = iPBan14.getExpires();
    iPBan14.expires = 1466185872523L;
    java.lang.String str23 = iPBan14.toString();
    java.lang.Long long24 = iPBan14.getExpires();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L+ "'", long20.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "IPBan [ip=10.0.0.100, expires=1466185872523]"+ "'", str23.equals("IPBan [ip=10.0.0.100, expires=1466185872523]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1466185872523L+ "'", long24.equals(1466185872523L));

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test204"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    int i2 = singlyLinkedList0.getSize();
    boolean b3 = singlyLinkedList0.isEmpty();
    int i4 = singlyLinkedList0.getSize();
    boolean b5 = singlyLinkedList0.isEmpty();
    int i6 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test205"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)35, (java.lang.Integer)32);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test206"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.add(iPBan1);
    java.util.Set<tp2.IPBan> set_iPBan3 = null;
    boolean b4 = strictlySortedSinglyLinkedList0.repOk(set_iPBan3);
    tp2.Node node5 = strictlySortedSinglyLinkedList0.header;
    java.util.Set<tp2.IPBan> set_iPBan6 = null;
    boolean b7 = strictlySortedSinglyLinkedList0.repOk(set_iPBan6);
    int i8 = strictlySortedSinglyLinkedList0.getSize();
    tp2.Node node9 = strictlySortedSinglyLinkedList0.header;
    int i10 = strictlySortedSinglyLinkedList0.size;
    java.util.Set<tp2.IPBan> set_iPBan11 = null;
    boolean b12 = strictlySortedSinglyLinkedList0.repOk(set_iPBan11);
    java.util.Set<tp2.IPBan> set_iPBan13 = null;
    boolean b14 = strictlySortedSinglyLinkedList0.repOk(set_iPBan13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test207"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)(byte)10);
    boolean b15 = singlyLinkedList0.isEmpty();
    tp2.SinglyLinkedList singlyLinkedList16 = new tp2.SinglyLinkedList();
    tp2.IP iP18 = singlyLinkedList16.get((int)' ');
    tp2.Entry entry19 = new tp2.Entry();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i25 = iP24.getFirst();
    java.lang.String str26 = iP24.toString();
    entry19.element = iP24;
    boolean b28 = singlyLinkedList16.remove(iP24);
    tp2.IPBan iPBan30 = new tp2.IPBan(iP24, (java.lang.Long)1L);
    java.lang.String str31 = iPBan30.toString();
    iPBan30.setExpires((java.lang.Long)0L);
    java.lang.Long long34 = iPBan30.expires;
    tp2.Server server35 = new tp2.Server();
    tp2.IP iP36 = null;
    boolean b37 = server35.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b43 = server35.connect(iP42);
    java.lang.Integer i44 = iP42.getFirst();
    java.lang.Integer i45 = iP42.getFirst();
    iPBan30.setIp(iP42);
    tp2.IP iP47 = iPBan30.getIp();
    boolean b48 = singlyLinkedList0.contains(iP47);
    java.lang.String str49 = iP47.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i25 + "' != '" + 10+ "'", i25.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str31.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L+ "'", long34.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 100+ "'", i44.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i45 + "' != '" + 100+ "'", i45.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "100.10.-1.10"+ "'", str49.equals("100.10.-1.10"));

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test208"); }


    tp2.Entry entry0 = new tp2.Entry();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i6 = iP5.getFirst();
    entry0.element = iP5;
    tp2.IP iP8 = entry0.element;
    tp2.Entry entry9 = null;
    entry0.next = entry9;
    tp2.Entry entry11 = new tp2.Entry();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    entry11.element = iP16;
    tp2.IP iP20 = entry11.element;
    tp2.Server server21 = new tp2.Server();
    tp2.IP iP22 = null;
    boolean b23 = server21.connect(iP22);
    java.lang.String str24 = server21.toString();
    java.lang.String str25 = server21.toString();
    tp2.SinglyLinkedList singlyLinkedList26 = new tp2.SinglyLinkedList();
    tp2.IP iP28 = singlyLinkedList26.get((int)' ');
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = singlyLinkedList26.remove(iP34);
    tp2.IPBan iPBan40 = new tp2.IPBan(iP34, (java.lang.Long)1L);
    java.lang.String str41 = iPBan40.toString();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i47 = iP46.getFirst();
    java.lang.String str48 = iP46.toString();
    java.lang.String str49 = iP46.toString();
    iPBan40.setIp(iP46);
    java.lang.Integer i51 = iP46.getFirst();
    boolean b52 = server21.removeException(iP46);
    iP46.setThird((java.lang.Integer)(-1));
    entry11.element = iP46;
    java.lang.String str56 = entry11.toString();
    tp2.IP iP57 = entry11.element;
    tp2.Entry entry58 = new tp2.Entry();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i64 = iP63.getFirst();
    java.lang.String str65 = iP63.toString();
    entry58.element = iP63;
    tp2.Entry entry67 = new tp2.Entry();
    tp2.Entry entry68 = new tp2.Entry();
    java.lang.String str69 = entry68.toString();
    java.lang.String str70 = entry68.toString();
    tp2.Entry entry71 = entry68.next;
    entry67.next = entry68;
    tp2.IP iP73 = entry67.element;
    entry58.next = entry67;
    entry11.next = entry67;
    entry0.next = entry11;
    tp2.IP iP77 = null;
    entry0.element = iP77;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i6 + "' != '" + 10+ "'", i6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str41.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i47 + "' != '" + 10+ "'", i47.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "10.0.0.100"+ "'", str48.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "10.0.0.100"+ "'", str49.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i51 + "' != '" + 10+ "'", i51.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "[10.0.-1.100]"+ "'", str56.equals("[10.0.-1.100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i64 + "' != '" + 10+ "'", i64.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "10.0.0.100"+ "'", str65.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "[null]"+ "'", str69.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "[null]"+ "'", str70.equals("[null]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(entry71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP73);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test209"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    java.lang.String str3 = singlyLinkedList0.toString();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    tp2.Server server6 = new tp2.Server();
    tp2.IP iP7 = null;
    boolean b8 = server6.connect(iP7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b14 = server6.connect(iP13);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP16 = null;
    boolean b17 = server15.connect(iP16);
    java.lang.String str18 = server15.toString();
    java.lang.String str19 = server15.toString();
    tp2.Entry entry20 = new tp2.Entry();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    entry20.element = iP25;
    boolean b29 = server15.connect(iP25);
    boolean b30 = server6.removeException(iP25);
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP32 = null;
    boolean b33 = server31.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b39 = server31.connect(iP38);
    java.lang.Integer i40 = iP38.getFirst();
    boolean b41 = server6.connect(iP38);
    iP38.setFourth((java.lang.Integer)100);
    java.lang.Integer i44 = iP38.getSecond();
    iP38.setFirst((java.lang.Integer)11);
    boolean b47 = singlyLinkedList0.remove(iP38);
    java.util.Set<tp2.IP> set_iP48 = null;
    boolean b49 = singlyLinkedList0.repOk(set_iP48);
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b55 = singlyLinkedList0.contains(iP54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i40 + "' != '" + 100+ "'", i40.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test210"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get((int)' ');
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    boolean b17 = singlyLinkedList5.remove(iP13);
    tp2.IPBan iPBan19 = new tp2.IPBan(iP13, (java.lang.Long)1L);
    java.lang.String str20 = iPBan19.toString();
    iPBan19.setExpires((java.lang.Long)0L);
    java.lang.Long long23 = iPBan19.expires;
    tp2.IP iP24 = iPBan19.ip;
    java.lang.String str25 = iPBan19.toString();
    boolean b26 = iP4.equals((java.lang.Object)iPBan19);
    java.lang.String str27 = iP4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L+ "'", long23.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "IPBan [ip=10.0.0.100, expires=0]"+ "'", str25.equals("IPBan [ip=10.0.0.100, expires=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "100.10.-1.10"+ "'", str27.equals("100.10.-1.10"));

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test211"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    int i1 = singlyLinkedList0.getSize();
    tp2.SinglyLinkedList singlyLinkedList2 = new tp2.SinglyLinkedList();
    tp2.IP iP4 = singlyLinkedList2.get((int)' ');
    tp2.Entry entry5 = new tp2.Entry();
    tp2.IP iP10 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i11 = iP10.getFirst();
    java.lang.String str12 = iP10.toString();
    entry5.element = iP10;
    boolean b14 = singlyLinkedList2.remove(iP10);
    tp2.IP iP16 = singlyLinkedList2.get((int)'4');
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i22 = iP21.getFirst();
    java.lang.String str23 = iP21.toString();
    boolean b24 = singlyLinkedList2.contains(iP21);
    boolean b25 = singlyLinkedList0.remove(iP21);
    int i26 = singlyLinkedList0.getSize();
    int i27 = singlyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i11 + "' != '" + 10+ "'", i11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10.0.0.100"+ "'", str12.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i22 + "' != '" + 10+ "'", i22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "10.0.0.100"+ "'", str23.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test212"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.IPBan iPBan1 = null;
    boolean b2 = strictlySortedSinglyLinkedList0.contains(iPBan1);
    tp2.Node node3 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node4 = node3.next;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList5 = new tp2.StrictlySortedSinglyLinkedList();
    int i6 = strictlySortedSinglyLinkedList5.getSize();
    tp2.IPBan iPBan7 = null;
    boolean b8 = strictlySortedSinglyLinkedList5.add(iPBan7);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList9 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node10 = strictlySortedSinglyLinkedList9.header;
    strictlySortedSinglyLinkedList5.header = node10;
    int i12 = strictlySortedSinglyLinkedList5.getSize();
    java.lang.String str13 = strictlySortedSinglyLinkedList5.toString();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList14 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList14.size = 10;
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    server17.update();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP24.setFirst((java.lang.Integer)1);
    java.lang.Integer i27 = iP24.getSecond();
    boolean b28 = server17.addException(iP24);
    tp2.Entry entry29 = new tp2.Entry();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i35 = iP34.getFirst();
    java.lang.String str36 = iP34.toString();
    entry29.element = iP34;
    boolean b38 = server17.addException(iP34);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b44 = server17.removeBan(iP43);
    iP43.setThird((java.lang.Integer)0);
    boolean b47 = strictlySortedSinglyLinkedList14.removeFromIP(iP43);
    java.lang.String str48 = strictlySortedSinglyLinkedList14.toString();
    tp2.SinglyLinkedList singlyLinkedList49 = new tp2.SinglyLinkedList();
    tp2.IP iP51 = singlyLinkedList49.get((int)' ');
    tp2.Entry entry52 = new tp2.Entry();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i58 = iP57.getFirst();
    java.lang.String str59 = iP57.toString();
    entry52.element = iP57;
    boolean b61 = singlyLinkedList49.remove(iP57);
    tp2.IPBan iPBan63 = new tp2.IPBan(iP57, (java.lang.Long)1L);
    java.lang.String str64 = iPBan63.toString();
    boolean b65 = strictlySortedSinglyLinkedList14.contains(iPBan63);
    tp2.IP iP66 = iPBan63.getIp();
    boolean b67 = strictlySortedSinglyLinkedList5.containsIP(iP66);
    strictlySortedSinglyLinkedList5.size = '4';
    tp2.Node node70 = strictlySortedSinglyLinkedList5.header;
    tp2.Node node71 = node70.next;
    node3.next = node71;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str73 = node71.toString();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "{}"+ "'", str13.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i27 + "' != '" + 0+ "'", i27.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i35 + "' != '" + 10+ "'", i35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10.0.0.100"+ "'", str36.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "{}"+ "'", str48.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 10+ "'", i58.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "10.0.0.100"+ "'", str59.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str64.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node71);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test213"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    int i4 = strictlySortedSinglyLinkedList0.size;
    int i5 = strictlySortedSinglyLinkedList0.getSize();
    int i6 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan8 = strictlySortedSinglyLinkedList0.get((int)'4');
    int i9 = strictlySortedSinglyLinkedList0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test214"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IP iP14 = singlyLinkedList0.get((int)'4');
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i20 = iP19.getFirst();
    java.lang.String str21 = iP19.toString();
    java.lang.String str22 = iP19.toString();
    iP19.setThird((java.lang.Integer)(-1));
    boolean b25 = singlyLinkedList0.contains(iP19);
    int i26 = singlyLinkedList0.getSize();
    int i27 = singlyLinkedList0.getSize();
    java.lang.String str28 = singlyLinkedList0.toString();
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP30 = null;
    boolean b31 = server29.connect(iP30);
    java.lang.String str32 = server29.toString();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP34 = null;
    boolean b35 = server33.connect(iP34);
    java.lang.String str36 = server33.toString();
    java.lang.String str37 = server33.toString();
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = server33.connect(iP43);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i53 = iP52.getFirst();
    java.lang.String str54 = iP52.toString();
    java.lang.String str55 = iP52.toString();
    boolean b56 = server33.removeBan(iP52);
    iP52.setFirst((java.lang.Integer)10);
    boolean b59 = server29.removeException(iP52);
    java.lang.String str60 = iP52.toString();
    java.lang.Integer i61 = iP52.getFirst();
    boolean b62 = singlyLinkedList0.contains(iP52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i20 + "' != '" + 10+ "'", i20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "10.0.0.100"+ "'", str21.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "10.0.0.100"+ "'", str22.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "()"+ "'", str28.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i53 + "' != '" + 10+ "'", i53.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "10.0.0.100"+ "'", str54.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "10.0.0.100"+ "'", str55.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "10.0.0.100"+ "'", str60.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i61 + "' != '" + 10+ "'", i61.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test215"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    int i2 = singlyLinkedList0.getSize();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    singlyLinkedList0.add(iP7);
    java.lang.Integer i9 = iP7.getFourth();
    java.lang.Integer i10 = iP7.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i10 + "' != '" + 100+ "'", i10.equals(100));

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test216"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    java.lang.Long long18 = iPBan14.expires;
    tp2.IP iP19 = iPBan14.ip;
    iP19.setFirst((java.lang.Integer)0);
    iP19.setSecond((java.lang.Integer)(-1));
    iP19.setSecond((java.lang.Integer)11);
    java.lang.Integer i26 = iP19.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L+ "'", long18.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 0+ "'", i26.equals(0));

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test217"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    int i7 = strictlySortedSinglyLinkedList0.size;
    tp2.Node node8 = strictlySortedSinglyLinkedList0.header;
    tp2.Node node9 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList10 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList10.size = 10;
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    server13.update();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP20.setFirst((java.lang.Integer)1);
    java.lang.Integer i23 = iP20.getSecond();
    boolean b24 = server13.addException(iP20);
    tp2.Entry entry25 = new tp2.Entry();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i31 = iP30.getFirst();
    java.lang.String str32 = iP30.toString();
    entry25.element = iP30;
    boolean b34 = server13.addException(iP30);
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b40 = server13.removeBan(iP39);
    iP39.setThird((java.lang.Integer)0);
    boolean b43 = strictlySortedSinglyLinkedList10.removeFromIP(iP39);
    java.lang.String str44 = strictlySortedSinglyLinkedList10.toString();
    tp2.SinglyLinkedList singlyLinkedList45 = new tp2.SinglyLinkedList();
    tp2.IP iP47 = singlyLinkedList45.get((int)' ');
    tp2.Entry entry48 = new tp2.Entry();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i54 = iP53.getFirst();
    java.lang.String str55 = iP53.toString();
    entry48.element = iP53;
    boolean b57 = singlyLinkedList45.remove(iP53);
    tp2.IPBan iPBan59 = new tp2.IPBan(iP53, (java.lang.Long)1L);
    java.lang.String str60 = iPBan59.toString();
    boolean b61 = strictlySortedSinglyLinkedList10.contains(iPBan59);
    node9.element = iPBan59;
    tp2.IPBan iPBan63 = node9.element;
    node8.next = node9;
    java.lang.String str65 = node8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i23 + "' != '" + 0+ "'", i23.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i31 + "' != '" + 10+ "'", i31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "10.0.0.100"+ "'", str32.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "{}"+ "'", str44.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i54 + "' != '" + 10+ "'", i54.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "10.0.0.100"+ "'", str55.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str60.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iPBan63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "[null]"+ "'", str65.equals("[null]"));

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test218"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    tp2.IP iP2 = singlyLinkedList0.get((int)' ');
    tp2.Entry entry3 = new tp2.Entry();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i9 = iP8.getFirst();
    java.lang.String str10 = iP8.toString();
    entry3.element = iP8;
    boolean b12 = singlyLinkedList0.remove(iP8);
    tp2.IPBan iPBan14 = new tp2.IPBan(iP8, (java.lang.Long)1L);
    java.lang.String str15 = iPBan14.toString();
    iPBan14.setExpires((java.lang.Long)0L);
    iPBan14.expires = 1466185877442L;
    tp2.IP iP20 = iPBan14.ip;
    java.lang.String str21 = iPBan14.toString();
    java.lang.Long long22 = iPBan14.getExpires();
    tp2.IP iP23 = iPBan14.getIp();
    java.lang.Integer i24 = iP23.getThird();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + 10+ "'", i9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "10.0.0.100"+ "'", str10.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str15.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "IPBan [ip=10.0.0.100, expires=1466185877442]"+ "'", str21.equals("IPBan [ip=10.0.0.100, expires=1466185877442]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1466185877442L+ "'", long22.equals(1466185877442L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 0+ "'", i24.equals(0));

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test219"); }


    tp2.SinglyLinkedList singlyLinkedList0 = new tp2.SinglyLinkedList();
    java.lang.String str1 = singlyLinkedList0.toString();
    java.lang.String str2 = singlyLinkedList0.toString();
    java.lang.String str3 = singlyLinkedList0.toString();
    java.util.Set<tp2.IP> set_iP4 = null;
    boolean b5 = singlyLinkedList0.repOk(set_iP4);
    int i6 = singlyLinkedList0.getSize();
    java.lang.String str7 = singlyLinkedList0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "()"+ "'", str1.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "()"+ "'", str2.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "()"+ "'", str3.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "()"+ "'", str7.equals("()"));

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test220"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    tp2.Server server4 = new tp2.Server();
    tp2.IP iP5 = null;
    boolean b6 = server4.connect(iP5);
    java.lang.String str7 = server4.toString();
    java.lang.String str8 = server4.toString();
    tp2.Entry entry9 = new tp2.Entry();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i15 = iP14.getFirst();
    java.lang.String str16 = iP14.toString();
    entry9.element = iP14;
    boolean b18 = server4.connect(iP14);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i24 = iP23.getFirst();
    java.lang.String str25 = iP23.toString();
    java.lang.String str26 = iP23.toString();
    boolean b27 = server4.removeBan(iP23);
    iP23.setFirst((java.lang.Integer)10);
    boolean b30 = server0.removeException(iP23);
    tp2.IPBan iPBan32 = new tp2.IPBan(iP23, (java.lang.Long)1L);
    java.lang.Long long33 = iPBan32.expires;
    tp2.IP iP34 = iPBan32.ip;
    tp2.SinglyLinkedList singlyLinkedList35 = new tp2.SinglyLinkedList();
    tp2.IP iP37 = singlyLinkedList35.get((int)' ');
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = singlyLinkedList35.remove(iP43);
    tp2.IP iP49 = singlyLinkedList35.get((int)'4');
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i55 = iP54.getFirst();
    java.lang.String str56 = iP54.toString();
    boolean b57 = singlyLinkedList35.contains(iP54);
    iPBan32.setIp(iP54);
    tp2.IPBan iPBan60 = new tp2.IPBan(iP54, (java.lang.Long)1466185884636L);
    tp2.IPBan iPBan62 = new tp2.IPBan(iP54, (java.lang.Long)1466185907606L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i15 + "' != '" + 10+ "'", i15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "10.0.0.100"+ "'", str16.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 10+ "'", i24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "10.0.0.100"+ "'", str25.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "10.0.0.100"+ "'", str26.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L+ "'", long33.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 10+ "'", i55.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "10.0.0.100"+ "'", str56.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test221"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.getSize();
    tp2.IPBan iPBan2 = null;
    boolean b3 = strictlySortedSinglyLinkedList0.add(iPBan2);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList4 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node5 = strictlySortedSinglyLinkedList4.header;
    strictlySortedSinglyLinkedList0.header = node5;
    int i7 = strictlySortedSinglyLinkedList0.getSize();
    tp2.SinglyLinkedList singlyLinkedList8 = new tp2.SinglyLinkedList();
    tp2.IP iP10 = singlyLinkedList8.get((int)' ');
    tp2.Entry entry11 = new tp2.Entry();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i17 = iP16.getFirst();
    java.lang.String str18 = iP16.toString();
    entry11.element = iP16;
    boolean b20 = singlyLinkedList8.remove(iP16);
    tp2.IPBan iPBan22 = new tp2.IPBan(iP16, (java.lang.Long)1L);
    java.lang.String str23 = iPBan22.toString();
    tp2.Server server24 = new tp2.Server();
    tp2.IP iP25 = null;
    boolean b26 = server24.connect(iP25);
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b32 = server24.connect(iP31);
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP34 = null;
    boolean b35 = server33.connect(iP34);
    java.lang.String str36 = server33.toString();
    java.lang.String str37 = server33.toString();
    tp2.Entry entry38 = new tp2.Entry();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i44 = iP43.getFirst();
    java.lang.String str45 = iP43.toString();
    entry38.element = iP43;
    boolean b47 = server33.connect(iP43);
    boolean b48 = server24.removeException(iP43);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP50 = null;
    boolean b51 = server49.connect(iP50);
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b57 = server49.connect(iP56);
    java.lang.Integer i58 = iP56.getFirst();
    boolean b59 = server24.connect(iP56);
    iPBan22.ip = iP56;
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP65.setFirst((java.lang.Integer)1);
    java.lang.Integer i68 = iP65.getSecond();
    iPBan22.ip = iP65;
    boolean b70 = strictlySortedSinglyLinkedList0.contains(iPBan22);
    tp2.SinglyLinkedList singlyLinkedList71 = new tp2.SinglyLinkedList();
    tp2.IP iP73 = singlyLinkedList71.get((int)' ');
    tp2.Entry entry74 = new tp2.Entry();
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i80 = iP79.getFirst();
    java.lang.String str81 = iP79.toString();
    entry74.element = iP79;
    boolean b83 = singlyLinkedList71.remove(iP79);
    tp2.IPBan iPBan85 = new tp2.IPBan(iP79, (java.lang.Long)1L);
    java.lang.String str86 = iPBan85.toString();
    iPBan85.setExpires((java.lang.Long)0L);
    java.lang.Long long89 = iPBan85.expires;
    tp2.IP iP90 = iPBan85.getIp();
    tp2.IP iP91 = iPBan85.ip;
    tp2.IP iP92 = iPBan85.getIp();
    tp2.IP iP93 = iPBan85.ip;
    boolean b94 = strictlySortedSinglyLinkedList0.containsIP(iP93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 10+ "'", i17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "10.0.0.100"+ "'", str18.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str23.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i44 + "' != '" + 10+ "'", i44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "10.0.0.100"+ "'", str45.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i58 + "' != '" + 100+ "'", i58.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i68 + "' != '" + 0+ "'", i68.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i80 + "' != '" + 10+ "'", i80.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "10.0.0.100"+ "'", str81.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str86.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L+ "'", long89.equals(0L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test222"); }


    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new tp2.StrictlySortedSinglyLinkedList();
    int i1 = strictlySortedSinglyLinkedList0.size;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList2 = new tp2.StrictlySortedSinglyLinkedList();
    int i3 = strictlySortedSinglyLinkedList2.getSize();
    tp2.IPBan iPBan4 = null;
    boolean b5 = strictlySortedSinglyLinkedList2.add(iPBan4);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList6 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node7 = strictlySortedSinglyLinkedList6.header;
    strictlySortedSinglyLinkedList2.header = node7;
    int i9 = strictlySortedSinglyLinkedList2.getSize();
    java.lang.String str10 = strictlySortedSinglyLinkedList2.toString();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    strictlySortedSinglyLinkedList11.size = 10;
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    server14.update();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    iP21.setFirst((java.lang.Integer)1);
    java.lang.Integer i24 = iP21.getSecond();
    boolean b25 = server14.addException(iP21);
    tp2.Entry entry26 = new tp2.Entry();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i32 = iP31.getFirst();
    java.lang.String str33 = iP31.toString();
    entry26.element = iP31;
    boolean b35 = server14.addException(iP31);
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b41 = server14.removeBan(iP40);
    iP40.setThird((java.lang.Integer)0);
    boolean b44 = strictlySortedSinglyLinkedList11.removeFromIP(iP40);
    java.lang.String str45 = strictlySortedSinglyLinkedList11.toString();
    tp2.SinglyLinkedList singlyLinkedList46 = new tp2.SinglyLinkedList();
    tp2.IP iP48 = singlyLinkedList46.get((int)' ');
    tp2.Entry entry49 = new tp2.Entry();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i55 = iP54.getFirst();
    java.lang.String str56 = iP54.toString();
    entry49.element = iP54;
    boolean b58 = singlyLinkedList46.remove(iP54);
    tp2.IPBan iPBan60 = new tp2.IPBan(iP54, (java.lang.Long)1L);
    java.lang.String str61 = iPBan60.toString();
    boolean b62 = strictlySortedSinglyLinkedList11.contains(iPBan60);
    tp2.IP iP63 = iPBan60.getIp();
    boolean b64 = strictlySortedSinglyLinkedList2.containsIP(iP63);
    strictlySortedSinglyLinkedList2.size = '4';
    tp2.Node node67 = strictlySortedSinglyLinkedList2.header;
    tp2.Node node68 = node67.next;
    strictlySortedSinglyLinkedList0.header = node67;
    int i70 = strictlySortedSinglyLinkedList0.size;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "{}"+ "'", str10.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i24 + "' != '" + 0+ "'", i24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i32 + "' != '" + 10+ "'", i32.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "10.0.0.100"+ "'", str33.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "{}"+ "'", str45.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i55 + "' != '" + 10+ "'", i55.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "10.0.0.100"+ "'", str56.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str61.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iP63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(node68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test223"); }


    tp2.Node node0 = new tp2.Node();
    tp2.IPBan iPBan1 = null;
    node0.element = iPBan1;
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList3 = new tp2.StrictlySortedSinglyLinkedList();
    int i4 = strictlySortedSinglyLinkedList3.getSize();
    tp2.IPBan iPBan5 = null;
    boolean b6 = strictlySortedSinglyLinkedList3.add(iPBan5);
    tp2.Node node7 = strictlySortedSinglyLinkedList3.header;
    tp2.IPBan iPBan9 = strictlySortedSinglyLinkedList3.get(100);
    tp2.Node node10 = new tp2.Node();
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList11 = new tp2.StrictlySortedSinglyLinkedList();
    int i12 = strictlySortedSinglyLinkedList11.getSize();
    tp2.IPBan iPBan13 = null;
    boolean b14 = strictlySortedSinglyLinkedList11.add(iPBan13);
    tp2.StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList15 = new tp2.StrictlySortedSinglyLinkedList();
    tp2.Node node16 = strictlySortedSinglyLinkedList15.header;
    strictlySortedSinglyLinkedList11.header = node16;
    node10.next = node16;
    strictlySortedSinglyLinkedList3.header = node10;
    node0.next = node10;
    tp2.Node node21 = node0.next;
    tp2.IPBan iPBan22 = node21.element;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(node21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iPBan22);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test224"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.connect(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.SinglyLinkedList singlyLinkedList5 = new tp2.SinglyLinkedList();
    tp2.IP iP7 = singlyLinkedList5.get((int)' ');
    tp2.Entry entry8 = new tp2.Entry();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i14 = iP13.getFirst();
    java.lang.String str15 = iP13.toString();
    entry8.element = iP13;
    boolean b17 = singlyLinkedList5.remove(iP13);
    tp2.IPBan iPBan19 = new tp2.IPBan(iP13, (java.lang.Long)1L);
    java.lang.String str20 = iPBan19.toString();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)100);
    java.lang.Integer i26 = iP25.getFirst();
    java.lang.String str27 = iP25.toString();
    java.lang.String str28 = iP25.toString();
    iPBan19.setIp(iP25);
    java.lang.Integer i30 = iP25.getFirst();
    boolean b31 = server0.removeException(iP25);
    iP25.setThird((java.lang.Integer)(-1));
    java.lang.Integer i34 = iP25.getSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=null, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=null, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i14 + "' != '" + 10+ "'", i14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "10.0.0.100"+ "'", str15.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "IPBan [ip=10.0.0.100, expires=1]"+ "'", str20.equals("IPBan [ip=10.0.0.100, expires=1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i26 + "' != '" + 10+ "'", i26.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "10.0.0.100"+ "'", str27.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "10.0.0.100"+ "'", str28.equals("10.0.0.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i30 + "' != '" + 10+ "'", i30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i34 + "' != '" + 0+ "'", i34.equals(0));

  }

}
